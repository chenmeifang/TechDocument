/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={230:(e,t,n)=>{var r=n(471),a=n(817);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=y.hasOwnProperty(t)?y[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),R=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var F,A=Object.assign;function U(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var j=!1;function I(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var u="\n"+a[l].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=l&&0<=i);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function B(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case C:return"Profiler";case x:return"StrictMode";case T:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case R:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return A({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function G(e,t){X(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return A({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ee=null,xe=null;function Ce(e){if(e=ba(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=Sa(t),ke(e.stateNode,e.type,t))}}function _e(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function Re(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Te(){}var Le=!1;function Oe(e,t,n){if(Le)return e(t,n);Le=!0;try{return Pe(e,t,n)}finally{Le=!1,(null!==Ee||null!==xe)&&(Te(),Re())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=Sa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var De=!1;if(c)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){De=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ce){De=!1}function Me(e,t,n,r,a,o,l,i,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,Ae=null,Ue=!1,je=null,Ie={onError:function(e){Fe=!0,Ae=e}};function Be(e,t,n,r,a,o,l,i,u){Fe=!1,Ae=null,Me.apply(Ie,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(He(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return $e(a),e;if(l===r)return $e(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Je=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Ge=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=ft(i):0!=(o&=l)&&(r=ft(o))}else 0!=(l=n&~a)?r=ft(l):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var St,kt,Et,xt,Ct,_t=!1,Rt=[],Pt=null,Tt=null,Lt=null,Ot=new Map,Nt=new Map,Dt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Ft(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function At(e){var t=ga(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void Ct(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function jt(e,t,n){Ut(e)&&n.delete(t)}function It(){_t=!1,null!==Pt&&Ut(Pt)&&(Pt=null),null!==Tt&&Ut(Tt)&&(Tt=null),null!==Lt&&Ut(Lt)&&(Lt=null),Ot.forEach(jt),Nt.forEach(jt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,It)))}function Ht(e){function t(t){return Bt(t,e)}if(0<Rt.length){Bt(Rt[0],e);for(var n=1;n<Rt.length;n++){var r=Rt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==Tt&&Bt(Tt,e),null!==Lt&&Bt(Lt,e),Ot.forEach(t),Nt.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)At(n),null===n.blockedOn&&Dt.shift()}var Vt=w.ReactCurrentBatchConfig,$t=!0;function Wt(e,t,n,r){var a=bt,o=Vt.transition;Vt.transition=null;try{bt=1,Qt(e,t,n,r)}finally{bt=a,Vt.transition=o}}function qt(e,t,n,r){var a=bt,o=Vt.transition;Vt.transition=null;try{bt=4,Qt(e,t,n,r)}finally{bt=a,Vt.transition=o}}function Qt(e,t,n,r){if($t){var a=Jt(e,t,n,r);if(null===a)$r(e,t,r,Kt,n),Mt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Ft(Pt,e,t,n,r,a),!0;case"dragenter":return Tt=Ft(Tt,e,t,n,r,a),!0;case"mouseover":return Lt=Ft(Lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Ot.set(o,Ft(Ot.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Nt.set(o,Ft(Nt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&St(o),null===(o=Jt(e,t,n,r))&&$r(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Kt=null;function Jt(e,t,n,r){if(Kt=null,null!==(e=ga(e=Se(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ge()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Gt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Gt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return A(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=A({},sn,{view:0,detail:0}),dn=an(fn),pn=A({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(A({},pn,{dataTransfer:0})),yn=an(A({},fn,{relatedTarget:0})),vn=an(A({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=A({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(gn),wn=an(A({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Cn(){return xn}var _n=A({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Rn=an(_n),Pn=an(A({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(A({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Ln=an(A({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=A({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(On),Dn=[9,13,27,32],zn=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var Fn=c&&"TextEvent"in window&&!Mn,An=c&&(!zn||Mn&&8<Mn&&11>=Mn),Un=String.fromCharCode(32),jn=!1;function In(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Wn(e,t,n,r){_e(r),0<(t=qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Kn(e){Ur(e,0)}function Jn(e){if(Q(wa(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Gn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Gn=Zn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Qn=qn=null)}function nr(e){if("value"===e.propertyName&&Jn(Qn)){var t=[];Wn(t,Qn,e,Se(e)),Oe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Qn)}function or(e,t){if("click"===e)return Jn(t)}function lr(e,t){if("input"===e||"change"===e)return Jn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var l=cr(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==K(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=qr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},Er={},xr={};function Cr(e){if(Er[e])return Er[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Er[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var _r=Cr("animationend"),Rr=Cr("animationiteration"),Pr=Cr("animationstart"),Tr=Cr("transitionend"),Lr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Lr.set(e,t),u(t,[e])}for(var Dr=0;Dr<Or.length;Dr++){var zr=Or[Dr];Nr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Nr(_r,"onAnimationEnd"),Nr(Rr,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Tr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,u,s){if(Be.apply(this,arguments),Fe){if(!Fe)throw Error(o(198));var c=Ae;Fe=!1,Ae=null,Ue||(Ue=!0,je=c)}}(r,t,void 0,e),e.currentTarget=null}function Ur(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}else for(l=0;l<r.length;l++){if(u=(i=r[l]).instance,s=i.currentTarget,i=i.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,i,s),o=u}}}if(Ue)throw e=je,Ue=!1,je=null,e}function jr(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(Vr(t,e,2,!1),n.add(r))}function Ir(e,t,n){var r=0;t&&(r|=4),Vr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[Br]){e[Br]=!0,l.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ir(t,!1,e),Ir(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ir("selectionchange",!1,t))}}function Vr(e,t,n,r){switch(Yt(t)){case 1:var a=Wt;break;case 4:a=qt;break;default:a=Qt}n=a.bind(null,t,n,e),a=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&((u=l.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=ga(i)))return;if(5===(u=l.tag)||6===u){r=o=l;continue e}i=i.parentNode}}r=r.return}Oe((function(){var r=o,a=Se(n),l=[];e:{var i=Lr.get(e);if(void 0!==i){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Rn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case _r:case Rr:case Pr:u=vn;break;case Tr:u=Ln;break;case"scroll":u=dn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ne(h,d))&&c.push(Wr(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),l.push({event:i,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ga(s)&&!s[ha])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ga(s):null)&&(s!==(f=He(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:wa(u),p=null==s?i:wa(s),(i=new c(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,ga(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)c=Qr(c),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Kr(l,i,u,c,!1),null!==s&&null!==f&&Kr(l,f,s,c,!0)}if("select"===(u=(i=r?wa(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var y=Yn;else if($n(i))if(Xn)y=lr;else{y=ar;var v=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(y=or);switch(y&&(y=y(e,r))?Wn(l,y,n,a):(v&&v(e,i,r),"focusout"===e&&(v=i._wrapperState)&&v.controlled&&"number"===i.type&&ee(i,"number",i.value)),v=r?wa(r):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(l,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(l,n,a)}var g;if(zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(g=en()):(Gt="value"in(Xt=a)?Xt.value:Xt.textContent,Hn=!0)),0<(v=qr(r,b)).length&&(b=new wn(b,e,null,n,a),l.push({event:b,listeners:v}),(g||null!==(g=Bn(n)))&&(b.data=g))),(g=Fn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(jn=!0,Un);case"textInput":return(e=t.data)===Un&&jn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!zn&&In(e,t)?(e=en(),Zt=Gt=Xt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=g)}Ur(l,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ne(e,n))&&r.unshift(Wr(e,o,a)),null!=(o=Ne(e,t))&&r.push(Wr(e,o,a))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=Ne(n,o))&&l.unshift(Wr(n,u,i)):a||null!=(u=Ne(n,o))&&l.push(Wr(n,u,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Jr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Jr,"\n").replace(Yr,"")}function Gr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ht(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ht(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ha="__reactContainer$"+fa,ma="__reactEvents$"+fa,ya="__reactListeners$"+fa,va="__reactHandles$"+fa;function ga(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Sa(e){return e[pa]||null}var ka=[],Ea=-1;function xa(e){return{current:e}}function Ca(e){0>Ea||(e.current=ka[Ea],ka[Ea]=null,Ea--)}function _a(e,t){Ea++,ka[Ea]=e.current,e.current=t}var Ra={},Pa=xa(Ra),Ta=xa(!1),La=Ra;function Oa(e,t){var n=e.type.contextTypes;if(!n)return Ra;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Na(e){return null!=e.childContextTypes}function Da(){Ca(Ta),Ca(Pa)}function za(e,t,n){if(Pa.current!==Ra)throw Error(o(168));_a(Pa,t),_a(Ta,n)}function Ma(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,V(e)||"Unknown",a));return A({},n,r)}function Fa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ra,La=Pa.current,_a(Pa,e),_a(Ta,Ta.current),!0}function Aa(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Ma(e,t,La),r.__reactInternalMemoizedMergedChildContext=e,Ca(Ta),Ca(Pa),_a(Pa,e)):Ca(Ta),_a(Ta,n)}var Ua=null,ja=!1,Ia=!1;function Ba(e){null===Ua?Ua=[e]:Ua.push(e)}function Ha(){if(!Ia&&null!==Ua){Ia=!0;var e=0,t=bt;try{var n=Ua;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ua=null,ja=!1}catch(t){throw null!==Ua&&(Ua=Ua.slice(e+1)),Qe(Ze,Ha),t}finally{bt=t,Ia=!1}}return null}var Va=[],$a=0,Wa=null,qa=0,Qa=[],Ka=0,Ja=null,Ya=1,Xa="";function Ga(e,t){Va[$a++]=qa,Va[$a++]=Wa,Wa=e,qa=t}function Za(e,t,n){Qa[Ka++]=Ya,Qa[Ka++]=Xa,Qa[Ka++]=Ja,Ja=e;var r=Ya;e=Xa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Ya=1<<32-lt(t)+a|n<<a|r,Xa=o+e}else Ya=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ga(e,1),Za(e,1,0))}function to(e){for(;e===Wa;)Wa=Va[--$a],Va[$a]=null,qa=Va[--$a],Va[$a]=null;for(;e===Ja;)Ja=Qa[--Ka],Qa[Ka]=null,Xa=Qa[--Ka],Qa[Ka]=null,Ya=Qa[--Ka],Qa[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Os(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ja?{id:Ya,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Os(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return!(!(1&e.mode)||128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)lo(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var yo=w.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function wo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=As(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===N&&bo(o)===t.type)?((r=a(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=zs(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=As(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=zs(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case k:return(t=Us(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Ms(t,e.mode,n,null)).return=e,t;go(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?s(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null;case N:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:f(e,t,n,r,null);go(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case N:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,a,null);go(t,r)}return null}function m(a,o,i,u){for(var s=null,c=null,f=o,m=o=0,y=null;null!==f&&m<i.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(a,f,i[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(a,f),o=l(v,o,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===i.length)return n(a,f),ao&&Ga(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(o=l(f,o,m),null===c?s=f:c.sibling=f,c=f);return ao&&Ga(a,m),s}for(f=r(a,f);m<i.length;m++)null!==(y=h(f,a,m,i[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),o=l(y,o,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(a,e)})),ao&&Ga(a,m),s}function y(a,i,u,s){var c=M(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,m=i,y=i=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(a,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(a,m),ao&&Ga(a,y),c;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(a,g.value,s))&&(i=l(g,i,y),null===f?c=g:f.sibling=g,f=g);return ao&&Ga(a,y),c}for(m=r(a,m);!g.done;y++,g=u.next())null!==(g=h(m,a,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),i=l(g,i,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ga(a,y),c}return function e(r,o,l,u){if("object"==typeof l&&null!==l&&l.type===E&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case S:e:{for(var s=l.key,c=o;null!==c;){if(c.key===s){if((s=l.type)===E){if(7===c.tag){n(r,c.sibling),(o=a(c,l.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&bo(s)===c.type){n(r,c.sibling),(o=a(c,l.props)).ref=vo(r,c,l),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}l.type===E?((o=Ms(l.props.children,r.mode,u,l.key)).return=r,r=o):((u=zs(l.type,l.key,l.props,null,r.mode,u)).ref=vo(r,o,l),u.return=r,r=u)}return i(r);case k:e:{for(c=l.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Us(l,r.mode,u)).return=r,r=o}return i(r);case N:return e(r,o,(c=l._init)(l._payload),u)}if(te(l))return m(r,o,l,u);if(M(l))return y(r,o,l,u);go(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=As(l,r.mode,u)).return=r,r=o),i(r)):n(r,o)}}var So=wo(!0),ko=wo(!1),Eo=xa(null),xo=null,Co=null,_o=null;function Ro(){_o=Co=xo=null}function Po(e){var t=Eo.current;Ca(Eo),e._currentValue=t}function To(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Lo(e,t){xo=e,_o=Co=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bi=!0),e.firstContext=null)}function Oo(e){var t=e._currentValue;if(_o!==e)if(e={context:e,memoizedValue:t,next:null},null===Co){if(null===xo)throw Error(o(308));Co=e,xo.dependencies={lanes:0,firstContext:e}}else Co=Co.next=e;return t}var No=null;function Do(e){null===No?No=[e]:No.push(e)}function zo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Do(t)):(n.next=a.next,a.next=n),t.interleaved=n,Mo(e,r)}function Mo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Fo=!1;function Ao(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Uo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function jo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Io(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Mo(e,n)}return null===(a=r.interleaved)?(t.next=t,Do(r)):(t.next=a.next,a.next=t),r.interleaved=t,Mo(e,n)}function Bo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ho(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Vo(e,t,n,r){var a=e.updateQueue;Fo=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===l?o=s:l.next=s,l=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(l=0,c=s=u=null,i=o;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=A({},f,d);break e;case 2:Fo=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,l|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(d=i).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Fu|=l,e.lanes=l,e.memoizedState=f}}function $o(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Wo={},qo=xa(Wo),Qo=xa(Wo),Ko=xa(Wo);function Jo(e){if(e===Wo)throw Error(o(174));return e}function Yo(e,t){switch(_a(Ko,t),_a(Qo,e),_a(qo,Wo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(qo),_a(qo,t)}function Xo(){Ca(qo),Ca(Qo),Ca(Ko)}function Go(e){Jo(Ko.current);var t=Jo(qo.current),n=ue(t,e.type);t!==n&&(_a(Qo,e),_a(qo,n))}function Zo(e){Qo.current===e&&(Ca(qo),Ca(Qo))}var el=xa(0);function tl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var nl=[];function rl(){for(var e=0;e<nl.length;e++)nl[e]._workInProgressVersionPrimary=null;nl.length=0}var al=w.ReactCurrentDispatcher,ol=w.ReactCurrentBatchConfig,ll=0,il=null,ul=null,sl=null,cl=!1,fl=!1,dl=0,pl=0;function hl(){throw Error(o(321))}function ml(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function yl(e,t,n,r,a,l){if(ll=l,il=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,al.current=null===e||null===e.memoizedState?Zl:ei,e=n(r,a),fl){l=0;do{if(fl=!1,dl=0,25<=l)throw Error(o(301));l+=1,sl=ul=null,t.updateQueue=null,al.current=ti,e=n(r,a)}while(fl)}if(al.current=Gl,t=null!==ul&&null!==ul.next,ll=0,sl=ul=il=null,cl=!1,t)throw Error(o(300));return e}function vl(){var e=0!==dl;return dl=0,e}function gl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sl?il.memoizedState=sl=e:sl=sl.next=e,sl}function bl(){if(null===ul){var e=il.alternate;e=null!==e?e.memoizedState:null}else e=ul.next;var t=null===sl?il.memoizedState:sl.next;if(null!==t)sl=t,ul=e;else{if(null===e)throw Error(o(310));e={memoizedState:(ul=e).memoizedState,baseState:ul.baseState,baseQueue:ul.baseQueue,queue:ul.queue,next:null},null===sl?il.memoizedState=sl=e:sl=sl.next=e}return sl}function wl(e,t){return"function"==typeof t?t(e):t}function Sl(e){var t=bl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=ul,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var u=i=null,s=null,c=l;do{var f=c.lane;if((ll&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,il.lanes|=f,Fu|=f}c=c.next}while(null!==c&&c!==l);null===s?i=r:s.next=u,ir(r,t.memoizedState)||(bi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,il.lanes|=l,Fu|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function kl(e){var t=bl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(bi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function El(){}function xl(e,t){var n=il,r=bl(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,bi=!0),r=r.queue,Fl(Rl.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==sl&&1&sl.memoizedState.tag){if(n.flags|=2048,Ol(9,_l.bind(null,n,r,a,t),void 0,null),null===Tu)throw Error(o(349));30&ll||Cl(n,t,a)}return a}function Cl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function _l(e,t,n,r){t.value=n,t.getSnapshot=r,Pl(t)&&Tl(e)}function Rl(e,t,n){return n((function(){Pl(t)&&Tl(e)}))}function Pl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Tl(e){var t=Mo(e,1);null!==t&&ns(t,e,1,-1)}function Ll(e){var t=gl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wl,lastRenderedState:e},t.queue=e,e=e.dispatch=Kl.bind(null,il,e),[t.memoizedState,e]}function Ol(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Nl(){return bl().memoizedState}function Dl(e,t,n,r){var a=gl();il.flags|=e,a.memoizedState=Ol(1|t,n,void 0,void 0===r?null:r)}function zl(e,t,n,r){var a=bl();r=void 0===r?null:r;var o=void 0;if(null!==ul){var l=ul.memoizedState;if(o=l.destroy,null!==r&&ml(r,l.deps))return void(a.memoizedState=Ol(t,n,o,r))}il.flags|=e,a.memoizedState=Ol(1|t,n,o,r)}function Ml(e,t){return Dl(8390656,8,e,t)}function Fl(e,t){return zl(2048,8,e,t)}function Al(e,t){return zl(4,2,e,t)}function Ul(e,t){return zl(4,4,e,t)}function jl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Il(e,t,n){return n=null!=n?n.concat([e]):null,zl(4,4,jl.bind(null,t,e),n)}function Bl(){}function Hl(e,t){var n=bl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ml(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Vl(e,t){var n=bl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ml(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function $l(e,t,n){return 21&ll?(ir(n,t)||(n=mt(),il.lanes|=n,Fu|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bi=!0),e.memoizedState=n)}function Wl(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ol.transition;ol.transition={};try{e(!1),t()}finally{bt=n,ol.transition=r}}function ql(){return bl().memoizedState}function Ql(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Jl(e)?Yl(t,n):null!==(n=zo(e,t,n,r))&&(ns(n,e,r,es()),Xl(n,t,r))}function Kl(e,t,n){var r=ts(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Jl(e))Yl(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var u=t.interleaved;return null===u?(a.next=a,Do(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=zo(e,t,a,r))&&(ns(n,e,r,a=es()),Xl(n,t,r))}}function Jl(e){var t=e.alternate;return e===il||null!==t&&t===il}function Yl(e,t){fl=cl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xl(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Gl={readContext:Oo,useCallback:hl,useContext:hl,useEffect:hl,useImperativeHandle:hl,useInsertionEffect:hl,useLayoutEffect:hl,useMemo:hl,useReducer:hl,useRef:hl,useState:hl,useDebugValue:hl,useDeferredValue:hl,useTransition:hl,useMutableSource:hl,useSyncExternalStore:hl,useId:hl,unstable_isNewReconciler:!1},Zl={readContext:Oo,useCallback:function(e,t){return gl().memoizedState=[e,void 0===t?null:t],e},useContext:Oo,useEffect:Ml,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Dl(4194308,4,jl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Dl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Dl(4,2,e,t)},useMemo:function(e,t){var n=gl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ql.bind(null,il,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gl().memoizedState=e},useState:Ll,useDebugValue:Bl,useDeferredValue:function(e){return gl().memoizedState=e},useTransition:function(){var e=Ll(!1),t=e[0];return e=Wl.bind(null,e[1]),gl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=il,a=gl();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));30&ll||Cl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Ml(Rl.bind(null,r,l,e),[e]),r.flags|=2048,Ol(9,_l.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=gl(),t=Tu.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ya&~(1<<32-lt(Ya)-1)).toString(32)+n),0<(n=dl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:Oo,useCallback:Hl,useContext:Oo,useEffect:Fl,useImperativeHandle:Il,useInsertionEffect:Al,useLayoutEffect:Ul,useMemo:Vl,useReducer:Sl,useRef:Nl,useState:function(){return Sl(wl)},useDebugValue:Bl,useDeferredValue:function(e){return $l(bl(),ul.memoizedState,e)},useTransition:function(){return[Sl(wl)[0],bl().memoizedState]},useMutableSource:El,useSyncExternalStore:xl,useId:ql,unstable_isNewReconciler:!1},ti={readContext:Oo,useCallback:Hl,useContext:Oo,useEffect:Fl,useImperativeHandle:Il,useInsertionEffect:Al,useLayoutEffect:Ul,useMemo:Vl,useReducer:kl,useRef:Nl,useState:function(){return kl(wl)},useDebugValue:Bl,useDeferredValue:function(e){var t=bl();return null===ul?t.memoizedState=e:$l(t,ul.memoizedState,e)},useTransition:function(){return[kl(wl)[0],bl().memoizedState]},useMutableSource:El,useSyncExternalStore:xl,useId:ql,unstable_isNewReconciler:!1};function ni(e,t){if(e&&e.defaultProps){for(var n in t=A({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ri(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:A({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ai={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=jo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,a))&&(ns(t,e,a,r),Bo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),a=ts(e),o=jo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Io(e,o,a))&&(ns(t,e,a,r),Bo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),a=jo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Io(e,a,r))&&(ns(t,e,r,n),Bo(t,e,r))}};function oi(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function li(e,t,n){var r=!1,a=Ra,o=t.contextType;return"object"==typeof o&&null!==o?o=Oo(o):(a=Na(t)?La:Pa.current,o=(r=null!=(r=t.contextTypes))?Oa(e,a):Ra),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ai,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function ui(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Ao(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Oo(o):(o=Na(t)?La:Pa.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ri(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ai.enqueueReplaceState(a,a.state,null),Vo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function si(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function ci(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var di="function"==typeof WeakMap?WeakMap:Map;function pi(e,t,n){(n=jo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$u||($u=!0,Wu=r),fi(0,t)},n}function hi(e,t,n){(n=jo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fi(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fi(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function mi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new di;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Cs.bind(null,e,t,n),t.then(e,e))}function yi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vi(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=jo(-1,1)).tag=2,Io(n,t,1))),n.lanes|=1),e)}var gi=w.ReactCurrentOwner,bi=!1;function wi(e,t,n,r){t.child=null===e?ko(t,null,n,r):So(t,e.child,n,r)}function Si(e,t,n,r,a){n=n.render;var o=t.ref;return Lo(t,a),r=yl(e,t,n,r,o,a),n=vl(),null===e||bi?(ao&&n&&eo(t),t.flags|=1,wi(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function ki(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ns(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ei(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(l,r)&&e.ref===t.ref)return $i(e,t,a)}return t.flags|=1,(e=Ds(o,r)).ref=t.ref,e.return=t,t.child=e}function Ei(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(bi=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,$i(e,t,a);131072&e.flags&&(bi=!0)}}return _i(e,t,n,r,a)}function xi(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,_a(Du,Nu),Nu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,_a(Du,Nu),Nu|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},_a(Du,Nu),Nu|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,_a(Du,Nu),Nu|=r;return wi(e,t,a,n),t.child}function Ci(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _i(e,t,n,r,a){var o=Na(n)?La:Pa.current;return o=Oa(t,o),Lo(t,a),n=yl(e,t,n,r,o,a),r=vl(),null===e||bi?(ao&&r&&eo(t),t.flags|=1,wi(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function Ri(e,t,n,r,a){if(Na(n)){var o=!0;Fa(t)}else o=!1;if(Lo(t,a),null===t.stateNode)Vi(e,t),li(t,n,r),ui(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var u=l.context,s=n.contextType;s="object"==typeof s&&null!==s?Oo(s):Oa(t,s=Na(n)?La:Pa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof l.getSnapshotBeforeUpdate;f||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||u!==s)&&ii(t,l,r,s),Fo=!1;var d=t.memoizedState;l.state=d,Vo(t,r,l,a),u=t.memoizedState,i!==r||d!==u||Ta.current||Fo?("function"==typeof c&&(ri(t,n,c,r),u=t.memoizedState),(i=Fo||oi(t,n,i,r,d,u,s))?(f||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),l.props=r,l.state=u,l.context=s,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Uo(e,t),i=t.memoizedProps,s=t.type===t.elementType?i:ni(t.type,i),l.props=s,f=t.pendingProps,d=l.context,u="object"==typeof(u=n.contextType)&&null!==u?Oo(u):Oa(t,u=Na(n)?La:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==f||d!==u)&&ii(t,l,r,u),Fo=!1,d=t.memoizedState,l.state=d,Vo(t,r,l,a);var h=t.memoizedState;i!==f||d!==h||Ta.current||Fo?("function"==typeof p&&(ri(t,n,p,r),h=t.memoizedState),(s=Fo||oi(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,h,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),l.props=r,l.state=h,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Pi(e,t,n,r,o,a)}function Pi(e,t,n,r,a,o){Ci(e,t);var l=!!(128&t.flags);if(!r&&!l)return a&&Aa(t,n,!1),$i(e,t,o);r=t.stateNode,gi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=So(t,e.child,null,o),t.child=So(t,null,i,o)):wi(e,t,i,o),t.memoizedState=r.state,a&&Aa(t,n,!0),t.child}function Ti(e){var t=e.stateNode;t.pendingContext?za(0,t.pendingContext,t.pendingContext!==t.context):t.context&&za(0,t.context,!1),Yo(e,t.containerInfo)}function Li(e,t,n,r,a){return ho(),mo(a),t.flags|=256,wi(e,t,n,r),t.child}var Oi,Ni,Di,zi,Mi={dehydrated:null,treeContext:null,retryLane:0};function Fi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ai(e,t,n){var r,a=t.pendingProps,l=el.current,i=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),_a(el,1&l),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},1&a||null===i?i=Fs(u,a,0,null):(i.childLanes=0,i.pendingProps=u),e=Ms(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Fi(n),t.memoizedState=Mi,e):Ui(t,u));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,ji(e,t,i,r=ci(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=Fs({mode:"visible",children:r.children},a,0,null),(l=Ms(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,1&t.mode&&So(t,e.child,null,i),t.child.memoizedState=Fi(i),t.memoizedState=Mi,l);if(!(1&t.mode))return ji(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,ji(e,t,i,r=ci(l=Error(o(419)),r,void 0))}if(u=!!(i&e.childLanes),bi||u){if(null!==(r=Tu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|i)?0:a)&&a!==l.retryLane&&(l.retryLane=a,Mo(e,a),ns(r,e,a,-1))}return ms(),ji(e,t,i,r=ci(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Rs.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Qa[Ka++]=Ya,Qa[Ka++]=Xa,Qa[Ka++]=Ja,Ya=e.id,Xa=e.overflow,Ja=t),(t=Ui(t,r.children)).flags|=4096,t)}(e,t,u,a,r,l,n);if(i){i=a.fallback,u=t.mode,r=(l=e.child).sibling;var s={mode:"hidden",children:a.children};return 1&u||t.child===l?(a=Ds(l,s)).subtreeFlags=14680064&l.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null),null!==r?i=Ds(r,i):(i=Ms(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?Fi(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Mi,a}return e=(i=e.child).sibling,a=Ds(i,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ui(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function ji(e,t,n,r){return null!==r&&mo(r),So(t,e.child,null,n),(e=Ui(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ii(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),To(e.return,t,n)}function Bi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Hi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(wi(e,t,r.children,n),2&(r=el.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ii(e,n,t);else if(19===e.tag)Ii(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(_a(el,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===tl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===tl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bi(t,!0,n,null,o);break;case"together":Bi(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Vi(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $i(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fu|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qi(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return qi(t),null;case 1:case 17:return Na(t.type)&&Da(),qi(t),null;case 3:return r=t.stateNode,Xo(),Ca(Ta),Ca(Pa),rl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(ls(oo),oo=null))),Ni(e,t),qi(t),null;case 5:Zo(t);var a=Jo(Ko.current);if(n=t.type,null!==e&&null!=t.stateNode)Di(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qi(t),null}if(e=Jo(qo.current),fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[da]=t,r[pa]=l,e=!!(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)jr(Mr[a],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":Y(r,l),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},jr("invalid",r);break;case"textarea":ae(r,l),jr("invalid",r)}for(var u in ge(n,l),a=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==l.suppressHydrationWarning&&Gr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==l.suppressHydrationWarning&&Gr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":q(r),Z(r,l,!0);break;case"textarea":q(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,Oi(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":jr("cancel",e),jr("close",e),a=r;break;case"iframe":case"object":case"embed":jr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)jr(Mr[a],e);a=r;break;case"source":jr("error",e),a=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),a=r;break;case"details":jr("toggle",e),a=r;break;case"input":Y(e,r),a=J(e,r),jr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=A({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),jr("invalid",e)}for(l in ge(n,a),s=a)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ye(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===l?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=c&&"onScroll"===l&&jr("scroll",e):null!=c&&b(e,l,c,u))}switch(n){case"input":q(e),Z(e,r,!1);break;case"textarea":q(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return qi(t),null;case 6:if(e&&null!=t.stateNode)zi(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Jo(Ko.current),Jo(qo.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Gr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Gr(r.nodeValue,n,!!(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return qi(t),null;case 13:if(Ca(el),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,l=!1;else if(l=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[da]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qi(t),l=!1}else null!==oo&&(ls(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&el.current?0===zu&&(zu=3):ms())),null!==t.updateQueue&&(t.flags|=4),qi(t),null);case 4:return Xo(),Ni(e,t),null===e&&Hr(t.stateNode.containerInfo),qi(t),null;case 10:return Po(t.type._context),qi(t),null;case 19:if(Ca(el),null===(l=t.memoizedState))return qi(t),null;if(r=!!(128&t.flags),null===(u=l.rendering))if(r)Wi(l,!1);else{if(0!==zu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=tl(e))){for(t.flags|=128,Wi(l,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return _a(el,1&el.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>Hu&&(t.flags|=128,r=!0,Wi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=tl(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!u.alternate&&!ao)return qi(t),null}else 2*Xe()-l.renderingStartTime>Hu&&1073741824!==n&&(t.flags|=128,r=!0,Wi(l,!1),t.lanes=4194304);l.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=l.last)?n.sibling=u:t.child=u,l.last=u)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=el.current,_a(el,r?1&n|2:1&n),t):(qi(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Nu)&&(qi(t),6&t.subtreeFlags&&(t.flags|=8192)):qi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ki(e,t){switch(to(t),t.tag){case 1:return Na(t.type)&&Da(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xo(),Ca(Ta),Ca(Pa),rl(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(Ca(el),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(el),null;case 4:return Xo(),null;case 10:return Po(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Oi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ni=function(){},Di=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Jo(qo.current);var o,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"select":a=A({},a,{value:void 0}),r=A({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ge(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?l||(l=[]):(l=l||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(l||(l=[]),l.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(l=l||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&jr("scroll",e),l||u===s||(l=[])):(l=l||[]).push(c,s))}n&&(l=l||[]).push("style",n);var c=l;(t.updateQueue=c)&&(t.flags|=4)}},zi=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ji=!1,Yi=!1,Xi="function"==typeof WeakSet?WeakSet:Set,Gi=null;function Zi(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){xs(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&eu(t,n,o)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ou(e){var t=e.alternate;null!==t&&(e.alternate=null,ou(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ma],delete t[ya],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function iu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,fu=!1;function du(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Yi||Zi(n,t);case 6:var r=cu,a=fu;cu=null,du(e,t,n),fu=a,null!==(cu=r)&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ht(e)):ua(cu,n.stateNode));break;case 4:r=cu,a=fu,cu=n.stateNode.containerInfo,fu=!0,du(e,t,n),cu=r,fu=a;break;case 0:case 11:case 14:case 15:if(!Yi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(2&o||4&o)&&eu(n,t,l),a=a.next}while(a!==r)}du(e,t,n);break;case 1:if(!Yi&&(Zi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Yi=(r=Yi)||null!==n.memoizedState,du(e,t,n),Yi=r):du(e,t,n);break;default:du(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xi),t.forEach((function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(o(160));pu(l,i,a),cu=null,fu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){xs(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){xs(e,e.return,t)}try{nu(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&Zi(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&Zi(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===l.type&&null!=l.name&&X(a,l),be(u,i);var c=be(u,l);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?ye(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":G(a,l);break;case"textarea":oe(a,l);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var h=l.value;null!=h?ne(a,!!l.multiple,h,!1):p!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[pa]=l}catch(t){xs(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){xs(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ht(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(Bu=Xe())),4&r&&hu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yi=(c=Yi)||f,mu(t,e),Yi=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Gi=e,f=e.child;null!==f;){for(d=Gi=f;null!==Gi;){switch(h=(p=Gi).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Zi(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:Zi(p,p.return);break;case 22:if(null!==p.memoizedState){Su(d);continue}}null!==h?(h.return=p,Gi=h):Su(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{a=d.stateNode,c?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(u=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(t){xs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),vu(e),4&r&&hu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),su(e,iu(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;uu(e,iu(e),l);break;default:throw Error(o(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e,t,n){Gi=e,bu(e,t,n)}function bu(e,t,n){for(var r=!!(1&e.mode);null!==Gi;){var a=Gi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Ji;if(!l){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Yi;i=Ji;var s=Yi;if(Ji=l,(Yi=u)&&!s)for(Gi=a;null!==Gi;)u=(l=Gi).child,22===l.tag&&null!==l.memoizedState?ku(a):null!==u?(u.return=l,Gi=u):ku(a);for(;null!==o;)Gi=o,bu(o,t,n),o=o.sibling;Gi=a,Ji=i,Yi=s}wu(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Gi=o):wu(e)}}function wu(e){for(;null!==Gi;){var t=Gi;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Yi||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:ni(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&$o(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}$o(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ht(d)}}}break;default:throw Error(o(163))}Yi||512&t.flags&&au(t)}catch(e){xs(t,t.return,e)}}if(t===e){Gi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gi=n;break}Gi=t.return}}function Su(e){for(;null!==Gi;){var t=Gi;if(t===e){Gi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gi=n;break}Gi=t.return}}function ku(e){for(;null!==Gi;){var t=Gi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){xs(t,a,e)}}var o=t.return;try{au(t)}catch(e){xs(t,o,e)}break;case 5:var l=t.return;try{au(t)}catch(e){xs(t,l,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Gi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Gi=i;break}Gi=t.return}}var Eu,xu=Math.ceil,Cu=w.ReactCurrentDispatcher,_u=w.ReactCurrentOwner,Ru=w.ReactCurrentBatchConfig,Pu=0,Tu=null,Lu=null,Ou=0,Nu=0,Du=xa(0),zu=0,Mu=null,Fu=0,Au=0,Uu=0,ju=null,Iu=null,Bu=0,Hu=1/0,Vu=null,$u=!1,Wu=null,qu=null,Qu=!1,Ku=null,Ju=0,Yu=0,Xu=null,Gu=-1,Zu=0;function es(){return 6&Pu?Xe():-1!==Gu?Gu:Gu=Xe()}function ts(e){return 1&e.mode?2&Pu&&0!==Ou?Ou&-Ou:null!==yo.transition?(0===Zu&&(Zu=mt()),Zu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type):1}function ns(e,t,n,r){if(50<Yu)throw Yu=0,Xu=null,Error(o(185));vt(e,n,r),2&Pu&&e===Tu||(e===Tu&&(!(2&Pu)&&(Au|=n),4===zu&&is(e,Ou)),rs(e,r),1===n&&0===Pu&&!(1&t.mode)&&(Hu=Xe()+500,ja&&Ha()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,u=a[l];-1===u?i&n&&!(i&r)||(a[l]=pt(i,t)):u<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=dt(e,e===Tu?Ou:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){ja=!0,Ba(e)}(us.bind(null,e)):Ba(us.bind(null,e)),la((function(){!(6&Pu)&&Ha()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ts(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Gu=-1,Zu=0,6&Pu)throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Tu?Ou:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=ys(e,r);else{t=r;var a=Pu;Pu|=2;var l=hs();for(Tu===e&&Ou===t||(Vu=null,Hu=Xe()+500,ds(e,t));;)try{gs();break}catch(t){ps(e,t)}Ro(),Cu.current=l,Pu=a,null!==Lu?t=0:(Tu=null,Ou=0,t=zu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=os(e,a)),1===t)throw n=Mu,ds(e,0),is(e,r),rs(e,Xe()),n;if(6===t)is(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=ys(e,r),2===t&&(l=ht(e),0!==l&&(r=l,t=os(e,l))),1!==t)))throw n=Mu,ds(e,0),is(e,r),rs(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Ss(e,Iu,Vu);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Bu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Ss.bind(null,e,Iu,Vu),t);break}Ss(e,Iu,Vu);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xu(r/1960))-r)){e.timeoutHandle=ra(Ss.bind(null,e,Iu,Vu),r);break}Ss(e,Iu,Vu);break;default:throw Error(o(329))}}}return rs(e,Xe()),e.callbackNode===n?as.bind(null,e):null}function os(e,t){var n=ju;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Iu,Iu=n,null!==t&&ls(t)),e}function ls(e){null===Iu?Iu=e:Iu.push.apply(Iu,e)}function is(e,t){for(t&=~Uu,t&=~Au,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Pu)throw Error(o(327));ks();var t=dt(e,0);if(!(1&t))return rs(e,Xe()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=os(e,r))}if(1===n)throw n=Mu,ds(e,0),is(e,t),rs(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Iu,Vu),rs(e,Xe()),null}function ss(e,t){var n=Pu;Pu|=1;try{return e(t)}finally{0===(Pu=n)&&(Hu=Xe()+500,ja&&Ha())}}function cs(e){null!==Ku&&0===Ku.tag&&!(6&Pu)&&ks();var t=Pu;Pu|=1;var n=Ru.transition,r=bt;try{if(Ru.transition=null,bt=1,e)return e()}finally{bt=r,Ru.transition=n,!(6&(Pu=t))&&Ha()}}function fs(){Nu=Du.current,Ca(Du)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Lu)for(n=Lu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Da();break;case 3:Xo(),Ca(Ta),Ca(Pa),rl();break;case 5:Zo(r);break;case 4:Xo();break;case 13:case 19:Ca(el);break;case 10:Po(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Tu=e,Lu=e=Ds(e.current,null),Ou=Nu=t,zu=0,Mu=null,Uu=Au=Fu=0,Iu=ju=null,null!==No){for(t=0;t<No.length;t++)if(null!==(r=(n=No[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}No=null}return e}function ps(e,t){for(;;){var n=Lu;try{if(Ro(),al.current=Gl,cl){for(var r=il.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}cl=!1}if(ll=0,sl=ul=il=null,fl=!1,dl=0,_u.current=null,null===n||null===n.return){zu=1,Mu=t,Lu=null;break}e:{var l=e,i=n.return,u=n,s=t;if(t=Ou,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yi(i);if(null!==h){h.flags&=-257,vi(h,i,u,0,t),1&h.mode&&mi(l,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(s),t.updateQueue=y}else m.add(s);break e}if(!(1&t)){mi(l,c,t),ms();break e}s=Error(o(426))}else if(ao&&1&u.mode){var v=yi(i);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vi(v,i,u,0,t),mo(si(s,u));break e}}l=s=si(s,u),4!==zu&&(zu=2),null===ju?ju=[l]:ju.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Ho(l,pi(0,s,t));break e;case 1:u=s;var g=l.type,b=l.stateNode;if(!(128&l.flags||"function"!=typeof g.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==qu&&qu.has(b)))){l.flags|=65536,t&=-t,l.lanes|=t,Ho(l,hi(l,u,t));break e}}l=l.return}while(null!==l)}ws(n)}catch(e){t=e,Lu===n&&null!==n&&(Lu=n=n.return);continue}break}}function hs(){var e=Cu.current;return Cu.current=Gl,null===e?Gl:e}function ms(){0!==zu&&3!==zu&&2!==zu||(zu=4),null===Tu||!(268435455&Fu)&&!(268435455&Au)||is(Tu,Ou)}function ys(e,t){var n=Pu;Pu|=2;var r=hs();for(Tu===e&&Ou===t||(Vu=null,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}if(Ro(),Pu=n,Cu.current=r,null!==Lu)throw Error(o(261));return Tu=null,Ou=0,zu}function vs(){for(;null!==Lu;)bs(Lu)}function gs(){for(;null!==Lu&&!Je();)bs(Lu)}function bs(e){var t=Eu(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?ws(e):Lu=t,_u.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Lu=n);if(null===e)return zu=6,void(Lu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Qi(n,t,Nu)))return void(Lu=n);if(null!==(t=t.sibling))return void(Lu=t);Lu=t=e}while(null!==t);0===zu&&(zu=5)}function Ss(e,t,n){var r=bt,a=Ru.transition;try{Ru.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Ku);if(6&Pu)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Tu&&(Lu=Tu=null,Ou=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Qu||(Qu=!0,Ts(tt,(function(){return ks(),null}))),l=!!(15990&n.flags),15990&n.subtreeFlags||l){l=Ru.transition,Ru.transition=null;var i=bt;bt=1;var u=Pu;Pu|=4,_u.current=null,function(e,t){if(ea=$t,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},$t=!1,Gi=t;null!==Gi;)if(e=(t=Gi).child,1028&t.subtreeFlags&&null!==e)e.return=t,Gi=e;else for(;null!==Gi;){t=Gi;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:ni(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gi=e;break}Gi=t.return}m=tu,tu=!1}(e,n),yu(n,e),hr(ta),$t=!!ea,ta=ea=null,e.current=n,gu(n,e,a),Ye(),Pu=u,bt=i,Ru.transition=l}else e.current=n;if(Qu&&(Qu=!1,Ku=e,Ju=a),0===(l=e.pendingLanes)&&(qu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if($u)throw $u=!1,e=Wu,Wu=null,e;!!(1&Ju)&&0!==e.tag&&ks(),1&(l=e.pendingLanes)?e===Xu?Yu++:(Yu=0,Xu=e):Yu=0,Ha()}(e,t,n,r)}finally{Ru.transition=a,bt=r}return null}function ks(){if(null!==Ku){var e=wt(Ju),t=Ru.transition,n=bt;try{if(Ru.transition=null,bt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Ju=0,6&Pu)throw Error(o(331));var a=Pu;for(Pu|=4,Gi=e.current;null!==Gi;){var l=Gi,i=l.child;if(16&Gi.flags){var u=l.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Gi=c;null!==Gi;){var f=Gi;switch(f.tag){case 0:case 11:case 15:nu(8,f,l)}var d=f.child;if(null!==d)d.return=f,Gi=d;else for(;null!==Gi;){var p=(f=Gi).sibling,h=f.return;if(ou(f),f===c){Gi=null;break}if(null!==p){p.return=h,Gi=p;break}Gi=h}}}var m=l.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Gi=l}}if(2064&l.subtreeFlags&&null!==i)i.return=l,Gi=i;else e:for(;null!==Gi;){if(2048&(l=Gi).flags)switch(l.tag){case 0:case 11:case 15:nu(9,l,l.return)}var g=l.sibling;if(null!==g){g.return=l.return,Gi=g;break e}Gi=l.return}}var b=e.current;for(Gi=b;null!==Gi;){var w=(i=Gi).child;if(2064&i.subtreeFlags&&null!==w)w.return=i,Gi=w;else e:for(i=b;null!==Gi;){if(2048&(u=Gi).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){xs(u,u.return,e)}if(u===i){Gi=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Gi=S;break e}Gi=u.return}}if(Pu=a,Ha(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Ru.transition=t}}return!1}function Es(e,t,n){e=Io(e,t=pi(0,t=si(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)Es(e,e,n);else for(;null!==t;){if(3===t.tag){Es(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Io(t,e=hi(t,e=si(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function Cs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Ou&n)===n&&(4===zu||3===zu&&(130023424&Ou)===Ou&&500>Xe()-Bu?ds(e,0):Uu|=n),rs(e,t)}function _s(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Mo(e,t))&&(vt(e,t,n),rs(e,n))}function Rs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),_s(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),_s(e,n)}function Ts(e,t){return Qe(e,t)}function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Os(e,t,n,r){return new Ls(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Os(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zs(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)Ns(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case E:return Ms(n.children,a,l,t);case x:i=8,a|=8;break;case C:return(e=Os(12,n,t,2|a)).elementType=C,e.lanes=l,e;case T:return(e=Os(13,n,t,a)).elementType=T,e.lanes=l,e;case L:return(e=Os(19,n,t,a)).elementType=L,e.lanes=l,e;case D:return Fs(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:i=10;break e;case R:i=9;break e;case P:i=11;break e;case O:i=14;break e;case N:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Os(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Ms(e,t,n,r){return(e=Os(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=Os(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function As(e,t,n){return(e=Os(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Os(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function js(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Is(e,t,n,r,a,o,l,i,u){return e=new js(e,t,n,i,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Os(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ao(o),e}function Bs(e){if(!e)return Ra;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Na(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Na(n))return Ma(e,n,t)}return t}function Hs(e,t,n,r,a,o,l,i,u){return(e=Is(n,r,!0,e,0,o,0,i,u)).context=Bs(null),n=e.current,(o=jo(r=es(),a=ts(n))).callback=null!=t?t:null,Io(n,o,a),e.current.lanes=a,vt(e,a,r),rs(e,r),e}function Vs(e,t,n,r){var a=t.current,o=es(),l=ts(a);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=jo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Io(a,t,l))&&(ns(e,a,l,o),Bo(e,a,l)),l}function $s(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qs(e,t){Ws(e,t),(e=e.alternate)&&Ws(e,t)}Eu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)bi=!0;else{if(!(e.lanes&n||128&t.flags))return bi=!1,function(e,t,n){switch(t.tag){case 3:Ti(t),ho();break;case 5:Go(t);break;case 1:Na(t.type)&&Fa(t);break;case 4:Yo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;_a(Eo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(_a(el,1&el.current),t.flags|=128,null):n&t.child.childLanes?Ai(e,t,n):(_a(el,1&el.current),null!==(e=$i(e,t,n))?e.sibling:null);_a(el,1&el.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Hi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),_a(el,el.current),r)break;return null;case 22:case 23:return t.lanes=0,xi(e,t,n)}return $i(e,t,n)}(e,t,n);bi=!!(131072&e.flags)}else bi=!1,ao&&1048576&t.flags&&Za(t,qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vi(e,t),e=t.pendingProps;var a=Oa(t,Pa.current);Lo(t,n),a=yl(null,t,r,e,a,n);var l=vl();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Na(r)?(l=!0,Fa(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ao(t),a.updater=ai,t.stateNode=a,a._reactInternals=t,ui(t,r,e,n),t=Pi(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),wi(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===O)return 14}return 2}(r),e=ni(r,e),a){case 0:t=_i(null,t,r,e,n);break e;case 1:t=Ri(null,t,r,e,n);break e;case 11:t=Si(null,t,r,e,n);break e;case 14:t=ki(null,t,r,ni(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ri(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 3:e:{if(Ti(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,Uo(e,t),Vo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Li(e,t,r,n,a=si(Error(o(423)),t));break e}if(r!==a){t=Li(e,t,r,n,a=si(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=$i(e,t,n);break e}wi(e,t,r,n)}t=t.child}return t;case 5:return Go(t),null===e&&so(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),Ci(e,t),wi(e,t,i,n),t.child;case 6:return null===e&&so(t),null;case 13:return Ai(e,t,n);case 4:return Yo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):wi(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Si(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 7:return wi(e,t,t.pendingProps,n),t.child;case 8:case 12:return wi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,_a(Eo,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Ta.current){t=$i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){i=l.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===l.tag){(s=jo(-1,n&-n)).tag=2;var c=l.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),To(l.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),To(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}wi(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Lo(t,n),r=r(a=Oo(a)),t.flags|=1,wi(e,t,r,n),t.child;case 14:return a=ni(r=t.type,t.pendingProps),ki(e,t,r,a=ni(r.type,a),n);case 15:return Ei(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ni(r,a),Vi(e,t),t.tag=1,Na(r)?(e=!0,Fa(t)):e=!1,Lo(t,n),li(t,r,a),ui(t,r,a,n),Pi(null,t,r,!0,e,n);case 19:return Hi(e,t,n);case 22:return xi(e,t,n)}throw Error(o(156,t.tag))};var Qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Js(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gs(){}function Zs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=$s(l);i.call(e)}}Vs(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=$s(l);o.call(e)}}var l=Hs(t,r,e,0,null,!1,0,"",Gs);return e._reactRootContainer=l,e[ha]=l.current,Hr(8===e.nodeType?e.parentNode:e),cs(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=$s(u);i.call(e)}}var u=Is(e,0,!1,null,0,!1,0,"",Gs);return e._reactRootContainer=u,e[ha]=u.current,Hr(8===e.nodeType?e.parentNode:e),cs((function(){Vs(t,u,n,r)})),u}(n,t,e,a,r);return $s(l)}Js.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Vs(e,t,null,null)},Js.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Vs(null,e,null,null)})),t[ha]=null}},Js.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&At(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,Xe()),!(6&Pu)&&(Hu=Xe()+500,Ha()))}break;case 13:cs((function(){var t=Mo(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),qs(e,1)}},kt=function(e){if(13===e.tag){var t=Mo(e,134217728);null!==t&&ns(t,e,134217728,es()),qs(e,134217728)}},Et=function(e){if(13===e.tag){var t=ts(e),n=Mo(e,t);null!==n&&ns(n,e,t,es()),qs(e,t)}},xt=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(G(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Sa(r);if(!a)throw Error(o(90));Q(r),G(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=ss,Te=cs;var ec={usingClientEntryPoint:!1,Events:[ba,wa,Sa,_e,Re,ss]},tc={findFiberByHostInstance:ga,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(o(299));var n=!1,r="",a=Qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Is(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Hr(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(o(200));return Zs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Qs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=Hs(t,null,e,1,null!=n?n:null,a,0,l,i),e[ha]=t.current,Hr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Js(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(o(200));return Zs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(o(40));return!!e._reactRootContainer&&(cs((function(){Zs(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},723:(e,t,n)=>{var r=n(834);t.H=r.createRoot,r.hydrateRoot},834:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(230)},534:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)k.call(t,a)&&!x.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:E.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var R=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return l=l(u=e),e=""===o?"."+P(u,0):o,S(l)?(a="",null!=e&&(a=e.replace(R,"$&/")+"/"),T(l,t,a,"",(function(e){return e}))):null!=l&&(_(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||u&&u.key===l.key?"":(""+l.key).replace(R,"$&/")+"/")+e)),t.push(l)),1;if(u=0,o=""===o?".":o+":",S(e))for(var s=0;s<e.length;s++){var c=o+P(i=e[s],s);u+=T(i,t,a,c,l)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=T(i=i.value,t,a,c=o+P(i,s++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function L(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},D={transition:null},z={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:D,ReactCurrentOwner:E};function M(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=l,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.act=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=E.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!x.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=M,t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.3.1"},471:(e,t,n)=>{e.exports=n(534)},582:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(y=!1,w(e),!m)if(null!==r(s))m=!0,D(k);else{var t=r(c);null!==t&&z(S,t.startTime-e)}}function k(e,n){m=!1,y&&(y=!1,g(_),_=-1),h=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!T());){var l=d.callback;if("function"==typeof l){d.callback=null,p=d.priorityLevel;var i=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&z(S,f.startTime-n),u=!1}return u}finally{d=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,C=null,_=-1,R=5,P=-1;function T(){return!(t.unstable_now()-P<R)}function L(){if(null!==C){var e=t.unstable_now();P=e;var n=!0;try{n=C(!0,e)}finally{n?E():(x=!1,C=null)}}else x=!1}if("function"==typeof b)E=function(){b(L)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,N=O.port2;O.port1.onmessage=L,E=function(){N.postMessage(null)}}else E=function(){v(L,0)};function D(e){C=e,x||(x=!0,E())}function z(e,n){_=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,D(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):R=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(y?(g(_),_=-1):y=!0,z(S,o-l))):(e.sortIndex=i,n(s,e),m||h||(m=!0,D(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},817:(e,t,n)=>{e.exports=n(582)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};a.r(o),a.d(o,{hasBrowserEnv:()=>Rn,hasStandardBrowserEnv:()=>Pn,hasStandardBrowserWebWorkerEnv:()=>Ln,origin:()=>On});var l,i=a(471),u=a.t(i,2),s=a(834),c=a.t(s,2),f=a(723);function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(l||(l={}));const p="popstate";function h(e,t){if(!1===e||null==e)throw new Error(t)}function m(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function y(e,t){return{usr:e.state,key:e.key,idx:t}}function v(e,t,n,r){return void 0===n&&(n=null),d({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?b(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function g(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function b(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var w;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(w||(w={}));const S=new Set(["lazy","caseSensitive","path","id","index","children"]);function k(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let o=[...n,String(a)],l="string"==typeof e.id?e.id:o.join("-");if(h(!0!==e.index||!e.children,"Cannot specify children on an index route"),h(!r[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=d({},e,t(e),{id:l});return r[l]=n,n}{let n=d({},e,t(e),{id:l,children:void 0});return r[l]=n,e.children&&(n.children=k(e.children,t,o,r)),n}}))}function E(e,t,n){return void 0===n&&(n="/"),x(e,t,n,!1)}function x(e,t,n,r){let a=U(("string"==typeof t?b(t):t).pathname||"/",n);if(null==a)return null;let o=C(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let t=A(a);l=M(o[e],t,r)}return l}function C(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(h(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=V([r,l.relativePath]),u=n.concat(l);e.children&&e.children.length>0&&(h(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),C(e.children,t,u,i)),(null!=e.path||e.index)&&t.push({path:i,score:z(i,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of _(e.path))a(e,t,n);else a(e,t)})),t}function _(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=_(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}const R=/^:[\w-]+$/,P=3,T=2,L=1,O=10,N=-2,D=e=>"*"===e;function z(e,t){let n=e.split("/"),r=n.length;return n.some(D)&&(r+=N),t&&(r+=T),n.filter((e=>!D(e))).reduce(((e,t)=>e+(R.test(t)?P:""===t?L:O)),r)}function M(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",l=[];for(let e=0;e<r.length;++e){let i=r[e],u=e===r.length-1,s="/"===o?t:t.slice(o.length)||"/",c=F({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},s),f=i.route;if(!c&&u&&n&&!r[r.length-1].route.index&&(c=F({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},s)),!c)return null;Object.assign(a,c.params),l.push({params:a,pathname:V([o,c.pathname]),pathnameBase:$(V([o,c.pathnameBase])),route:f}),"/"!==c.pathnameBase&&(o=V([o,c.pathnameBase]))}return l}function F(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),m("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=i[n];return e[r]=a&&!u?void 0:(u||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:l,pattern:e}}function A(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return m(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function U(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function j(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function I(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function B(e,t){let n=I(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function H(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=b(e):(a=d({},e),h(!a.pathname||!a.pathname.includes("?"),j("?","pathname","search",a)),h(!a.pathname||!a.pathname.includes("#"),j("#","pathname","hash",a)),h(!a.search||!a.search.includes("#"),j("#","search","hash",a)));let o,l=""===e||""===a.pathname,i=l?"/":a.pathname;if(null==i)o=n;else{let e=t.length-1;if(!r&&i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?b(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:W(r),hash:q(a)}}(a,o),s=i&&"/"!==i&&i.endsWith("/"),c=(l||"."===i)&&n.endsWith("/");return u.pathname.endsWith("/")||!s&&!c||(u.pathname+="/"),u}const V=e=>e.join("/").replace(/\/\/+/g,"/"),$=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),W=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class Q{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function K(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const J=["post","put","patch","delete"],Y=new Set(J),X=["get",...J],G=new Set(X),Z=new Set([301,302,303,307,308]),ee=new Set([307,308]),te={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ne={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},re={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ae=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,oe=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),le="remix-router-transitions";function ie(e,t,n,r,a,o,l,i){let u,s;if(l){u=[];for(let e of t)if(u.push(e),e.route.id===l){s=e;break}}else u=t,s=t[t.length-1];let c=H(a||".",B(u,o),U(e.pathname,n)||e.pathname,"path"===i);return null==a&&(c.search=e.search,c.hash=e.hash),null!=a&&""!==a&&"."!==a||!s||!s.route.index||Fe(c.search)||(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(c.pathname="/"===c.pathname?n:V([n,c.pathname])),g(c)}function ue(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(a=r.formMethod,!G.has(a.toLowerCase())))return{path:n,error:_e(405,{method:r.formMethod})};var a;let o,l,i=()=>({path:n,error:_e(400,{type:"invalid-body"})}),u=r.formMethod||"get",s=e?u.toUpperCase():u.toLowerCase(),c=Pe(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!De(s))return i();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:s,formAction:c,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!De(s))return i();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:s,formAction:c,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(h("function"==typeof FormData,"FormData is not available in this environment"),r.formData)o=be(r.formData),l=r.formData;else if(r.body instanceof FormData)o=be(r.body),l=r.body;else if(r.body instanceof URLSearchParams)o=r.body,l=we(o);else if(null==r.body)o=new URLSearchParams,l=new FormData;else try{o=new URLSearchParams(r.body),l=we(o)}catch(e){return i()}let f={formMethod:s,formAction:c,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:l,json:void 0,text:void 0};if(De(f.formMethod))return{path:n,submission:f};let d=b(n);return t&&d.search&&Fe(d.search)&&o.append("index",""),d.search="?"+o,{path:g(d),submission:f}}function se(e,t,n,r,a,o,l,i,u,s,c,f,p,h,m,y){let v=y?Le(y[1])?y[1].error:y[1].data:void 0,g=e.createURL(t.location),b=e.createURL(a),w=y&&Le(y[1])?y[0]:void 0,S=w?function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,w):n,k=y?y[1].statusCode:void 0,x=l&&k&&k>=400,C=S.filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return!("function"==typeof a.loader&&!a.loader.hydrate&&(void 0!==t.loaderData[a.id]||t.errors&&void 0!==t.errors[a.id]));if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||u.some((t=>t===e.route.id)))return!0;let l=t.matches[n],s=e;return fe(e,d({currentUrl:g,currentParams:l.params,nextUrl:b,nextParams:s.params},r,{actionResult:v,unstable_actionStatus:k,defaultShouldRevalidate:!x&&(i||g.pathname+g.search===b.pathname+b.search||g.search!==b.search||ce(l,s))}))})),_=[];return f.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||c.has(a))return;let l=E(h,e.path,m);if(!l)return void _.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let u=t.fetchers.get(a),f=Ae(l,e.path),y=!1;y=!p.has(a)&&(!!s.includes(a)||(u&&"idle"!==u.state&&void 0===u.data?i:fe(f,d({currentUrl:g,currentParams:t.matches[t.matches.length-1].params,nextUrl:b,nextParams:n[n.length-1].params},r,{actionResult:v,unstable_actionStatus:k,defaultShouldRevalidate:!x&&i})))),y&&_.push({key:a,routeId:e.routeId,path:e.path,matches:l,match:f,controller:new AbortController})})),[C,_]}function ce(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function fe(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function de(e,t,n,r,a,o,l,i){let u=[t,...n.map((e=>e.route.id))].join("-");try{let c=l.get(u);c||(c=e({path:t,matches:n,patch:(e,t)=>{i.aborted||pe(e,t,r,a,o)}}),l.set(u,c)),c&&"object"==typeof(s=c)&&null!=s&&"then"in s&&await c}finally{l.delete(u)}var s}function pe(e,t,n,r,a){if(e){var o;let n=r[e];h(n,"No route found to patch children into: routeId = "+e);let l=k(t,a,[e,"patch",String((null==(o=n.children)?void 0:o.length)||"0")],r);n.children?n.children.push(...l):n.children=l}else{let e=k(t,a,["patch",String(n.length||"0")],r);n.push(...e)}}async function he(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];h(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;m(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||S.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,d({},t(a),{lazy:void 0}))}function me(e){return Promise.all(e.matches.map((e=>e.resolve())))}function ye(e,t,n,r,a,o){let l=e.headers.get("Location");if(h(l,"Redirects returned/thrown from loaders/actions must have a Location header"),!ae.test(l)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);l=ie(new URL(t.url),i,a,!0,l,o),e.headers.set("Location",l)}return e}function ve(e,t,n){if(ae.test(e)){let r=e,a=r.startsWith("//")?new URL(t.protocol+r):new URL(r),o=null!=U(a.pathname,n);if(a.origin===t.origin&&o)return a.pathname+a.search+a.hash}return e}function ge(e,t,n,r){let a=e.createURL(Pe(t)).toString(),o={signal:n};if(r&&De(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=be(r.formData):o.body=r.formData}return new Request(a,o)}function be(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function we(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Se(e,t,n,r,a,o,l,i){let{loaderData:u,errors:s}=function(e,t,n,r,a,o){let l,i={},u=null,s=!1,c={},f=r&&Le(r[1])?r[1].error:void 0;return n.forEach(((n,r)=>{let d=t[r].route.id;if(h(!Oe(n),"Cannot handle redirect results in processLoaderData"),Le(n)){let t=n.error;if(void 0!==f&&(t=f,f=void 0),u=u||{},o)u[d]=t;else{let n=xe(e,d);null==u[n.route.id]&&(u[n.route.id]=t)}i[d]=void 0,s||(s=!0,l=K(n.error)?n.error.status:500),n.headers&&(c[d]=n.headers)}else Te(n)?(a.set(d,n.deferredData),i[d]=n.deferredData.data,null==n.statusCode||200===n.statusCode||s||(l=n.statusCode),n.headers&&(c[d]=n.headers)):(i[d]=n.data,n.statusCode&&200!==n.statusCode&&!s&&(l=n.statusCode),n.headers&&(c[d]=n.headers))})),void 0!==f&&r&&(u={[r[0]]:f},i[r[0]]=void 0),{loaderData:i,errors:u,statusCode:l||200,loaderHeaders:c}}(t,n,r,a,i,!1);for(let t=0;t<o.length;t++){let{key:n,match:r,controller:a}=o[t];h(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let i=l[t];if(!a||!a.signal.aborted)if(Le(i)){let t=xe(e.matches,null==r?void 0:r.route.id);s&&s[t.route.id]||(s=d({},s,{[t.route.id]:i.error})),e.fetchers.delete(n)}else if(Oe(i))h(!1,"Unhandled fetcher revalidation redirect");else if(Te(i))h(!1,"Unhandled fetcher deferred data");else{let t=Be(i.data);e.fetchers.set(n,t)}}return{loaderData:u,errors:s}}function ke(e,t,n,r){let a=d({},t);for(let o of n){let n=o.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function Ee(e){return e?Le(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function xe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Ce(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function _e(e,t){let{pathname:n,routeId:r,method:a,type:o,message:l}=void 0===t?{}:t,i="Unknown Server Error",u="Unknown @remix-run/router error";return 400===e?(i="Bad Request","route-discovery"===o?u='Unable to match URL "'+n+'" - the `children()` function for route `'+r+"` threw the following error:\n"+l:a&&n&&r?u="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===o?u="defer() is not supported in actions":"invalid-body"===o&&(u="Unable to encode submission body")):403===e?(i="Forbidden",u='Route "'+r+'" does not match URL "'+n+'"'):404===e?(i="Not Found",u='No route matches URL "'+n+'"'):405===e&&(i="Method Not Allowed",a&&n&&r?u="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(u='Invalid request method "'+a.toUpperCase()+'"')),new Q(e||500,i,new Error(u),!0)}function Re(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(Oe(n))return{result:n,idx:t}}}function Pe(e){return g(d({},"string"==typeof e?b(e):e,{hash:""}))}function Te(e){return e.type===w.deferred}function Le(e){return e.type===w.error}function Oe(e){return(e&&e.type)===w.redirect}function Ne(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function De(e){return Y.has(e.toLowerCase())}async function ze(e,t,n,r,a,o){for(let l=0;l<n.length;l++){let i=n[l],u=t[l];if(!u)continue;let s=e.find((e=>e.route.id===u.route.id)),c=null!=s&&!ce(s,u)&&void 0!==(o&&o[u.route.id]);if(Te(i)&&(a||c)){let e=r[l];h(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await Me(i,e,a).then((e=>{e&&(n[l]=e||n[l])}))}}}async function Me(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:w.data,data:e.deferredData.unwrappedData}}catch(e){return{type:w.error,error:e}}return{type:w.data,data:e.deferredData.data}}}function Fe(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Ae(e,t){let n="string"==typeof t?b(t).search:t.search;if(e[e.length-1].route.index&&Fe(n||""))return e[e.length-1];let r=I(e);return r[r.length-1]}function Ue(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:l}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==l?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:l,text:void 0}:void 0}function je(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Ie(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Be(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function He(){return He=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},He.apply(this,arguments)}Symbol("deferred");const Ve=i.createContext(null),$e=i.createContext(null),We=i.createContext(null),qe=i.createContext(null),Qe=i.createContext({outlet:null,matches:[],isDataRoute:!1}),Ke=i.createContext(null);function Je(){return null!=i.useContext(qe)}function Ye(){return Je()||h(!1),i.useContext(qe).location}function Xe(e){i.useContext(We).static||i.useLayoutEffect(e)}function Ge(){let{isDataRoute:e}=i.useContext(Qe);return e?function(){let{router:e}=function(e){let t=i.useContext(Ve);return t||h(!1),t}(ot.UseNavigateStable),t=it(lt.UseNavigateStable),n=i.useRef(!1);Xe((()=>{n.current=!0}));let r=i.useCallback((function(r,a){void 0===a&&(a={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,He({fromRouteId:t},a)))}),[e,t]);return r}():function(){Je()||h(!1);let e=i.useContext(Ve),{basename:t,future:n,navigator:r}=i.useContext(We),{matches:a}=i.useContext(Qe),{pathname:o}=Ye(),l=JSON.stringify(B(a,n.v7_relativeSplatPath)),u=i.useRef(!1);return Xe((()=>{u.current=!0})),i.useCallback((function(n,a){if(void 0===a&&(a={}),!u.current)return;if("number"==typeof n)return void r.go(n);let i=H(n,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:V([t,i.pathname])),(a.replace?r.replace:r.push)(i,a.state,a)}),[t,r,l,o,e])}()}const Ze=i.createContext(null);function et(e,t,n,r){Je()||h(!1);let{navigator:a}=i.useContext(We),{matches:o}=i.useContext(Qe),u=o[o.length-1],s=u?u.params:{},c=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,d=Ye();if(t){var p;let e="string"==typeof t?b(t):t;"/"===c||(null==(p=e.pathname)?void 0:p.startsWith(c))||h(!1),f=e}else f=d;let m=f.pathname||"/",y=m;if("/"!==c){let e=c.replace(/^\//,"").split("/");y="/"+m.replace(/^\//,"").split("/").slice(e.length).join("/")}let v=E(e,{pathname:y}),g=function(e,t,n,r){var a;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===r&&(r=null),null==e){var o;if(null==(o=n)||!o.errors)return null;e=n.matches}let l=e,u=null==(a=n)?void 0:a.errors;if(null!=u){let e=l.findIndex((e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id])));e>=0||h(!1),l=l.slice(0,Math.min(l.length,e+1))}let s=!1,c=-1;if(n&&r&&r.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(c=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){s=!0,l=c>=0?l.slice(0,c+1):[l[0]];break}}}return l.reduceRight(((e,r,a)=>{let o,f=!1,d=null,p=null;var h;n&&(o=u&&r.route.id?u[r.route.id]:void 0,d=r.route.errorElement||nt,s&&(c<0&&0===a?(ut[h="route-fallback"]||(ut[h]=!0),f=!0,p=null):c===a&&(f=!0,p=r.route.hydrateFallbackElement||null)));let m=t.concat(l.slice(0,a+1)),y=()=>{let t;return t=o?d:f?p:r.route.Component?i.createElement(r.route.Component,null):r.route.element?r.route.element:e,i.createElement(at,{match:r,routeContext:{outlet:e,matches:m,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?i.createElement(rt,{location:n.location,revalidation:n.revalidation,component:d,error:o,children:y(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):y()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:V([c,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:V([c,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,n,r);return t&&g?i.createElement(qe.Provider,{value:{location:He({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:l.Pop}},g):g}function tt(){let e=function(){var e;let t=i.useContext(Ke),n=function(e){let t=i.useContext($e);return t||h(!1),t}(lt.UseRouteError),r=it(lt.UseRouteError);return void 0!==t?t:null==(e=n.errors)?void 0:e[r]}(),t=K(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return i.createElement(i.Fragment,null,i.createElement("h2",null,"Unexpected Application Error!"),i.createElement("h3",{style:{fontStyle:"italic"}},t),n?i.createElement("pre",{style:r},n):null,null)}const nt=i.createElement(tt,null);class rt extends i.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?i.createElement(Qe.Provider,{value:this.props.routeContext},i.createElement(Ke.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function at(e){let{routeContext:t,match:n,children:r}=e,a=i.useContext(Ve);return a&&a.static&&a.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=n.route.id),i.createElement(Qe.Provider,{value:t},r)}var ot=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ot||{}),lt=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(lt||{});function it(e){let t=function(e){let t=i.useContext(Qe);return t||h(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||h(!1),n.route.id}const ut={};function st(e){return function(e){let t=i.useContext(Qe).outlet;return t?i.createElement(Ze.Provider,{value:e},t):t}(e.context)}function ct(e){let{basename:t="/",children:n=null,location:r,navigationType:a=l.Pop,navigator:o,static:u=!1,future:s}=e;Je()&&h(!1);let c=t.replace(/^\/*/,"/"),f=i.useMemo((()=>({basename:c,navigator:o,static:u,future:He({v7_relativeSplatPath:!1},s)})),[c,s,o,u]);"string"==typeof r&&(r=b(r));let{pathname:d="/",search:p="",hash:m="",state:y=null,key:v="default"}=r,g=i.useMemo((()=>{let e=U(d,c);return null==e?null:{location:{pathname:e,search:p,hash:m,state:y,key:v},navigationType:a}}),[c,d,p,m,y,v,a]);return null==g?null:i.createElement(We.Provider,{value:f},i.createElement(qe.Provider,{children:n,value:g}))}function ft(){return ft=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ft.apply(this,arguments)}u.startTransition,new Promise((()=>{})),i.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);try{window.__reactRouterVersion="6"}catch(e){}function dt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new Q(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}const pt=i.createContext({isTransitioning:!1}),ht=i.createContext(new Map),mt=u.startTransition,yt=c.flushSync;function vt(e){yt?yt(e):e()}u.useId;class gt{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function bt(e){let{fallbackElement:t,router:n,future:r}=e,[a,o]=i.useState(n.state),[l,u]=i.useState(),[s,c]=i.useState({isTransitioning:!1}),[f,d]=i.useState(),[p,h]=i.useState(),[m,y]=i.useState(),v=i.useRef(new Map),{v7_startTransition:g}=r||{},b=i.useCallback((e=>{g?function(e){mt?mt(e):e()}(e):e()}),[g]),w=i.useCallback(((e,t)=>{let{deletedFetchers:r,unstable_flushSync:a,unstable_viewTransitionOpts:l}=t;r.forEach((e=>v.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&v.current.set(t,e.data)}));let i=null==n.window||null==n.window.document||"function"!=typeof n.window.document.startViewTransition;if(l&&!i){if(a){vt((()=>{p&&(f&&f.resolve(),p.skipTransition()),c({isTransitioning:!0,flushSync:!0,currentLocation:l.currentLocation,nextLocation:l.nextLocation})}));let t=n.window.document.startViewTransition((()=>{vt((()=>o(e)))}));return t.finished.finally((()=>{vt((()=>{d(void 0),h(void 0),u(void 0),c({isTransitioning:!1})}))})),void vt((()=>h(t)))}p?(f&&f.resolve(),p.skipTransition(),y({state:e,currentLocation:l.currentLocation,nextLocation:l.nextLocation})):(u(e),c({isTransitioning:!0,flushSync:!1,currentLocation:l.currentLocation,nextLocation:l.nextLocation}))}else a?vt((()=>o(e))):b((()=>o(e)))}),[n.window,p,f,v,b]);i.useLayoutEffect((()=>n.subscribe(w)),[n,w]),i.useEffect((()=>{s.isTransitioning&&!s.flushSync&&d(new gt)}),[s]),i.useEffect((()=>{if(f&&l&&n.window){let e=l,t=f.promise,r=n.window.document.startViewTransition((async()=>{b((()=>o(e))),await t}));r.finished.finally((()=>{d(void 0),h(void 0),u(void 0),c({isTransitioning:!1})})),h(r)}}),[b,l,f,n.window]),i.useEffect((()=>{f&&l&&a.location.key===l.location.key&&f.resolve()}),[f,p,a.location,l]),i.useEffect((()=>{!s.isTransitioning&&m&&(u(m.state),c({isTransitioning:!0,flushSync:!1,currentLocation:m.currentLocation,nextLocation:m.nextLocation}),y(void 0))}),[s.isTransitioning,m]),i.useEffect((()=>{}),[]);let S=i.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),k=n.basename||"/",E=i.useMemo((()=>({router:n,navigator:S,static:!1,basename:k})),[n,S,k]);return i.createElement(i.Fragment,null,i.createElement(Ve.Provider,{value:E},i.createElement($e.Provider,{value:a},i.createElement(ht.Provider,{value:v.current},i.createElement(pt.Provider,{value:s},i.createElement(ct,{basename:k,location:a.location,navigationType:a.historyAction,navigator:S,future:{v7_relativeSplatPath:n.future.v7_relativeSplatPath}},a.initialized||n.future.v7_partialHydration?i.createElement(wt,{routes:n.routes,future:n.future,state:a}):t))))),null)}function wt(e){let{routes:t,future:n,state:r}=e;return et(t,void 0,r,n)}var St,kt;function Et(e,t){return function(){return e.apply(t,arguments)}}"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"}(St||(St={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(kt||(kt={}));const{toString:xt}=Object.prototype,{getPrototypeOf:Ct}=Object,_t=(Rt=Object.create(null),e=>{const t=xt.call(e);return Rt[t]||(Rt[t]=t.slice(8,-1).toLowerCase())});var Rt;const Pt=e=>(e=e.toLowerCase(),t=>_t(t)===e),Tt=e=>t=>typeof t===e,{isArray:Lt}=Array,Ot=Tt("undefined"),Nt=Pt("ArrayBuffer"),Dt=Tt("string"),zt=Tt("function"),Mt=Tt("number"),Ft=e=>null!==e&&"object"==typeof e,At=e=>{if("object"!==_t(e))return!1;const t=Ct(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Ut=Pt("Date"),jt=Pt("File"),It=Pt("Blob"),Bt=Pt("FileList"),Ht=Pt("URLSearchParams"),[Vt,$t,Wt,qt]=["ReadableStream","Request","Response","Headers"].map(Pt);function Qt(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,a;if("object"!=typeof e&&(e=[e]),Lt(e))for(r=0,a=e.length;r<a;r++)t.call(null,e[r],r,e);else{const a=n?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let l;for(r=0;r<o;r++)l=a[r],t.call(null,e[l],l,e)}}function Kt(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,a=n.length;for(;a-- >0;)if(r=n[a],t===r.toLowerCase())return r;return null}const Jt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Yt=e=>!Ot(e)&&e!==Jt,Xt=(Gt="undefined"!=typeof Uint8Array&&Ct(Uint8Array),e=>Gt&&e instanceof Gt);var Gt;const Zt=Pt("HTMLFormElement"),en=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),tn=Pt("RegExp"),nn=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};Qt(n,((n,a)=>{let o;!1!==(o=t(n,a,e))&&(r[a]=o||n)})),Object.defineProperties(e,r)},rn="abcdefghijklmnopqrstuvwxyz",an="0123456789",on={DIGIT:an,ALPHA:rn,ALPHA_DIGIT:rn+rn.toUpperCase()+an},ln=Pt("AsyncFunction"),un={isArray:Lt,isArrayBuffer:Nt,isBuffer:function(e){return null!==e&&!Ot(e)&&null!==e.constructor&&!Ot(e.constructor)&&zt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||zt(e.append)&&("formdata"===(t=_t(e))||"object"===t&&zt(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Nt(e.buffer),t},isString:Dt,isNumber:Mt,isBoolean:e=>!0===e||!1===e,isObject:Ft,isPlainObject:At,isReadableStream:Vt,isRequest:$t,isResponse:Wt,isHeaders:qt,isUndefined:Ot,isDate:Ut,isFile:jt,isBlob:It,isRegExp:tn,isFunction:zt,isStream:e=>Ft(e)&&zt(e.pipe),isURLSearchParams:Ht,isTypedArray:Xt,isFileList:Bt,forEach:Qt,merge:function e(){const{caseless:t}=Yt(this)&&this||{},n={},r=(r,a)=>{const o=t&&Kt(n,a)||a;At(n[o])&&At(r)?n[o]=e(n[o],r):At(r)?n[o]=e({},r):Lt(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&Qt(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(Qt(t,((t,r)=>{n&&zt(t)?e[r]=Et(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let a,o,l;const i={};if(t=t||{},null==e)return t;do{for(a=Object.getOwnPropertyNames(e),o=a.length;o-- >0;)l=a[o],r&&!r(l,e,t)||i[l]||(t[l]=e[l],i[l]=!0);e=!1!==n&&Ct(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:_t,kindOfTest:Pt,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(Lt(e))return e;let t=e.length;if(!Mt(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Zt,hasOwnProperty:en,hasOwnProp:en,reduceDescriptors:nn,freezeMethods:e=>{nn(e,((t,n)=>{if(zt(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];zt(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return Lt(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:Kt,global:Jt,isContextDefined:Yt,ALPHABET:on,generateString:(e=16,t=on.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&zt(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(Ft(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const a=Lt(e)?[]:{};return Qt(e,((e,t)=>{const o=n(e,r+1);!Ot(o)&&(a[t]=o)})),t[r]=void 0,a}}return e};return n(e,0)},isAsyncFn:ln,isThenable:e=>e&&(Ft(e)||zt(e))&&zt(e.then)&&zt(e.catch)};function sn(e,t,n,r,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),a&&(this.response=a)}un.inherits(sn,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:un.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const cn=sn.prototype,fn={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{fn[e]={value:e}})),Object.defineProperties(sn,fn),Object.defineProperty(cn,"isAxiosError",{value:!0}),sn.from=(e,t,n,r,a,o)=>{const l=Object.create(cn);return un.toFlatObject(e,l,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),sn.call(l,e.message,t,n,r,a),l.cause=e,l.name=e.name,o&&Object.assign(l,o),l};const dn=sn;function pn(e){return un.isPlainObject(e)||un.isArray(e)}function hn(e){return un.endsWith(e,"[]")?e.slice(0,-2):e}function mn(e,t,n){return e?e.concat(t).map((function(e,t){return e=hn(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const yn=un.toFlatObject(un,{},null,(function(e){return/^is[A-Z]/.test(e)})),vn=function(e,t,n){if(!un.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=un.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!un.isUndefined(t[e])}))).metaTokens,a=n.visitor||s,o=n.dots,l=n.indexes,i=(n.Blob||"undefined"!=typeof Blob&&Blob)&&un.isSpecCompliantForm(t);if(!un.isFunction(a))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(un.isDate(e))return e.toISOString();if(!i&&un.isBlob(e))throw new dn("Blob is not supported. Use a Buffer instead.");return un.isArrayBuffer(e)||un.isTypedArray(e)?i&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,a){let i=e;if(e&&!a&&"object"==typeof e)if(un.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(un.isArray(e)&&function(e){return un.isArray(e)&&!e.some(pn)}(e)||(un.isFileList(e)||un.endsWith(n,"[]"))&&(i=un.toArray(e)))return n=hn(n),i.forEach((function(e,r){!un.isUndefined(e)&&null!==e&&t.append(!0===l?mn([n],r,o):null===l?n:n+"[]",u(e))})),!1;return!!pn(e)||(t.append(mn(a,n,o),u(e)),!1)}const c=[],f=Object.assign(yn,{defaultVisitor:s,convertValue:u,isVisitable:pn});if(!un.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!un.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),un.forEach(n,(function(n,o){!0===(!(un.isUndefined(n)||null===n)&&a.call(t,n,un.isString(o)?o.trim():o,r,f))&&e(n,r?r.concat(o):[o])})),c.pop()}}(e),t};function gn(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function bn(e,t){this._pairs=[],e&&vn(e,this,t)}const wn=bn.prototype;wn.append=function(e,t){this._pairs.push([e,t])},wn.toString=function(e){const t=e?function(t){return e.call(this,t,gn)}:gn;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Sn=bn;function kn(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function En(e,t,n){if(!t)return e;const r=n&&n.encode||kn,a=n&&n.serialize;let o;if(o=a?a(t,n):un.isURLSearchParams(t)?t.toString():new Sn(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const xn=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){un.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Cn={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},_n={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Sn,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Rn="undefined"!=typeof window&&"undefined"!=typeof document,Pn=(Tn="undefined"!=typeof navigator&&navigator.product,Rn&&["ReactNative","NativeScript","NS"].indexOf(Tn)<0);var Tn;const Ln="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,On=Rn&&window.location.href||"http://localhost",Nn={...o,..._n},Dn=function(e){function t(e,n,r,a){let o=e[a++];if("__proto__"===o)return!0;const l=Number.isFinite(+o),i=a>=e.length;return o=!o&&un.isArray(r)?r.length:o,i?(un.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!l):(r[o]&&un.isObject(r[o])||(r[o]=[]),t(e,n,r[o],a)&&un.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const a=n.length;let o;for(r=0;r<a;r++)o=n[r],t[o]=e[o];return t}(r[o])),!l)}if(un.isFormData(e)&&un.isFunction(e.entries)){const n={};return un.forEachEntry(e,((e,r)=>{t(function(e){return un.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},zn={transitional:Cn,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,a=un.isObject(e);if(a&&un.isHTMLForm(e)&&(e=new FormData(e)),un.isFormData(e))return r?JSON.stringify(Dn(e)):e;if(un.isArrayBuffer(e)||un.isBuffer(e)||un.isStream(e)||un.isFile(e)||un.isBlob(e)||un.isReadableStream(e))return e;if(un.isArrayBufferView(e))return e.buffer;if(un.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(a){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return vn(e,new Nn.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Nn.isNode&&un.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=un.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return vn(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return a||r?(t.setContentType("application/json",!1),function(e,t,n){if(un.isString(e))try{return(0,JSON.parse)(e),un.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||zn.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(un.isResponse(e)||un.isReadableStream(e))return e;if(e&&un.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw dn.from(e,dn.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Nn.classes.FormData,Blob:Nn.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};un.forEach(["delete","get","head","post","put","patch"],(e=>{zn.headers[e]={}}));const Mn=zn,Fn=un.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),An=Symbol("internals");function Un(e){return e&&String(e).trim().toLowerCase()}function jn(e){return!1===e||null==e?e:un.isArray(e)?e.map(jn):String(e)}function In(e,t,n,r,a){return un.isFunction(r)?r.call(this,t,n):(a&&(t=n),un.isString(t)?un.isString(r)?-1!==t.indexOf(r):un.isRegExp(r)?r.test(t):void 0:void 0)}class Bn{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function a(e,t,n){const a=Un(t);if(!a)throw new Error("header name must be a non-empty string");const o=un.findKey(r,a);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=jn(e))}const o=(e,t)=>un.forEach(e,((e,n)=>a(e,n,t)));if(un.isPlainObject(e)||e instanceof this.constructor)o(e,t);else if(un.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const t={};let n,r,a;return e&&e.split("\n").forEach((function(e){a=e.indexOf(":"),n=e.substring(0,a).trim().toLowerCase(),r=e.substring(a+1).trim(),!n||t[n]&&Fn[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(un.isHeaders(e))for(const[t,r]of e.entries())a(r,t,n);else null!=e&&a(t,e,n);return this}get(e,t){if(e=Un(e)){const n=un.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(un.isFunction(t))return t.call(this,e,n);if(un.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Un(e)){const n=un.findKey(this,e);return!(!n||void 0===this[n]||t&&!In(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function a(e){if(e=Un(e)){const a=un.findKey(n,e);!a||t&&!In(0,n[a],a,t)||(delete n[a],r=!0)}}return un.isArray(e)?e.forEach(a):a(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const a=t[n];e&&!In(0,this[a],a,e,!0)||(delete this[a],r=!0)}return r}normalize(e){const t=this,n={};return un.forEach(this,((r,a)=>{const o=un.findKey(n,a);if(o)return t[o]=jn(r),void delete t[a];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(a):String(a).trim();l!==a&&delete t[a],t[l]=jn(r),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return un.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&un.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[An]=this[An]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Un(e);t[r]||(function(e,t){const n=un.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,a){return this[r].call(this,t,e,n,a)},configurable:!0})}))}(n,e),t[r]=!0)}return un.isArray(e)?e.forEach(r):r(e),this}}Bn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),un.reduceDescriptors(Bn.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),un.freezeMethods(Bn);const Hn=Bn;function Vn(e,t){const n=this||Mn,r=t||n,a=Hn.from(r.headers);let o=r.data;return un.forEach(e,(function(e){o=e.call(n,o,a.normalize(),t?t.status:void 0)})),a.normalize(),o}function $n(e){return!(!e||!e.__CANCEL__)}function Wn(e,t,n){dn.call(this,null==e?"canceled":e,dn.ERR_CANCELED,t,n),this.name="CanceledError"}un.inherits(Wn,dn,{__CANCEL__:!0});const qn=Wn;function Qn(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new dn("Request failed with status code "+n.status,[dn.ERR_BAD_REQUEST,dn.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const Kn=(e,t,n=3)=>{let r=0;const a=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let a,o=0,l=0;return t=void 0!==t?t:1e3,function(i){const u=Date.now(),s=r[l];a||(a=u),n[o]=i,r[o]=u;let c=l,f=0;for(;c!==o;)f+=n[c++],c%=e;if(o=(o+1)%e,o===l&&(l=(l+1)%e),u-a<t)return;const d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return function(e,t){let n=0;const r=1e3/t;let a=null;return function(){const t=!0===this,o=Date.now();if(t||o-n>r)return a&&(clearTimeout(a),a=null),n=o,e.apply(null,arguments);a||(a=setTimeout((()=>(a=null,n=Date.now(),e.apply(null,arguments))),r-(o-n)))}}((n=>{const o=n.loaded,l=n.lengthComputable?n.total:void 0,i=o-r,u=a(i);r=o;const s={loaded:o,total:l,progress:l?o/l:void 0,bytes:i,rate:u||void 0,estimated:u&&l&&o<=l?(l-o)/u:void 0,event:n,lengthComputable:null!=l};s[t?"download":"upload"]=!0,e(s)}),n)},Jn=Nn.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=un.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},Yn=Nn.hasStandardBrowserEnv?{write(e,t,n,r,a,o){const l=[e+"="+encodeURIComponent(t)];un.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),un.isString(r)&&l.push("path="+r),un.isString(a)&&l.push("domain="+a),!0===o&&l.push("secure"),document.cookie=l.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Xn(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Gn=e=>e instanceof Hn?{...e}:e;function Zn(e,t){t=t||{};const n={};function r(e,t,n){return un.isPlainObject(e)&&un.isPlainObject(t)?un.merge.call({caseless:n},e,t):un.isPlainObject(t)?un.merge({},t):un.isArray(t)?t.slice():t}function a(e,t,n){return un.isUndefined(t)?un.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function o(e,t){if(!un.isUndefined(t))return r(void 0,t)}function l(e,t){return un.isUndefined(t)?un.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function i(n,a,o){return o in t?r(n,a):o in e?r(void 0,n):void 0}const u={url:o,method:o,data:o,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:i,headers:(e,t)=>a(Gn(e),Gn(t),!0)};return un.forEach(Object.keys(Object.assign({},e,t)),(function(r){const o=u[r]||a,l=o(e[r],t[r],r);un.isUndefined(l)&&o!==i||(n[r]=l)})),n}const er=e=>{const t=Zn({},e);let n,{data:r,withXSRFToken:a,xsrfHeaderName:o,xsrfCookieName:l,headers:i,auth:u}=t;if(t.headers=i=Hn.from(i),t.url=En(Xn(t.baseURL,t.url),e.params,e.paramsSerializer),u&&i.set("Authorization","Basic "+btoa((u.username||"")+":"+(u.password?unescape(encodeURIComponent(u.password)):""))),un.isFormData(r))if(Nn.hasStandardBrowserEnv||Nn.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if(!1!==(n=i.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];i.setContentType([e||"multipart/form-data",...t].join("; "))}if(Nn.hasStandardBrowserEnv&&(a&&un.isFunction(a)&&(a=a(t)),a||!1!==a&&Jn(t.url))){const e=o&&l&&Yn.read(l);e&&i.set(o,e)}return t},tr="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=er(e);let a=r.data;const o=Hn.from(r.headers).normalize();let l,{responseType:i}=r;function u(){r.cancelToken&&r.cancelToken.unsubscribe(l),r.signal&&r.signal.removeEventListener("abort",l)}let s=new XMLHttpRequest;function c(){if(!s)return;const r=Hn.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());Qn((function(e){t(e),u()}),(function(e){n(e),u()}),{data:i&&"text"!==i&&"json"!==i?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:r,config:e,request:s}),s=null}s.open(r.method.toUpperCase(),r.url,!0),s.timeout=r.timeout,"onloadend"in s?s.onloadend=c:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(c)},s.onabort=function(){s&&(n(new dn("Request aborted",dn.ECONNABORTED,r,s)),s=null)},s.onerror=function(){n(new dn("Network Error",dn.ERR_NETWORK,r,s)),s=null},s.ontimeout=function(){let e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const t=r.transitional||Cn;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new dn(e,t.clarifyTimeoutError?dn.ETIMEDOUT:dn.ECONNABORTED,r,s)),s=null},void 0===a&&o.setContentType(null),"setRequestHeader"in s&&un.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),un.isUndefined(r.withCredentials)||(s.withCredentials=!!r.withCredentials),i&&"json"!==i&&(s.responseType=r.responseType),"function"==typeof r.onDownloadProgress&&s.addEventListener("progress",Kn(r.onDownloadProgress,!0)),"function"==typeof r.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",Kn(r.onUploadProgress)),(r.cancelToken||r.signal)&&(l=t=>{s&&(n(!t||t.type?new qn(null,e,s):t),s.abort(),s=null)},r.cancelToken&&r.cancelToken.subscribe(l),r.signal&&(r.signal.aborted?l():r.signal.addEventListener("abort",l)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);f&&-1===Nn.protocols.indexOf(f)?n(new dn("Unsupported protocol "+f+":",dn.ERR_BAD_REQUEST,e)):s.send(a||null)}))},nr=(e,t)=>{let n,r=new AbortController;const a=function(e){if(!n){n=!0,l();const t=e instanceof Error?e:this.reason;r.abort(t instanceof dn?t:new qn(t instanceof Error?t.message:t))}};let o=t&&setTimeout((()=>{a(new dn(`timeout ${t} of ms exceeded`,dn.ETIMEDOUT))}),t);const l=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach((e=>{e&&(e.removeEventListener?e.removeEventListener("abort",a):e.unsubscribe(a))})),e=null)};e.forEach((e=>e&&e.addEventListener&&e.addEventListener("abort",a)));const{signal:i}=r;return i.unsubscribe=l,[i,()=>{o&&clearTimeout(o),o=null}]},rr=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,a=0;for(;a<n;)r=a+t,yield e.slice(a,r),a=r},ar=(e,t,n,r,a)=>{const o=async function*(e,t,n){for await(const r of e)yield*rr(ArrayBuffer.isView(r)?r:await n(String(r)),t)}(e,t,a);let l=0;return new ReadableStream({type:"bytes",async pull(e){const{done:t,value:a}=await o.next();if(t)return e.close(),void r();let i=a.byteLength;n&&n(l+=i),e.enqueue(new Uint8Array(a))},cancel:e=>(r(e),o.return())},{highWaterMark:2})},or=(e,t)=>{const n=null!=e;return r=>setTimeout((()=>t({lengthComputable:n,total:e,loaded:r})))},lr="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,ir=lr&&"function"==typeof ReadableStream,ur=lr&&("function"==typeof TextEncoder?(sr=new TextEncoder,e=>sr.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var sr;const cr=ir&&(()=>{let e=!1;const t=new Request(Nn.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),fr=ir&&!!(()=>{try{return un.isReadableStream(new Response("").body)}catch(e){}})(),dr={stream:fr&&(e=>e.body)};var pr;lr&&(pr=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!dr[e]&&(dr[e]=un.isFunction(pr[e])?t=>t[e]():(t,n)=>{throw new dn(`Response type '${e}' is not supported`,dn.ERR_NOT_SUPPORT,n)})})));const hr=lr&&(async e=>{let{url:t,method:n,data:r,signal:a,cancelToken:o,timeout:l,onDownloadProgress:i,onUploadProgress:u,responseType:s,headers:c,withCredentials:f="same-origin",fetchOptions:d}=er(e);s=s?(s+"").toLowerCase():"text";let p,h,[m,y]=a||o||l?nr([a,o],l):[];const v=()=>{!p&&setTimeout((()=>{m&&m.unsubscribe()})),p=!0};let g;try{if(u&&cr&&"get"!==n&&"head"!==n&&0!==(g=await(async(e,t)=>{const n=un.toFiniteNumber(e.getContentLength());return null==n?(async e=>null==e?0:un.isBlob(e)?e.size:un.isSpecCompliantForm(e)?(await new Request(e).arrayBuffer()).byteLength:un.isArrayBufferView(e)?e.byteLength:(un.isURLSearchParams(e)&&(e+=""),un.isString(e)?(await ur(e)).byteLength:void 0))(t):n})(c,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});un.isFormData(r)&&(e=n.headers.get("content-type"))&&c.setContentType(e),n.body&&(r=ar(n.body,65536,or(g,Kn(u)),null,ur))}un.isString(f)||(f=f?"cors":"omit"),h=new Request(t,{...d,signal:m,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",withCredentials:f});let a=await fetch(h);const o=fr&&("stream"===s||"response"===s);if(fr&&(i||o)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=a[t]}));const t=un.toFiniteNumber(a.headers.get("content-length"));a=new Response(ar(a.body,65536,i&&or(t,Kn(i,!0)),o&&v,ur),e)}s=s||"text";let l=await dr[un.findKey(dr,s)||"text"](a,e);return!o&&v(),y&&y(),await new Promise(((t,n)=>{Qn(t,n,{data:l,headers:Hn.from(a.headers),status:a.status,statusText:a.statusText,config:e,request:h})}))}catch(t){if(v(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new dn("Network Error",dn.ERR_NETWORK,e,h),{cause:t.cause||t});throw dn.from(t,t&&t.code,e,h)}}),mr={http:null,xhr:tr,fetch:hr};un.forEach(mr,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const yr=e=>`- ${e}`,vr=e=>un.isFunction(e)||null===e||!1===e,gr=e=>{e=un.isArray(e)?e:[e];const{length:t}=e;let n,r;const a={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!vr(n)&&(r=mr[(t=String(n)).toLowerCase()],void 0===r))throw new dn(`Unknown adapter '${t}'`);if(r)break;a[t||"#"+o]=r}if(!r){const e=Object.entries(a).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(yr).join("\n"):" "+yr(e[0]):"as no adapter specified";throw new dn("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function br(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new qn(null,e)}function wr(e){return br(e),e.headers=Hn.from(e.headers),e.data=Vn.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),gr(e.adapter||Mn.adapter)(e).then((function(t){return br(e),t.data=Vn.call(e,e.transformResponse,t),t.headers=Hn.from(t.headers),t}),(function(t){return $n(t)||(br(e),t&&t.response&&(t.response.data=Vn.call(e,e.transformResponse,t.response),t.response.headers=Hn.from(t.response.headers))),Promise.reject(t)}))}const Sr={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Sr[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const kr={};Sr.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,a,o)=>{if(!1===e)throw new dn(r(a," has been removed"+(t?" in "+t:"")),dn.ERR_DEPRECATED);return t&&!kr[a]&&(kr[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,a,o)}};const Er={assertOptions:function(e,t,n){if("object"!=typeof e)throw new dn("options must be an object",dn.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let a=r.length;for(;a-- >0;){const o=r[a],l=t[o];if(l){const t=e[o],n=void 0===t||l(t,o,e);if(!0!==n)throw new dn("option "+o+" must be "+n,dn.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new dn("Unknown option "+o,dn.ERR_BAD_OPTION)}},validators:Sr},xr=Er.validators;class Cr{constructor(e){this.defaults=e,this.interceptors={request:new xn,response:new xn}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Zn(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:a}=t;void 0!==n&&Er.assertOptions(n,{silentJSONParsing:xr.transitional(xr.boolean),forcedJSONParsing:xr.transitional(xr.boolean),clarifyTimeoutError:xr.transitional(xr.boolean)},!1),null!=r&&(un.isFunction(r)?t.paramsSerializer={serialize:r}:Er.assertOptions(r,{encode:xr.function,serialize:xr.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=a&&un.merge(a.common,a[t.method]);a&&un.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete a[e]})),t.headers=Hn.concat(o,a);const l=[];let i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,l.unshift(e.fulfilled,e.rejected))}));const u=[];let s;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let c,f=0;if(!i){const e=[wr.bind(this),void 0];for(e.unshift.apply(e,l),e.push.apply(e,u),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=l.length;let d=t;for(f=0;f<c;){const e=l[f++],t=l[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=wr.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=u.length;f<c;)s=s.then(u[f++],u[f++]);return s}getUri(e){return En(Xn((e=Zn(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}un.forEach(["delete","get","head","options"],(function(e){Cr.prototype[e]=function(t,n){return this.request(Zn(n||{},{method:e,url:t,data:(n||{}).data}))}})),un.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,a){return this.request(Zn(a||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Cr.prototype[e]=t(),Cr.prototype[e+"Form"]=t(!0)}));const _r=Cr;class Rr{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,a){n.reason||(n.reason=new qn(e,r,a),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Rr((function(t){e=t})),cancel:e}}}const Pr=Rr,Tr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Tr).forEach((([e,t])=>{Tr[t]=e}));const Lr=Tr,Or=function e(t){const n=new _r(t),r=Et(_r.prototype.request,n);return un.extend(r,_r.prototype,n,{allOwnKeys:!0}),un.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Zn(t,n))},r}(Mn);Or.Axios=_r,Or.CanceledError=qn,Or.CancelToken=Pr,Or.isCancel=$n,Or.VERSION="1.7.2",Or.toFormData=vn,Or.AxiosError=dn,Or.Cancel=Or.CanceledError,Or.all=function(e){return Promise.all(e)},Or.spread=function(e){return function(t){return e.apply(null,t)}},Or.isAxiosError=function(e){return un.isObject(e)&&!0===e.isAxiosError},Or.mergeConfig=Zn,Or.AxiosHeaders=Hn,Or.formToJSON=e=>Dn(un.isHTMLForm(e)?new FormData(e):e),Or.getAdapter=gr,Or.HttpStatusCode=Lr,Or.default=Or;var Nr=Or.create({baseURL:"http://localhost:3000"});function Dr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(s)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Nr.interceptors.request.use((function(e){return e}),(function(e){return Promise.reject(e)})),Nr.interceptors.response.use((function(e){return e}),(function(e){return Promise.reject(e)}));const Mr=function(){var e=Dr((0,i.useState)(""),2),t=e[0],n=e[1],r=Dr((0,i.useState)(""),2),a=r[0],o=r[1],l=Ge();return i.createElement(i.Fragment,null,i.createElement("div",null,"登录页面"),i.createElement("label",null,"用户名："),i.createElement("input",{type:"text",value:t,onChange:function(e){n(e.target.value)}}),i.createElement("br",null),i.createElement("label",null,"密码："),i.createElement("input",{type:"password",value:a,onChange:function(e){o(e.target.value)}}),i.createElement("br",null),i.createElement("button",{onClick:function(){console.log("login"),Nr.post("/users/login",{userName:t,pwd:a}).then((function(e){console.log(e),l("/fileList")})).catch((function(e){console.log(e)}))}},"登录"))},Fr=function(){return i.createElement("div",null,"FileList")},Ar=function(){return i.createElement("div",null,i.createElement(st,null))};var Ur,jr;const Ir=(Ur=[{path:"/",element:i.createElement(Ar,null),children:[{path:"",element:i.createElement(Mr,null)},{path:"fileList",element:i.createElement(Fr,null)}]}],function(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement,r=!n;let a;if(h(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)a=e.mapRouteProperties;else if(e.detectErrorBoundary){let t=e.detectErrorBoundary;a=e=>({hasErrorBoundary:t(e)})}else a=oe;let o,i,u,s={},c=k(e.routes,a,void 0,s),f=e.basename||"/",p=e.unstable_dataStrategy||me,y=e.unstable_patchRoutesOnMiss,g=d({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,unstable_skipActionErrorRevalidation:!1},e.future),b=null,S=new Set,C=null,_=null,R=null,P=null!=e.hydrationData,T=E(c,e.history.location,f),L=null;if(null==T&&!y){let t=_e(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Ce(c);T=n,L={[r.id]:t}}if(T&&y&&ct(T,c,e.history.location.pathname).active&&(T=null),T)if(T.some((e=>e.route.lazy)))i=!1;else if(T.some((e=>e.route.loader)))if(g.v7_partialHydration){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null,r=e=>!e.route.loader||("function"!=typeof e.route.loader||!0!==e.route.loader.hydrate)&&(t&&void 0!==t[e.route.id]||n&&void 0!==n[e.route.id]);if(n){let e=T.findIndex((e=>void 0!==n[e.route.id]));i=T.slice(0,e+1).every(r)}else i=T.every(r)}else i=null!=e.hydrationData;else i=!0;else i=!1,T=[];let O,N={historyAction:e.history.action,location:e.history.location,matches:T,initialized:i,navigation:te,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||L,fetchers:new Map,blockers:new Map},D=l.Pop,z=!1,M=!1,F=new Map,A=null,j=!1,I=!1,B=[],H=[],V=new Map,$=0,W=-1,q=new Map,J=new Set,Y=new Map,X=new Map,G=new Set,ce=new Map,fe=new Map,be=new Map,we=!1;function Pe(e,t){void 0===t&&(t={}),N=d({},N,e);let n=[],r=[];g.v7_fetcherPersist&&N.fetchers.forEach(((e,t)=>{"idle"===e.state&&(G.has(t)?r.push(t):n.push(t))})),[...S].forEach((e=>e(N,{deletedFetchers:r,unstable_viewTransitionOpts:t.viewTransitionOpts,unstable_flushSync:!0===t.flushSync}))),g.v7_fetcherPersist&&(n.forEach((e=>N.fetchers.delete(e))),r.forEach((e=>Xe(e))))}function Fe(t,n,r){var a,i;let u,{flushSync:s}=void 0===r?{}:r,f=null!=N.actionData&&null!=N.navigation.formMethod&&De(N.navigation.formMethod)&&"loading"===N.navigation.state&&!0!==(null==(a=t.state)?void 0:a._isRedirect);u=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:f?N.actionData:null;let p=n.loaderData?ke(N.loaderData,n.loaderData,n.matches||[],n.errors):N.loaderData,h=N.blockers;h.size>0&&(h=new Map(h),h.forEach(((e,t)=>h.set(t,re))));let m,y=!0===z||null!=N.navigation.formMethod&&De(N.navigation.formMethod)&&!0!==(null==(i=t.state)?void 0:i._isRedirect);if(o&&(c=o,o=void 0),j||D===l.Pop||(D===l.Push?e.history.push(t,t.state):D===l.Replace&&e.history.replace(t,t.state)),D===l.Pop){let e=F.get(N.location.pathname);e&&e.has(t.pathname)?m={currentLocation:N.location,nextLocation:t}:F.has(t.pathname)&&(m={currentLocation:t,nextLocation:N.location})}else if(M){let e=F.get(N.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),F.set(N.location.pathname,e)),m={currentLocation:N.location,nextLocation:t}}Pe(d({},n,{actionData:u,loaderData:p,historyAction:D,location:t,initialized:!0,navigation:te,revalidation:"idle",restoreScrollPosition:st(t,n.matches||N.matches),preventScrollReset:y,blockers:h}),{viewTransitionOpts:m,flushSync:!0===s}),D=l.Pop,z=!1,M=!1,j=!1,I=!1,B=[],H=[]}async function He(t,n,r){O&&O.abort(),O=null,D=t,j=!0===(r&&r.startUninterruptedRevalidation),function(e,t){if(C&&R){let n=ut(e,t);C[n]=R()}}(N.location,N.matches),z=!0===(r&&r.preventScrollReset),M=!0===(r&&r.enableViewTransition);let a=o||c,i=r&&r.overrideNavigation,u=E(a,n,f),s=!0===(r&&r.flushSync),p=ct(u,a,n.pathname);if(p.active&&p.matches&&(u=p.matches),!u){let{error:e,notFoundMatches:t,route:r}=ot(n.pathname);return void Fe(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:s})}if(N.initialized&&!I&&(h=N.location,m=n,h.pathname===m.pathname&&h.search===m.search&&(""===h.hash?""!==m.hash:h.hash===m.hash||""!==m.hash))&&!(r&&r.submission&&De(r.submission.formMethod)))return void Fe(n,{matches:u},{flushSync:s});var h,m;O=new AbortController;let y,v=ge(e.history,n,O.signal,r&&r.submission);if(r&&r.pendingError)y=[xe(u).route.id,{type:w.error,error:r.pendingError}];else if(r&&r.submission&&De(r.submission.formMethod)){let t=await async function(e,t,n,r,a,o){void 0===o&&(o={}),Qe();let i,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(Pe({navigation:u},{flushSync:!0===o.flushSync}),a){let n=await ft(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let{error:e,notFoundMatches:r,route:a}=lt(t.pathname,n);return{matches:r,pendingActionResult:[a.id,{type:w.error,error:e}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=ot(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:w.error,error:n}]}}r=n.matches}let s=Ae(r,t);if(s.route.action||s.route.lazy){if(i=(await We("action",e,[s],r))[0],e.signal.aborted)return{shortCircuited:!0}}else i={type:w.error,error:_e(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(Oe(i)){let t;return t=o&&null!=o.replace?o.replace:ve(i.response.headers.get("Location"),new URL(e.url),f)===N.location.pathname+N.location.search,await $e(e,i,{submission:n,replace:t}),{shortCircuited:!0}}if(Te(i))throw _e(400,{type:"defer-action"});if(Le(i)){let e=xe(r,s.route.id);return!0!==(o&&o.replace)&&(D=l.Push),{matches:r,pendingActionResult:[e.route.id,i]}}return{matches:r,pendingActionResult:[s.route.id,i]}}(v,n,r.submission,u,p.active,{replace:r.replace,flushSync:s});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Le(r)&&K(r.error)&&404===r.error.status)return O=null,void Fe(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}u=t.matches||u,y=t.pendingActionResult,i=je(n,r.submission),s=!1,p.active=!1,v=ge(e.history,v.url,v.signal)}let{shortCircuited:b,matches:S,loaderData:k,errors:x}=await async function(t,n,r,a,l,i,u,s,p,h,m){let y=l||je(n,i),v=i||u||Ue(y),b=!(j||g.v7_partialHydration&&p);if(a){if(b){let e=Ve(m);Pe(d({navigation:y},void 0!==e?{actionData:e}:{}),{flushSync:h})}let e=await ft(r,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let{error:t,notFoundMatches:r,route:a}=lt(n.pathname,e);return{matches:r,loaderData:{},errors:{[a.id]:t}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=ot(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}r=e.matches}let w=o||c,[S,k]=se(e.history,N,r,v,n,g.v7_partialHydration&&!0===p,g.unstable_skipActionErrorRevalidation,I,B,H,G,Y,J,w,f,m);if(it((e=>!(r&&r.some((t=>t.route.id===e)))||S&&S.some((t=>t.route.id===e)))),W=++$,0===S.length&&0===k.length){let e=et();return Fe(n,d({matches:r,loaderData:{},errors:m&&Le(m[1])?{[m[0]]:m[1].error}:null},Ee(m),e?{fetchers:new Map(N.fetchers)}:{}),{flushSync:h}),{shortCircuited:!0}}if(b){let e={};if(!a){e.navigation=y;let t=Ve(m);void 0!==t&&(e.actionData=t)}k.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=N.fetchers.get(e.key),n=Ie(void 0,t?t.data:void 0);N.fetchers.set(e.key,n)})),new Map(N.fetchers)}(k)),Pe(e,{flushSync:h})}k.forEach((e=>{V.has(e.key)&&Ge(e.key),e.controller&&V.set(e.key,e.controller)}));let E=()=>k.forEach((e=>Ge(e.key)));O&&O.signal.addEventListener("abort",E);let{loaderResults:x,fetcherResults:C}=await qe(N.matches,r,S,k,t);if(t.signal.aborted)return{shortCircuited:!0};O&&O.signal.removeEventListener("abort",E),k.forEach((e=>V.delete(e.key)));let _=Re([...x,...C]);if(_){if(_.idx>=S.length){let e=k[_.idx-S.length].key;J.add(e)}return await $e(t,_.result,{replace:s}),{shortCircuited:!0}}let{loaderData:R,errors:P}=Se(N,r,S,x,m,k,C,ce);ce.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&ce.delete(t)}))})),g.v7_partialHydration&&p&&N.errors&&Object.entries(N.errors).filter((e=>{let[t]=e;return!S.some((e=>e.route.id===t))})).forEach((e=>{let[t,n]=e;P=Object.assign(P||{},{[t]:n})}));let T=et(),L=tt(W),D=T||L||k.length>0;return d({matches:r,loaderData:R,errors:P},D?{fetchers:new Map(N.fetchers)}:{})}(v,n,u,p.active,i,r&&r.submission,r&&r.fetcherSubmission,r&&r.replace,r&&!0===r.initialHydration,s,y);b||(O=null,Fe(n,d({matches:S||u},Ee(y),{loaderData:k,errors:x})))}function Ve(e){return e&&!Le(e[1])?{[e[0]]:e[1].data}:N.actionData?0===Object.keys(N.actionData).length?null:N.actionData:void 0}async function $e(r,a,o){let{submission:i,fetcherSubmission:u,replace:s}=void 0===o?{}:o;a.response.headers.has("X-Remix-Revalidate")&&(I=!0);let c=a.response.headers.get("Location");h(c,"Expected a Location header on the redirect Response"),c=ve(c,new URL(r.url),f);let p=v(N.location,c,{_isRedirect:!0});if(n){let n=!1;if(a.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(ae.test(c)){const r=e.history.createURL(c);n=r.origin!==t.location.origin||null==U(r.pathname,f)}if(n)return void(s?t.location.replace(c):t.location.assign(c))}O=null;let m=!0===s?l.Replace:l.Push,{formMethod:y,formAction:g,formEncType:b}=N.navigation;!i&&!u&&y&&g&&b&&(i=Ue(N.navigation));let w=i||u;if(ee.has(a.response.status)&&w&&De(w.formMethod))await He(m,p,{submission:d({},w,{formAction:c}),preventScrollReset:z});else{let e=je(p,i);await He(m,p,{overrideNavigation:e,fetcherSubmission:u,preventScrollReset:z})}}async function We(e,t,n,r){try{let o=await async function(e,t,n,r,a,o,l,i){let u=r.reduce(((e,t)=>e.add(t.route.id)),new Set),s=new Set,c=await e({matches:a.map((e=>{let r=u.has(e.route.id);return d({},e,{shouldLoad:r,resolve:a=>(s.add(e.route.id),r?async function(e,t,n,r,a,o,l){let i,u,s=r=>{let a,i=new Promise(((e,t)=>a=t));u=()=>a(),t.signal.addEventListener("abort",u);let s,c=a=>"function"!=typeof r?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+n.route.id+"]")):r({request:t,params:n.params,context:l},...void 0!==a?[a]:[]);return s=o?o((e=>c(e))):(async()=>{try{return{type:"data",result:await c()}}catch(e){return{type:"error",result:e}}})(),Promise.race([s,i])};try{let o=n.route[e];if(n.route.lazy)if(o){let e,[t]=await Promise.all([s(o).catch((t=>{e=t})),he(n.route,a,r)]);if(void 0!==e)throw e;i=t}else{if(await he(n.route,a,r),o=n.route[e],!o){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw _e(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:w.data,result:void 0}}i=await s(o)}else{if(!o){let e=new URL(t.url);throw _e(404,{pathname:e.pathname+e.search})}i=await s(o)}h(void 0!==i.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:w.error,result:e}}finally{u&&t.signal.removeEventListener("abort",u)}return i}(t,n,e,o,l,a,i):Promise.resolve({type:w.data,result:void 0}))})})),request:n,params:a[0].params,context:i});return a.forEach((e=>h(s.has(e.route.id),'`match.resolve()` was not called for route id "'+e.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.'))),c.filter(((e,t)=>u.has(a[t].route.id)))}(p,e,t,n,r,s,a);return await Promise.all(o.map(((e,a)=>{if(function(e){return Ne(e.result)&&Z.has(e.result.status)}(e)){let o=e.result;return{type:w.redirect,response:ye(o,t,n[a].route.id,r,f,g.v7_relativeSplatPath)}}return async function(e){let{result:t,type:n,status:r}=e;if(Ne(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:w.error,error:e}}return n===w.error?{type:w.error,error:new Q(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:w.data,data:e,statusCode:t.status,headers:t.headers}}return n===w.error?{type:w.error,error:t,statusCode:K(t)?t.status:r}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(t)?{type:w.deferred,deferredData:t,statusCode:null==(a=t.init)?void 0:a.status,headers:(null==(o=t.init)?void 0:o.headers)&&new Headers(t.init.headers)}:{type:w.data,data:t,statusCode:r};var a,o}(e)})))}catch(e){return n.map((()=>({type:w.error,error:e})))}}async function qe(t,n,r,a,o){let[l,...i]=await Promise.all([r.length?We("loader",o,r,n):[],...a.map((t=>t.matches&&t.match&&t.controller?We("loader",ge(e.history,t.path,t.controller.signal),[t.match],t.matches).then((e=>e[0])):Promise.resolve({type:w.error,error:_e(404,{pathname:t.path})})))]);return await Promise.all([ze(t,r,l,l.map((()=>o.signal)),!1,N.loaderData),ze(t,a.map((e=>e.match)),i,a.map((e=>e.controller?e.controller.signal:null)),!0)]),{loaderResults:l,fetcherResults:i}}function Qe(){I=!0,B.push(...it()),Y.forEach(((e,t)=>{V.has(t)&&(H.push(t),Ge(t))}))}function Ke(e,t,n){void 0===n&&(n={}),N.fetchers.set(e,t),Pe({fetchers:new Map(N.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function Je(e,t,n,r){void 0===r&&(r={});let a=xe(N.matches,t);Xe(e),Pe({errors:{[a.route.id]:n},fetchers:new Map(N.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Ye(e){return g.v7_fetcherPersist&&(X.set(e,(X.get(e)||0)+1),G.has(e)&&G.delete(e)),N.fetchers.get(e)||ne}function Xe(e){let t=N.fetchers.get(e);!V.has(e)||t&&"loading"===t.state&&q.has(e)||Ge(e),Y.delete(e),q.delete(e),J.delete(e),G.delete(e),N.fetchers.delete(e)}function Ge(e){let t=V.get(e);h(t,"Expected fetch controller: "+e),t.abort(),V.delete(e)}function Ze(e){for(let t of e){let e=Be(Ye(t).data);N.fetchers.set(t,e)}}function et(){let e=[],t=!1;for(let n of J){let r=N.fetchers.get(n);h(r,"Expected fetcher: "+n),"loading"===r.state&&(J.delete(n),e.push(n),t=!0)}return Ze(e),t}function tt(e){let t=[];for(let[n,r]of q)if(r<e){let e=N.fetchers.get(n);h(e,"Expected fetcher: "+n),"loading"===e.state&&(Ge(n),q.delete(n),t.push(n))}return Ze(t),t.length>0}function nt(e){N.blockers.delete(e),fe.delete(e)}function rt(e,t){let n=N.blockers.get(e)||re;h("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(N.blockers);r.set(e,t),Pe({blockers:r})}function at(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===fe.size)return;fe.size>1&&m(!1,"A router only supports one blocker at a time");let a=Array.from(fe.entries()),[o,l]=a[a.length-1],i=N.blockers.get(o);return i&&"proceeding"===i.state?void 0:l({currentLocation:t,nextLocation:n,historyAction:r})?o:void 0}function ot(e){let t=_e(404,{pathname:e}),n=o||c,{matches:r,route:a}=Ce(n);return it(),{notFoundMatches:r,route:a,error:t}}function lt(e,t){let n=t.partialMatches,r=n[n.length-1].route;return{notFoundMatches:n,route:r,error:_e(400,{type:"route-discovery",routeId:r.id,pathname:e,message:null!=t.error&&"message"in t.error?t.error:String(t.error)})}}function it(e){let t=[];return ce.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),ce.delete(r))})),t}function ut(e,t){return _&&_(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,N.loaderData))))||e.key}function st(e,t){if(C){let n=ut(e,t),r=C[n];if("number"==typeof r)return r}return null}function ct(e,t,n){if(y){if(!e)return{active:!0,matches:x(t,n,f,!0)||[]};{let r=e[e.length-1].route;if(r.path&&("*"===r.path||r.path.endsWith("/*")))return{active:!0,matches:x(t,n,f,!0)}}}return{active:!1,matches:null}}async function ft(e,t,n){let r=e,l=r.length>0?r[r.length-1].route:null;for(;;){let e=null==o,i=o||c;try{await de(y,t,r,i,s,a,be,n)}catch(e){return{type:"error",error:e,partialMatches:r}}finally{e&&(c=[...c])}if(n.aborted)return{type:"aborted"};let u=E(i,t,f),d=!1;if(u){let e=u[u.length-1].route;if(e.index)return{type:"success",matches:u};if(e.path&&e.path.length>0){if("*"!==e.path)return{type:"success",matches:u};d=!0}}let p=x(i,t,f,!0);if(!p||r.map((e=>e.route.id)).join("-")===p.map((e=>e.route.id)).join("-"))return{type:"success",matches:d?u:null};if(r=p,l=r[r.length-1].route,"*"===l.path)return{type:"success",matches:r}}}return u={get basename(){return f},get future(){return g},get state(){return N},get routes(){return c},get window(){return t},initialize:function(){if(b=e.history.listen((t=>{let{action:n,location:r,delta:a}=t;if(we)return void(we=!1);m(0===fe.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=at({currentLocation:N.location,nextLocation:r,historyAction:n});return o&&null!=a?(we=!0,e.history.go(-1*a),void rt(o,{state:"blocked",location:r,proceed(){rt(o,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),e.history.go(a)},reset(){let e=new Map(N.blockers);e.set(o,re),Pe({blockers:e})}})):He(n,r)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(le);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,F);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(le,JSON.stringify(n))}catch(e){m(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(t,F);t.addEventListener("pagehide",e),A=()=>t.removeEventListener("pagehide",e)}return N.initialized||He(l.Pop,N.location,{initialHydration:!0}),u},subscribe:function(e){return S.add(e),()=>S.delete(e)},enableScrollRestoration:function(e,t,n){if(C=e,R=t,_=n||null,!P&&N.navigation===te){P=!0;let e=st(N.location,N.matches);null!=e&&Pe({restoreScrollPosition:e})}return()=>{C=null,R=null,_=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let a=ie(N.location,N.matches,f,g.v7_prependBasename,n,g.v7_relativeSplatPath,null==r?void 0:r.fromRouteId,null==r?void 0:r.relative),{path:o,submission:i,error:u}=ue(g.v7_normalizeFormMethod,!1,a,r),s=N.location,c=v(N.location,o,r&&r.state);c=d({},c,e.history.encodeLocation(c));let p=r&&null!=r.replace?r.replace:void 0,h=l.Push;!0===p?h=l.Replace:!1===p||null!=i&&De(i.formMethod)&&i.formAction===N.location.pathname+N.location.search&&(h=l.Replace);let m=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,y=!0===(r&&r.unstable_flushSync),b=at({currentLocation:s,nextLocation:c,historyAction:h});if(!b)return await He(h,c,{submission:i,pendingError:u,preventScrollReset:m,replace:r&&r.replace,enableViewTransition:r&&r.unstable_viewTransition,flushSync:y});rt(b,{state:"blocked",location:c,proceed(){rt(b,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,r)},reset(){let e=new Map(N.blockers);e.set(b,re),Pe({blockers:e})}})},fetch:function(t,n,a,l){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");V.has(t)&&Ge(t);let i=!0===(l&&l.unstable_flushSync),u=o||c,s=ie(N.location,N.matches,f,g.v7_prependBasename,a,g.v7_relativeSplatPath,n,null==l?void 0:l.relative),d=E(u,s,f),p=ct(d,u,s);if(p.active&&p.matches&&(d=p.matches),!d)return void Je(t,n,_e(404,{pathname:s}),{flushSync:i});let{path:m,submission:y,error:v}=ue(g.v7_normalizeFormMethod,!0,s,l);if(v)return void Je(t,n,v,{flushSync:i});let b=Ae(d,m);z=!0===(l&&l.preventScrollReset),y&&De(y.formMethod)?async function(t,n,r,a,l,i,u,s){function d(e){if(!e.route.action&&!e.route.lazy){let e=_e(405,{method:s.formMethod,pathname:r,routeId:n});return Je(t,n,e,{flushSync:u}),!0}return!1}if(Qe(),Y.delete(t),!i&&d(a))return;let p=N.fetchers.get(t);Ke(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(s,p),{flushSync:u});let m=new AbortController,y=ge(e.history,r,m.signal,s);if(i){let e=await ft(l,r,y.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:a}=lt(r,e);return void Je(t,n,a,{flushSync:u})}if(!e.matches)return void Je(t,n,_e(404,{pathname:r}),{flushSync:u});if(d(a=Ae(l=e.matches,r)))return}V.set(t,m);let v=$,b=(await We("action",y,[a],l))[0];if(y.signal.aborted)return void(V.get(t)===m&&V.delete(t));if(g.v7_fetcherPersist&&G.has(t)){if(Oe(b)||Le(b))return void Ke(t,Be(void 0))}else{if(Oe(b))return V.delete(t),W>v?void Ke(t,Be(void 0)):(J.add(t),Ke(t,Ie(s)),$e(y,b,{fetcherSubmission:s}));if(Le(b))return void Je(t,n,b.error)}if(Te(b))throw _e(400,{type:"defer-action"});let w=N.navigation.location||N.location,S=ge(e.history,w,m.signal),k=o||c,x="idle"!==N.navigation.state?E(k,N.navigation.location,f):N.matches;h(x,"Didn't find any matches after fetcher action");let C=++$;q.set(t,C);let _=Ie(s,b.data);N.fetchers.set(t,_);let[R,P]=se(e.history,N,x,s,w,!1,g.unstable_skipActionErrorRevalidation,I,B,H,G,Y,J,k,f,[a.route.id,b]);P.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=N.fetchers.get(t),r=Ie(void 0,n?n.data:void 0);N.fetchers.set(t,r),V.has(t)&&Ge(t),e.controller&&V.set(t,e.controller)})),Pe({fetchers:new Map(N.fetchers)});let T=()=>P.forEach((e=>Ge(e.key)));m.signal.addEventListener("abort",T);let{loaderResults:L,fetcherResults:z}=await qe(N.matches,x,R,P,S);if(m.signal.aborted)return;m.signal.removeEventListener("abort",T),q.delete(t),V.delete(t),P.forEach((e=>V.delete(e.key)));let M=Re([...L,...z]);if(M){if(M.idx>=R.length){let e=P[M.idx-R.length].key;J.add(e)}return $e(S,M.result)}let{loaderData:F,errors:A}=Se(N,N.matches,R,L,void 0,P,z,ce);if(N.fetchers.has(t)){let e=Be(b.data);N.fetchers.set(t,e)}tt(C),"loading"===N.navigation.state&&C>W?(h(D,"Expected pending action"),O&&O.abort(),Fe(N.navigation.location,{matches:x,loaderData:F,errors:A,fetchers:new Map(N.fetchers)})):(Pe({errors:A,loaderData:ke(N.loaderData,F,x,A),fetchers:new Map(N.fetchers)}),I=!1)}(t,n,m,b,d,p.active,i,y):(Y.set(t,{routeId:n,path:m}),async function(t,n,r,a,o,l,i,u){let s=N.fetchers.get(t);Ke(t,Ie(u,s?s.data:void 0),{flushSync:i});let c=new AbortController,f=ge(e.history,r,c.signal);if(l){let e=await ft(o,r,f.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:a}=lt(r,e);return void Je(t,n,a,{flushSync:i})}if(!e.matches)return void Je(t,n,_e(404,{pathname:r}),{flushSync:i});a=Ae(o=e.matches,r)}V.set(t,c);let d=$,p=(await We("loader",f,[a],o))[0];if(Te(p)&&(p=await Me(p,f.signal,!0)||p),V.get(t)===c&&V.delete(t),!f.signal.aborted){if(!G.has(t))return Oe(p)?W>d?void Ke(t,Be(void 0)):(J.add(t),void await $e(f,p)):void(Le(p)?Je(t,n,p.error):(h(!Te(p),"Unhandled fetcher deferred data"),Ke(t,Be(p.data))));Ke(t,Be(void 0))}}(t,n,m,b,d,p.active,i,y))},revalidate:function(){Qe(),Pe({revalidation:"loading"}),"submitting"!==N.navigation.state&&("idle"!==N.navigation.state?He(D||N.historyAction,N.navigation.location,{overrideNavigation:N.navigation}):He(N.historyAction,N.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Ye,deleteFetcher:function(e){if(g.v7_fetcherPersist){let t=(X.get(e)||0)-1;t<=0?(X.delete(e),G.add(e)):X.set(e,t)}else Xe(e);Pe({fetchers:new Map(N.fetchers)})},dispose:function(){b&&b(),A&&A(),S.clear(),O&&O.abort(),N.fetchers.forEach(((e,t)=>Xe(t))),N.blockers.forEach(((e,t)=>nt(t)))},getBlocker:function(e,t){let n=N.blockers.get(e)||re;return fe.get(e)!==t&&fe.set(e,t),n},deleteBlocker:nt,patchRoutes:function(e,t){let n=null==o;pe(e,t,o||c,s,a),n&&(c=[...c],Pe({}))},_internalFetchControllers:V,_internalActiveDeferreds:ce,_internalSetRoutes:function(e){s={},o=k(e,a,void 0,s)}},u}({basename:void 0,future:ft({},void 0,{v7_prependBasename:!0}),history:(jr={window:void 0},void 0===jr&&(jr={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,u=l.Pop,s=null,c=f();function f(){return(i.state||{idx:null}).idx}function m(){u=l.Pop;let e=f(),t=null==e?null:e-c;c=e,s&&s({action:u,location:w.location,delta:t})}function b(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:g(e);return n=n.replace(/ $/,"%20"),h(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==c&&(c=0,i.replaceState(d({},i.state,{idx:c}),""));let w={get action(){return u},get location(){return e(a,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return a.addEventListener(p,m),s=e,()=>{a.removeEventListener(p,m),s=null}},createHref:e=>t(a,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){u=l.Push;let r=v(w.location,e,t);n&&n(r,e),c=f()+1;let d=y(r,c),p=w.createHref(r);try{i.pushState(d,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(p)}o&&s&&s({action:u,location:w.location,delta:1})},replace:function(e,t){u=l.Replace;let r=v(w.location,e,t);n&&n(r,e),c=f();let a=y(r,c),d=w.createHref(r);i.replaceState(a,"",d),o&&s&&s({action:u,location:w.location,delta:0})},go:e=>i.go(e)};return w}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return v("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:g(t)}),null,jr)),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=ft({},t,{errors:dt(t.errors)})),t}(),routes:Ur,mapRouteProperties:function(e){let t={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(t,{element:i.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:i.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:i.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t},unstable_dataStrategy:void 0,unstable_patchRoutesOnMiss:void 0,window:void 0}).initialize());document.getElementById("root"),(0,f.H)(document.getElementById("root")).render(i.createElement(i.StrictMode,null,i.createElement(bt,{router:Ir})))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7dUJBQ0lBLEVBREFDLG1CQ1lTLElBQUlDLEVBQUdDLEVBQVEsS0FBU0MsRUFBR0QsRUFBUSxLQUFhLFNBQVNFLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRUUsRUFBRSxFQUFFQSxFQUFFQyxVQUFVQyxPQUFPRixJQUFJRCxHQUFHLFdBQVdJLG1CQUFtQkYsVUFBVUQsSUFBSSxNQUFNLHlCQUF5QkYsRUFBRSxXQUFXQyxFQUFFLGdIQUFnSCxDQUFDLElBQUlLLEVBQUcsSUFBSUMsSUFBSUMsRUFBRyxDQUFDLEVBQUUsU0FBU0MsRUFBR1QsRUFBRUMsR0FBR1MsRUFBR1YsRUFBRUMsR0FBR1MsRUFBR1YsRUFBRSxVQUFVQyxFQUFFLENBQ3hiLFNBQVNTLEVBQUdWLEVBQUVDLEdBQVcsSUFBUk8sRUFBR1IsR0FBR0MsRUFBTUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFRyxPQUFPSixJQUFJTSxFQUFHSyxJQUFJVixFQUFFRCxHQUFHLENBQzVELElBQUlZLElBQUssb0JBQXFCQyxhQUFRLElBQXFCQSxPQUFPQyxlQUFVLElBQXFCRCxPQUFPQyxTQUFTQyxlQUFlQyxFQUFHQyxPQUFPQyxVQUFVQyxlQUFlQyxFQUFHLDhWQUE4VkMsRUFDcGdCLENBQUMsRUFBRUMsRUFBRyxDQUFDLEVBQ2lOLFNBQVNDLEVBQUV2QixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsRUFBRUMsRUFBRUMsR0FBR0MsS0FBS0MsZ0JBQWdCLElBQUk1QixHQUFHLElBQUlBLEdBQUcsSUFBSUEsRUFBRTJCLEtBQUtFLGNBQWNOLEVBQUVJLEtBQUtHLG1CQUFtQk4sRUFBRUcsS0FBS0ksZ0JBQWdCOUIsRUFBRTBCLEtBQUtLLGFBQWFqQyxFQUFFNEIsS0FBS00sS0FBS2pDLEVBQUUyQixLQUFLTyxZQUFZVCxFQUFFRSxLQUFLUSxrQkFBa0JULENBQUMsQ0FBQyxJQUFJVSxFQUFFLENBQUMsRUFDcGIsdUlBQXVJQyxNQUFNLEtBQUtDLFNBQVEsU0FBU3ZDLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJdUIsRUFBRXZCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxFQUFHLElBQUcsQ0FBQyxDQUFDLGdCQUFnQixrQkFBa0IsQ0FBQyxZQUFZLFNBQVMsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxZQUFZLGVBQWV1QyxTQUFRLFNBQVN2QyxHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBR3FDLEVBQUVwQyxHQUFHLElBQUlzQixFQUFFdEIsRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLEdBQUcsRUFBRyxJQUFHLENBQUMsa0JBQWtCLFlBQVksYUFBYSxTQUFTdUMsU0FBUSxTQUFTdkMsR0FBR3FDLEVBQUVyQyxHQUFHLElBQUl1QixFQUFFdkIsRUFBRSxHQUFFLEVBQUdBLEVBQUV3QyxjQUFjLE1BQUssR0FBRyxFQUFHLElBQzFlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJELFNBQVEsU0FBU3ZDLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJdUIsRUFBRXZCLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxFQUFHLElBQUcsOE9BQThPc0MsTUFBTSxLQUFLQyxTQUFRLFNBQVN2QyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXVCLEVBQUV2QixFQUFFLEdBQUUsRUFBR0EsRUFBRXdDLGNBQWMsTUFBSyxHQUFHLEVBQUcsSUFDeGIsQ0FBQyxVQUFVLFdBQVcsUUFBUSxZQUFZRCxTQUFRLFNBQVN2QyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXVCLEVBQUV2QixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsRUFBRyxJQUFHLENBQUMsVUFBVSxZQUFZdUMsU0FBUSxTQUFTdkMsR0FBR3FDLEVBQUVyQyxHQUFHLElBQUl1QixFQUFFdkIsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLE9BQU8sT0FBTyxPQUFPLFFBQVF1QyxTQUFRLFNBQVN2QyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXVCLEVBQUV2QixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsRUFBRyxJQUFHLENBQUMsVUFBVSxTQUFTdUMsU0FBUSxTQUFTdkMsR0FBR3FDLEVBQUVyQyxHQUFHLElBQUl1QixFQUFFdkIsRUFBRSxHQUFFLEVBQUdBLEVBQUV3QyxjQUFjLE1BQUssR0FBRyxFQUFHLElBQUcsSUFBSUMsRUFBRyxnQkFBZ0IsU0FBU0MsRUFBRzFDLEdBQUcsT0FBT0EsRUFBRSxHQUFHMkMsYUFBYSxDQUl4WixTQUFTQyxFQUFHNUMsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsSUFBSUMsRUFBRVksRUFBRWxCLGVBQWVsQixHQUFHb0MsRUFBRXBDLEdBQUcsTUFBUSxPQUFPd0IsRUFBRSxJQUFJQSxFQUFFUyxLQUFLVixLQUFLLEVBQUV2QixFQUFFRyxTQUFTLE1BQU1ILEVBQUUsSUFBSSxNQUFNQSxFQUFFLElBQUksTUFBTUEsRUFBRSxJQUFJLE1BQU1BLEVBQUUsTUFQOUksU0FBWUQsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsR0FBRyxNQUFPdkIsR0FENkYsU0FBWUQsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsR0FBRyxPQUFPdEIsR0FBRyxJQUFJQSxFQUFFZ0MsS0FBSyxPQUFNLEVBQUcsY0FBY2pDLEdBQUcsSUFBSyxXQUFXLElBQUssU0FBUyxPQUFNLEVBQUcsSUFBSyxVQUFVLE9BQUd1QixJQUFjLE9BQU90QixHQUFTQSxFQUFFMkIsZ0JBQW1ELFdBQW5DN0IsRUFBRUEsRUFBRXdDLGNBQWNLLE1BQU0sRUFBRSxLQUFzQixVQUFVN0MsR0FBRSxRQUFRLE9BQU0sRUFBRyxDQUMvVDhDLENBQUc5QyxFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPdEIsRUFBRSxPQUFPQSxFQUFFZ0MsTUFBTSxLQUFLLEVBQUUsT0FBT2pDLEVBQUUsS0FBSyxFQUFFLE9BQU0sSUFBS0EsRUFBRSxLQUFLLEVBQUUsT0FBTzhDLE1BQU05QyxHQUFHLEtBQUssRUFBRSxPQUFPOEMsTUFBTTlDLElBQUksRUFBRUEsRUFBRSxPQUFNLENBQUUsQ0FPdEUrQyxDQUFHL0MsRUFBRUMsRUFBRXVCLEVBQUVELEtBQUt0QixFQUFFLE1BQU1zQixHQUFHLE9BQU9DLEVBUnhLLFNBQVl6QixHQUFHLFFBQUdnQixFQUFHaUMsS0FBSzNCLEVBQUd0QixLQUFlZ0IsRUFBR2lDLEtBQUs1QixFQUFHckIsS0FBZW9CLEVBQUc4QixLQUFLbEQsR0FBVXNCLEVBQUd0QixJQUFHLEdBQUdxQixFQUFHckIsSUFBRyxHQUFTLEdBQUUsQ0FRd0RtRCxDQUFHbEQsS0FBSyxPQUFPQyxFQUFFRixFQUFFb0QsZ0JBQWdCbkQsR0FBR0QsRUFBRXFELGFBQWFwRCxFQUFFLEdBQUdDLElBQUl1QixFQUFFTyxnQkFBZ0JoQyxFQUFFeUIsRUFBRVEsY0FBYyxPQUFPL0IsRUFBRSxJQUFJdUIsRUFBRVMsTUFBUSxHQUFHaEMsR0FBR0QsRUFBRXdCLEVBQUVLLGNBQWNOLEVBQUVDLEVBQUVNLG1CQUFtQixPQUFPN0IsRUFBRUYsRUFBRW9ELGdCQUFnQm5ELElBQWFDLEVBQUUsS0FBWHVCLEVBQUVBLEVBQUVTLE9BQWMsSUFBSVQsSUFBRyxJQUFLdkIsRUFBRSxHQUFHLEdBQUdBLEVBQUVzQixFQUFFeEIsRUFBRXNELGVBQWU5QixFQUFFdkIsRUFBRUMsR0FBR0YsRUFBRXFELGFBQWFwRCxFQUFFQyxLQUFJLENBSGpkLDBqQ0FBMGpDb0MsTUFBTSxLQUFLQyxTQUFRLFNBQVN2QyxHQUFHLElBQUlDLEVBQUVELEVBQUV1RCxRQUFRZCxFQUN6bUNDLEdBQUlMLEVBQUVwQyxHQUFHLElBQUlzQixFQUFFdEIsRUFBRSxHQUFFLEVBQUdELEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRywyRUFBMkVzQyxNQUFNLEtBQUtDLFNBQVEsU0FBU3ZDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXVELFFBQVFkLEVBQUdDLEdBQUlMLEVBQUVwQyxHQUFHLElBQUlzQixFQUFFdEIsRUFBRSxHQUFFLEVBQUdELEVBQUUsZ0NBQStCLEdBQUcsRUFBRyxJQUFHLENBQUMsV0FBVyxXQUFXLGFBQWF1QyxTQUFRLFNBQVN2QyxHQUFHLElBQUlDLEVBQUVELEVBQUV1RCxRQUFRZCxFQUFHQyxHQUFJTCxFQUFFcEMsR0FBRyxJQUFJc0IsRUFBRXRCLEVBQUUsR0FBRSxFQUFHRCxFQUFFLHdDQUF1QyxHQUFHLEVBQUcsSUFBRyxDQUFDLFdBQVcsZUFBZXVDLFNBQVEsU0FBU3ZDLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJdUIsRUFBRXZCLEVBQUUsR0FBRSxFQUFHQSxFQUFFd0MsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUNsZEgsRUFBRW1CLFVBQVUsSUFBSWpDLEVBQUUsWUFBWSxHQUFFLEVBQUcsYUFBYSxnQ0FBK0IsR0FBRyxHQUFJLENBQUMsTUFBTSxPQUFPLFNBQVMsY0FBY2dCLFNBQVEsU0FBU3ZDLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJdUIsRUFBRXZCLEVBQUUsR0FBRSxFQUFHQSxFQUFFd0MsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUU1TCxJQUFJaUIsRUFBRzdELEVBQUc4RCxtREFBbURDLEVBQUdDLE9BQU9DLElBQUksaUJBQWlCQyxFQUFHRixPQUFPQyxJQUFJLGdCQUFnQkUsRUFBR0gsT0FBT0MsSUFBSSxrQkFBa0JHLEVBQUdKLE9BQU9DLElBQUkscUJBQXFCSSxFQUFHTCxPQUFPQyxJQUFJLGtCQUFrQkssRUFBR04sT0FBT0MsSUFBSSxrQkFBa0JNLEVBQUdQLE9BQU9DLElBQUksaUJBQWlCTyxFQUFHUixPQUFPQyxJQUFJLHFCQUFxQlEsRUFBR1QsT0FBT0MsSUFBSSxrQkFBa0JTLEVBQUdWLE9BQU9DLElBQUksdUJBQXVCVSxFQUFHWCxPQUFPQyxJQUFJLGNBQWNXLEVBQUdaLE9BQU9DLElBQUksY0FBY0QsT0FBT0MsSUFBSSxlQUFlRCxPQUFPQyxJQUFJLDBCQUNqZSxJQUFJWSxFQUFHYixPQUFPQyxJQUFJLG1CQUFtQkQsT0FBT0MsSUFBSSx1QkFBdUJELE9BQU9DLElBQUksZUFBZUQsT0FBT0MsSUFBSSx3QkFBd0IsSUFBSWEsRUFBR2QsT0FBT2UsU0FBUyxTQUFTQyxFQUFHNUUsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXdDLG1CQUFuQ0EsRUFBRTBFLEdBQUkxRSxFQUFFMEUsSUFBSzFFLEVBQUUsZUFBMENBLEVBQUUsSUFBSSxDQUFDLElBQW9CNkUsRUFBaEJDLEVBQUU3RCxPQUFPOEQsT0FBVSxTQUFTQyxFQUFHaEYsR0FBRyxRQUFHLElBQVM2RSxFQUFHLElBQUksTUFBTUksT0FBUSxDQUFDLE1BQU0vRSxHQUFHLElBQUlELEVBQUVDLEVBQUVnRixNQUFNQyxPQUFPQyxNQUFNLGdCQUFnQlAsRUFBRzVFLEdBQUdBLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLNEUsRUFBRzdFLENBQUMsQ0FBQyxJQUFJcUYsR0FBRyxFQUN6YixTQUFTQyxFQUFHdEYsRUFBRUMsR0FBRyxJQUFJRCxHQUFHcUYsRUFBRyxNQUFNLEdBQUdBLEdBQUcsRUFBRyxJQUFJbkYsRUFBRStFLE1BQU1NLGtCQUFrQk4sTUFBTU0sdUJBQWtCLEVBQU8sSUFBSSxHQUFHdEYsRUFBRSxHQUFHQSxFQUFFLFdBQVcsTUFBTWdGLE9BQVEsRUFBRWhFLE9BQU91RSxlQUFldkYsRUFBRWlCLFVBQVUsUUFBUSxDQUFDdUUsSUFBSSxXQUFXLE1BQU1SLE9BQVEsSUFBSSxpQkFBa0JTLFNBQVNBLFFBQVFDLFVBQVUsQ0FBQyxJQUFJRCxRQUFRQyxVQUFVMUYsRUFBRSxHQUFHLENBQUMsTUFBTTJGLEdBQUcsSUFBSXBFLEVBQUVvRSxDQUFDLENBQUNGLFFBQVFDLFVBQVUzRixFQUFFLEdBQUdDLEVBQUUsS0FBSyxDQUFDLElBQUlBLEVBQUVnRCxNQUFNLENBQUMsTUFBTTJDLEdBQUdwRSxFQUFFb0UsQ0FBQyxDQUFDNUYsRUFBRWlELEtBQUtoRCxFQUFFaUIsVUFBVSxLQUFLLENBQUMsSUFBSSxNQUFNK0QsT0FBUSxDQUFDLE1BQU1XLEdBQUdwRSxFQUFFb0UsQ0FBQyxDQUFDNUYsR0FBRyxDQUFDLENBQUMsTUFBTTRGLEdBQUcsR0FBR0EsR0FBR3BFLEdBQUcsaUJBQWtCb0UsRUFBRVYsTUFBTSxDQUFDLElBQUksSUFBSXpELEVBQUVtRSxFQUFFVixNQUFNNUMsTUFBTSxNQUNuZlosRUFBRUYsRUFBRTBELE1BQU01QyxNQUFNLE1BQU1YLEVBQUVGLEVBQUVyQixPQUFPLEVBQUV5RixFQUFFbkUsRUFBRXRCLE9BQU8sRUFBRSxHQUFHdUIsR0FBRyxHQUFHa0UsR0FBR3BFLEVBQUVFLEtBQUtELEVBQUVtRSxJQUFJQSxJQUFJLEtBQUssR0FBR2xFLEdBQUcsR0FBR2tFLEVBQUVsRSxJQUFJa0UsSUFBSSxHQUFHcEUsRUFBRUUsS0FBS0QsRUFBRW1FLEdBQUcsQ0FBQyxHQUFHLElBQUlsRSxHQUFHLElBQUlrRSxFQUFHLE1BQU1sRSxJQUFRLElBQUprRSxHQUFTcEUsRUFBRUUsS0FBS0QsRUFBRW1FLEdBQUcsQ0FBQyxJQUFJQyxFQUFFLEtBQUtyRSxFQUFFRSxHQUFHNEIsUUFBUSxXQUFXLFFBQTZGLE9BQXJGdkQsRUFBRStGLGFBQWFELEVBQUVFLFNBQVMsaUJBQWlCRixFQUFFQSxFQUFFdkMsUUFBUSxjQUFjdkQsRUFBRStGLGNBQXFCRCxDQUFDLFFBQU8sR0FBR25FLEdBQUcsR0FBR2tFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRUixHQUFHLEVBQUdKLE1BQU1NLGtCQUFrQnJGLENBQUMsQ0FBQyxPQUFPRixFQUFFQSxFQUFFQSxFQUFFK0YsYUFBYS9GLEVBQUVpRyxLQUFLLElBQUlqQixFQUFHaEYsR0FBRyxFQUFFLENBQzlaLFNBQVNrRyxFQUFHbEcsR0FBRyxPQUFPQSxFQUFFbUcsS0FBSyxLQUFLLEVBQUUsT0FBT25CLEVBQUdoRixFQUFFa0MsTUFBTSxLQUFLLEdBQUcsT0FBTzhDLEVBQUcsUUFBUSxLQUFLLEdBQUcsT0FBT0EsRUFBRyxZQUFZLEtBQUssR0FBRyxPQUFPQSxFQUFHLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFTTSxFQUFHdEYsRUFBRWtDLE1BQUssR0FBTSxLQUFLLEdBQUcsT0FBU29ELEVBQUd0RixFQUFFa0MsS0FBS2tFLFFBQU8sR0FBTSxLQUFLLEVBQUUsT0FBU2QsRUFBR3RGLEVBQUVrQyxNQUFLLEdBQU0sUUFBUSxNQUFNLEdBQUcsQ0FDeFIsU0FBU21FLEVBQUdyRyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxtQkFBb0JBLEVBQUUsT0FBT0EsRUFBRStGLGFBQWEvRixFQUFFaUcsTUFBTSxLQUFLLEdBQUcsaUJBQWtCakcsRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEdBQUcsS0FBSytELEVBQUcsTUFBTSxXQUFXLEtBQUtELEVBQUcsTUFBTSxTQUFTLEtBQUtHLEVBQUcsTUFBTSxXQUFXLEtBQUtELEVBQUcsTUFBTSxhQUFhLEtBQUtLLEVBQUcsTUFBTSxXQUFXLEtBQUtDLEVBQUcsTUFBTSxlQUFlLEdBQUcsaUJBQWtCdEUsRUFBRSxPQUFPQSxFQUFFc0csVUFBVSxLQUFLbkMsRUFBRyxPQUFPbkUsRUFBRStGLGFBQWEsV0FBVyxZQUFZLEtBQUs3QixFQUFHLE9BQU9sRSxFQUFFdUcsU0FBU1IsYUFBYSxXQUFXLFlBQVksS0FBSzNCLEVBQUcsSUFBSW5FLEVBQUVELEVBQUVvRyxPQUM3WixPQURvYXBHLEVBQUVBLEVBQUUrRixlQUNuZC9GLEVBQUUsTUFEaWVBLEVBQUVDLEVBQUU4RixhQUNsZjlGLEVBQUVnRyxNQUFNLElBQVksY0FBY2pHLEVBQUUsSUFBSSxjQUFxQkEsRUFBRSxLQUFLdUUsRUFBRyxPQUE2QixRQUF0QnRFLEVBQUVELEVBQUUrRixhQUFhLE1BQWM5RixFQUFFb0csRUFBR3JHLEVBQUVrQyxPQUFPLE9BQU8sS0FBS3NDLEVBQUd2RSxFQUFFRCxFQUFFd0csU0FBU3hHLEVBQUVBLEVBQUV5RyxNQUFNLElBQUksT0FBT0osRUFBR3JHLEVBQUVDLEdBQUcsQ0FBQyxNQUFNQyxHQUFHLEVBQUUsT0FBTyxJQUFJLENBQzNNLFNBQVN3RyxFQUFHMUcsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa0MsS0FBSyxPQUFPbEMsRUFBRW1HLEtBQUssS0FBSyxHQUFHLE1BQU0sUUFBUSxLQUFLLEVBQUUsT0FBT2xHLEVBQUU4RixhQUFhLFdBQVcsWUFBWSxLQUFLLEdBQUcsT0FBTzlGLEVBQUVzRyxTQUFTUixhQUFhLFdBQVcsWUFBWSxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsS0FBSyxHQUFHLE9BQWtCL0YsR0FBWEEsRUFBRUMsRUFBRW1HLFFBQVdMLGFBQWEvRixFQUFFaUcsTUFBTSxHQUFHaEcsRUFBRThGLGNBQWMsS0FBSy9GLEVBQUUsY0FBY0EsRUFBRSxJQUFJLGNBQWMsS0FBSyxFQUFFLE1BQU0sV0FBVyxLQUFLLEVBQUUsT0FBT0MsRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLEtBQUssRUFBRSxNQUFNLE9BQU8sS0FBSyxFQUFFLE1BQU0sT0FBTyxLQUFLLEdBQUcsT0FBT29HLEVBQUdwRyxHQUFHLEtBQUssRUFBRSxPQUFPQSxJQUFJK0QsRUFBRyxhQUFhLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFDdGYsS0FBSyxHQUFHLE1BQU0sV0FBVyxLQUFLLEdBQUcsTUFBTSxRQUFRLEtBQUssR0FBRyxNQUFNLFdBQVcsS0FBSyxHQUFHLE1BQU0sZUFBZSxLQUFLLEdBQUcsTUFBTSxnQkFBZ0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxtQkFBb0IvRCxFQUFFLE9BQU9BLEVBQUU4RixhQUFhOUYsRUFBRWdHLE1BQU0sS0FBSyxHQUFHLGlCQUFrQmhHLEVBQUUsT0FBT0EsRUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTMEcsRUFBRzNHLEdBQUcsY0FBY0EsR0FBRyxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFlBQXFCLElBQUssU0FBUyxPQUFPQSxFQUFFLFFBQVEsTUFBTSxHQUFHLENBQ3JhLFNBQVM0RyxFQUFHNUcsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa0MsS0FBSyxPQUFPbEMsRUFBRUEsRUFBRTZHLFdBQVcsVUFBVTdHLEVBQUV3QyxnQkFBZ0IsYUFBYXZDLEdBQUcsVUFBVUEsRUFBRSxDQUV0RixTQUFTNkcsRUFBRzlHLEdBQUdBLEVBQUUrRyxnQkFBZ0IvRyxFQUFFK0csY0FEdkQsU0FBWS9HLEdBQUcsSUFBSUMsRUFBRTJHLEVBQUc1RyxHQUFHLFVBQVUsUUFBUUUsRUFBRWUsT0FBTytGLHlCQUF5QmhILEVBQUVpSCxZQUFZL0YsVUFBVWpCLEdBQUd1QixFQUFFLEdBQUd4QixFQUFFQyxHQUFHLElBQUlELEVBQUVtQixlQUFlbEIsU0FBSSxJQUFxQkMsR0FBRyxtQkFBb0JBLEVBQUVnSCxLQUFLLG1CQUFvQmhILEVBQUV1RixJQUFJLENBQUMsSUFBSWhFLEVBQUV2QixFQUFFZ0gsSUFBSXhGLEVBQUV4QixFQUFFdUYsSUFBaUwsT0FBN0t4RSxPQUFPdUUsZUFBZXhGLEVBQUVDLEVBQUUsQ0FBQ2tILGNBQWEsRUFBR0QsSUFBSSxXQUFXLE9BQU96RixFQUFFd0IsS0FBS3JCLEtBQUssRUFBRTZELElBQUksU0FBU3pGLEdBQUd3QixFQUFFLEdBQUd4QixFQUFFMEIsRUFBRXVCLEtBQUtyQixLQUFLNUIsRUFBRSxJQUFJaUIsT0FBT3VFLGVBQWV4RixFQUFFQyxFQUFFLENBQUNtSCxXQUFXbEgsRUFBRWtILGFBQW1CLENBQUNDLFNBQVMsV0FBVyxPQUFPN0YsQ0FBQyxFQUFFOEYsU0FBUyxTQUFTdEgsR0FBR3dCLEVBQUUsR0FBR3hCLENBQUMsRUFBRXVILGFBQWEsV0FBV3ZILEVBQUUrRyxjQUN4ZixZQUFZL0csRUFBRUMsRUFBRSxFQUFFLENBQUMsQ0FBa0R1SCxDQUFHeEgsR0FBRyxDQUFDLFNBQVN5SCxFQUFHekgsR0FBRyxJQUFJQSxFQUFFLE9BQU0sRUFBRyxJQUFJQyxFQUFFRCxFQUFFK0csY0FBYyxJQUFJOUcsRUFBRSxPQUFNLEVBQUcsSUFBSUMsRUFBRUQsRUFBRW9ILFdBQWU3RixFQUFFLEdBQXFELE9BQWxEeEIsSUFBSXdCLEVBQUVvRixFQUFHNUcsR0FBR0EsRUFBRTBILFFBQVEsT0FBTyxRQUFRMUgsRUFBRTJILFFBQU8zSCxFQUFFd0IsS0FBYXRCLElBQUdELEVBQUVxSCxTQUFTdEgsSUFBRyxFQUFNLENBQUMsU0FBUzRILEVBQUc1SCxHQUF3RCxRQUFHLEtBQXhEQSxFQUFFQSxJQUFJLG9CQUFxQmMsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPZCxFQUFFNkgsZUFBZTdILEVBQUU4SCxJQUFJLENBQUMsTUFBTTdILEdBQUcsT0FBT0QsRUFBRThILElBQUksQ0FBQyxDQUNwYSxTQUFTQyxFQUFHL0gsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeUgsUUFBUSxPQUFPNUMsRUFBRSxDQUFDLEVBQUU3RSxFQUFFLENBQUMrSCxvQkFBZSxFQUFPQyxrQkFBYSxFQUFPTixXQUFNLEVBQU9ELFFBQVEsTUFBTXhILEVBQUVBLEVBQUVGLEVBQUVrSSxjQUFjQyxnQkFBZ0IsQ0FBQyxTQUFTQyxFQUFHcEksRUFBRUMsR0FBRyxJQUFJQyxFQUFFLE1BQU1ELEVBQUVnSSxhQUFhLEdBQUdoSSxFQUFFZ0ksYUFBYXpHLEVBQUUsTUFBTXZCLEVBQUV5SCxRQUFRekgsRUFBRXlILFFBQVF6SCxFQUFFK0gsZUFBZTlILEVBQUV5RyxFQUFHLE1BQU0xRyxFQUFFMEgsTUFBTTFILEVBQUUwSCxNQUFNekgsR0FBR0YsRUFBRWtJLGNBQWMsQ0FBQ0MsZUFBZTNHLEVBQUU2RyxhQUFhbkksRUFBRW9JLFdBQVcsYUFBYXJJLEVBQUVpQyxNQUFNLFVBQVVqQyxFQUFFaUMsS0FBSyxNQUFNakMsRUFBRXlILFFBQVEsTUFBTXpILEVBQUUwSCxNQUFNLENBQUMsU0FBU1ksRUFBR3ZJLEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRXlILFVBQWlCOUUsRUFBRzVDLEVBQUUsVUFBVUMsR0FBRSxFQUFHLENBQzlkLFNBQVN1SSxFQUFHeEksRUFBRUMsR0FBR3NJLEVBQUd2SSxFQUFFQyxHQUFHLElBQUlDLEVBQUV5RyxFQUFHMUcsRUFBRTBILE9BQU9uRyxFQUFFdkIsRUFBRWlDLEtBQUssR0FBRyxNQUFNaEMsRUFBSyxXQUFXc0IsR0FBTSxJQUFJdEIsR0FBRyxLQUFLRixFQUFFMkgsT0FBTzNILEVBQUUySCxPQUFPekgsS0FBRUYsRUFBRTJILE1BQU0sR0FBR3pILEdBQU9GLEVBQUUySCxRQUFRLEdBQUd6SCxJQUFJRixFQUFFMkgsTUFBTSxHQUFHekgsUUFBUSxHQUFHLFdBQVdzQixHQUFHLFVBQVVBLEVBQThCLFlBQTNCeEIsRUFBRW9ELGdCQUFnQixTQUFnQm5ELEVBQUVrQixlQUFlLFNBQVNzSCxHQUFHekksRUFBRUMsRUFBRWlDLEtBQUtoQyxHQUFHRCxFQUFFa0IsZUFBZSxpQkFBaUJzSCxHQUFHekksRUFBRUMsRUFBRWlDLEtBQUt5RSxFQUFHMUcsRUFBRWdJLGVBQWUsTUFBTWhJLEVBQUV5SCxTQUFTLE1BQU16SCxFQUFFK0gsaUJBQWlCaEksRUFBRWdJLGlCQUFpQi9ILEVBQUUrSCxlQUFlLENBQ2xhLFNBQVNVLEVBQUcxSSxFQUFFQyxFQUFFQyxHQUFHLEdBQUdELEVBQUVrQixlQUFlLFVBQVVsQixFQUFFa0IsZUFBZSxnQkFBZ0IsQ0FBQyxJQUFJSyxFQUFFdkIsRUFBRWlDLEtBQUssS0FBSyxXQUFXVixHQUFHLFVBQVVBLFFBQUcsSUFBU3ZCLEVBQUUwSCxPQUFPLE9BQU8xSCxFQUFFMEgsT0FBTyxPQUFPMUgsRUFBRSxHQUFHRCxFQUFFa0ksY0FBY0csYUFBYW5JLEdBQUdELElBQUlELEVBQUUySCxRQUFRM0gsRUFBRTJILE1BQU0xSCxHQUFHRCxFQUFFaUksYUFBYWhJLENBQUMsQ0FBVSxNQUFUQyxFQUFFRixFQUFFaUcsUUFBY2pHLEVBQUVpRyxLQUFLLElBQUlqRyxFQUFFZ0ksaUJBQWlCaEksRUFBRWtJLGNBQWNDLGVBQWUsS0FBS2pJLElBQUlGLEVBQUVpRyxLQUFLL0YsRUFBRSxDQUN6VixTQUFTdUksR0FBR3pJLEVBQUVDLEVBQUVDLEdBQU0sV0FBV0QsR0FBRzJILEVBQUc1SCxFQUFFMkksaUJBQWlCM0ksSUFBRSxNQUFNRSxFQUFFRixFQUFFaUksYUFBYSxHQUFHakksRUFBRWtJLGNBQWNHLGFBQWFySSxFQUFFaUksZUFBZSxHQUFHL0gsSUFBSUYsRUFBRWlJLGFBQWEsR0FBRy9ILEdBQUUsQ0FBQyxJQUFJMEksR0FBR0MsTUFBTUMsUUFDN0ssU0FBU0MsR0FBRy9JLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFlLEdBQVp4QixFQUFFQSxFQUFFZ0osUUFBVy9JLEVBQUUsQ0FBQ0EsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJd0IsRUFBRSxFQUFFQSxFQUFFdkIsRUFBRUUsT0FBT3FCLElBQUl4QixFQUFFLElBQUlDLEVBQUV1QixLQUFJLEVBQUcsSUFBSXZCLEVBQUUsRUFBRUEsRUFBRUYsRUFBRUksT0FBT0YsSUFBSXVCLEVBQUV4QixFQUFFa0IsZUFBZSxJQUFJbkIsRUFBRUUsR0FBR3lILE9BQU8zSCxFQUFFRSxHQUFHK0ksV0FBV3hILElBQUl6QixFQUFFRSxHQUFHK0ksU0FBU3hILEdBQUdBLEdBQUdELElBQUl4QixFQUFFRSxHQUFHZ0osaUJBQWdCLEVBQUcsS0FBSyxDQUFtQixJQUFsQmhKLEVBQUUsR0FBR3lHLEVBQUd6RyxHQUFHRCxFQUFFLEtBQVN3QixFQUFFLEVBQUVBLEVBQUV6QixFQUFFSSxPQUFPcUIsSUFBSSxDQUFDLEdBQUd6QixFQUFFeUIsR0FBR2tHLFFBQVF6SCxFQUFpRCxPQUE5Q0YsRUFBRXlCLEdBQUd3SCxVQUFTLE9BQUd6SCxJQUFJeEIsRUFBRXlCLEdBQUd5SCxpQkFBZ0IsSUFBVyxPQUFPakosR0FBR0QsRUFBRXlCLEdBQUcwSCxXQUFXbEosRUFBRUQsRUFBRXlCLEdBQUcsQ0FBQyxPQUFPeEIsSUFBSUEsRUFBRWdKLFVBQVMsRUFBRyxDQUFDLENBQ3hZLFNBQVNHLEdBQUdwSixFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRW9KLHdCQUF3QixNQUFNcEUsTUFBTWxGLEVBQUUsS0FBSyxPQUFPK0UsRUFBRSxDQUFDLEVBQUU3RSxFQUFFLENBQUMwSCxXQUFNLEVBQU9NLGtCQUFhLEVBQU9xQixTQUFTLEdBQUd0SixFQUFFa0ksY0FBY0csY0FBYyxDQUFDLFNBQVNrQixHQUFHdkosRUFBRUMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFMEgsTUFBTSxHQUFHLE1BQU16SCxFQUFFLENBQStCLEdBQTlCQSxFQUFFRCxFQUFFcUosU0FBU3JKLEVBQUVBLEVBQUVnSSxhQUFnQixNQUFNL0gsRUFBRSxDQUFDLEdBQUcsTUFBTUQsRUFBRSxNQUFNZ0YsTUFBTWxGLEVBQUUsS0FBSyxHQUFHNkksR0FBRzFJLEdBQUcsQ0FBQyxHQUFHLEVBQUVBLEVBQUVFLE9BQU8sTUFBTTZFLE1BQU1sRixFQUFFLEtBQUtHLEVBQUVBLEVBQUUsRUFBRSxDQUFDRCxFQUFFQyxDQUFDLENBQUMsTUFBTUQsSUFBSUEsRUFBRSxJQUFJQyxFQUFFRCxDQUFDLENBQUNELEVBQUVrSSxjQUFjLENBQUNHLGFBQWExQixFQUFHekcsR0FBRyxDQUNuWSxTQUFTc0osR0FBR3hKLEVBQUVDLEdBQUcsSUFBSUMsRUFBRXlHLEVBQUcxRyxFQUFFMEgsT0FBT25HLEVBQUVtRixFQUFHMUcsRUFBRWdJLGNBQWMsTUFBTS9ILEtBQUlBLEVBQUUsR0FBR0EsS0FBTUYsRUFBRTJILFFBQVEzSCxFQUFFMkgsTUFBTXpILEdBQUcsTUFBTUQsRUFBRWdJLGNBQWNqSSxFQUFFaUksZUFBZS9ILElBQUlGLEVBQUVpSSxhQUFhL0gsSUFBSSxNQUFNc0IsSUFBSXhCLEVBQUVpSSxhQUFhLEdBQUd6RyxFQUFFLENBQUMsU0FBU2lJLEdBQUd6SixHQUFHLElBQUlDLEVBQUVELEVBQUUwSixZQUFZekosSUFBSUQsRUFBRWtJLGNBQWNHLGNBQWMsS0FBS3BJLEdBQUcsT0FBT0EsSUFBSUQsRUFBRTJILE1BQU0xSCxFQUFFLENBQUMsU0FBUzBKLEdBQUczSixHQUFHLE9BQU9BLEdBQUcsSUFBSyxNQUFNLE1BQU0sNkJBQTZCLElBQUssT0FBTyxNQUFNLHFDQUFxQyxRQUFRLE1BQU0sK0JBQStCLENBQzdjLFNBQVM0SixHQUFHNUosRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsaUNBQWlDQSxFQUFFMkosR0FBRzFKLEdBQUcsK0JBQStCRCxHQUFHLGtCQUFrQkMsRUFBRSwrQkFBK0JELENBQUMsQ0FDaEssSUFBSTZKLEdBQWU3SixHQUFaOEosSUFBWTlKLEdBQXNKLFNBQVNBLEVBQUVDLEdBQUcsR0FBRywrQkFBK0JELEVBQUUrSixjQUFjLGNBQWMvSixFQUFFQSxFQUFFZ0ssVUFBVS9KLE1BQU0sQ0FBMkYsS0FBMUY0SixHQUFHQSxJQUFJL0ksU0FBU0MsY0FBYyxRQUFVaUosVUFBVSxRQUFRL0osRUFBRWdLLFVBQVVDLFdBQVcsU0FBYWpLLEVBQUU0SixHQUFHTSxXQUFXbkssRUFBRW1LLFlBQVluSyxFQUFFb0ssWUFBWXBLLEVBQUVtSyxZQUFZLEtBQUtsSyxFQUFFa0ssWUFBWW5LLEVBQUVxSyxZQUFZcEssRUFBRWtLLFdBQVcsQ0FBQyxFQUF2YixvQkFBcUJHLE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTdEssRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUc2SSxNQUFNQyx5QkFBd0IsV0FBVyxPQUFPdkssR0FBRUMsRUFBRUMsRUFBTSxHQUFFLEVBQUVGLElBQ3RLLFNBQVN3SyxHQUFHeEssRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRW1LLFdBQVcsR0FBR2pLLEdBQUdBLElBQUlGLEVBQUV5SyxXQUFXLElBQUl2SyxFQUFFd0ssU0FBd0IsWUFBZHhLLEVBQUV5SyxVQUFVMUssRUFBUyxDQUFDRCxFQUFFMEosWUFBWXpKLENBQUMsQ0FDdEgsSUFBSTJLLEdBQUcsQ0FBQ0MseUJBQXdCLEVBQUdDLGFBQVksRUFBR0MsbUJBQWtCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHQyxhQUFZLEVBQUdDLFNBQVEsRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxjQUFhLEVBQUdDLFdBQVUsRUFBR0MsVUFBUyxFQUFHQyxTQUFRLEVBQUdDLFlBQVcsRUFBR0MsYUFBWSxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsZUFBYyxFQUFHQyxnQkFBZSxFQUFHQyxpQkFBZ0IsRUFBR0MsWUFBVyxFQUFHQyxXQUFVLEVBQUdDLFlBQVcsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLFFBQU8sRUFDbGZDLE1BQUssRUFBR0MsYUFBWSxFQUFHQyxjQUFhLEVBQUdDLGFBQVksRUFBR0MsaUJBQWdCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsZUFBYyxFQUFHQyxhQUFZLEdBQUlDLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTSxLQUE2SCxTQUFTQyxHQUFHek4sRUFBRUMsRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsa0JBQW1CQSxHQUFHLEtBQUtBLEVBQUUsR0FBR0MsR0FBRyxpQkFBa0JELEdBQUcsSUFBSUEsR0FBRzJLLEdBQUd6SixlQUFlbkIsSUFBSTRLLEdBQUc1SyxJQUFJLEdBQUdDLEdBQUdrRixPQUFPbEYsRUFBRSxJQUFJLENBQ3piLFNBQVN5TixHQUFHMU4sRUFBRUMsR0FBYSxJQUFJLElBQUlDLEtBQWxCRixFQUFFQSxFQUFFMk4sTUFBbUIxTixFQUFFLEdBQUdBLEVBQUVrQixlQUFlakIsR0FBRyxDQUFDLElBQUlzQixFQUFFLElBQUl0QixFQUFFME4sUUFBUSxNQUFNbk0sRUFBRWdNLEdBQUd2TixFQUFFRCxFQUFFQyxHQUFHc0IsR0FBRyxVQUFVdEIsSUFBSUEsRUFBRSxZQUFZc0IsRUFBRXhCLEVBQUU2TixZQUFZM04sRUFBRXVCLEdBQUd6QixFQUFFRSxHQUFHdUIsQ0FBQyxDQUFDLENBRFlSLE9BQU82TSxLQUFLbEQsSUFBSXJJLFNBQVEsU0FBU3ZDLEdBQUd3TixHQUFHakwsU0FBUSxTQUFTdEMsR0FBR0EsRUFBRUEsRUFBRUQsRUFBRStOLE9BQU8sR0FBR3BMLGNBQWMzQyxFQUFFZ08sVUFBVSxHQUFHcEQsR0FBRzNLLEdBQUcySyxHQUFHNUssRUFBRSxHQUFFLElBQ2hJLElBQUlpTyxHQUFHbkosRUFBRSxDQUFDb0osVUFBUyxHQUFJLENBQUNDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBR0MsT0FBTSxFQUFHQyxLQUFJLElBQ2xULFNBQVNDLEdBQUdsUCxFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHZ08sR0FBR2pPLEtBQUssTUFBTUMsRUFBRXFKLFVBQVUsTUFBTXJKLEVBQUVvSix5QkFBeUIsTUFBTXBFLE1BQU1sRixFQUFFLElBQUlDLElBQUksR0FBRyxNQUFNQyxFQUFFb0osd0JBQXdCLENBQUMsR0FBRyxNQUFNcEosRUFBRXFKLFNBQVMsTUFBTXJFLE1BQU1sRixFQUFFLEtBQUssR0FBRyxpQkFBa0JFLEVBQUVvSiwyQkFBMkIsV0FBV3BKLEVBQUVvSix5QkFBeUIsTUFBTXBFLE1BQU1sRixFQUFFLElBQUssQ0FBQyxHQUFHLE1BQU1FLEVBQUUwTixPQUFPLGlCQUFrQjFOLEVBQUUwTixNQUFNLE1BQU0xSSxNQUFNbEYsRUFBRSxJQUFLLENBQUMsQ0FDbFcsU0FBU29QLEdBQUduUCxFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRTROLFFBQVEsS0FBSyxNQUFNLGlCQUFrQjNOLEVBQUVtUCxHQUFHLE9BQU9wUCxHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixPQUFNLEVBQUcsUUFBUSxPQUFNLEVBQUcsQ0FBQyxJQUFJcVAsR0FBRyxLQUFLLFNBQVNDLEdBQUd0UCxHQUE2RixPQUExRkEsRUFBRUEsRUFBRXVQLFFBQVF2UCxFQUFFd1AsWUFBWTNPLFFBQVM0TywwQkFBMEJ6UCxFQUFFQSxFQUFFeVAseUJBQWdDLElBQUl6UCxFQUFFMEssU0FBUzFLLEVBQUUwUCxXQUFXMVAsQ0FBQyxDQUFDLElBQUkyUCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUNwYyxTQUFTQyxHQUFHOVAsR0FBRyxHQUFHQSxFQUFFK1AsR0FBRy9QLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQjJQLEdBQUcsTUFBTTFLLE1BQU1sRixFQUFFLE1BQU0sSUFBSUUsRUFBRUQsRUFBRWdRLFVBQVUvUCxJQUFJQSxFQUFFZ1EsR0FBR2hRLEdBQUcwUCxHQUFHM1AsRUFBRWdRLFVBQVVoUSxFQUFFa0MsS0FBS2pDLEdBQUcsQ0FBQyxDQUFDLFNBQVNpUSxHQUFHbFEsR0FBRzRQLEdBQUdDLEdBQUdBLEdBQUdNLEtBQUtuUSxHQUFHNlAsR0FBRyxDQUFDN1AsR0FBRzRQLEdBQUc1UCxDQUFDLENBQUMsU0FBU29RLEtBQUssR0FBR1IsR0FBRyxDQUFDLElBQUk1UCxFQUFFNFAsR0FBRzNQLEVBQUU0UCxHQUFvQixHQUFqQkEsR0FBR0QsR0FBRyxLQUFLRSxHQUFHOVAsR0FBTUMsRUFBRSxJQUFJRCxFQUFFLEVBQUVBLEVBQUVDLEVBQUVHLE9BQU9KLElBQUk4UCxHQUFHN1AsRUFBRUQsR0FBRyxDQUFDLENBQUMsU0FBU3FRLEdBQUdyUSxFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEVBQUUsQ0FBQyxTQUFTcVEsS0FBSyxDQUFDLElBQUlDLElBQUcsRUFBRyxTQUFTQyxHQUFHeFEsRUFBRUMsRUFBRUMsR0FBRyxHQUFHcVEsR0FBRyxPQUFPdlEsRUFBRUMsRUFBRUMsR0FBR3FRLElBQUcsRUFBRyxJQUFJLE9BQU9GLEdBQUdyUSxFQUFFQyxFQUFFQyxFQUFFLENBQUMsUUFBV3FRLElBQUcsR0FBRyxPQUFPWCxJQUFJLE9BQU9DLE1BQUdTLEtBQUtGLEtBQUksQ0FBQyxDQUNoYixTQUFTSyxHQUFHelEsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFZ1EsVUFBVSxHQUFHLE9BQU85UCxFQUFFLE9BQU8sS0FBSyxJQUFJc0IsRUFBRXlPLEdBQUcvUCxHQUFHLEdBQUcsT0FBT3NCLEVBQUUsT0FBTyxLQUFLdEIsRUFBRXNCLEVBQUV2QixHQUFHRCxFQUFFLE9BQU9DLEdBQUcsSUFBSyxVQUFVLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssdUJBQXVCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxZQUFZLElBQUssbUJBQW1CLElBQUssZ0JBQWdCdUIsR0FBR0EsRUFBRTJILFlBQXFCM0gsSUFBSSxZQUFieEIsRUFBRUEsRUFBRWtDLE9BQXVCLFVBQVVsQyxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsSUFBSUEsR0FBR3dCLEVBQUUsTUFBTXhCLEVBQUUsUUFBUUEsR0FBRSxFQUFHLEdBQUdBLEVBQUUsT0FBTyxLQUFLLEdBQUdFLEdBQUcsbUJBQ2xlQSxFQUFFLE1BQU0rRSxNQUFNbEYsRUFBRSxJQUFJRSxTQUFTQyxJQUFJLE9BQU9BLENBQUMsQ0FBQyxJQUFJd1EsSUFBRyxFQUFHLEdBQUc5UCxFQUFHLElBQUksSUFBSStQLEdBQUcsQ0FBQyxFQUFFMVAsT0FBT3VFLGVBQWVtTCxHQUFHLFVBQVUsQ0FBQ3pKLElBQUksV0FBV3dKLElBQUcsQ0FBRSxJQUFJN1AsT0FBTytQLGlCQUFpQixPQUFPRCxHQUFHQSxJQUFJOVAsT0FBT2dRLG9CQUFvQixPQUFPRixHQUFHQSxHQUFHLENBQUMsTUFBTTNRLElBQUcwUSxJQUFHLENBQUUsQ0FBQyxTQUFTSSxHQUFHOVEsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUVDLEVBQUVDLEVBQUVrRSxFQUFFQyxHQUFHLElBQUlGLEVBQUVpRCxNQUFNM0gsVUFBVTJCLE1BQU1JLEtBQUs5QyxVQUFVLEdBQUcsSUFBSUYsRUFBRThRLE1BQU03USxFQUFFMEYsRUFBRSxDQUFDLE1BQU1vTCxHQUFHcFAsS0FBS3FQLFFBQVFELEVBQUUsQ0FBQyxDQUFDLElBQUlFLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxDQUFDTCxRQUFRLFNBQVNqUixHQUFHa1IsSUFBRyxFQUFHQyxHQUFHblIsQ0FBQyxHQUFHLFNBQVN1UixHQUFHdlIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUVDLEVBQUVDLEVBQUVrRSxFQUFFQyxHQUFHb0wsSUFBRyxFQUFHQyxHQUFHLEtBQUtMLEdBQUdDLE1BQU1PLEdBQUduUixVQUFVLENBQ2pXLFNBQVNxUixHQUFHeFIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFRSxFQUFFRixFQUFFLEdBQUdBLEVBQUV5UixVQUFVLEtBQUt4UixFQUFFeVIsUUFBUXpSLEVBQUVBLEVBQUV5UixXQUFXLENBQUMxUixFQUFFQyxFQUFFLE1BQW9CLE1BQWpCQSxFQUFFRCxHQUFTMlIsU0FBY3pSLEVBQUVELEVBQUV5UixRQUFRMVIsRUFBRUMsRUFBRXlSLGFBQWExUixFQUFFLENBQUMsT0FBTyxJQUFJQyxFQUFFa0csSUFBSWpHLEVBQUUsSUFBSSxDQUFDLFNBQVMwUixHQUFHNVIsR0FBRyxHQUFHLEtBQUtBLEVBQUVtRyxJQUFJLENBQUMsSUFBSWxHLEVBQUVELEVBQUU2UixjQUFzRSxHQUF4RCxPQUFPNVIsR0FBa0IsUUFBZEQsRUFBRUEsRUFBRXlSLGFBQXFCeFIsRUFBRUQsRUFBRTZSLGVBQW1CLE9BQU81UixFQUFFLE9BQU9BLEVBQUU2UixVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBU0MsR0FBRy9SLEdBQUcsR0FBR3dSLEdBQUd4UixLQUFLQSxFQUFFLE1BQU1pRixNQUFNbEYsRUFBRSxLQUFNLENBRTFTLFNBQVNpUyxHQUFHaFMsR0FBVyxPQUFPLFFBQWZBLEVBRHROLFNBQVlBLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXlSLFVBQVUsSUFBSXhSLEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUV1UixHQUFHeFIsSUFBZSxNQUFNaUYsTUFBTWxGLEVBQUUsTUFBTSxPQUFPRSxJQUFJRCxFQUFFLEtBQUtBLENBQUMsQ0FBQyxJQUFJLElBQUlFLEVBQUVGLEVBQUV3QixFQUFFdkIsSUFBSSxDQUFDLElBQUl3QixFQUFFdkIsRUFBRXdSLE9BQU8sR0FBRyxPQUFPalEsRUFBRSxNQUFNLElBQUlDLEVBQUVELEVBQUVnUSxVQUFVLEdBQUcsT0FBTy9QLEVBQUUsQ0FBWSxHQUFHLFFBQWRGLEVBQUVDLEVBQUVpUSxRQUFtQixDQUFDeFIsRUFBRXNCLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHQyxFQUFFd1EsUUFBUXZRLEVBQUV1USxNQUFNLENBQUMsSUFBSXZRLEVBQUVELEVBQUV3USxNQUFNdlEsR0FBRyxDQUFDLEdBQUdBLElBQUl4QixFQUFFLE9BQU82UixHQUFHdFEsR0FBR3pCLEVBQUUsR0FBRzBCLElBQUlGLEVBQUUsT0FBT3VRLEdBQUd0USxHQUFHeEIsRUFBRXlCLEVBQUVBLEVBQUV3USxPQUFPLENBQUMsTUFBTWpOLE1BQU1sRixFQUFFLEtBQU0sQ0FBQyxHQUFHRyxFQUFFd1IsU0FBU2xRLEVBQUVrUSxPQUFPeFIsRUFBRXVCLEVBQUVELEVBQUVFLE1BQU0sQ0FBQyxJQUFJLElBQUlDLEdBQUUsRUFBR2tFLEVBQUVwRSxFQUFFd1EsTUFBTXBNLEdBQUcsQ0FBQyxHQUFHQSxJQUFJM0YsRUFBRSxDQUFDeUIsR0FBRSxFQUFHekIsRUFBRXVCLEVBQUVELEVBQUVFLEVBQUUsS0FBSyxDQUFDLEdBQUdtRSxJQUFJckUsRUFBRSxDQUFDRyxHQUFFLEVBQUdILEVBQUVDLEVBQUV2QixFQUFFd0IsRUFBRSxLQUFLLENBQUNtRSxFQUFFQSxFQUFFcU0sT0FBTyxDQUFDLElBQUl2USxFQUFFLENBQUMsSUFBSWtFLEVBQUVuRSxFQUFFdVEsTUFBTXBNLEdBQUcsQ0FBQyxHQUFHQSxJQUM1ZjNGLEVBQUUsQ0FBQ3lCLEdBQUUsRUFBR3pCLEVBQUV3QixFQUFFRixFQUFFQyxFQUFFLEtBQUssQ0FBQyxHQUFHb0UsSUFBSXJFLEVBQUUsQ0FBQ0csR0FBRSxFQUFHSCxFQUFFRSxFQUFFeEIsRUFBRXVCLEVBQUUsS0FBSyxDQUFDb0UsRUFBRUEsRUFBRXFNLE9BQU8sQ0FBQyxJQUFJdlEsRUFBRSxNQUFNc0QsTUFBTWxGLEVBQUUsS0FBTSxDQUFDLENBQUMsR0FBR0csRUFBRXVSLFlBQVlqUSxFQUFFLE1BQU15RCxNQUFNbEYsRUFBRSxLQUFNLENBQUMsR0FBRyxJQUFJRyxFQUFFaUcsSUFBSSxNQUFNbEIsTUFBTWxGLEVBQUUsTUFBTSxPQUFPRyxFQUFFOFAsVUFBVW1DLFVBQVVqUyxFQUFFRixFQUFFQyxDQUFDLENBQWtCbVMsQ0FBR3BTLElBQW1CcVMsR0FBR3JTLEdBQUcsSUFBSSxDQUFDLFNBQVNxUyxHQUFHclMsR0FBRyxHQUFHLElBQUlBLEVBQUVtRyxLQUFLLElBQUluRyxFQUFFbUcsSUFBSSxPQUFPbkcsRUFBRSxJQUFJQSxFQUFFQSxFQUFFaVMsTUFBTSxPQUFPalMsR0FBRyxDQUFDLElBQUlDLEVBQUVvUyxHQUFHclMsR0FBRyxHQUFHLE9BQU9DLEVBQUUsT0FBT0EsRUFBRUQsRUFBRUEsRUFBRWtTLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FDMVgsSUFBSUksR0FBR3hTLEVBQUd5UywwQkFBMEJDLEdBQUcxUyxFQUFHMlMsd0JBQXdCQyxHQUFHNVMsRUFBRzZTLHFCQUFxQkMsR0FBRzlTLEVBQUcrUyxzQkFBc0JDLEdBQUVoVCxFQUFHaVQsYUFBYUMsR0FBR2xULEVBQUdtVCxpQ0FBaUNDLEdBQUdwVCxFQUFHcVQsMkJBQTJCQyxHQUFHdFQsRUFBR3VULDhCQUE4QkMsR0FBR3hULEVBQUd5VCx3QkFBd0JDLEdBQUcxVCxFQUFHMlQscUJBQXFCQyxHQUFHNVQsRUFBRzZULHNCQUFzQkMsR0FBRyxLQUFLQyxHQUFHLEtBQ25WQyxHQUFHQyxLQUFLQyxNQUFNRCxLQUFLQyxNQUFpQyxTQUFZaFUsR0FBVSxPQUFPLEtBQWRBLEtBQUssR0FBZSxHQUFHLElBQUlpVSxHQUFHalUsR0FBR2tVLEdBQUcsR0FBRyxDQUFDLEVBQS9FRCxHQUFHRixLQUFLSSxJQUFJRCxHQUFHSCxLQUFLSyxJQUFnRUMsR0FBRyxHQUFHQyxHQUFHLFFBQzdILFNBQVNDLEdBQUd2VSxHQUFHLE9BQU9BLEdBQUdBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQVMsUUFBRkEsRUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLE9BQVMsVUFBRkEsRUFBWSxLQUFLLFVBQVUsT0FBTyxVQUFVLEtBQUssVUFBVSxPQUFPLFVBQVUsS0FBSyxVQUFVLE9BQU8sVUFBVSxLQUFLLFdBQVcsT0FBTyxXQUN6Z0IsUUFBUSxPQUFPQSxFQUFFLENBQUMsU0FBU3dVLEdBQUd4VSxFQUFFQyxHQUFHLElBQUlDLEVBQUVGLEVBQUV5VSxhQUFhLEdBQUcsSUFBSXZVLEVBQUUsT0FBTyxFQUFFLElBQUlzQixFQUFFLEVBQUVDLEVBQUV6QixFQUFFMFUsZUFBZWhULEVBQUUxQixFQUFFMlUsWUFBWWhULEVBQUksVUFBRnpCLEVBQVksR0FBRyxJQUFJeUIsRUFBRSxDQUFDLElBQUlrRSxFQUFFbEUsR0FBR0YsRUFBRSxJQUFJb0UsRUFBRXJFLEVBQUUrUyxHQUFHMU8sR0FBUyxJQUFMbkUsR0FBR0MsS0FBVUgsRUFBRStTLEdBQUc3UyxHQUFJLE1BQWEsSUFBUEMsRUFBRXpCLEdBQUd1QixHQUFRRCxFQUFFK1MsR0FBRzVTLEdBQUcsSUFBSUQsSUFBSUYsRUFBRStTLEdBQUc3UyxJQUFJLEdBQUcsSUFBSUYsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJdkIsR0FBR0EsSUFBSXVCLEtBQVF2QixFQUFFd0IsTUFBS0EsRUFBRUQsR0FBR0EsS0FBRUUsRUFBRXpCLEdBQUdBLElBQVEsS0FBS3dCLEdBQVUsUUFBRkMsR0FBWSxPQUFPekIsRUFBMEMsR0FBakMsRUFBRnVCLElBQU9BLEdBQUssR0FBRnRCLEdBQTRCLEtBQXRCRCxFQUFFRCxFQUFFNFUsZ0JBQXdCLElBQUk1VSxFQUFFQSxFQUFFNlUsY0FBYzVVLEdBQUd1QixFQUFFLEVBQUV2QixHQUFjd0IsRUFBRSxJQUFidkIsRUFBRSxHQUFHNFQsR0FBRzdULElBQVV1QixHQUFHeEIsRUFBRUUsR0FBR0QsSUFBSXdCLEVBQUUsT0FBT0QsQ0FBQyxDQUN2YyxTQUFTc1QsR0FBRzlVLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPQyxFQUFFLElBQUksS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQU9BLEVBQUUsSUFBdUosUUFBUSxPQUFPLEVBQUUsQ0FDck4sU0FBUzhVLEdBQUcvVSxHQUFnQyxPQUFPLElBQXBDQSxHQUFrQixXQUFoQkEsRUFBRXlVLGNBQXNDelUsRUFBSSxXQUFGQSxFQUFhLFdBQVcsQ0FBQyxDQUFDLFNBQVNnVixLQUFLLElBQUloVixFQUFFcVUsR0FBb0MsUUFBbEIsU0FBZkEsS0FBSyxNQUFxQkEsR0FBRyxJQUFXclUsQ0FBQyxDQUFDLFNBQVNpVixHQUFHalYsR0FBRyxJQUFJLElBQUlDLEVBQUUsR0FBR0MsRUFBRSxFQUFFLEdBQUdBLEVBQUVBLElBQUlELEVBQUVrUSxLQUFLblEsR0FBRyxPQUFPQyxDQUFDLENBQzNhLFNBQVNpVixHQUFHbFYsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRXlVLGNBQWN4VSxFQUFFLFlBQVlBLElBQUlELEVBQUUwVSxlQUFlLEVBQUUxVSxFQUFFMlUsWUFBWSxJQUFHM1UsRUFBRUEsRUFBRW1WLFlBQVdsVixFQUFFLEdBQUc2VCxHQUFHN1QsSUFBUUMsQ0FBQyxDQUN6SCxTQUFTa1YsR0FBR3BWLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRTRVLGdCQUFnQjNVLEVBQUUsSUFBSUQsRUFBRUEsRUFBRTZVLGNBQWMzVSxHQUFHLENBQUMsSUFBSXNCLEVBQUUsR0FBR3NTLEdBQUc1VCxHQUFHdUIsRUFBRSxHQUFHRCxFQUFFQyxFQUFFeEIsRUFBRUQsRUFBRXdCLEdBQUd2QixJQUFJRCxFQUFFd0IsSUFBSXZCLEdBQUdDLElBQUl1QixDQUFDLENBQUMsQ0FBQyxJQUFJNFQsR0FBRSxFQUFFLFNBQVNDLEdBQUd0VixHQUFTLE9BQU8sR0FBYkEsSUFBSUEsR0FBYSxFQUFFQSxFQUFTLFVBQUZBLEVBQWEsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUl1VixHQUFHQyxHQUFHQyxHQUFHQyxHQUFHQyxHQUFHQyxJQUFHLEVBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxJQUFJQyxJQUFJQyxHQUFHLElBQUlELElBQUlFLEdBQUcsR0FBR0MsR0FBRyw2UEFBNlAvVCxNQUFNLEtBQ2hpQixTQUFTZ1UsR0FBR3RXLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFVBQVUsSUFBSyxXQUFXOFYsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR00sT0FBT3RXLEVBQUV1VyxXQUFXLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUJMLEdBQUdJLE9BQU90VyxFQUFFdVcsV0FBVyxDQUNuVCxTQUFTQyxHQUFHelcsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUVDLEdBQUcsT0FBRyxPQUFPMUIsR0FBR0EsRUFBRTBXLGNBQWNoVixHQUFTMUIsRUFBRSxDQUFDMlcsVUFBVTFXLEVBQUUyVyxhQUFhMVcsRUFBRTJXLGlCQUFpQnJWLEVBQUVrVixZQUFZaFYsRUFBRW9WLGlCQUFpQixDQUFDclYsSUFBSSxPQUFPeEIsR0FBWSxRQUFSQSxFQUFFOFAsR0FBRzlQLEtBQWF1VixHQUFHdlYsR0FBSUQsSUFBRUEsRUFBRTZXLGtCQUFrQnJWLEVBQUV2QixFQUFFRCxFQUFFOFcsaUJBQWlCLE9BQU9yVixJQUFJLElBQUl4QixFQUFFMk4sUUFBUW5NLElBQUl4QixFQUFFa1EsS0FBSzFPLEdBQVV6QixFQUFDLENBRXBSLFNBQVMrVyxHQUFHL1csR0FBRyxJQUFJQyxFQUFFK1csR0FBR2hYLEVBQUV1UCxRQUFRLEdBQUcsT0FBT3RQLEVBQUUsQ0FBQyxJQUFJQyxFQUFFc1IsR0FBR3ZSLEdBQUcsR0FBRyxPQUFPQyxFQUFFLEdBQVcsTUFBUkQsRUFBRUMsRUFBRWlHLE1BQVksR0FBVyxRQUFSbEcsRUFBRTJSLEdBQUcxUixJQUE0RCxPQUEvQ0YsRUFBRTJXLFVBQVUxVyxPQUFFMFYsR0FBRzNWLEVBQUVpWCxVQUFTLFdBQVd4QixHQUFHdlYsRUFBRSxTQUFnQixHQUFHLElBQUlELEdBQUdDLEVBQUU4UCxVQUFVbUMsUUFBUU4sY0FBY3FGLGFBQW1FLFlBQXJEbFgsRUFBRTJXLFVBQVUsSUFBSXpXLEVBQUVpRyxJQUFJakcsRUFBRThQLFVBQVVtSCxjQUFjLEtBQVksQ0FBQ25YLEVBQUUyVyxVQUFVLElBQUksQ0FDbFQsU0FBU1MsR0FBR3BYLEdBQUcsR0FBRyxPQUFPQSxFQUFFMlcsVUFBVSxPQUFNLEVBQUcsSUFBSSxJQUFJMVcsRUFBRUQsRUFBRThXLGlCQUFpQixFQUFFN1csRUFBRUcsUUFBUSxDQUFDLElBQUlGLEVBQUVtWCxHQUFHclgsRUFBRTRXLGFBQWE1VyxFQUFFNlcsaUJBQWlCNVcsRUFBRSxHQUFHRCxFQUFFMFcsYUFBYSxHQUFHLE9BQU94VyxFQUFpRyxPQUFlLFFBQVJELEVBQUU4UCxHQUFHN1AsS0FBYXNWLEdBQUd2VixHQUFHRCxFQUFFMlcsVUFBVXpXLEdBQUUsRUFBM0gsSUFBSXNCLEVBQUUsSUFBdEJ0QixFQUFFRixFQUFFMFcsYUFBd0J6UCxZQUFZL0csRUFBRWdDLEtBQUtoQyxHQUFHbVAsR0FBRzdOLEVBQUV0QixFQUFFcVAsT0FBTytILGNBQWM5VixHQUFHNk4sR0FBRyxLQUEwRHBQLEVBQUVzWCxPQUFPLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBU0MsR0FBR3hYLEVBQUVDLEVBQUVDLEdBQUdrWCxHQUFHcFgsSUFBSUUsRUFBRXFXLE9BQU90VyxFQUFFLENBQUMsU0FBU3dYLEtBQUs3QixJQUFHLEVBQUcsT0FBT0UsSUFBSXNCLEdBQUd0QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXFCLEdBQUdyQixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSW9CLEdBQUdwQixNQUFNQSxHQUFHLE1BQU1DLEdBQUcxVCxRQUFRaVYsSUFBSXJCLEdBQUc1VCxRQUFRaVYsR0FBRyxDQUNuZixTQUFTRSxHQUFHMVgsRUFBRUMsR0FBR0QsRUFBRTJXLFlBQVkxVyxJQUFJRCxFQUFFMlcsVUFBVSxLQUFLZixLQUFLQSxJQUFHLEVBQUc5VixFQUFHeVMsMEJBQTBCelMsRUFBR3lULHdCQUF3QmtFLEtBQUssQ0FDNUgsU0FBU0UsR0FBRzNYLEdBQUcsU0FBU0MsRUFBRUEsR0FBRyxPQUFPeVgsR0FBR3pYLEVBQUVELEVBQUUsQ0FBQyxHQUFHLEVBQUU2VixHQUFHelYsT0FBTyxDQUFDc1gsR0FBRzdCLEdBQUcsR0FBRzdWLEdBQUcsSUFBSSxJQUFJRSxFQUFFLEVBQUVBLEVBQUUyVixHQUFHelYsT0FBT0YsSUFBSSxDQUFDLElBQUlzQixFQUFFcVUsR0FBRzNWLEdBQUdzQixFQUFFbVYsWUFBWTNXLElBQUl3QixFQUFFbVYsVUFBVSxLQUFLLENBQUMsQ0FBeUYsSUFBeEYsT0FBT2IsSUFBSTRCLEdBQUc1QixHQUFHOVYsR0FBRyxPQUFPK1YsSUFBSTJCLEdBQUczQixHQUFHL1YsR0FBRyxPQUFPZ1csSUFBSTBCLEdBQUcxQixHQUFHaFcsR0FBR2lXLEdBQUcxVCxRQUFRdEMsR0FBR2tXLEdBQUc1VCxRQUFRdEMsR0FBT0MsRUFBRSxFQUFFQSxFQUFFa1csR0FBR2hXLE9BQU9GLEtBQUlzQixFQUFFNFUsR0FBR2xXLElBQUt5VyxZQUFZM1csSUFBSXdCLEVBQUVtVixVQUFVLE1BQU0sS0FBSyxFQUFFUCxHQUFHaFcsUUFBaUIsUUFBUkYsRUFBRWtXLEdBQUcsSUFBWU8sV0FBWUksR0FBRzdXLEdBQUcsT0FBT0EsRUFBRXlXLFdBQVdQLEdBQUdtQixPQUFPLENBQUMsSUFBSUssR0FBR25VLEVBQUdvVSx3QkFBd0JDLElBQUcsRUFDNWEsU0FBU0MsR0FBRy9YLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHLElBQUlDLEVBQUU0VCxHQUFFM1QsRUFBRWtXLEdBQUdJLFdBQVdKLEdBQUdJLFdBQVcsS0FBSyxJQUFJM0MsR0FBRSxFQUFFNEMsR0FBR2pZLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFLENBQUMsUUFBUTZULEdBQUU1VCxFQUFFbVcsR0FBR0ksV0FBV3RXLENBQUMsQ0FBQyxDQUFDLFNBQVN3VyxHQUFHbFksRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsSUFBSUMsRUFBRTRULEdBQUUzVCxFQUFFa1csR0FBR0ksV0FBV0osR0FBR0ksV0FBVyxLQUFLLElBQUkzQyxHQUFFLEVBQUU0QyxHQUFHalksRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUUsQ0FBQyxRQUFRNlQsR0FBRTVULEVBQUVtVyxHQUFHSSxXQUFXdFcsQ0FBQyxDQUFDLENBQ2pPLFNBQVN1VyxHQUFHalksRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsR0FBR3NXLEdBQUcsQ0FBQyxJQUFJclcsRUFBRTRWLEdBQUdyWCxFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxHQUFHLE9BQU9DLEVBQUUwVyxHQUFHblksRUFBRUMsRUFBRXVCLEVBQUU0VyxHQUFHbFksR0FBR29XLEdBQUd0VyxFQUFFd0IsUUFBUSxHQU50RixTQUFZeEIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsT0FBT3hCLEdBQUcsSUFBSyxVQUFVLE9BQU82VixHQUFHVyxHQUFHWCxHQUFHOVYsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBT3NVLEdBQUdVLEdBQUdWLEdBQUcvVixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPdVUsR0FBR1MsR0FBR1QsR0FBR2hXLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxJQUFHLEVBQUcsSUFBSyxjQUFjLElBQUlDLEVBQUVELEVBQUUrVSxVQUFrRCxPQUF4Q1AsR0FBR3hRLElBQUkvRCxFQUFFK1UsR0FBR1IsR0FBRy9PLElBQUl4RixJQUFJLEtBQUsxQixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsS0FBVSxFQUFHLElBQUssb0JBQW9CLE9BQU9DLEVBQUVELEVBQUUrVSxVQUFVTCxHQUFHMVEsSUFBSS9ELEVBQUUrVSxHQUFHTixHQUFHalAsSUFBSXhGLElBQUksS0FBSzFCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxLQUFJLEVBQUcsT0FBTSxDQUFFLENBTTFRNFcsQ0FBRzVXLEVBQUV6QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBR0EsRUFBRThXLHVCQUF1QixHQUFHaEMsR0FBR3RXLEVBQUV3QixHQUFLLEVBQUZ2QixJQUFNLEVBQUVvVyxHQUFHekksUUFBUTVOLEdBQUcsQ0FBQyxLQUFLLE9BQU95QixHQUFHLENBQUMsSUFBSUMsRUFBRXFPLEdBQUd0TyxHQUEwRCxHQUF2RCxPQUFPQyxHQUFHNlQsR0FBRzdULEdBQWlCLFFBQWRBLEVBQUUyVixHQUFHclgsRUFBRUMsRUFBRUMsRUFBRXNCLEtBQWEyVyxHQUFHblksRUFBRUMsRUFBRXVCLEVBQUU0VyxHQUFHbFksR0FBTXdCLElBQUlELEVBQUUsTUFBTUEsRUFBRUMsQ0FBQyxDQUFDLE9BQU9ELEdBQUdELEVBQUU4VyxpQkFBaUIsTUFBTUgsR0FBR25ZLEVBQUVDLEVBQUV1QixFQUFFLEtBQUt0QixFQUFFLENBQUMsQ0FBQyxJQUFJa1ksR0FBRyxLQUNwVSxTQUFTZixHQUFHclgsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQTJCLEdBQXhCNFcsR0FBRyxLQUF3QixRQUFYcFksRUFBRWdYLEdBQVZoWCxFQUFFc1AsR0FBRzlOLEtBQXVCLEdBQVcsUUFBUnZCLEVBQUV1UixHQUFHeFIsSUFBWUEsRUFBRSxVQUFVLEdBQVcsTUFBUkUsRUFBRUQsRUFBRWtHLEtBQVcsQ0FBUyxHQUFHLFFBQVhuRyxFQUFFNFIsR0FBRzNSLElBQWUsT0FBT0QsRUFBRUEsRUFBRSxJQUFJLE1BQU0sR0FBRyxJQUFJRSxFQUFFLENBQUMsR0FBR0QsRUFBRStQLFVBQVVtQyxRQUFRTixjQUFjcUYsYUFBYSxPQUFPLElBQUlqWCxFQUFFa0csSUFBSWxHLEVBQUUrUCxVQUFVbUgsY0FBYyxLQUFLblgsRUFBRSxJQUFJLE1BQU1DLElBQUlELElBQUlBLEVBQUUsTUFBVyxPQUFMb1ksR0FBR3BZLEVBQVMsSUFBSSxDQUM3UyxTQUFTdVksR0FBR3ZZLEdBQUcsT0FBT0EsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssUUFBUSxJQUFLLGNBQWMsSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssVUFBVSxJQUFLLFlBQVksSUFBSyxPQUFPLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxRQUFRLElBQUssVUFBVSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssUUFBUSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSyxPQUFPLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLFlBQVksSUFBSyxhQUFhLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLGNBQWMsSUFBSyxXQUFXLElBQUssYUFBYSxJQUFLLGVBQWUsSUFBSyxTQUFTLElBQUssa0JBQWtCLElBQUssWUFBWSxJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLG9CQUFvQixJQUFLLGFBQWEsSUFBSyxZQUFZLElBQUssY0FBYyxJQUFLLE9BQU8sSUFBSyxtQkFBbUIsSUFBSyxRQUFRLElBQUssYUFBYSxJQUFLLFdBQVcsSUFBSyxTQUFTLElBQUssY0FBYyxPQUFPLEVBQUUsSUFBSyxPQUFPLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssWUFBWSxJQUFLLFFBQVEsSUFBSyxhQUFhLElBQUssYUFBYSxJQUFLLGVBQWUsSUFBSyxlQUFlLE9BQU8sRUFDcHFDLElBQUssVUFBVSxPQUFPZ1QsTUFBTSxLQUFLRSxHQUFHLE9BQU8sRUFBRSxLQUFLRSxHQUFHLE9BQU8sRUFBRSxLQUFLRSxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxVQUFVLFFBQVEsT0FBTyxHQUFHLFFBQVEsT0FBTyxHQUFHLENBQUMsSUFBSThFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSTFZLEVBQWtCd0IsRUFBaEJ2QixFQUFFd1ksR0FBR3ZZLEVBQUVELEVBQUVHLE9BQVNxQixFQUFFLFVBQVUrVyxHQUFHQSxHQUFHN1EsTUFBTTZRLEdBQUc5TyxZQUFZaEksRUFBRUQsRUFBRXJCLE9BQU8sSUFBSUosRUFBRSxFQUFFQSxFQUFFRSxHQUFHRCxFQUFFRCxLQUFLeUIsRUFBRXpCLEdBQUdBLEtBQUssSUFBSTJCLEVBQUV6QixFQUFFRixFQUFFLElBQUl3QixFQUFFLEVBQUVBLEdBQUdHLEdBQUcxQixFQUFFQyxFQUFFc0IsS0FBS0MsRUFBRUMsRUFBRUYsR0FBR0EsS0FBSyxPQUFPa1gsR0FBR2pYLEVBQUVvQixNQUFNN0MsRUFBRSxFQUFFd0IsRUFBRSxFQUFFQSxPQUFFLEVBQU8sQ0FDeFksU0FBU29YLEdBQUc1WSxHQUFHLElBQUlDLEVBQUVELEVBQUU2WSxRQUErRSxNQUF2RSxhQUFhN1ksRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRThZLFdBQWdCLEtBQUs3WSxJQUFJRCxFQUFFLElBQUtBLEVBQUVDLEVBQUUsS0FBS0QsSUFBSUEsRUFBRSxJQUFXLElBQUlBLEdBQUcsS0FBS0EsRUFBRUEsRUFBRSxDQUFDLENBQUMsU0FBUytZLEtBQUssT0FBTSxDQUFFLENBQUMsU0FBU0MsS0FBSyxPQUFNLENBQUUsQ0FDNUssU0FBU0MsR0FBR2paLEdBQUcsU0FBU0MsRUFBRUEsRUFBRXVCLEVBQUVDLEVBQUVDLEVBQUVDLEdBQTZHLElBQUksSUFBSXpCLEtBQWxIMEIsS0FBS3NYLFdBQVdqWixFQUFFMkIsS0FBS3VYLFlBQVkxWCxFQUFFRyxLQUFLTSxLQUFLVixFQUFFSSxLQUFLOFUsWUFBWWhWLEVBQUVFLEtBQUsyTixPQUFPNU4sRUFBRUMsS0FBS3dYLGNBQWMsS0FBa0JwWixFQUFFQSxFQUFFbUIsZUFBZWpCLEtBQUtELEVBQUVELEVBQUVFLEdBQUcwQixLQUFLMUIsR0FBR0QsRUFBRUEsRUFBRXlCLEdBQUdBLEVBQUV4QixJQUFnSSxPQUE1SDBCLEtBQUt5WCxvQkFBb0IsTUFBTTNYLEVBQUU0WCxpQkFBaUI1WCxFQUFFNFgsa0JBQWlCLElBQUs1WCxFQUFFNlgsYUFBYVIsR0FBR0MsR0FBR3BYLEtBQUs0WCxxQkFBcUJSLEdBQVVwWCxJQUFJLENBQzlFLE9BRCtFa0QsRUFBRTdFLEVBQUVpQixVQUFVLENBQUN1WSxlQUFlLFdBQVc3WCxLQUFLMFgsa0JBQWlCLEVBQUcsSUFBSXRaLEVBQUU0QixLQUFLOFUsWUFBWTFXLElBQUlBLEVBQUV5WixlQUFlelosRUFBRXlaLGlCQUFpQixrQkFBbUJ6WixFQUFFdVosY0FDN2V2WixFQUFFdVosYUFBWSxHQUFJM1gsS0FBS3lYLG1CQUFtQk4sR0FBRyxFQUFFVCxnQkFBZ0IsV0FBVyxJQUFJdFksRUFBRTRCLEtBQUs4VSxZQUFZMVcsSUFBSUEsRUFBRXNZLGdCQUFnQnRZLEVBQUVzWSxrQkFBa0Isa0JBQW1CdFksRUFBRTBaLGVBQWUxWixFQUFFMFosY0FBYSxHQUFJOVgsS0FBSzRYLHFCQUFxQlQsR0FBRyxFQUFFWSxRQUFRLFdBQVcsRUFBRUMsYUFBYWIsS0FBWTlZLENBQUMsQ0FDalIsSUFBb0w0WixHQUFHQyxHQUFHQyxHQUF0TEMsR0FBRyxDQUFDQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLFNBQVNwYSxHQUFHLE9BQU9BLEVBQUVvYSxXQUFXQyxLQUFLQyxLQUFLLEVBQUVoQixpQkFBaUIsRUFBRWlCLFVBQVUsR0FBR0MsR0FBR3ZCLEdBQUdlLElBQUlTLEdBQUczVixFQUFFLENBQUMsRUFBRWtWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFQyxPQUFPLElBQUlDLEdBQUczQixHQUFHd0IsSUFBYUksR0FBRy9WLEVBQUUsQ0FBQyxFQUFFMlYsR0FBRyxDQUFDSyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLGlCQUFpQkMsR0FBR0MsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLGNBQWMsU0FBUzViLEdBQUcsWUFBTyxJQUFTQSxFQUFFNGIsY0FBYzViLEVBQUU2YixjQUFjN2IsRUFBRXdQLFdBQVd4UCxFQUFFOGIsVUFBVTliLEVBQUU2YixZQUFZN2IsRUFBRTRiLGFBQWEsRUFBRUcsVUFBVSxTQUFTL2IsR0FBRyxNQUFHLGNBQzNlQSxFQUFTQSxFQUFFK2IsV0FBVS9iLElBQUkrWixLQUFLQSxJQUFJLGNBQWMvWixFQUFFa0MsTUFBTTJYLEdBQUc3WixFQUFFOGEsUUFBUWYsR0FBR2UsUUFBUWhCLEdBQUc5WixFQUFFK2EsUUFBUWhCLEdBQUdnQixTQUFTakIsR0FBR0QsR0FBRyxFQUFFRSxHQUFHL1osR0FBVTZaLEdBQUUsRUFBRW1DLFVBQVUsU0FBU2hjLEdBQUcsTUFBTSxjQUFjQSxFQUFFQSxFQUFFZ2MsVUFBVWxDLEVBQUUsSUFBSW1DLEdBQUdoRCxHQUFHNEIsSUFBaUNxQixHQUFHakQsR0FBN0JuVSxFQUFFLENBQUMsRUFBRStWLEdBQUcsQ0FBQ3NCLGFBQWEsS0FBNENDLEdBQUduRCxHQUE5Qm5VLEVBQUUsQ0FBQyxFQUFFMlYsR0FBRyxDQUFDbUIsY0FBYyxLQUEwRVMsR0FBR3BELEdBQTVEblUsRUFBRSxDQUFDLEVBQUVrVixHQUFHLENBQUNzQyxjQUFjLEVBQUVDLFlBQVksRUFBRUMsY0FBYyxLQUFjQyxHQUFHM1gsRUFBRSxDQUFDLEVBQUVrVixHQUFHLENBQUMwQyxjQUFjLFNBQVMxYyxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFMGMsY0FBYzdiLE9BQU82YixhQUFhLElBQUlDLEdBQUcxRCxHQUFHd0QsSUFBeUJHLEdBQUczRCxHQUFyQm5VLEVBQUUsQ0FBQyxFQUFFa1YsR0FBRyxDQUFDNkMsS0FBSyxLQUFjQyxHQUFHLENBQUNDLElBQUksU0FDeGZDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQkMsR0FBRyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLFFBQVEsR0FBRyxXQUFXLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyxTQUFTLEdBQUcsV0FBVyxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsWUFBWSxHQUFHLFVBQVUsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLFNBQVMsR0FBRyxTQUFTLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FDdGYsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksUUFBUUMsR0FBRyxDQUFDQyxJQUFJLFNBQVNDLFFBQVEsVUFBVUMsS0FBSyxVQUFVQyxNQUFNLFlBQVksU0FBU0MsR0FBR2plLEdBQUcsSUFBSUMsRUFBRTJCLEtBQUs4VSxZQUFZLE9BQU96VyxFQUFFdWIsaUJBQWlCdmIsRUFBRXViLGlCQUFpQnhiLE1BQUlBLEVBQUU0ZCxHQUFHNWQsT0FBTUMsRUFBRUQsRUFBSyxDQUFDLFNBQVN5YixLQUFLLE9BQU93QyxFQUFFLENBQ2hTLElBQUlDLEdBQUdwWixFQUFFLENBQUMsRUFBRTJWLEdBQUcsQ0FBQzBELElBQUksU0FBU25lLEdBQUcsR0FBR0EsRUFBRW1lLElBQUksQ0FBQyxJQUFJbGUsRUFBRTZjLEdBQUc5YyxFQUFFbWUsTUFBTW5lLEVBQUVtZSxJQUFJLEdBQUcsaUJBQWlCbGUsRUFBRSxPQUFPQSxDQUFDLENBQUMsTUFBTSxhQUFhRCxFQUFFa0MsS0FBYyxNQUFSbEMsRUFBRTRZLEdBQUc1WSxJQUFVLFFBQVFvZSxPQUFPQyxhQUFhcmUsR0FBSSxZQUFZQSxFQUFFa0MsTUFBTSxVQUFVbEMsRUFBRWtDLEtBQUt5YixHQUFHM2QsRUFBRTZZLFVBQVUsZUFBZSxFQUFFLEVBQUV5RixLQUFLLEVBQUVDLFNBQVMsRUFBRW5ELFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRWlELE9BQU8sRUFBRUMsT0FBTyxFQUFFakQsaUJBQWlCQyxHQUFHM0MsU0FBUyxTQUFTOVksR0FBRyxNQUFNLGFBQWFBLEVBQUVrQyxLQUFLMFcsR0FBRzVZLEdBQUcsQ0FBQyxFQUFFNlksUUFBUSxTQUFTN1ksR0FBRyxNQUFNLFlBQVlBLEVBQUVrQyxNQUFNLFVBQVVsQyxFQUFFa0MsS0FBS2xDLEVBQUU2WSxRQUFRLENBQUMsRUFBRTZGLE1BQU0sU0FBUzFlLEdBQUcsTUFBTSxhQUM3ZUEsRUFBRWtDLEtBQUswVyxHQUFHNVksR0FBRyxZQUFZQSxFQUFFa0MsTUFBTSxVQUFVbEMsRUFBRWtDLEtBQUtsQyxFQUFFNlksUUFBUSxDQUFDLElBQUk4RixHQUFHMUYsR0FBR2lGLElBQWlJVSxHQUFHM0YsR0FBN0huVSxFQUFFLENBQUMsRUFBRStWLEdBQUcsQ0FBQ3JFLFVBQVUsRUFBRXFJLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxTQUFTLEVBQUVDLG1CQUFtQixFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLFVBQVUsS0FBbUlDLEdBQUdyRyxHQUFySG5VLEVBQUUsQ0FBQyxFQUFFMlYsR0FBRyxDQUFDOEUsUUFBUSxFQUFFQyxjQUFjLEVBQUVDLGVBQWUsRUFBRW5FLE9BQU8sRUFBRUMsUUFBUSxFQUFFSCxRQUFRLEVBQUVDLFNBQVMsRUFBRUcsaUJBQWlCQyxNQUEwRWlFLEdBQUd6RyxHQUEzRG5VLEVBQUUsQ0FBQyxFQUFFa1YsR0FBRyxDQUFDL1gsYUFBYSxFQUFFc2EsWUFBWSxFQUFFQyxjQUFjLEtBQWNtRCxHQUFHN2EsRUFBRSxDQUFDLEVBQUUrVixHQUFHLENBQUMrRSxPQUFPLFNBQVM1ZixHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRTRmLE9BQU8sZ0JBQWdCNWYsR0FBR0EsRUFBRTZmLFlBQVksQ0FBQyxFQUNuZkMsT0FBTyxTQUFTOWYsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUU4ZixPQUFPLGdCQUFnQjlmLEdBQUdBLEVBQUUrZixZQUFZLGVBQWUvZixHQUFHQSxFQUFFZ2dCLFdBQVcsQ0FBQyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsSUFBSUMsR0FBR2xILEdBQUcwRyxJQUFJUyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSUMsR0FBR3pmLEdBQUkscUJBQXFCQyxPQUFPeWYsR0FBRyxLQUFLMWYsR0FBSSxpQkFBaUJFLFdBQVd3ZixHQUFHeGYsU0FBU3lmLGNBQWMsSUFBSUMsR0FBRzVmLEdBQUksY0FBY0MsU0FBU3lmLEdBQUdHLEdBQUc3ZixLQUFNeWYsSUFBSUMsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUlJLEdBQUd0QyxPQUFPQyxhQUFhLElBQUlzQyxJQUFHLEVBQzFXLFNBQVNDLEdBQUc1Z0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxPQUFPLElBQUlvZ0IsR0FBR3hTLFFBQVEzTixFQUFFNFksU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNNVksRUFBRTRZLFFBQVEsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsT0FBTSxFQUFHLFFBQVEsT0FBTSxFQUFHLENBQUMsU0FBU2dJLEdBQUc3Z0IsR0FBYyxNQUFNLGlCQUFqQkEsRUFBRUEsRUFBRTJhLFNBQWtDLFNBQVMzYSxFQUFFQSxFQUFFNmMsS0FBSyxJQUFJLENBQUMsSUFBSWlFLElBQUcsRUFFMVFDLEdBQUcsQ0FBQ0MsT0FBTSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBRyxrQkFBaUIsRUFBR0MsT0FBTSxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBR0MsVUFBUyxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBR0MsS0FBSSxFQUFHQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsS0FBSSxFQUFHQyxNQUFLLEdBQUksU0FBU0MsR0FBRzloQixHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUU2RyxVQUFVN0csRUFBRTZHLFNBQVNyRSxjQUFjLE1BQU0sVUFBVXZDLElBQUk4Z0IsR0FBRy9nQixFQUFFa0MsTUFBTSxhQUFhakMsQ0FBTyxDQUFDLFNBQVM4aEIsR0FBRy9oQixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRzBPLEdBQUcxTyxHQUFzQixHQUFuQnZCLEVBQUUraEIsR0FBRy9oQixFQUFFLGFBQWdCRyxTQUFTRixFQUFFLElBQUlzYSxHQUFHLFdBQVcsU0FBUyxLQUFLdGEsRUFBRXNCLEdBQUd4QixFQUFFbVEsS0FBSyxDQUFDOFIsTUFBTS9oQixFQUFFZ2lCLFVBQVVqaUIsSUFBSSxDQUFDLElBQUlraUIsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBR3JpQixHQUFHc2lCLEdBQUd0aUIsRUFBRSxFQUFFLENBQUMsU0FBU3VpQixHQUFHdmlCLEdBQWUsR0FBR3lILEVBQVQrYSxHQUFHeGlCLElBQVksT0FBT0EsQ0FBQyxDQUNwZSxTQUFTeWlCLEdBQUd6aUIsRUFBRUMsR0FBRyxHQUFHLFdBQVdELEVBQUUsT0FBT0MsQ0FBQyxDQUFDLElBQUl5aUIsSUFBRyxFQUFHLEdBQUc5aEIsRUFBRyxDQUFDLElBQUkraEIsR0FBRyxHQUFHL2hCLEVBQUcsQ0FBQyxJQUFJZ2lCLEdBQUcsWUFBWTloQixTQUFTLElBQUk4aEIsR0FBRyxDQUFDLElBQUlDLEdBQUcvaEIsU0FBU0MsY0FBYyxPQUFPOGhCLEdBQUd4ZixhQUFhLFVBQVUsV0FBV3VmLEdBQUcsbUJBQW9CQyxHQUFHQyxPQUFPLENBQUNILEdBQUdDLEVBQUUsTUFBTUQsSUFBRyxFQUFHRCxHQUFHQyxNQUFNN2hCLFNBQVN5ZixjQUFjLEVBQUV6ZixTQUFTeWYsYUFBYSxDQUFDLFNBQVN3QyxLQUFLWixLQUFLQSxHQUFHYSxZQUFZLG1CQUFtQkMsSUFBSWIsR0FBR0QsR0FBRyxLQUFLLENBQUMsU0FBU2MsR0FBR2pqQixHQUFHLEdBQUcsVUFBVUEsRUFBRWlDLGNBQWNzZ0IsR0FBR0gsSUFBSSxDQUFDLElBQUluaUIsRUFBRSxHQUFHOGhCLEdBQUc5aEIsRUFBRW1pQixHQUFHcGlCLEVBQUVzUCxHQUFHdFAsSUFBSXdRLEdBQUc2UixHQUFHcGlCLEVBQUUsQ0FBQyxDQUMvYixTQUFTaWpCLEdBQUdsakIsRUFBRUMsRUFBRUMsR0FBRyxZQUFZRixHQUFHK2lCLEtBQVVYLEdBQUdsaUIsR0FBUmlpQixHQUFHbGlCLEdBQVVrakIsWUFBWSxtQkFBbUJGLEtBQUssYUFBYWpqQixHQUFHK2lCLElBQUksQ0FBQyxTQUFTSyxHQUFHcGpCLEdBQUcsR0FBRyxvQkFBb0JBLEdBQUcsVUFBVUEsR0FBRyxZQUFZQSxFQUFFLE9BQU91aUIsR0FBR0gsR0FBRyxDQUFDLFNBQVNpQixHQUFHcmpCLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU91aUIsR0FBR3RpQixFQUFFLENBQUMsU0FBU3FqQixHQUFHdGpCLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxHQUFHLFdBQVdBLEVBQUUsT0FBT3VpQixHQUFHdGlCLEVBQUUsQ0FBaUUsSUFBSXNqQixHQUFHLG1CQUFvQnRpQixPQUFPbU8sR0FBR25PLE9BQU9tTyxHQUE1RyxTQUFZcFAsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxDQUFDLEVBQ3RXLFNBQVN1akIsR0FBR3hqQixFQUFFQyxHQUFHLEdBQUdzakIsR0FBR3ZqQixFQUFFQyxHQUFHLE9BQU0sRUFBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLGlCQUFrQkMsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJQyxFQUFFZSxPQUFPNk0sS0FBSzlOLEdBQUd3QixFQUFFUCxPQUFPNk0sS0FBSzdOLEdBQUcsR0FBR0MsRUFBRUUsU0FBU29CLEVBQUVwQixPQUFPLE9BQU0sRUFBRyxJQUFJb0IsRUFBRSxFQUFFQSxFQUFFdEIsRUFBRUUsT0FBT29CLElBQUksQ0FBQyxJQUFJQyxFQUFFdkIsRUFBRXNCLEdBQUcsSUFBSVIsRUFBR2lDLEtBQUtoRCxFQUFFd0IsS0FBSzhoQixHQUFHdmpCLEVBQUV5QixHQUFHeEIsRUFBRXdCLElBQUksT0FBTSxDQUFFLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBU2dpQixHQUFHempCLEdBQUcsS0FBS0EsR0FBR0EsRUFBRW1LLFlBQVluSyxFQUFFQSxFQUFFbUssV0FBVyxPQUFPbkssQ0FBQyxDQUN0VSxTQUFTMGpCLEdBQUcxakIsRUFBRUMsR0FBRyxJQUF3QnVCLEVBQXBCdEIsRUFBRXVqQixHQUFHempCLEdBQU8sSUFBSkEsRUFBRSxFQUFZRSxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFd0ssU0FBUyxDQUEwQixHQUF6QmxKLEVBQUV4QixFQUFFRSxFQUFFd0osWUFBWXRKLE9BQVVKLEdBQUdDLEdBQUd1QixHQUFHdkIsRUFBRSxNQUFNLENBQUMwakIsS0FBS3pqQixFQUFFMGpCLE9BQU8zakIsRUFBRUQsR0FBR0EsRUFBRXdCLENBQUMsQ0FBQ3hCLEVBQUUsQ0FBQyxLQUFLRSxHQUFHLENBQUMsR0FBR0EsRUFBRTJqQixZQUFZLENBQUMzakIsRUFBRUEsRUFBRTJqQixZQUFZLE1BQU03akIsQ0FBQyxDQUFDRSxFQUFFQSxFQUFFd1AsVUFBVSxDQUFDeFAsT0FBRSxDQUFNLENBQUNBLEVBQUV1akIsR0FBR3ZqQixFQUFFLENBQUMsQ0FBQyxTQUFTNGpCLEdBQUc5akIsRUFBRUMsR0FBRyxTQUFPRCxJQUFHQyxLQUFFRCxJQUFJQyxLQUFLRCxHQUFHLElBQUlBLEVBQUUwSyxZQUFZekssR0FBRyxJQUFJQSxFQUFFeUssU0FBU29aLEdBQUc5akIsRUFBRUMsRUFBRXlQLFlBQVksYUFBYTFQLEVBQUVBLEVBQUUrakIsU0FBUzlqQixLQUFHRCxFQUFFZ2tCLDRCQUF3RCxHQUE3QmhrQixFQUFFZ2tCLHdCQUF3Qi9qQixLQUFZLENBQzlaLFNBQVNna0IsS0FBSyxJQUFJLElBQUlqa0IsRUFBRWEsT0FBT1osRUFBRTJILElBQUszSCxhQUFhRCxFQUFFa2tCLG1CQUFtQixDQUFDLElBQUksSUFBSWhrQixFQUFFLGlCQUFrQkQsRUFBRWtrQixjQUFjNUYsU0FBUzZGLElBQUksQ0FBQyxNQUFNNWlCLEdBQUd0QixHQUFFLENBQUUsQ0FBQyxJQUFHQSxFQUF5QixNQUFNRCxFQUFFMkgsR0FBL0I1SCxFQUFFQyxFQUFFa2tCLGVBQWdDcmpCLFNBQVMsQ0FBQyxPQUFPYixDQUFDLENBQUMsU0FBU29rQixHQUFHcmtCLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRTZHLFVBQVU3RyxFQUFFNkcsU0FBU3JFLGNBQWMsT0FBT3ZDLElBQUksVUFBVUEsSUFBSSxTQUFTRCxFQUFFa0MsTUFBTSxXQUFXbEMsRUFBRWtDLE1BQU0sUUFBUWxDLEVBQUVrQyxNQUFNLFFBQVFsQyxFQUFFa0MsTUFBTSxhQUFhbEMsRUFBRWtDLE9BQU8sYUFBYWpDLEdBQUcsU0FBU0QsRUFBRXNrQixnQkFBZ0IsQ0FDeGEsU0FBU0MsR0FBR3ZrQixHQUFHLElBQUlDLEVBQUVna0IsS0FBSy9qQixFQUFFRixFQUFFd2tCLFlBQVloakIsRUFBRXhCLEVBQUV5a0IsZUFBZSxHQUFHeGtCLElBQUlDLEdBQUdBLEdBQUdBLEVBQUV5SSxlQUFlbWIsR0FBRzVqQixFQUFFeUksY0FBYytiLGdCQUFnQnhrQixHQUFHLENBQUMsR0FBRyxPQUFPc0IsR0FBRzZpQixHQUFHbmtCLEdBQUcsR0FBR0QsRUFBRXVCLEVBQUVtakIsV0FBYyxLQUFSM2tCLEVBQUV3QixFQUFFb2pCLE9BQWlCNWtCLEVBQUVDLEdBQUcsbUJBQW1CQyxFQUFFQSxFQUFFMmtCLGVBQWU1a0IsRUFBRUMsRUFBRTRrQixhQUFhL1EsS0FBS2dSLElBQUkva0IsRUFBRUUsRUFBRXlILE1BQU12SCxhQUFhLElBQUdKLEdBQUdDLEVBQUVDLEVBQUV5SSxlQUFlN0gsV0FBV2IsRUFBRStrQixhQUFhbmtCLFFBQVNva0IsYUFBYSxDQUFDamxCLEVBQUVBLEVBQUVpbEIsZUFBZSxJQUFJeGpCLEVBQUV2QixFQUFFd0osWUFBWXRKLE9BQU9zQixFQUFFcVMsS0FBS2dSLElBQUl2akIsRUFBRW1qQixNQUFNbGpCLEdBQUdELE9BQUUsSUFBU0EsRUFBRW9qQixJQUFJbGpCLEVBQUVxUyxLQUFLZ1IsSUFBSXZqQixFQUFFb2pCLElBQUluakIsSUFBSXpCLEVBQUVrbEIsUUFBUXhqQixFQUFFRixJQUFJQyxFQUFFRCxFQUFFQSxFQUFFRSxFQUFFQSxFQUFFRCxHQUFHQSxFQUFFaWlCLEdBQUd4akIsRUFBRXdCLEdBQUcsSUFBSUMsRUFBRStoQixHQUFHeGpCLEVBQ3Zmc0IsR0FBR0MsR0FBR0UsSUFBSSxJQUFJM0IsRUFBRW1sQixZQUFZbmxCLEVBQUVvbEIsYUFBYTNqQixFQUFFa2lCLE1BQU0zakIsRUFBRXFsQixlQUFlNWpCLEVBQUVtaUIsUUFBUTVqQixFQUFFc2xCLFlBQVkzakIsRUFBRWdpQixNQUFNM2pCLEVBQUV1bEIsY0FBYzVqQixFQUFFaWlCLFdBQVUzakIsRUFBRUEsRUFBRXVsQixlQUFnQkMsU0FBU2hrQixFQUFFa2lCLEtBQUtsaUIsRUFBRW1pQixRQUFRNWpCLEVBQUUwbEIsa0JBQWtCaGtCLEVBQUVGLEdBQUd4QixFQUFFMmxCLFNBQVMxbEIsR0FBR0QsRUFBRWtsQixPQUFPdmpCLEVBQUVnaUIsS0FBS2hpQixFQUFFaWlCLFVBQVUzakIsRUFBRTJsQixPQUFPamtCLEVBQUVnaUIsS0FBS2hpQixFQUFFaWlCLFFBQVE1akIsRUFBRTJsQixTQUFTMWxCLElBQUksQ0FBTSxJQUFMQSxFQUFFLEdBQU9ELEVBQUVFLEVBQUVGLEVBQUVBLEVBQUUwUCxZQUFZLElBQUkxUCxFQUFFMEssVUFBVXpLLEVBQUVrUSxLQUFLLENBQUMwVixRQUFRN2xCLEVBQUU4bEIsS0FBSzlsQixFQUFFK2xCLFdBQVdDLElBQUlobUIsRUFBRWltQixZQUFtRCxJQUF2QyxtQkFBb0IvbEIsRUFBRWdtQixPQUFPaG1CLEVBQUVnbUIsUUFBWWhtQixFQUFFLEVBQUVBLEVBQUVELEVBQUVHLE9BQU9GLEtBQUlGLEVBQUVDLEVBQUVDLElBQUsybEIsUUFBUUUsV0FBVy9sQixFQUFFOGxCLEtBQUs5bEIsRUFBRTZsQixRQUFRSSxVQUFVam1CLEVBQUVnbUIsR0FBRyxDQUFDLENBQ3pmLElBQUlHLEdBQUd2bEIsR0FBSSxpQkFBaUJFLFVBQVUsSUFBSUEsU0FBU3lmLGFBQWE2RixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQzNGLFNBQVNDLEdBQUd4bUIsRUFBRUMsRUFBRUMsR0FBRyxJQUFJc0IsRUFBRXRCLEVBQUVXLFNBQVNYLEVBQUVBLEVBQUVZLFNBQVMsSUFBSVosRUFBRXdLLFNBQVN4SyxFQUFFQSxFQUFFeUksY0FBYzRkLElBQUksTUFBTUgsSUFBSUEsS0FBS3hlLEVBQUdwRyxLQUFzQ0EsRUFBNUIsbUJBQUxBLEVBQUU0a0IsS0FBeUIvQixHQUFHN2lCLEdBQUssQ0FBQ21qQixNQUFNbmpCLEVBQUVxakIsZUFBZUQsSUFBSXBqQixFQUFFc2pCLGNBQXlGLENBQUNNLFlBQTNFNWpCLEdBQUdBLEVBQUVtSCxlQUFlbkgsRUFBRW1ILGNBQWNxYyxhQUFhbmtCLFFBQVFva0IsZ0JBQStCRyxXQUFXQyxhQUFhN2pCLEVBQUU2akIsYUFBYUMsVUFBVTlqQixFQUFFOGpCLFVBQVVDLFlBQVkvakIsRUFBRStqQixhQUFjZSxJQUFJOUMsR0FBRzhDLEdBQUc5a0IsS0FBSzhrQixHQUFHOWtCLEVBQXNCLEdBQXBCQSxFQUFFd2dCLEdBQUdxRSxHQUFHLGFBQWdCam1CLFNBQVNILEVBQUUsSUFBSXVhLEdBQUcsV0FBVyxTQUFTLEtBQUt2YSxFQUFFQyxHQUFHRixFQUFFbVEsS0FBSyxDQUFDOFIsTUFBTWhpQixFQUFFaWlCLFVBQVUxZ0IsSUFBSXZCLEVBQUVzUCxPQUFPNlcsS0FBSyxDQUN0ZixTQUFTSyxHQUFHem1CLEVBQUVDLEdBQUcsSUFBSUMsRUFBRSxDQUFDLEVBQWlGLE9BQS9FQSxFQUFFRixFQUFFd0MsZUFBZXZDLEVBQUV1QyxjQUFjdEMsRUFBRSxTQUFTRixHQUFHLFNBQVNDLEVBQUVDLEVBQUUsTUFBTUYsR0FBRyxNQUFNQyxFQUFTQyxDQUFDLENBQUMsSUFBSXdtQixHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxDQUFDLEVBQUVDLEdBQUcsQ0FBQyxFQUNwRixTQUFTQyxHQUFHam5CLEdBQUcsR0FBRyttQixHQUFHL21CLEdBQUcsT0FBTyttQixHQUFHL21CLEdBQUcsSUFBSTBtQixHQUFHMW1CLEdBQUcsT0FBT0EsRUFBRSxJQUFZRSxFQUFSRCxFQUFFeW1CLEdBQUcxbUIsR0FBSyxJQUFJRSxLQUFLRCxFQUFFLEdBQUdBLEVBQUVrQixlQUFlakIsSUFBSUEsS0FBSzhtQixHQUFHLE9BQU9ELEdBQUcvbUIsR0FBR0MsRUFBRUMsR0FBRyxPQUFPRixDQUFDLENBQS9YWSxJQUFLb21CLEdBQUdsbUIsU0FBU0MsY0FBYyxPQUFPNE0sTUFBTSxtQkFBbUI5TSxnQkFBZ0I2bEIsR0FBR0MsYUFBYU8saUJBQWlCUixHQUFHRSxtQkFBbUJNLGlCQUFpQlIsR0FBR0csZUFBZUssV0FBVyxvQkFBb0JybUIsZUFBZTZsQixHQUFHSSxjQUFjOU8sWUFBd0osSUFBSW1QLEdBQUdGLEdBQUcsZ0JBQWdCRyxHQUFHSCxHQUFHLHNCQUFzQkksR0FBR0osR0FBRyxrQkFBa0JLLEdBQUdMLEdBQUcsaUJBQWlCTSxHQUFHLElBQUlyUixJQUFJc1IsR0FBRyxzbUJBQXNtQmxsQixNQUFNLEtBQy9sQyxTQUFTbWxCLEdBQUd6bkIsRUFBRUMsR0FBR3NuQixHQUFHOWhCLElBQUl6RixFQUFFQyxHQUFHUSxFQUFHUixFQUFFLENBQUNELEdBQUcsQ0FBQyxJQUFJLElBQUkwbkIsR0FBRyxFQUFFQSxHQUFHRixHQUFHcG5CLE9BQU9zbkIsS0FBSyxDQUFDLElBQUlDLEdBQUdILEdBQUdFLElBQTJERCxHQUFwREUsR0FBR25sQixjQUF1RCxNQUF0Q21sQixHQUFHLEdBQUdobEIsY0FBY2dsQixHQUFHOWtCLE1BQU0sSUFBaUIsQ0FBQzRrQixHQUFHTixHQUFHLGtCQUFrQk0sR0FBR0wsR0FBRyx3QkFBd0JLLEdBQUdKLEdBQUcsb0JBQW9CSSxHQUFHLFdBQVcsaUJBQWlCQSxHQUFHLFVBQVUsV0FBV0EsR0FBRyxXQUFXLFVBQVVBLEdBQUdILEdBQUcsbUJBQW1CNW1CLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxlQUFlLENBQUMsV0FBVyxjQUFjQSxFQUFHLGlCQUFpQixDQUFDLGFBQWEsZ0JBQzdjQSxFQUFHLGlCQUFpQixDQUFDLGFBQWEsZ0JBQWdCRCxFQUFHLFdBQVcsb0VBQW9FNkIsTUFBTSxNQUFNN0IsRUFBRyxXQUFXLHVGQUF1RjZCLE1BQU0sTUFBTTdCLEVBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLFdBQVcsWUFBWSxVQUFVQSxFQUFHLG1CQUFtQiwyREFBMkQ2QixNQUFNLE1BQU03QixFQUFHLHFCQUFxQiw2REFBNkQ2QixNQUFNLE1BQy9mN0IsRUFBRyxzQkFBc0IsOERBQThENkIsTUFBTSxNQUFNLElBQUlzbEIsR0FBRyw2TkFBNk50bEIsTUFBTSxLQUFLdWxCLEdBQUcsSUFBSXRuQixJQUFJLDBDQUEwQytCLE1BQU0sS0FBS3dsQixPQUFPRixLQUN6WixTQUFTRyxHQUFHL25CLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUV4QixFQUFFa0MsTUFBTSxnQkFBZ0JsQyxFQUFFb1osY0FBY2xaLEVBbERqRSxTQUFZRixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsRUFBRUMsRUFBRUMsRUFBRWtFLEVBQUVDLEdBQTRCLEdBQXpCeUwsR0FBR1IsTUFBTW5QLEtBQUt6QixXQUFjK1EsR0FBRyxDQUFDLElBQUdBLEdBQWdDLE1BQU1qTSxNQUFNbEYsRUFBRSxNQUExQyxJQUFJNkYsRUFBRXVMLEdBQUdELElBQUcsRUFBR0MsR0FBRyxLQUE4QkMsS0FBS0EsSUFBRyxFQUFHQyxHQUFHekwsRUFBRSxDQUFDLENBa0RwRW9pQixDQUFHeG1CLEVBQUV2QixPQUFFLEVBQU9ELEdBQUdBLEVBQUVvWixjQUFjLElBQUksQ0FDeEcsU0FBU2tKLEdBQUd0aUIsRUFBRUMsR0FBR0EsS0FBUyxFQUFGQSxHQUFLLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFRixFQUFFSSxPQUFPRixJQUFJLENBQUMsSUFBSXNCLEVBQUV4QixFQUFFRSxHQUFHdUIsRUFBRUQsRUFBRXlnQixNQUFNemdCLEVBQUVBLEVBQUUwZ0IsVUFBVWxpQixFQUFFLENBQUMsSUFBSTBCLE9BQUUsRUFBTyxHQUFHekIsRUFBRSxJQUFJLElBQUkwQixFQUFFSCxFQUFFcEIsT0FBTyxFQUFFLEdBQUd1QixFQUFFQSxJQUFJLENBQUMsSUFBSWtFLEVBQUVyRSxFQUFFRyxHQUFHbUUsRUFBRUQsRUFBRW9pQixTQUFTcmlCLEVBQUVDLEVBQUV1VCxjQUEyQixHQUFidlQsRUFBRUEsRUFBRXFpQixTQUFZcGlCLElBQUlwRSxHQUFHRCxFQUFFK1gsdUJBQXVCLE1BQU14WixFQUFFK25CLEdBQUd0bUIsRUFBRW9FLEVBQUVELEdBQUdsRSxFQUFFb0UsQ0FBQyxNQUFNLElBQUluRSxFQUFFLEVBQUVBLEVBQUVILEVBQUVwQixPQUFPdUIsSUFBSSxDQUFvRCxHQUE1Q21FLEdBQVBELEVBQUVyRSxFQUFFRyxJQUFPc21CLFNBQVNyaUIsRUFBRUMsRUFBRXVULGNBQWN2VCxFQUFFQSxFQUFFcWlCLFNBQVlwaUIsSUFBSXBFLEdBQUdELEVBQUUrWCx1QkFBdUIsTUFBTXhaLEVBQUUrbkIsR0FBR3RtQixFQUFFb0UsRUFBRUQsR0FBR2xFLEVBQUVvRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdzTCxHQUFHLE1BQU1wUixFQUFFcVIsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUtyUixDQUFFLENBQzVhLFNBQVNtb0IsR0FBRW5vQixFQUFFQyxHQUFHLElBQUlDLEVBQUVELEVBQUVtb0IsU0FBSSxJQUFTbG9CLElBQUlBLEVBQUVELEVBQUVtb0IsSUFBSSxJQUFJN25CLEtBQUssSUFBSWlCLEVBQUV4QixFQUFFLFdBQVdFLEVBQUVtb0IsSUFBSTdtQixLQUFLOG1CLEdBQUdyb0IsRUFBRUQsRUFBRSxHQUFFLEdBQUlFLEVBQUVTLElBQUlhLEdBQUcsQ0FBQyxTQUFTK21CLEdBQUd2b0IsRUFBRUMsRUFBRUMsR0FBRyxJQUFJc0IsRUFBRSxFQUFFdkIsSUFBSXVCLEdBQUcsR0FBRzhtQixHQUFHcG9CLEVBQUVGLEVBQUV3QixFQUFFdkIsRUFBRSxDQUFDLElBQUl1b0IsR0FBRyxrQkFBa0J6VSxLQUFLMFUsU0FBU3ZlLFNBQVMsSUFBSXJILE1BQU0sR0FBRyxTQUFTNmxCLEdBQUcxb0IsR0FBRyxJQUFJQSxFQUFFd29CLElBQUksQ0FBQ3hvQixFQUFFd29CLEtBQUksRUFBR2xvQixFQUFHaUMsU0FBUSxTQUFTdEMsR0FBRyxvQkFBb0JBLElBQUk0bkIsR0FBR1EsSUFBSXBvQixJQUFJc29CLEdBQUd0b0IsR0FBRSxFQUFHRCxHQUFHdW9CLEdBQUd0b0IsR0FBRSxFQUFHRCxHQUFHLElBQUcsSUFBSUMsRUFBRSxJQUFJRCxFQUFFMEssU0FBUzFLLEVBQUVBLEVBQUUySSxjQUFjLE9BQU8xSSxHQUFHQSxFQUFFdW9CLE1BQU12b0IsRUFBRXVvQixLQUFJLEVBQUdELEdBQUcsbUJBQWtCLEVBQUd0b0IsR0FBRyxDQUFDLENBQ2piLFNBQVNxb0IsR0FBR3RvQixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxPQUFPK1csR0FBR3RZLElBQUksS0FBSyxFQUFFLElBQUl3QixFQUFFc1csR0FBRyxNQUFNLEtBQUssRUFBRXRXLEVBQUV5VyxHQUFHLE1BQU0sUUFBUXpXLEVBQUV3VyxHQUFHL1gsRUFBRXVCLEVBQUVrbkIsS0FBSyxLQUFLMW9CLEVBQUVDLEVBQUVGLEdBQUd5QixPQUFFLEdBQVFpUCxJQUFJLGVBQWV6USxHQUFHLGNBQWNBLEdBQUcsVUFBVUEsSUFBSXdCLEdBQUUsR0FBSUQsT0FBRSxJQUFTQyxFQUFFekIsRUFBRTRRLGlCQUFpQjNRLEVBQUVDLEVBQUUsQ0FBQzBvQixTQUFRLEVBQUdDLFFBQVFwbkIsSUFBSXpCLEVBQUU0USxpQkFBaUIzUSxFQUFFQyxHQUFFLFFBQUksSUFBU3VCLEVBQUV6QixFQUFFNFEsaUJBQWlCM1EsRUFBRUMsRUFBRSxDQUFDMm9CLFFBQVFwbkIsSUFBSXpCLEVBQUU0USxpQkFBaUIzUSxFQUFFQyxHQUFFLEVBQUcsQ0FDbFYsU0FBU2lZLEdBQUduWSxFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFLEtBQVUsRUFBRnZCLEdBQWEsRUFBRkEsR0FBTSxPQUFPdUIsR0FBRXhCLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBT3dCLEVBQUUsT0FBTyxJQUFJRyxFQUFFSCxFQUFFMkUsSUFBSSxHQUFHLElBQUl4RSxHQUFHLElBQUlBLEVBQUUsQ0FBQyxJQUFJa0UsRUFBRXJFLEVBQUV3TyxVQUFVbUgsY0FBYyxHQUFHdFIsSUFBSXBFLEdBQUcsSUFBSW9FLEVBQUU2RSxVQUFVN0UsRUFBRTZKLGFBQWFqTyxFQUFFLE1BQU0sR0FBRyxJQUFJRSxFQUFFLElBQUlBLEVBQUVILEVBQUVrUSxPQUFPLE9BQU8vUCxHQUFHLENBQUMsSUFBSW1FLEVBQUVuRSxFQUFFd0UsSUFBSSxJQUFHLElBQUlMLEdBQUcsSUFBSUEsTUFBS0EsRUFBRW5FLEVBQUVxTyxVQUFVbUgsaUJBQWtCMVYsR0FBRyxJQUFJcUUsRUFBRTRFLFVBQVU1RSxFQUFFNEosYUFBYWpPLEdBQUUsT0FBT0UsRUFBRUEsRUFBRStQLE1BQU0sQ0FBQyxLQUFLLE9BQU83TCxHQUFHLENBQVMsR0FBRyxRQUFYbEUsRUFBRXFWLEdBQUduUixJQUFlLE9BQWUsR0FBRyxLQUFYQyxFQUFFbkUsRUFBRXdFLE1BQWMsSUFBSUwsRUFBRSxDQUFDdEUsRUFBRUUsRUFBRUMsRUFBRSxTQUFTM0IsQ0FBQyxDQUFDNkYsRUFBRUEsRUFBRTZKLFVBQVUsQ0FBQyxDQUFDbE8sRUFBRUEsRUFBRWtRLE1BQU0sQ0FBQ2xCLElBQUcsV0FBVyxJQUFJaFAsRUFBRUUsRUFBRUQsRUFBRTZOLEdBQUdwUCxHQUFHeUIsRUFBRSxHQUNwZjNCLEVBQUUsQ0FBQyxJQUFJNkYsRUFBRTBoQixHQUFHcmdCLElBQUlsSCxHQUFHLFFBQUcsSUFBUzZGLEVBQUUsQ0FBQyxJQUFJQyxFQUFFMFUsR0FBR3NPLEVBQUU5b0IsRUFBRSxPQUFPQSxHQUFHLElBQUssV0FBVyxHQUFHLElBQUk0WSxHQUFHMVksR0FBRyxNQUFNRixFQUFFLElBQUssVUFBVSxJQUFLLFFBQVE4RixFQUFFNlksR0FBRyxNQUFNLElBQUssVUFBVW1LLEVBQUUsUUFBUWhqQixFQUFFc1csR0FBRyxNQUFNLElBQUssV0FBVzBNLEVBQUUsT0FBT2hqQixFQUFFc1csR0FBRyxNQUFNLElBQUssYUFBYSxJQUFLLFlBQVl0VyxFQUFFc1csR0FBRyxNQUFNLElBQUssUUFBUSxHQUFHLElBQUlsYyxFQUFFd2IsT0FBTyxNQUFNMWIsRUFBRSxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxjQUFjOEYsRUFBRW1XLEdBQUcsTUFBTSxJQUFLLE9BQU8sSUFBSyxVQUFVLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxPQUFPblcsRUFDMWlCb1csR0FBRyxNQUFNLElBQUssY0FBYyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssYUFBYXBXLEVBQUV3WixHQUFHLE1BQU0sS0FBSzZILEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHdmhCLEVBQUV1VyxHQUFHLE1BQU0sS0FBS2lMLEdBQUd4aEIsRUFBRTRaLEdBQUcsTUFBTSxJQUFLLFNBQVM1WixFQUFFOFUsR0FBRyxNQUFNLElBQUssUUFBUTlVLEVBQUVxYSxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVFyYSxFQUFFNlcsR0FBRyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFlBQVk3VyxFQUFFOFksR0FBRyxJQUFJbUssS0FBUyxFQUFGOW9CLEdBQUsrb0IsR0FBR0QsR0FBRyxXQUFXL29CLEVBQUVpcEIsRUFBRUYsRUFBRSxPQUFPbGpCLEVBQUVBLEVBQUUsVUFBVSxLQUFLQSxFQUFFa2pCLEVBQUUsR0FBRyxJQUFJLElBQVFHLEVBQUpDLEVBQUUzbkIsRUFBSSxPQUMvZTJuQixHQUFHLENBQUssSUFBSUMsR0FBUkYsRUFBRUMsR0FBVW5aLFVBQXNGLEdBQTVFLElBQUlrWixFQUFFL2lCLEtBQUssT0FBT2lqQixJQUFJRixFQUFFRSxFQUFFLE9BQU9ILEdBQWMsT0FBVkcsRUFBRTNZLEdBQUcwWSxFQUFFRixLQUFZRixFQUFFNVksS0FBS2taLEdBQUdGLEVBQUVDLEVBQUVGLEtBQVNGLEVBQUUsTUFBTUcsRUFBRUEsRUFBRXpYLE1BQU0sQ0FBQyxFQUFFcVgsRUFBRTNvQixTQUFTeUYsRUFBRSxJQUFJQyxFQUFFRCxFQUFFaWpCLEVBQUUsS0FBSzVvQixFQUFFdUIsR0FBR0UsRUFBRXdPLEtBQUssQ0FBQzhSLE1BQU1wYyxFQUFFcWMsVUFBVTZHLElBQUksQ0FBQyxDQUFDLEtBQVUsRUFBRjlvQixHQUFLLENBQTRFLEdBQW5DNkYsRUFBRSxhQUFhOUYsR0FBRyxlQUFlQSxLQUF0RTZGLEVBQUUsY0FBYzdGLEdBQUcsZ0JBQWdCQSxJQUEyQ0UsSUFBSW1QLE1BQUt5WixFQUFFNW9CLEVBQUUwYixlQUFlMWIsRUFBRTJiLGVBQWU3RSxHQUFHOFIsS0FBSUEsRUFBRVEsT0FBZ0J4akIsR0FBR0QsS0FBR0EsRUFBRXBFLEVBQUVaLFNBQVNZLEVBQUVBLEdBQUdvRSxFQUFFcEUsRUFBRWtILGVBQWU5QyxFQUFFbWYsYUFBYW5mLEVBQUUwakIsYUFBYTFvQixPQUFVaUYsR0FBcUNBLEVBQUV0RSxFQUFpQixRQUFmc25CLEdBQW5DQSxFQUFFNW9CLEVBQUUwYixlQUFlMWIsRUFBRTRiLFdBQWtCOUUsR0FBRzhSLEdBQUcsUUFDOWRBLEtBQVJFLEVBQUV4WCxHQUFHc1gsS0FBVSxJQUFJQSxFQUFFM2lCLEtBQUssSUFBSTJpQixFQUFFM2lCLE9BQUsyaUIsRUFBRSxRQUFVaGpCLEVBQUUsS0FBS2dqQixFQUFFdG5CLEdBQUtzRSxJQUFJZ2pCLEdBQUUsQ0FBZ1UsR0FBL1RDLEVBQUU5TSxHQUFHbU4sRUFBRSxlQUFlSCxFQUFFLGVBQWVFLEVBQUUsUUFBVyxlQUFlbnBCLEdBQUcsZ0JBQWdCQSxJQUFFK29CLEVBQUVuSyxHQUFHd0ssRUFBRSxpQkFBaUJILEVBQUUsaUJBQWlCRSxFQUFFLFdBQVVILEVBQUUsTUFBTWxqQixFQUFFRCxFQUFFMmMsR0FBRzFjLEdBQUdvakIsRUFBRSxNQUFNSixFQUFFampCLEVBQUUyYyxHQUFHc0csSUFBR2pqQixFQUFFLElBQUlrakIsRUFBRUssRUFBRUQsRUFBRSxRQUFRcmpCLEVBQUU1RixFQUFFdUIsSUFBSzhOLE9BQU95WixFQUFFbmpCLEVBQUUrVixjQUFjc04sRUFBRUUsRUFBRSxLQUFLcFMsR0FBR3ZWLEtBQUtELEtBQUl1bkIsRUFBRSxJQUFJQSxFQUFFRSxFQUFFRSxFQUFFLFFBQVFMLEVBQUU1b0IsRUFBRXVCLElBQUs4TixPQUFPMlosRUFBRUgsRUFBRW5OLGNBQWNvTixFQUFFSSxFQUFFTCxHQUFHQyxFQUFFSSxFQUFLdGpCLEdBQUdnakIsRUFBRTdvQixFQUFFLENBQWEsSUFBUmdwQixFQUFFSCxFQUFFSyxFQUFFLEVBQU1ELEVBQWhCSCxFQUFFampCLEVBQWtCb2pCLEVBQUVBLEVBQUVNLEdBQUdOLEdBQUdDLElBQVEsSUFBSkQsRUFBRSxFQUFNRSxFQUFFSCxFQUFFRyxFQUFFQSxFQUFFSSxHQUFHSixHQUFHRixJQUFJLEtBQUssRUFBRUMsRUFBRUQsR0FBR0gsRUFBRVMsR0FBR1QsR0FBR0ksSUFBSSxLQUFLLEVBQUVELEVBQUVDLEdBQUdGLEVBQ3BmTyxHQUFHUCxHQUFHQyxJQUFJLEtBQUtDLEtBQUssQ0FBQyxHQUFHSixJQUFJRSxHQUFHLE9BQU9BLEdBQUdGLElBQUlFLEVBQUV4WCxVQUFVLE1BQU14UixFQUFFOG9CLEVBQUVTLEdBQUdULEdBQUdFLEVBQUVPLEdBQUdQLEVBQUUsQ0FBQ0YsRUFBRSxJQUFJLE1BQU1BLEVBQUUsS0FBSyxPQUFPampCLEdBQUcyakIsR0FBRzluQixFQUFFa0UsRUFBRUMsRUFBRWlqQixHQUFFLEdBQUksT0FBT0QsR0FBRyxPQUFPRSxHQUFHUyxHQUFHOW5CLEVBQUVxbkIsRUFBRUYsRUFBRUMsR0FBRSxFQUFHLENBQThELEdBQUcsWUFBMUNqakIsR0FBakJELEVBQUVyRSxFQUFFZ2hCLEdBQUdoaEIsR0FBR1gsUUFBV2dHLFVBQVVoQixFQUFFZ0IsU0FBU3JFLGdCQUErQixVQUFVc0QsR0FBRyxTQUFTRCxFQUFFM0QsS0FBSyxJQUFJd25CLEVBQUdqSCxRQUFRLEdBQUdYLEdBQUdqYyxHQUFHLEdBQUc2YyxHQUFHZ0gsRUFBR3BHLE9BQU8sQ0FBQ29HLEVBQUd0RyxHQUFHLElBQUl1RyxFQUFHekcsRUFBRSxNQUFNcGQsRUFBRUQsRUFBRWdCLFdBQVcsVUFBVWYsRUFBRXRELGdCQUFnQixhQUFhcUQsRUFBRTNELE1BQU0sVUFBVTJELEVBQUUzRCxRQUFRd25CLEVBQUdyRyxJQUNyVixPQUQ0VnFHLElBQUtBLEVBQUdBLEVBQUcxcEIsRUFBRXdCLElBQUt1Z0IsR0FBR3BnQixFQUFFK25CLEVBQUd4cEIsRUFBRXVCLElBQVdrb0IsR0FBSUEsRUFBRzNwQixFQUFFNkYsRUFBRXJFLEdBQUcsYUFBYXhCLElBQUkycEIsRUFBRzlqQixFQUFFcUMsZ0JBQ2xmeWhCLEVBQUdyaEIsWUFBWSxXQUFXekMsRUFBRTNELE1BQU11RyxHQUFHNUMsRUFBRSxTQUFTQSxFQUFFOEIsUUFBT2dpQixFQUFHbm9CLEVBQUVnaEIsR0FBR2hoQixHQUFHWCxPQUFjYixHQUFHLElBQUssV0FBYThoQixHQUFHNkgsSUFBSyxTQUFTQSxFQUFHckYsbUJBQWdCOEIsR0FBR3VELEVBQUd0RCxHQUFHN2tCLEVBQUU4a0IsR0FBRyxNQUFLLE1BQU0sSUFBSyxXQUFXQSxHQUFHRCxHQUFHRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVlHLElBQUcsRUFBRyxNQUFNLElBQUssY0FBYyxJQUFLLFVBQVUsSUFBSyxVQUFVQSxJQUFHLEVBQUdDLEdBQUc3a0IsRUFBRXpCLEVBQUV1QixHQUFHLE1BQU0sSUFBSyxrQkFBa0IsR0FBRzBrQixHQUFHLE1BQU0sSUFBSyxVQUFVLElBQUssUUFBUUssR0FBRzdrQixFQUFFekIsRUFBRXVCLEdBQUcsSUFBSW1vQixFQUFHLEdBQUd2SixHQUFHcGdCLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUk2cEIsRUFBRyxxQkFBcUIsTUFBTTVwQixFQUFFLElBQUssaUJBQWlCNHBCLEVBQUcsbUJBQ3BlLE1BQU01cEIsRUFBRSxJQUFLLG9CQUFvQjRwQixFQUFHLHNCQUFzQixNQUFNNXBCLEVBQUU0cEIsT0FBRyxDQUFNLE1BQU0vSSxHQUFHRixHQUFHNWdCLEVBQUVFLEtBQUsycEIsRUFBRyxvQkFBb0IsWUFBWTdwQixHQUFHLE1BQU1FLEVBQUUyWSxVQUFVZ1IsRUFBRyxzQkFBc0JBLElBQUtwSixJQUFJLE9BQU92Z0IsRUFBRXVlLFNBQVNxQyxJQUFJLHVCQUF1QitJLEVBQUcscUJBQXFCQSxHQUFJL0ksS0FBSzhJLEVBQUdqUixPQUFZRixHQUFHLFVBQVJELEdBQUcvVyxHQUFrQitXLEdBQUc3USxNQUFNNlEsR0FBRzlPLFlBQVlvWCxJQUFHLElBQWlCLEdBQVo2SSxFQUFHM0gsR0FBR3hnQixFQUFFcW9CLElBQVN6cEIsU0FBU3lwQixFQUFHLElBQUlqTixHQUFHaU4sRUFBRzdwQixFQUFFLEtBQUtFLEVBQUV1QixHQUFHRSxFQUFFd08sS0FBSyxDQUFDOFIsTUFBTTRILEVBQUczSCxVQUFVeUgsS0FBS0MsR0FBd0IsUUFBVEEsRUFBRy9JLEdBQUczZ0IsT0FBbEIycEIsRUFBR2hOLEtBQUsrTSxNQUEyQ0EsRUFBR3BKLEdBNUJoTSxTQUFZeGdCLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLGlCQUFpQixPQUFPNmdCLEdBQUc1Z0IsR0FBRyxJQUFLLFdBQVcsT0FBRyxLQUFLQSxFQUFFeWUsTUFBYSxNQUFLaUMsSUFBRyxFQUFVRCxJQUFHLElBQUssWUFBWSxPQUFPMWdCLEVBQUVDLEVBQUU0YyxRQUFTNkQsSUFBSUMsR0FBRyxLQUFLM2dCLEVBQUUsUUFBUSxPQUFPLEtBQUssQ0E0QkU4cEIsQ0FBRzlwQixFQUFFRSxHQTNCemQsU0FBWUYsRUFBRUMsR0FBRyxHQUFHNmdCLEdBQUcsTUFBTSxtQkFBbUI5Z0IsSUFBSXFnQixJQUFJTyxHQUFHNWdCLEVBQUVDLElBQUlELEVBQUUyWSxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUtzSSxJQUFHLEVBQUc5Z0IsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFnUSxRQUFRLE9BQU8sS0FBM1AsSUFBSyxXQUFXLEtBQUtDLEVBQUVtYixTQUFTbmIsRUFBRXFiLFFBQVFyYixFQUFFc2IsVUFBVXRiLEVBQUVtYixTQUFTbmIsRUFBRXFiLE9BQU8sQ0FBQyxHQUFHcmIsRUFBRThwQixNQUFNLEVBQUU5cEIsRUFBRThwQixLQUFLM3BCLE9BQU8sT0FBT0gsRUFBRThwQixLQUFLLEdBQUc5cEIsRUFBRXllLE1BQU0sT0FBT04sT0FBT0MsYUFBYXBlLEVBQUV5ZSxNQUFNLENBQUMsT0FBTyxLQUFLLElBQUssaUJBQWlCLE9BQU8rQixJQUFJLE9BQU94Z0IsRUFBRXdlLE9BQU8sS0FBS3hlLEVBQUU0YyxLQUF5QixDQTJCcUZtTixDQUFHaHFCLEVBQUVFLEtBQ2plLEdBRG9lc0IsRUFBRXdnQixHQUFHeGdCLEVBQUUsa0JBQ3ZlcEIsU0FBU3FCLEVBQUUsSUFBSW1iLEdBQUcsZ0JBQWdCLGNBQWMsS0FBSzFjLEVBQUV1QixHQUFHRSxFQUFFd08sS0FBSyxDQUFDOFIsTUFBTXhnQixFQUFFeWdCLFVBQVUxZ0IsSUFBSUMsRUFBRW9iLEtBQUsrTSxFQUFHLENBQUN0SCxHQUFHM2dCLEVBQUUxQixFQUFFLEdBQUUsQ0FBQyxTQUFTb3BCLEdBQUdycEIsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLENBQUMrbkIsU0FBU2pvQixFQUFFa29CLFNBQVNqb0IsRUFBRW1aLGNBQWNsWixFQUFFLENBQUMsU0FBUzhoQixHQUFHaGlCLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLFVBQVV1QixFQUFFLEdBQUcsT0FBT3hCLEdBQUcsQ0FBQyxJQUFJeUIsRUFBRXpCLEVBQUUwQixFQUFFRCxFQUFFdU8sVUFBVSxJQUFJdk8sRUFBRTBFLEtBQUssT0FBT3pFLElBQUlELEVBQUVDLEVBQVksT0FBVkEsRUFBRStPLEdBQUd6USxFQUFFRSxLQUFZc0IsRUFBRXlvQixRQUFRWixHQUFHcnBCLEVBQUUwQixFQUFFRCxJQUFjLE9BQVZDLEVBQUUrTyxHQUFHelEsRUFBRUMsS0FBWXVCLEVBQUUyTyxLQUFLa1osR0FBR3JwQixFQUFFMEIsRUFBRUQsS0FBS3pCLEVBQUVBLEVBQUUwUixNQUFNLENBQUMsT0FBT2xRLENBQUMsQ0FBQyxTQUFTZ29CLEdBQUd4cEIsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTyxLQUFLLEdBQUdBLEVBQUVBLEVBQUUwUixhQUFhMVIsR0FBRyxJQUFJQSxFQUFFbUcsS0FBSyxPQUFPbkcsR0FBSSxJQUFJLENBQ25kLFNBQVN5cEIsR0FBR3pwQixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsR0FBRyxJQUFJLElBQUlDLEVBQUV6QixFQUFFaVosV0FBV3ZYLEVBQUUsR0FBRyxPQUFPekIsR0FBR0EsSUFBSXNCLEdBQUcsQ0FBQyxJQUFJcUUsRUFBRTNGLEVBQUU0RixFQUFFRCxFQUFFNEwsVUFBVTdMLEVBQUVDLEVBQUVtSyxVQUFVLEdBQUcsT0FBT2xLLEdBQUdBLElBQUl0RSxFQUFFLE1BQU0sSUFBSXFFLEVBQUVNLEtBQUssT0FBT1AsSUFBSUMsRUFBRUQsRUFBRW5FLEVBQWEsT0FBVnFFLEVBQUUySyxHQUFHdlEsRUFBRXdCLEtBQVlDLEVBQUVzb0IsUUFBUVosR0FBR25wQixFQUFFNEYsRUFBRUQsSUFBS3BFLEdBQWMsT0FBVnFFLEVBQUUySyxHQUFHdlEsRUFBRXdCLEtBQVlDLEVBQUV3TyxLQUFLa1osR0FBR25wQixFQUFFNEYsRUFBRUQsS0FBTTNGLEVBQUVBLEVBQUV3UixNQUFNLENBQUMsSUFBSS9QLEVBQUV2QixRQUFRSixFQUFFbVEsS0FBSyxDQUFDOFIsTUFBTWhpQixFQUFFaWlCLFVBQVV2Z0IsR0FBRyxDQUFDLElBQUl1b0IsR0FBRyxTQUFTQyxHQUFHLGlCQUFpQixTQUFTQyxHQUFHcHFCLEdBQUcsT0FBTyxpQkFBa0JBLEVBQUVBLEVBQUUsR0FBR0EsR0FBR3VELFFBQVEybUIsR0FBRyxNQUFNM21CLFFBQVE0bUIsR0FBRyxHQUFHLENBQUMsU0FBU0UsR0FBR3JxQixFQUFFQyxFQUFFQyxHQUFXLEdBQVJELEVBQUVtcUIsR0FBR25xQixHQUFNbXFCLEdBQUdwcUIsS0FBS0MsR0FBR0MsRUFBRSxNQUFNK0UsTUFBTWxGLEVBQUUsS0FBTSxDQUFDLFNBQVN1cUIsS0FBSyxDQUM5ZSxJQUFJQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHenFCLEVBQUVDLEdBQUcsTUFBTSxhQUFhRCxHQUFHLGFBQWFBLEdBQUcsaUJBQWtCQyxFQUFFcUosVUFBVSxpQkFBa0JySixFQUFFcUosVUFBVSxpQkFBa0JySixFQUFFb0oseUJBQXlCLE9BQU9wSixFQUFFb0oseUJBQXlCLE1BQU1wSixFQUFFb0osd0JBQXdCcWhCLE1BQU0sQ0FDNVAsSUFBSUMsR0FBRyxtQkFBb0JDLFdBQVdBLGdCQUFXLEVBQU9DLEdBQUcsbUJBQW9CQyxhQUFhQSxrQkFBYSxFQUFPQyxHQUFHLG1CQUFvQkMsUUFBUUEsYUFBUSxFQUFPQyxHQUFHLG1CQUFvQkMsZUFBZUEsb0JBQWUsSUFBcUJILEdBQUcsU0FBUy9xQixHQUFHLE9BQU8rcUIsR0FBR0ksUUFBUSxNQUFNQyxLQUFLcHJCLEdBQUdxckIsTUFBTUMsR0FBRyxFQUFFWCxHQUFHLFNBQVNXLEdBQUd0ckIsR0FBRzRxQixZQUFXLFdBQVcsTUFBTTVxQixDQUFFLEdBQUUsQ0FDcFYsU0FBU3VyQixHQUFHdnJCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXVCLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSUMsRUFBRXZCLEVBQUUyakIsWUFBNkIsR0FBakI3akIsRUFBRW9LLFlBQVlsSyxHQUFNdUIsR0FBRyxJQUFJQSxFQUFFaUosU0FBUyxHQUFZLFFBQVR4SyxFQUFFdUIsRUFBRW9iLE1BQWMsQ0FBQyxHQUFHLElBQUlyYixFQUEwQixPQUF2QnhCLEVBQUVvSyxZQUFZM0ksUUFBR2tXLEdBQUcxWCxHQUFVdUIsR0FBRyxLQUFLLE1BQU10QixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR3NCLElBQUl0QixFQUFFdUIsQ0FBQyxPQUFPdkIsR0FBR3lYLEdBQUcxWCxFQUFFLENBQUMsU0FBU3VyQixHQUFHeHJCLEdBQUcsS0FBSyxNQUFNQSxFQUFFQSxFQUFFQSxFQUFFNmpCLFlBQVksQ0FBQyxJQUFJNWpCLEVBQUVELEVBQUUwSyxTQUFTLEdBQUcsSUFBSXpLLEdBQUcsSUFBSUEsRUFBRSxNQUFNLEdBQUcsSUFBSUEsRUFBRSxDQUFVLEdBQUcsT0FBWkEsRUFBRUQsRUFBRTZjLE9BQWlCLE9BQU81YyxHQUFHLE9BQU9BLEVBQUUsTUFBTSxHQUFHLE9BQU9BLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPRCxDQUFDLENBQ2pZLFNBQVN5ckIsR0FBR3pyQixHQUFHQSxFQUFFQSxFQUFFMHJCLGdCQUFnQixJQUFJLElBQUl6ckIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFMEssU0FBUyxDQUFDLElBQUl4SyxFQUFFRixFQUFFNmMsS0FBSyxHQUFHLE1BQU0zYyxHQUFHLE9BQU9BLEdBQUcsT0FBT0EsRUFBRSxDQUFDLEdBQUcsSUFBSUQsRUFBRSxPQUFPRCxFQUFFQyxHQUFHLEtBQUssT0FBT0MsR0FBR0QsR0FBRyxDQUFDRCxFQUFFQSxFQUFFMHJCLGVBQWUsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJQyxHQUFHNVgsS0FBSzBVLFNBQVN2ZSxTQUFTLElBQUlySCxNQUFNLEdBQUcrb0IsR0FBRyxnQkFBZ0JELEdBQUdFLEdBQUcsZ0JBQWdCRixHQUFHckMsR0FBRyxvQkFBb0JxQyxHQUFHdkQsR0FBRyxpQkFBaUJ1RCxHQUFHRyxHQUFHLG9CQUFvQkgsR0FBR0ksR0FBRyxrQkFBa0JKLEdBQ2xYLFNBQVMzVSxHQUFHaFgsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNHJCLElBQUksR0FBRzNyQixFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJQyxFQUFFRixFQUFFMFAsV0FBV3hQLEdBQUcsQ0FBQyxHQUFHRCxFQUFFQyxFQUFFb3BCLEtBQUtwcEIsRUFBRTByQixJQUFJLENBQWUsR0FBZDFyQixFQUFFRCxFQUFFd1IsVUFBYSxPQUFPeFIsRUFBRWdTLE9BQU8sT0FBTy9SLEdBQUcsT0FBT0EsRUFBRStSLE1BQU0sSUFBSWpTLEVBQUV5ckIsR0FBR3pyQixHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHRSxFQUFFRixFQUFFNHJCLElBQUksT0FBTzFyQixFQUFFRixFQUFFeXJCLEdBQUd6ckIsRUFBRSxDQUFDLE9BQU9DLENBQUMsQ0FBS0MsR0FBSkYsRUFBRUUsR0FBTXdQLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTSyxHQUFHL1AsR0FBa0IsUUFBZkEsRUFBRUEsRUFBRTRyQixLQUFLNXJCLEVBQUVzcEIsTUFBYyxJQUFJdHBCLEVBQUVtRyxLQUFLLElBQUluRyxFQUFFbUcsS0FBSyxLQUFLbkcsRUFBRW1HLEtBQUssSUFBSW5HLEVBQUVtRyxJQUFJLEtBQUtuRyxDQUFDLENBQUMsU0FBU3dpQixHQUFHeGlCLEdBQUcsR0FBRyxJQUFJQSxFQUFFbUcsS0FBSyxJQUFJbkcsRUFBRW1HLElBQUksT0FBT25HLEVBQUVnUSxVQUFVLE1BQU0vSyxNQUFNbEYsRUFBRSxJQUFLLENBQUMsU0FBU2tRLEdBQUdqUSxHQUFHLE9BQU9BLEVBQUU2ckIsS0FBSyxJQUFJLENBQUMsSUFBSUcsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBR2xzQixHQUFHLE1BQU0sQ0FBQ21TLFFBQVFuUyxFQUFFLENBQ3ZlLFNBQVNtc0IsR0FBRW5zQixHQUFHLEVBQUVpc0IsS0FBS2pzQixFQUFFbVMsUUFBUTZaLEdBQUdDLElBQUlELEdBQUdDLElBQUksS0FBS0EsS0FBSyxDQUFDLFNBQVNHLEdBQUVwc0IsRUFBRUMsR0FBR2dzQixLQUFLRCxHQUFHQyxJQUFJanNCLEVBQUVtUyxRQUFRblMsRUFBRW1TLFFBQVFsUyxDQUFDLENBQUMsSUFBSW9zQixHQUFHLENBQUMsRUFBRUMsR0FBRUosR0FBR0csSUFBSUUsR0FBR0wsSUFBRyxHQUFJTSxHQUFHSCxHQUFHLFNBQVNJLEdBQUd6c0IsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFa0MsS0FBS3dxQixhQUFhLElBQUl4c0IsRUFBRSxPQUFPbXNCLEdBQUcsSUFBSTdxQixFQUFFeEIsRUFBRWdRLFVBQVUsR0FBR3hPLEdBQUdBLEVBQUVtckIsOENBQThDMXNCLEVBQUUsT0FBT3VCLEVBQUVvckIsMENBQTBDLElBQVNsckIsRUFBTEQsRUFBRSxDQUFDLEVBQUksSUFBSUMsS0FBS3hCLEVBQUV1QixFQUFFQyxHQUFHekIsRUFBRXlCLEdBQW9ILE9BQWpIRixLQUFJeEIsRUFBRUEsRUFBRWdRLFdBQVkyYyw0Q0FBNEMxc0IsRUFBRUQsRUFBRTRzQiwwQ0FBMENuckIsR0FBVUEsQ0FBQyxDQUM5ZCxTQUFTb3JCLEdBQUc3c0IsR0FBeUIsT0FBTyxNQUEzQkEsRUFBRThzQixpQkFBNkMsQ0FBQyxTQUFTQyxLQUFLWixHQUFFSSxJQUFJSixHQUFFRyxHQUFFLENBQUMsU0FBU1UsR0FBR2h0QixFQUFFQyxFQUFFQyxHQUFHLEdBQUdvc0IsR0FBRW5hLFVBQVVrYSxHQUFHLE1BQU1wbkIsTUFBTWxGLEVBQUUsTUFBTXFzQixHQUFFRSxHQUFFcnNCLEdBQUdtc0IsR0FBRUcsR0FBR3JzQixFQUFFLENBQUMsU0FBUytzQixHQUFHanRCLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUV4QixFQUFFZ1EsVUFBZ0MsR0FBdEIvUCxFQUFFQSxFQUFFNnNCLGtCQUFxQixtQkFBb0J0ckIsRUFBRTByQixnQkFBZ0IsT0FBT2h0QixFQUF3QixJQUFJLElBQUl1QixLQUE5QkQsRUFBRUEsRUFBRTByQixrQkFBaUMsS0FBS3pyQixLQUFLeEIsR0FBRyxNQUFNZ0YsTUFBTWxGLEVBQUUsSUFBSTJHLEVBQUcxRyxJQUFJLFVBQVV5QixJQUFJLE9BQU9xRCxFQUFFLENBQUMsRUFBRTVFLEVBQUVzQixFQUFFLENBQ3hYLFNBQVMyckIsR0FBR250QixHQUEyRyxPQUF4R0EsR0FBR0EsRUFBRUEsRUFBRWdRLFlBQVloUSxFQUFFb3RCLDJDQUEyQ2YsR0FBR0csR0FBR0YsR0FBRW5hLFFBQVFpYSxHQUFFRSxHQUFFdHNCLEdBQUdvc0IsR0FBRUcsR0FBR0EsR0FBR3BhLFVBQWUsQ0FBRSxDQUFDLFNBQVNrYixHQUFHcnRCLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUV4QixFQUFFZ1EsVUFBVSxJQUFJeE8sRUFBRSxNQUFNeUQsTUFBTWxGLEVBQUUsTUFBTUcsR0FBR0YsRUFBRWl0QixHQUFHanRCLEVBQUVDLEVBQUV1c0IsSUFBSWhyQixFQUFFNHJCLDBDQUEwQ3B0QixFQUFFbXNCLEdBQUVJLElBQUlKLEdBQUVHLElBQUdGLEdBQUVFLEdBQUV0c0IsSUFBSW1zQixHQUFFSSxJQUFJSCxHQUFFRyxHQUFHcnNCLEVBQUUsQ0FBQyxJQUFJb3RCLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsR0FBR3p0QixHQUFHLE9BQU9zdEIsR0FBR0EsR0FBRyxDQUFDdHRCLEdBQUdzdEIsR0FBR25kLEtBQUtuUSxFQUFFLENBQ2hXLFNBQVMwdEIsS0FBSyxJQUFJRixJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsSUFBRyxFQUFHLElBQUl4dEIsRUFBRSxFQUFFQyxFQUFFb1YsR0FBRSxJQUFJLElBQUluVixFQUFFb3RCLEdBQUcsSUFBSWpZLEdBQUUsRUFBRXJWLEVBQUVFLEVBQUVFLE9BQU9KLElBQUksQ0FBQyxJQUFJd0IsRUFBRXRCLEVBQUVGLEdBQUcsR0FBR3dCLEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxFQUFFLENBQUM4ckIsR0FBRyxLQUFLQyxJQUFHLENBQUUsQ0FBQyxNQUFNOXJCLEdBQUcsTUFBTSxPQUFPNnJCLEtBQUtBLEdBQUdBLEdBQUd6cUIsTUFBTTdDLEVBQUUsSUFBSXNTLEdBQUdZLEdBQUd3YSxJQUFJanNCLENBQUUsQ0FBQyxRQUFRNFQsR0FBRXBWLEVBQUV1dEIsSUFBRyxDQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJRyxHQUFHLEdBQUdDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxHQUFHLEVBQUVDLEdBQUcsR0FBR0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxHQUFHLFNBQVNDLEdBQUdwdUIsRUFBRUMsR0FBRzB0QixHQUFHQyxNQUFNRSxHQUFHSCxHQUFHQyxNQUFNQyxHQUFHQSxHQUFHN3RCLEVBQUU4dEIsR0FBRzd0QixDQUFDLENBQ2pWLFNBQVNvdUIsR0FBR3J1QixFQUFFQyxFQUFFQyxHQUFHNnRCLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1HLEdBQUdKLEdBQUdDLE1BQU1DLEdBQUdBLEdBQUdqdUIsRUFBRSxJQUFJd0IsRUFBRTBzQixHQUFHbHVCLEVBQUVtdUIsR0FBRyxJQUFJMXNCLEVBQUUsR0FBR3FTLEdBQUd0UyxHQUFHLEVBQUVBLEtBQUssR0FBR0MsR0FBR3ZCLEdBQUcsRUFBRSxJQUFJd0IsRUFBRSxHQUFHb1MsR0FBRzdULEdBQUd3QixFQUFFLEdBQUcsR0FBR0MsRUFBRSxDQUFDLElBQUlDLEVBQUVGLEVBQUVBLEVBQUUsRUFBRUMsR0FBR0YsR0FBRyxHQUFHRyxHQUFHLEdBQUd1SSxTQUFTLElBQUkxSSxJQUFJRyxFQUFFRixHQUFHRSxFQUFFdXNCLEdBQUcsR0FBRyxHQUFHcGEsR0FBRzdULEdBQUd3QixFQUFFdkIsR0FBR3VCLEVBQUVELEVBQUUyc0IsR0FBR3pzQixFQUFFMUIsQ0FBQyxNQUFNa3VCLEdBQUcsR0FBR3hzQixFQUFFeEIsR0FBR3VCLEVBQUVELEVBQUUyc0IsR0FBR251QixDQUFDLENBQUMsU0FBU3N1QixHQUFHdHVCLEdBQUcsT0FBT0EsRUFBRTBSLFNBQVMwYyxHQUFHcHVCLEVBQUUsR0FBR3F1QixHQUFHcnVCLEVBQUUsRUFBRSxHQUFHLENBQUMsU0FBU3V1QixHQUFHdnVCLEdBQUcsS0FBS0EsSUFBSTZ0QixJQUFJQSxHQUFHRixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBSyxLQUFLNXRCLElBQUlpdUIsSUFBSUEsR0FBR0YsS0FBS0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLRyxHQUFHSixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtFLEdBQUdILEtBQUtDLElBQUlELEdBQUdDLElBQUksSUFBSSxDQUFDLElBQUlRLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFFLEVBQUdDLEdBQUcsS0FDamUsU0FBU0MsR0FBRzV1QixFQUFFQyxHQUFHLElBQUlDLEVBQUUydUIsR0FBRyxFQUFFLEtBQUssS0FBSyxHQUFHM3VCLEVBQUU0dUIsWUFBWSxVQUFVNXVCLEVBQUU4UCxVQUFVL1AsRUFBRUMsRUFBRXdSLE9BQU8xUixFQUFnQixRQUFkQyxFQUFFRCxFQUFFK3VCLFlBQW9CL3VCLEVBQUUrdUIsVUFBVSxDQUFDN3VCLEdBQUdGLEVBQUUyUixPQUFPLElBQUkxUixFQUFFa1EsS0FBS2pRLEVBQUUsQ0FDeEosU0FBUzh1QixHQUFHaHZCLEVBQUVDLEdBQUcsT0FBT0QsRUFBRW1HLEtBQUssS0FBSyxFQUFFLElBQUlqRyxFQUFFRixFQUFFa0MsS0FBeUUsT0FBTyxRQUEzRWpDLEVBQUUsSUFBSUEsRUFBRXlLLFVBQVV4SyxFQUFFc0MsZ0JBQWdCdkMsRUFBRTRHLFNBQVNyRSxjQUFjLEtBQUt2QyxLQUFtQkQsRUFBRWdRLFVBQVUvUCxFQUFFdXVCLEdBQUd4dUIsRUFBRXl1QixHQUFHakQsR0FBR3ZyQixFQUFFa0ssYUFBWSxHQUFPLEtBQUssRUFBRSxPQUFvRCxRQUE3Q2xLLEVBQUUsS0FBS0QsRUFBRWl2QixjQUFjLElBQUlodkIsRUFBRXlLLFNBQVMsS0FBS3pLLEtBQVlELEVBQUVnUSxVQUFVL1AsRUFBRXV1QixHQUFHeHVCLEVBQUV5dUIsR0FBRyxNQUFLLEdBQU8sS0FBSyxHQUFHLE9BQStCLFFBQXhCeHVCLEVBQUUsSUFBSUEsRUFBRXlLLFNBQVMsS0FBS3pLLEtBQVlDLEVBQUUsT0FBTyt0QixHQUFHLENBQUM3VixHQUFHOFYsR0FBR2dCLFNBQVNmLElBQUksS0FBS251QixFQUFFNlIsY0FBYyxDQUFDQyxXQUFXN1IsRUFBRWt2QixZQUFZanZCLEVBQUVrdkIsVUFBVSxhQUFZbHZCLEVBQUUydUIsR0FBRyxHQUFHLEtBQUssS0FBSyxJQUFLN2UsVUFBVS9QLEVBQUVDLEVBQUV3UixPQUFPMVIsRUFBRUEsRUFBRWlTLE1BQU0vUixFQUFFc3VCLEdBQUd4dUIsRUFBRXl1QixHQUNsZixNQUFLLEdBQU8sUUFBUSxPQUFNLEVBQUcsQ0FBQyxTQUFTWSxHQUFHcnZCLEdBQUcsVUFBbUIsRUFBUEEsRUFBRXN2QixPQUFzQixJQUFSdHZCLEVBQUUyUixNQUFVLENBQUMsU0FBUzRkLEdBQUd2dkIsR0FBRyxHQUFHMHVCLEdBQUUsQ0FBQyxJQUFJenVCLEVBQUV3dUIsR0FBRyxHQUFHeHVCLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFLElBQUkrdUIsR0FBR2h2QixFQUFFQyxHQUFHLENBQUMsR0FBR292QixHQUFHcnZCLEdBQUcsTUFBTWlGLE1BQU1sRixFQUFFLE1BQU1FLEVBQUV1ckIsR0FBR3RyQixFQUFFMmpCLGFBQWEsSUFBSXJpQixFQUFFZ3RCLEdBQUd2dUIsR0FBRyt1QixHQUFHaHZCLEVBQUVDLEdBQUcydUIsR0FBR3B0QixFQUFFdEIsSUFBSUYsRUFBRTJSLE9BQWUsS0FBVDNSLEVBQUUyUixNQUFZLEVBQUUrYyxJQUFFLEVBQUdGLEdBQUd4dUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHcXZCLEdBQUdydkIsR0FBRyxNQUFNaUYsTUFBTWxGLEVBQUUsTUFBTUMsRUFBRTJSLE9BQWUsS0FBVDNSLEVBQUUyUixNQUFZLEVBQUUrYyxJQUFFLEVBQUdGLEdBQUd4dUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTd3ZCLEdBQUd4dkIsR0FBRyxJQUFJQSxFQUFFQSxFQUFFMFIsT0FBTyxPQUFPMVIsR0FBRyxJQUFJQSxFQUFFbUcsS0FBSyxJQUFJbkcsRUFBRW1HLEtBQUssS0FBS25HLEVBQUVtRyxLQUFLbkcsRUFBRUEsRUFBRTBSLE9BQU84YyxHQUFHeHVCLENBQUMsQ0FDaGEsU0FBU3l2QixHQUFHenZCLEdBQUcsR0FBR0EsSUFBSXd1QixHQUFHLE9BQU0sRUFBRyxJQUFJRSxHQUFFLE9BQU9jLEdBQUd4dkIsR0FBRzB1QixJQUFFLEdBQUcsRUFBRyxJQUFJenVCLEVBQWtHLElBQS9GQSxFQUFFLElBQUlELEVBQUVtRyxRQUFRbEcsRUFBRSxJQUFJRCxFQUFFbUcsT0FBZ0JsRyxFQUFFLFVBQVhBLEVBQUVELEVBQUVrQyxPQUFtQixTQUFTakMsSUFBSXdxQixHQUFHenFCLEVBQUVrQyxLQUFLbEMsRUFBRTB2QixnQkFBbUJ6dkIsSUFBSUEsRUFBRXd1QixJQUFJLENBQUMsR0FBR1ksR0FBR3J2QixHQUFHLE1BQU0ydkIsS0FBSzFxQixNQUFNbEYsRUFBRSxNQUFNLEtBQUtFLEdBQUcydUIsR0FBRzV1QixFQUFFQyxHQUFHQSxFQUFFdXJCLEdBQUd2ckIsRUFBRTRqQixZQUFZLENBQU8sR0FBTjJMLEdBQUd4dkIsR0FBTSxLQUFLQSxFQUFFbUcsSUFBSSxDQUFnRCxLQUE3Qm5HLEVBQUUsUUFBcEJBLEVBQUVBLEVBQUU2UixlQUF5QjdSLEVBQUU4UixXQUFXLE1BQVcsTUFBTTdNLE1BQU1sRixFQUFFLE1BQU1DLEVBQUUsQ0FBaUIsSUFBaEJBLEVBQUVBLEVBQUU2akIsWUFBZ0I1akIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFMEssU0FBUyxDQUFDLElBQUl4SyxFQUFFRixFQUFFNmMsS0FBSyxHQUFHLE9BQU8zYyxFQUFFLENBQUMsR0FBRyxJQUFJRCxFQUFFLENBQUN3dUIsR0FBR2pELEdBQUd4ckIsRUFBRTZqQixhQUFhLE1BQU03akIsQ0FBQyxDQUFDQyxHQUFHLEtBQUssTUFBTUMsR0FBRyxPQUFPQSxHQUFHLE9BQU9BLEdBQUdELEdBQUcsQ0FBQ0QsRUFBRUEsRUFBRTZqQixXQUFXLENBQUM0SyxHQUNqZ0IsSUFBSSxDQUFDLE1BQU1BLEdBQUdELEdBQUdoRCxHQUFHeHJCLEVBQUVnUSxVQUFVNlQsYUFBYSxLQUFLLE9BQU0sQ0FBRSxDQUFDLFNBQVM4TCxLQUFLLElBQUksSUFBSTN2QixFQUFFeXVCLEdBQUd6dUIsR0FBR0EsRUFBRXdyQixHQUFHeHJCLEVBQUU2akIsWUFBWSxDQUFDLFNBQVMrTCxLQUFLbkIsR0FBR0QsR0FBRyxLQUFLRSxJQUFFLENBQUUsQ0FBQyxTQUFTbUIsR0FBRzd2QixHQUFHLE9BQU8ydUIsR0FBR0EsR0FBRyxDQUFDM3VCLEdBQUcydUIsR0FBR3hlLEtBQUtuUSxFQUFFLENBQUMsSUFBSTh2QixHQUFHcnNCLEVBQUdvVSx3QkFDaE0sU0FBU2tZLEdBQUcvdkIsRUFBRUMsRUFBRUMsR0FBVyxHQUFHLFFBQVhGLEVBQUVFLEVBQUU4dkIsTUFBaUIsbUJBQW9CaHdCLEdBQUcsaUJBQWtCQSxFQUFFLENBQUMsR0FBR0UsRUFBRSt2QixPQUFPLENBQVksR0FBWC92QixFQUFFQSxFQUFFK3ZCLE9BQVksQ0FBQyxHQUFHLElBQUkvdkIsRUFBRWlHLElBQUksTUFBTWxCLE1BQU1sRixFQUFFLE1BQU0sSUFBSXlCLEVBQUV0QixFQUFFOFAsU0FBUyxDQUFDLElBQUl4TyxFQUFFLE1BQU15RCxNQUFNbEYsRUFBRSxJQUFJQyxJQUFJLElBQUl5QixFQUFFRCxFQUFFRSxFQUFFLEdBQUcxQixFQUFFLE9BQUcsT0FBT0MsR0FBRyxPQUFPQSxFQUFFK3ZCLEtBQUssbUJBQW9CL3ZCLEVBQUUrdkIsS0FBSy92QixFQUFFK3ZCLElBQUlFLGFBQWF4dUIsRUFBU3pCLEVBQUUrdkIsS0FBSS92QixFQUFFLFNBQVNELEdBQUcsSUFBSUMsRUFBRXdCLEVBQUUwdUIsS0FBSyxPQUFPbndCLFNBQVNDLEVBQUV5QixHQUFHekIsRUFBRXlCLEdBQUcxQixDQUFDLEVBQUVDLEVBQUVpd0IsV0FBV3h1QixFQUFTekIsRUFBQyxDQUFDLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU1pRixNQUFNbEYsRUFBRSxNQUFNLElBQUlHLEVBQUUrdkIsT0FBTyxNQUFNaHJCLE1BQU1sRixFQUFFLElBQUlDLEdBQUksQ0FBQyxPQUFPQSxDQUFDLENBQy9jLFNBQVNvd0IsR0FBR3B3QixFQUFFQyxHQUF1QyxNQUFwQ0QsRUFBRWlCLE9BQU9DLFVBQVVnSixTQUFTakgsS0FBS2hELEdBQVNnRixNQUFNbEYsRUFBRSxHQUFHLG9CQUFvQkMsRUFBRSxxQkFBcUJpQixPQUFPNk0sS0FBSzdOLEdBQUdvd0IsS0FBSyxNQUFNLElBQUlyd0IsR0FBSSxDQUFDLFNBQVNzd0IsR0FBR3R3QixHQUFpQixPQUFPQyxFQUFmRCxFQUFFeUcsT0FBZXpHLEVBQUV3RyxTQUFTLENBQ3JNLFNBQVMrcEIsR0FBR3Z3QixHQUFHLFNBQVNDLEVBQUVBLEVBQUVDLEdBQUcsR0FBR0YsRUFBRSxDQUFDLElBQUl3QixFQUFFdkIsRUFBRTh1QixVQUFVLE9BQU92dEIsR0FBR3ZCLEVBQUU4dUIsVUFBVSxDQUFDN3VCLEdBQUdELEVBQUUwUixPQUFPLElBQUluUSxFQUFFMk8sS0FBS2pRLEVBQUUsQ0FBQyxDQUFDLFNBQVNBLEVBQUVBLEVBQUVzQixHQUFHLElBQUl4QixFQUFFLE9BQU8sS0FBSyxLQUFLLE9BQU93QixHQUFHdkIsRUFBRUMsRUFBRXNCLEdBQUdBLEVBQUVBLEVBQUUwUSxRQUFRLE9BQU8sSUFBSSxDQUFDLFNBQVMxUSxFQUFFeEIsRUFBRUMsR0FBRyxJQUFJRCxFQUFFLElBQUlrVyxJQUFJLE9BQU9qVyxHQUFHLE9BQU9BLEVBQUVrZSxJQUFJbmUsRUFBRXlGLElBQUl4RixFQUFFa2UsSUFBSWxlLEdBQUdELEVBQUV5RixJQUFJeEYsRUFBRXV3QixNQUFNdndCLEdBQUdBLEVBQUVBLEVBQUVpUyxRQUFRLE9BQU9sUyxDQUFDLENBQUMsU0FBU3lCLEVBQUV6QixFQUFFQyxHQUFzQyxPQUFuQ0QsRUFBRXl3QixHQUFHendCLEVBQUVDLElBQUt1d0IsTUFBTSxFQUFFeHdCLEVBQUVrUyxRQUFRLEtBQVlsUyxDQUFDLENBQUMsU0FBUzBCLEVBQUV6QixFQUFFQyxFQUFFc0IsR0FBYSxPQUFWdkIsRUFBRXV3QixNQUFNaHZCLEVBQU14QixFQUE2QyxRQUFqQndCLEVBQUV2QixFQUFFd1IsWUFBNkJqUSxFQUFFQSxFQUFFZ3ZCLE9BQVF0d0IsR0FBR0QsRUFBRTBSLE9BQU8sRUFBRXpSLEdBQUdzQixHQUFFdkIsRUFBRTBSLE9BQU8sRUFBU3pSLElBQXJHRCxFQUFFMFIsT0FBTyxRQUFRelIsRUFBcUYsQ0FBQyxTQUFTeUIsRUFBRTFCLEdBQ3pkLE9BRDRkRCxHQUM3ZixPQUFPQyxFQUFFd1IsWUFBWXhSLEVBQUUwUixPQUFPLEdBQVUxUixDQUFDLENBQUMsU0FBUzRGLEVBQUU3RixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxPQUFHLE9BQU92QixHQUFHLElBQUlBLEVBQUVrRyxNQUFXbEcsRUFBRXl3QixHQUFHeHdCLEVBQUVGLEVBQUVzdkIsS0FBSzl0QixJQUFLa1EsT0FBTzFSLEVBQUVDLEtBQUVBLEVBQUV3QixFQUFFeEIsRUFBRUMsSUFBS3dSLE9BQU8xUixFQUFTQyxFQUFDLENBQUMsU0FBUzZGLEVBQUU5RixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxJQUFJRSxFQUFFeEIsRUFBRWdDLEtBQUssT0FBR1IsSUFBSXFDLEVBQVVpTixFQUFFaFIsRUFBRUMsRUFBRUMsRUFBRXl3QixNQUFNcm5CLFNBQVM5SCxFQUFFdEIsRUFBRWllLEtBQVEsT0FBT2xlLElBQUlBLEVBQUU2dUIsY0FBY3B0QixHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFNEUsV0FBVzlCLEdBQUk4ckIsR0FBRzV1QixLQUFLekIsRUFBRWlDLFFBQWFWLEVBQUVDLEVBQUV4QixFQUFFQyxFQUFFeXdCLFFBQVNYLElBQUlELEdBQUcvdkIsRUFBRUMsRUFBRUMsR0FBR3NCLEVBQUVrUSxPQUFPMVIsRUFBRXdCLEtBQUVBLEVBQUVvdkIsR0FBRzF3QixFQUFFZ0MsS0FBS2hDLEVBQUVpZSxJQUFJamUsRUFBRXl3QixNQUFNLEtBQUszd0IsRUFBRXN2QixLQUFLOXRCLElBQUt3dUIsSUFBSUQsR0FBRy92QixFQUFFQyxFQUFFQyxHQUFHc0IsRUFBRWtRLE9BQU8xUixFQUFTd0IsRUFBQyxDQUFDLFNBQVNvRSxFQUFFNUYsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsT0FBRyxPQUFPdkIsR0FBRyxJQUFJQSxFQUFFa0csS0FDamZsRyxFQUFFK1AsVUFBVW1ILGdCQUFnQmpYLEVBQUVpWCxlQUFlbFgsRUFBRStQLFVBQVU2Z0IsaUJBQWlCM3dCLEVBQUUyd0IsaUJBQXNCNXdCLEVBQUU2d0IsR0FBRzV3QixFQUFFRixFQUFFc3ZCLEtBQUs5dEIsSUFBS2tRLE9BQU8xUixFQUFFQyxLQUFFQSxFQUFFd0IsRUFBRXhCLEVBQUVDLEVBQUVvSixVQUFVLEtBQU1vSSxPQUFPMVIsRUFBU0MsRUFBQyxDQUFDLFNBQVMrUSxFQUFFaFIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVFLEdBQUcsT0FBRyxPQUFPekIsR0FBRyxJQUFJQSxFQUFFa0csTUFBV2xHLEVBQUU4d0IsR0FBRzd3QixFQUFFRixFQUFFc3ZCLEtBQUs5dEIsRUFBRUUsSUFBS2dRLE9BQU8xUixFQUFFQyxLQUFFQSxFQUFFd0IsRUFBRXhCLEVBQUVDLElBQUt3UixPQUFPMVIsRUFBU0MsRUFBQyxDQUFDLFNBQVMrd0IsRUFBRWh4QixFQUFFQyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLEtBQUtBLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUV5d0IsR0FBRyxHQUFHendCLEVBQUVELEVBQUVzdkIsS0FBS3B2QixJQUFLd1IsT0FBTzFSLEVBQUVDLEVBQUUsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVxRyxVQUFVLEtBQUszQyxFQUFHLE9BQU96RCxFQUFFMHdCLEdBQUczd0IsRUFBRWlDLEtBQUtqQyxFQUFFa2UsSUFBSWxlLEVBQUUwd0IsTUFBTSxLQUFLM3dCLEVBQUVzdkIsS0FBS3B2QixJQUNqZjh2QixJQUFJRCxHQUFHL3ZCLEVBQUUsS0FBS0MsR0FBR0MsRUFBRXdSLE9BQU8xUixFQUFFRSxFQUFFLEtBQUs0RCxFQUFHLE9BQU83RCxFQUFFNndCLEdBQUc3d0IsRUFBRUQsRUFBRXN2QixLQUFLcHZCLElBQUt3UixPQUFPMVIsRUFBRUMsRUFBRSxLQUFLdUUsRUFBaUIsT0FBT3dzQixFQUFFaHhCLEdBQUV3QixFQUFuQnZCLEVBQUV3RyxPQUFtQnhHLEVBQUV1RyxVQUFVdEcsR0FBRyxHQUFHMEksR0FBRzNJLElBQUkyRSxFQUFHM0UsR0FBRyxPQUFPQSxFQUFFOHdCLEdBQUc5d0IsRUFBRUQsRUFBRXN2QixLQUFLcHZCLEVBQUUsT0FBUXdSLE9BQU8xUixFQUFFQyxFQUFFbXdCLEdBQUdwd0IsRUFBRUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVNneEIsRUFBRWp4QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxJQUFJQyxFQUFFLE9BQU94QixFQUFFQSxFQUFFa2UsSUFBSSxLQUFLLEdBQUcsaUJBQWtCamUsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU91QixFQUFFLEtBQUtvRSxFQUFFN0YsRUFBRUMsRUFBRSxHQUFHQyxFQUFFc0IsR0FBRyxHQUFHLGlCQUFrQnRCLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVvRyxVQUFVLEtBQUszQyxFQUFHLE9BQU96RCxFQUFFaWUsTUFBTTFjLEVBQUVxRSxFQUFFOUYsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsS0FBSyxLQUFLc0MsRUFBRyxPQUFPNUQsRUFBRWllLE1BQU0xYyxFQUFFbUUsRUFBRTVGLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHLEtBQUssS0FBS2dELEVBQUcsT0FBaUJ5c0IsRUFBRWp4QixFQUNwZkMsR0FEd2V3QixFQUFFdkIsRUFBRXVHLE9BQ3hldkcsRUFBRXNHLFVBQVVoRixHQUFHLEdBQUdvSCxHQUFHMUksSUFBSTBFLEVBQUcxRSxHQUFHLE9BQU8sT0FBT3VCLEVBQUUsS0FBS3VQLEVBQUVoUixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRSxNQUFNNHVCLEdBQUdwd0IsRUFBRUUsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVNneEIsRUFBRWx4QixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsRUFBRSxPQUF3QnFFLEVBQUU1RixFQUFuQkQsRUFBRUEsRUFBRWtILElBQUloSCxJQUFJLEtBQVcsR0FBR3NCLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUU4RSxVQUFVLEtBQUszQyxFQUFHLE9BQTJDbUMsRUFBRTdGLEVBQXRDRCxFQUFFQSxFQUFFa0gsSUFBSSxPQUFPMUYsRUFBRTJjLElBQUlqZSxFQUFFc0IsRUFBRTJjLE1BQU0sS0FBVzNjLEVBQUVDLEdBQUcsS0FBS3FDLEVBQUcsT0FBMkM4QixFQUFFM0YsRUFBdENELEVBQUVBLEVBQUVrSCxJQUFJLE9BQU8xRixFQUFFMmMsSUFBSWplLEVBQUVzQixFQUFFMmMsTUFBTSxLQUFXM2MsRUFBRUMsR0FBRyxLQUFLK0MsRUFBaUIsT0FBTzBzQixFQUFFbHhCLEVBQUVDLEVBQUVDLEdBQUV3QixFQUF2QkYsRUFBRWlGLE9BQXVCakYsRUFBRWdGLFVBQVUvRSxHQUFHLEdBQUdtSCxHQUFHcEgsSUFBSW9ELEVBQUdwRCxHQUFHLE9BQXdCd1AsRUFBRS9RLEVBQW5CRCxFQUFFQSxFQUFFa0gsSUFBSWhILElBQUksS0FBV3NCLEVBQUVDLEVBQUUsTUFBTTJ1QixHQUFHbndCLEVBQUV1QixFQUFFLENBQUMsT0FBTyxJQUFJLENBQzlmLFNBQVNzbkIsRUFBRXJuQixFQUFFRSxFQUFFa0UsRUFBRUMsR0FBRyxJQUFJLElBQUlGLEVBQUUsS0FBS29MLEVBQUUsS0FBS2tZLEVBQUV2bkIsRUFBRXduQixFQUFFeG5CLEVBQUUsRUFBRXNuQixFQUFFLEtBQUssT0FBT0MsR0FBR0MsRUFBRXRqQixFQUFFekYsT0FBTytvQixJQUFJLENBQUNELEVBQUVzSCxNQUFNckgsR0FBR0YsRUFBRUMsRUFBRUEsRUFBRSxNQUFNRCxFQUFFQyxFQUFFaFgsUUFBUSxJQUFJNFcsRUFBRW1JLEVBQUV4dkIsRUFBRXluQixFQUFFcmpCLEVBQUVzakIsR0FBR3JqQixHQUFHLEdBQUcsT0FBT2dqQixFQUFFLENBQUMsT0FBT0ksSUFBSUEsRUFBRUQsR0FBRyxLQUFLLENBQUNqcEIsR0FBR2twQixHQUFHLE9BQU9KLEVBQUVyWCxXQUFXeFIsRUFBRXdCLEVBQUV5bkIsR0FBR3ZuQixFQUFFRCxFQUFFb25CLEVBQUVubkIsRUFBRXduQixHQUFHLE9BQU9uWSxFQUFFcEwsRUFBRWtqQixFQUFFOVgsRUFBRWtCLFFBQVE0VyxFQUFFOVgsRUFBRThYLEVBQUVJLEVBQUVELENBQUMsQ0FBQyxHQUFHRSxJQUFJdGpCLEVBQUV6RixPQUFPLE9BQU9GLEVBQUV1QixFQUFFeW5CLEdBQUd3RixJQUFHTixHQUFHM3NCLEVBQUUwbkIsR0FBR3ZqQixFQUFFLEdBQUcsT0FBT3NqQixFQUFFLENBQUMsS0FBS0MsRUFBRXRqQixFQUFFekYsT0FBTytvQixJQUFrQixRQUFkRCxFQUFFOEgsRUFBRXZ2QixFQUFFb0UsRUFBRXNqQixHQUFHcmpCLE1BQWNuRSxFQUFFRCxFQUFFd25CLEVBQUV2bkIsRUFBRXduQixHQUFHLE9BQU9uWSxFQUFFcEwsRUFBRXNqQixFQUFFbFksRUFBRWtCLFFBQVFnWCxFQUFFbFksRUFBRWtZLEdBQWMsT0FBWHdGLElBQUdOLEdBQUczc0IsRUFBRTBuQixHQUFVdmpCLENBQUMsQ0FBQyxJQUFJc2pCLEVBQUUxbkIsRUFBRUMsRUFBRXluQixHQUFHQyxFQUFFdGpCLEVBQUV6RixPQUFPK29CLElBQXNCLFFBQWxCRixFQUFFaUksRUFBRWhJLEVBQUV6bkIsRUFBRTBuQixFQUFFdGpCLEVBQUVzakIsR0FBR3JqQixNQUFjOUYsR0FBRyxPQUFPaXBCLEVBQUV4WCxXQUFXeVgsRUFBRTNTLE9BQU8sT0FDdmYwUyxFQUFFOUssSUFBSWdMLEVBQUVGLEVBQUU5SyxLQUFLeGMsRUFBRUQsRUFBRXVuQixFQUFFdG5CLEVBQUV3bkIsR0FBRyxPQUFPblksRUFBRXBMLEVBQUVxakIsRUFBRWpZLEVBQUVrQixRQUFRK1csRUFBRWpZLEVBQUVpWSxHQUF1RCxPQUFwRGpwQixHQUFHa3BCLEVBQUUzbUIsU0FBUSxTQUFTdkMsR0FBRyxPQUFPQyxFQUFFd0IsRUFBRXpCLEVBQUUsSUFBRzB1QixJQUFHTixHQUFHM3NCLEVBQUUwbkIsR0FBVXZqQixDQUFDLENBQUMsU0FBU21qQixFQUFFdG5CLEVBQUVFLEVBQUVrRSxFQUFFQyxHQUFHLElBQUlGLEVBQUVoQixFQUFHaUIsR0FBRyxHQUFHLG1CQUFvQkQsRUFBRSxNQUFNWCxNQUFNbEYsRUFBRSxNQUFrQixHQUFHLE9BQWY4RixFQUFFRCxFQUFFM0MsS0FBSzRDLElBQWMsTUFBTVosTUFBTWxGLEVBQUUsTUFBTSxJQUFJLElBQUltcEIsRUFBRXRqQixFQUFFLEtBQUtvTCxFQUFFclAsRUFBRXduQixFQUFFeG5CLEVBQUUsRUFBRXNuQixFQUFFLEtBQUtILEVBQUVqakIsRUFBRXNyQixPQUFPLE9BQU9uZ0IsSUFBSThYLEVBQUVzSSxLQUFLakksSUFBSUwsRUFBRWpqQixFQUFFc3JCLE9BQU8sQ0FBQ25nQixFQUFFd2YsTUFBTXJILEdBQUdGLEVBQUVqWSxFQUFFQSxFQUFFLE1BQU1pWSxFQUFFalksRUFBRWtCLFFBQVEsSUFBSTZXLEVBQUVrSSxFQUFFeHZCLEVBQUV1UCxFQUFFOFgsRUFBRW5oQixNQUFNN0IsR0FBRyxHQUFHLE9BQU9pakIsRUFBRSxDQUFDLE9BQU8vWCxJQUFJQSxFQUFFaVksR0FBRyxLQUFLLENBQUNqcEIsR0FBR2dSLEdBQUcsT0FBTytYLEVBQUV0WCxXQUFXeFIsRUFBRXdCLEVBQUV1UCxHQUFHclAsRUFBRUQsRUFBRXFuQixFQUFFcG5CLEVBQUV3bkIsR0FBRyxPQUFPRCxFQUFFdGpCLEVBQUVtakIsRUFBRUcsRUFBRWhYLFFBQVE2VyxFQUFFRyxFQUFFSCxFQUFFL1gsRUFBRWlZLENBQUMsQ0FBQyxHQUFHSCxFQUFFc0ksS0FBSyxPQUFPbHhCLEVBQUV1QixFQUN6ZnVQLEdBQUcwZCxJQUFHTixHQUFHM3NCLEVBQUUwbkIsR0FBR3ZqQixFQUFFLEdBQUcsT0FBT29MLEVBQUUsQ0FBQyxNQUFNOFgsRUFBRXNJLEtBQUtqSSxJQUFJTCxFQUFFampCLEVBQUVzckIsT0FBd0IsUUFBakJySSxFQUFFa0ksRUFBRXZ2QixFQUFFcW5CLEVBQUVuaEIsTUFBTTdCLE1BQWNuRSxFQUFFRCxFQUFFb25CLEVBQUVubkIsRUFBRXduQixHQUFHLE9BQU9ELEVBQUV0akIsRUFBRWtqQixFQUFFSSxFQUFFaFgsUUFBUTRXLEVBQUVJLEVBQUVKLEdBQWMsT0FBWDRGLElBQUdOLEdBQUczc0IsRUFBRTBuQixHQUFVdmpCLENBQUMsQ0FBQyxJQUFJb0wsRUFBRXhQLEVBQUVDLEVBQUV1UCxJQUFJOFgsRUFBRXNJLEtBQUtqSSxJQUFJTCxFQUFFampCLEVBQUVzckIsT0FBNEIsUUFBckJySSxFQUFFb0ksRUFBRWxnQixFQUFFdlAsRUFBRTBuQixFQUFFTCxFQUFFbmhCLE1BQU03QixNQUFjOUYsR0FBRyxPQUFPOG9CLEVBQUVyWCxXQUFXVCxFQUFFdUYsT0FBTyxPQUFPdVMsRUFBRTNLLElBQUlnTCxFQUFFTCxFQUFFM0ssS0FBS3hjLEVBQUVELEVBQUVvbkIsRUFBRW5uQixFQUFFd25CLEdBQUcsT0FBT0QsRUFBRXRqQixFQUFFa2pCLEVBQUVJLEVBQUVoWCxRQUFRNFcsRUFBRUksRUFBRUosR0FBdUQsT0FBcEQ5b0IsR0FBR2dSLEVBQUV6TyxTQUFRLFNBQVN2QyxHQUFHLE9BQU9DLEVBQUV3QixFQUFFekIsRUFBRSxJQUFHMHVCLElBQUdOLEdBQUczc0IsRUFBRTBuQixHQUFVdmpCLENBQUMsQ0FHM1QsT0FINFQsU0FBU29qQixFQUFFaHBCLEVBQUV3QixFQUFFRSxFQUFFbUUsR0FBa0YsR0FBL0UsaUJBQWtCbkUsR0FBRyxPQUFPQSxHQUFHQSxFQUFFUSxPQUFPNkIsR0FBSSxPQUFPckMsRUFBRXljLE1BQU16YyxFQUFFQSxFQUFFaXZCLE1BQU1ybkIsVUFBYSxpQkFBa0I1SCxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFNEUsVUFBVSxLQUFLM0MsRUFBRzNELEVBQUUsQ0FBQyxJQUFJLElBQUk4RixFQUM3aEJwRSxFQUFFeWMsSUFBSXZZLEVBQUVwRSxFQUFFLE9BQU9vRSxHQUFHLENBQUMsR0FBR0EsRUFBRXVZLE1BQU1yWSxFQUFFLENBQVUsSUFBVEEsRUFBRXBFLEVBQUVRLFFBQVk2QixHQUFJLEdBQUcsSUFBSTZCLEVBQUVPLElBQUksQ0FBQ2pHLEVBQUVGLEVBQUU0RixFQUFFc00sVUFBUzFRLEVBQUVDLEVBQUVtRSxFQUFFbEUsRUFBRWl2QixNQUFNcm5CLFdBQVlvSSxPQUFPMVIsRUFBRUEsRUFBRXdCLEVBQUUsTUFBTXhCLENBQUMsT0FBTyxHQUFHNEYsRUFBRWtwQixjQUFjaHBCLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVRLFdBQVc5QixHQUFJOHJCLEdBQUd4cUIsS0FBS0YsRUFBRTFELEtBQUssQ0FBQ2hDLEVBQUVGLEVBQUU0RixFQUFFc00sVUFBUzFRLEVBQUVDLEVBQUVtRSxFQUFFbEUsRUFBRWl2QixRQUFTWCxJQUFJRCxHQUFHL3ZCLEVBQUU0RixFQUFFbEUsR0FBR0YsRUFBRWtRLE9BQU8xUixFQUFFQSxFQUFFd0IsRUFBRSxNQUFNeEIsQ0FBQyxDQUFDRSxFQUFFRixFQUFFNEYsR0FBRyxLQUFLLENBQU0zRixFQUFFRCxFQUFFNEYsR0FBR0EsRUFBRUEsRUFBRXNNLE9BQU8sQ0FBQ3hRLEVBQUVRLE9BQU82QixJQUFJdkMsRUFBRXV2QixHQUFHcnZCLEVBQUVpdkIsTUFBTXJuQixTQUFTdEosRUFBRXN2QixLQUFLenBCLEVBQUVuRSxFQUFFeWMsTUFBT3pNLE9BQU8xUixFQUFFQSxFQUFFd0IsS0FBSXFFLEVBQUUrcUIsR0FBR2x2QixFQUFFUSxLQUFLUixFQUFFeWMsSUFBSXpjLEVBQUVpdkIsTUFBTSxLQUFLM3dCLEVBQUVzdkIsS0FBS3pwQixJQUFLbXFCLElBQUlELEdBQUcvdkIsRUFBRXdCLEVBQUVFLEdBQUdtRSxFQUFFNkwsT0FBTzFSLEVBQUVBLEVBQUU2RixFQUFFLENBQUMsT0FBT2xFLEVBQUUzQixHQUFHLEtBQUs4RCxFQUFHOUQsRUFBRSxDQUFDLElBQUk0RixFQUFFbEUsRUFBRXljLElBQUksT0FDemYzYyxHQUFHLENBQUMsR0FBR0EsRUFBRTJjLE1BQU12WSxFQUFDLENBQUMsR0FBRyxJQUFJcEUsRUFBRTJFLEtBQUszRSxFQUFFd08sVUFBVW1ILGdCQUFnQnpWLEVBQUV5VixlQUFlM1YsRUFBRXdPLFVBQVU2Z0IsaUJBQWlCbnZCLEVBQUVtdkIsZUFBZSxDQUFDM3dCLEVBQUVGLEVBQUV3QixFQUFFMFEsVUFBUzFRLEVBQUVDLEVBQUVELEVBQUVFLEVBQUU0SCxVQUFVLEtBQU1vSSxPQUFPMVIsRUFBRUEsRUFBRXdCLEVBQUUsTUFBTXhCLENBQUMsQ0FBTUUsRUFBRUYsRUFBRXdCLEdBQUcsS0FBTSxDQUFLdkIsRUFBRUQsRUFBRXdCLEdBQUdBLEVBQUVBLEVBQUUwUSxPQUFPLEVBQUMxUSxFQUFFc3ZCLEdBQUdwdkIsRUFBRTFCLEVBQUVzdkIsS0FBS3pwQixJQUFLNkwsT0FBTzFSLEVBQUVBLEVBQUV3QixDQUFDLENBQUMsT0FBT0csRUFBRTNCLEdBQUcsS0FBS3dFLEVBQUcsT0FBaUJ3a0IsRUFBRWhwQixFQUFFd0IsR0FBZG9FLEVBQUVsRSxFQUFFK0UsT0FBYy9FLEVBQUU4RSxVQUFVWCxHQUFHLEdBQUcrQyxHQUFHbEgsR0FBRyxPQUFPb25CLEVBQUU5b0IsRUFBRXdCLEVBQUVFLEVBQUVtRSxHQUFHLEdBQUdqQixFQUFHbEQsR0FBRyxPQUFPcW5CLEVBQUUvb0IsRUFBRXdCLEVBQUVFLEVBQUVtRSxHQUFHdXFCLEdBQUdwd0IsRUFBRTBCLEVBQUUsQ0FBQyxNQUFNLGlCQUFrQkEsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLE9BQU9GLEdBQUcsSUFBSUEsRUFBRTJFLEtBQUtqRyxFQUFFRixFQUFFd0IsRUFBRTBRLFVBQVMxUSxFQUFFQyxFQUFFRCxFQUFFRSxJQUFLZ1EsT0FBTzFSLEVBQUVBLEVBQUV3QixJQUNuZnRCLEVBQUVGLEVBQUV3QixJQUFHQSxFQUFFa3ZCLEdBQUdodkIsRUFBRTFCLEVBQUVzdkIsS0FBS3pwQixJQUFLNkwsT0FBTzFSLEVBQUVBLEVBQUV3QixHQUFHRyxFQUFFM0IsSUFBSUUsRUFBRUYsRUFBRXdCLEVBQUUsQ0FBUyxDQUFDLElBQUk2dkIsR0FBR2QsSUFBRyxHQUFJZSxHQUFHZixJQUFHLEdBQUlnQixHQUFHckYsR0FBRyxNQUFNc0YsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLElBQUksQ0FBQyxTQUFTSSxHQUFHNXhCLEdBQUcsSUFBSUMsRUFBRXN4QixHQUFHcGYsUUFBUWdhLEdBQUVvRixJQUFJdnhCLEVBQUU2eEIsY0FBYzV4QixDQUFDLENBQUMsU0FBUzZ4QixHQUFHOXhCLEVBQUVDLEVBQUVDLEdBQUcsS0FBSyxPQUFPRixHQUFHLENBQUMsSUFBSXdCLEVBQUV4QixFQUFFeVIsVUFBK0gsSUFBcEh6UixFQUFFK3hCLFdBQVc5eEIsS0FBS0EsR0FBR0QsRUFBRSt4QixZQUFZOXhCLEVBQUUsT0FBT3VCLElBQUlBLEVBQUV1d0IsWUFBWTl4QixJQUFJLE9BQU91QixJQUFJQSxFQUFFdXdCLFdBQVc5eEIsS0FBS0EsSUFBSXVCLEVBQUV1d0IsWUFBWTl4QixHQUFNRCxJQUFJRSxFQUFFLE1BQU1GLEVBQUVBLEVBQUUwUixNQUFNLENBQUMsQ0FDblosU0FBU3NnQixHQUFHaHlCLEVBQUVDLEdBQUd1eEIsR0FBR3h4QixFQUFFMHhCLEdBQUdELEdBQUcsS0FBc0IsUUFBakJ6eEIsRUFBRUEsRUFBRWl5QixlQUF1QixPQUFPanlCLEVBQUVreUIsa0JBQW9CbHlCLEVBQUVteUIsTUFBTWx5QixLQUFLbXlCLElBQUcsR0FBSXB5QixFQUFFa3lCLGFBQWEsS0FBSyxDQUFDLFNBQVNHLEdBQUdyeUIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNnhCLGNBQWMsR0FBR0gsS0FBSzF4QixFQUFFLEdBQUdBLEVBQUUsQ0FBQ3N5QixRQUFRdHlCLEVBQUV1eUIsY0FBY3R5QixFQUFFa3hCLEtBQUssTUFBTSxPQUFPTSxHQUFHLENBQUMsR0FBRyxPQUFPRCxHQUFHLE1BQU12c0IsTUFBTWxGLEVBQUUsTUFBTTB4QixHQUFHenhCLEVBQUV3eEIsR0FBR1MsYUFBYSxDQUFDRSxNQUFNLEVBQUVELGFBQWFseUIsRUFBRSxNQUFNeXhCLEdBQUdBLEdBQUdOLEtBQUtueEIsRUFBRSxPQUFPQyxDQUFDLENBQUMsSUFBSXV5QixHQUFHLEtBQUssU0FBU0MsR0FBR3p5QixHQUFHLE9BQU93eUIsR0FBR0EsR0FBRyxDQUFDeHlCLEdBQUd3eUIsR0FBR3JpQixLQUFLblEsRUFBRSxDQUN2WSxTQUFTMHlCLEdBQUcxeUIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsSUFBSUMsRUFBRXhCLEVBQUUweUIsWUFBK0UsT0FBbkUsT0FBT2x4QixHQUFHdkIsRUFBRWl4QixLQUFLanhCLEVBQUV1eUIsR0FBR3h5QixLQUFLQyxFQUFFaXhCLEtBQUsxdkIsRUFBRTB2QixLQUFLMXZCLEVBQUUwdkIsS0FBS2p4QixHQUFHRCxFQUFFMHlCLFlBQVl6eUIsRUFBUzB5QixHQUFHNXlCLEVBQUV3QixFQUFFLENBQUMsU0FBU294QixHQUFHNXlCLEVBQUVDLEdBQUdELEVBQUVteUIsT0FBT2x5QixFQUFFLElBQUlDLEVBQUVGLEVBQUV5UixVQUFxQyxJQUEzQixPQUFPdlIsSUFBSUEsRUFBRWl5QixPQUFPbHlCLEdBQUdDLEVBQUVGLEVBQU1BLEVBQUVBLEVBQUUwUixPQUFPLE9BQU8xUixHQUFHQSxFQUFFK3hCLFlBQVk5eEIsRUFBZ0IsUUFBZEMsRUFBRUYsRUFBRXlSLGFBQXFCdlIsRUFBRTZ4QixZQUFZOXhCLEdBQUdDLEVBQUVGLEVBQUVBLEVBQUVBLEVBQUUwUixPQUFPLE9BQU8sSUFBSXhSLEVBQUVpRyxJQUFJakcsRUFBRThQLFVBQVUsSUFBSSxDQUFDLElBQUk2aUIsSUFBRyxFQUFHLFNBQVNDLEdBQUc5eUIsR0FBR0EsRUFBRSt5QixZQUFZLENBQUNDLFVBQVVoekIsRUFBRTZSLGNBQWNvaEIsZ0JBQWdCLEtBQUtDLGVBQWUsS0FBS0MsT0FBTyxDQUFDQyxRQUFRLEtBQUtULFlBQVksS0FBS1IsTUFBTSxHQUFHa0IsUUFBUSxLQUFLLENBQy9lLFNBQVNDLEdBQUd0ekIsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRSt5QixZQUFZOXlCLEVBQUU4eUIsY0FBYy95QixJQUFJQyxFQUFFOHlCLFlBQVksQ0FBQ0MsVUFBVWh6QixFQUFFZ3pCLFVBQVVDLGdCQUFnQmp6QixFQUFFaXpCLGdCQUFnQkMsZUFBZWx6QixFQUFFa3pCLGVBQWVDLE9BQU9uekIsRUFBRW16QixPQUFPRSxRQUFRcnpCLEVBQUVxekIsU0FBUyxDQUFDLFNBQVNFLEdBQUd2ekIsRUFBRUMsR0FBRyxNQUFNLENBQUN1ekIsVUFBVXh6QixFQUFFeXpCLEtBQUt4ekIsRUFBRWtHLElBQUksRUFBRXV0QixRQUFRLEtBQUtDLFNBQVMsS0FBS3hDLEtBQUssS0FBSyxDQUN0UixTQUFTeUMsR0FBRzV6QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFeEIsRUFBRSt5QixZQUFZLEdBQUcsT0FBT3Z4QixFQUFFLE9BQU8sS0FBZ0IsR0FBWEEsRUFBRUEsRUFBRTJ4QixPQUFpQixFQUFGVSxHQUFLLENBQUMsSUFBSXB5QixFQUFFRCxFQUFFNHhCLFFBQStELE9BQXZELE9BQU8zeEIsRUFBRXhCLEVBQUVreEIsS0FBS2x4QixHQUFHQSxFQUFFa3hCLEtBQUsxdkIsRUFBRTB2QixLQUFLMXZCLEVBQUUwdkIsS0FBS2x4QixHQUFHdUIsRUFBRTR4QixRQUFRbnpCLEVBQVMyeUIsR0FBRzV5QixFQUFFRSxFQUFFLENBQW9GLE9BQW5FLFFBQWhCdUIsRUFBRUQsRUFBRW14QixjQUFzQjF5QixFQUFFa3hCLEtBQUtseEIsRUFBRXd5QixHQUFHanhCLEtBQUt2QixFQUFFa3hCLEtBQUsxdkIsRUFBRTB2QixLQUFLMXZCLEVBQUUwdkIsS0FBS2x4QixHQUFHdUIsRUFBRW14QixZQUFZMXlCLEVBQVMyeUIsR0FBRzV5QixFQUFFRSxFQUFFLENBQUMsU0FBUzR6QixHQUFHOXpCLEVBQUVDLEVBQUVDLEdBQW1CLEdBQUcsUUFBbkJELEVBQUVBLEVBQUU4eUIsZUFBMEI5eUIsRUFBRUEsRUFBRWt6QixPQUFjLFFBQUZqekIsR0FBWSxDQUFDLElBQUlzQixFQUFFdkIsRUFBRWt5QixNQUF3Qmp5QixHQUFsQnNCLEdBQUd4QixFQUFFeVUsYUFBa0J4VSxFQUFFa3lCLE1BQU1qeUIsRUFBRWtWLEdBQUdwVixFQUFFRSxFQUFFLENBQUMsQ0FDclosU0FBUzZ6QixHQUFHL3pCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRSt5QixZQUFZdnhCLEVBQUV4QixFQUFFeVIsVUFBVSxHQUFHLE9BQU9qUSxHQUFvQnRCLEtBQWhCc0IsRUFBRUEsRUFBRXV4QixhQUFtQixDQUFDLElBQUl0eEIsRUFBRSxLQUFLQyxFQUFFLEtBQXlCLEdBQUcsUUFBdkJ4QixFQUFFQSxFQUFFK3lCLGlCQUE0QixDQUFDLEVBQUUsQ0FBQyxJQUFJdHhCLEVBQUUsQ0FBQzZ4QixVQUFVdHpCLEVBQUVzekIsVUFBVUMsS0FBS3Z6QixFQUFFdXpCLEtBQUt0dEIsSUFBSWpHLEVBQUVpRyxJQUFJdXRCLFFBQVF4ekIsRUFBRXd6QixRQUFRQyxTQUFTenpCLEVBQUV5ekIsU0FBU3hDLEtBQUssTUFBTSxPQUFPenZCLEVBQUVELEVBQUVDLEVBQUVDLEVBQUVELEVBQUVBLEVBQUV5dkIsS0FBS3h2QixFQUFFekIsRUFBRUEsRUFBRWl4QixJQUFJLE9BQU8sT0FBT2p4QixHQUFHLE9BQU93QixFQUFFRCxFQUFFQyxFQUFFekIsRUFBRXlCLEVBQUVBLEVBQUV5dkIsS0FBS2x4QixDQUFDLE1BQU13QixFQUFFQyxFQUFFekIsRUFBaUgsT0FBL0dDLEVBQUUsQ0FBQzh5QixVQUFVeHhCLEVBQUV3eEIsVUFBVUMsZ0JBQWdCeHhCLEVBQUV5eEIsZUFBZXh4QixFQUFFeXhCLE9BQU8zeEIsRUFBRTJ4QixPQUFPRSxRQUFRN3hCLEVBQUU2eEIsY0FBU3J6QixFQUFFK3lCLFlBQVk3eUIsRUFBUSxDQUFvQixRQUFuQkYsRUFBRUUsRUFBRWd6QixnQkFBd0JoekIsRUFBRSt5QixnQkFBZ0JoekIsRUFBRUQsRUFBRW14QixLQUNuZmx4QixFQUFFQyxFQUFFZ3pCLGVBQWVqekIsQ0FBQyxDQUNwQixTQUFTK3pCLEdBQUdoMEIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsSUFBSUMsRUFBRXpCLEVBQUUreUIsWUFBWUYsSUFBRyxFQUFHLElBQUlueEIsRUFBRUQsRUFBRXd4QixnQkFBZ0J0eEIsRUFBRUYsRUFBRXl4QixlQUFlcnRCLEVBQUVwRSxFQUFFMHhCLE9BQU9DLFFBQVEsR0FBRyxPQUFPdnRCLEVBQUUsQ0FBQ3BFLEVBQUUweEIsT0FBT0MsUUFBUSxLQUFLLElBQUl0dEIsRUFBRUQsRUFBRUQsRUFBRUUsRUFBRXFyQixLQUFLcnJCLEVBQUVxckIsS0FBSyxLQUFLLE9BQU94dkIsRUFBRUQsRUFBRWtFLEVBQUVqRSxFQUFFd3ZCLEtBQUt2ckIsRUFBRWpFLEVBQUVtRSxFQUFFLElBQUlrTCxFQUFFaFIsRUFBRXlSLFVBQVUsT0FBT1QsSUFBb0JuTCxHQUFoQm1MLEVBQUVBLEVBQUUraEIsYUFBZ0JHLGtCQUFtQnZ4QixJQUFJLE9BQU9rRSxFQUFFbUwsRUFBRWlpQixnQkFBZ0JydEIsRUFBRUMsRUFBRXNyQixLQUFLdnJCLEVBQUVvTCxFQUFFa2lCLGVBQWVwdEIsRUFBRyxDQUFDLEdBQUcsT0FBT3BFLEVBQUUsQ0FBQyxJQUFJc3ZCLEVBQUV2dkIsRUFBRXV4QixVQUE2QixJQUFuQnJ4QixFQUFFLEVBQUVxUCxFQUFFcEwsRUFBRUUsRUFBRSxLQUFLRCxFQUFFbkUsSUFBSSxDQUFDLElBQUl1dkIsRUFBRXByQixFQUFFNHRCLEtBQUt2QyxFQUFFcnJCLEVBQUUydEIsVUFBVSxJQUFJaHlCLEVBQUV5dkIsS0FBS0EsRUFBRSxDQUFDLE9BQU9qZ0IsSUFBSUEsRUFBRUEsRUFBRW1nQixLQUFLLENBQUNxQyxVQUFVdEMsRUFBRXVDLEtBQUssRUFBRXR0QixJQUFJTixFQUFFTSxJQUFJdXRCLFFBQVE3dEIsRUFBRTZ0QixRQUFRQyxTQUFTOXRCLEVBQUU4dEIsU0FDdmZ4QyxLQUFLLE9BQU9ueEIsRUFBRSxDQUFDLElBQUk4b0IsRUFBRTlvQixFQUFFK29CLEVBQUVsakIsRUFBVSxPQUFSb3JCLEVBQUVoeEIsRUFBRWl4QixFQUFFaHhCLEVBQVM2b0IsRUFBRTVpQixLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmMmlCLEVBQUVDLEVBQUUySyxTQUFpQyxDQUFDMUMsRUFBRWxJLEVBQUU3bEIsS0FBS2l1QixFQUFFRixFQUFFQyxHQUFHLE1BQU1qeEIsQ0FBQyxDQUFDZ3hCLEVBQUVsSSxFQUFFLE1BQU05b0IsRUFBRSxLQUFLLEVBQUU4b0IsRUFBRW5YLE9BQWUsTUFBVG1YLEVBQUVuWCxNQUFhLElBQUksS0FBSyxFQUFzRCxHQUFHLE9BQTNDc2YsRUFBRSxtQkFBZG5JLEVBQUVDLEVBQUUySyxTQUFnQzVLLEVBQUU3bEIsS0FBS2l1QixFQUFFRixFQUFFQyxHQUFHbkksR0FBMEIsTUFBTTlvQixFQUFFZ3hCLEVBQUVsc0IsRUFBRSxDQUFDLEVBQUVrc0IsRUFBRUMsR0FBRyxNQUFNanhCLEVBQUUsS0FBSyxFQUFFNnlCLElBQUcsRUFBRyxDQUFDLE9BQU9odEIsRUFBRTh0QixVQUFVLElBQUk5dEIsRUFBRTR0QixPQUFPenpCLEVBQUUyUixPQUFPLEdBQWUsUUFBWnNmLEVBQUV4dkIsRUFBRTR4QixTQUFpQjV4QixFQUFFNHhCLFFBQVEsQ0FBQ3h0QixHQUFHb3JCLEVBQUU5Z0IsS0FBS3RLLEdBQUcsTUFBTXFyQixFQUFFLENBQUNzQyxVQUFVdEMsRUFBRXVDLEtBQUt4QyxFQUFFOXFCLElBQUlOLEVBQUVNLElBQUl1dEIsUUFBUTd0QixFQUFFNnRCLFFBQVFDLFNBQVM5dEIsRUFBRTh0QixTQUFTeEMsS0FBSyxNQUFNLE9BQU9uZ0IsR0FBR3BMLEVBQUVvTCxFQUFFa2dCLEVBQUVwckIsRUFBRWtyQixHQUFHaGdCLEVBQUVBLEVBQUVtZ0IsS0FBS0QsRUFBRXZ2QixHQUFHc3ZCLEVBQzNlLEdBQUcsUUFBWnByQixFQUFFQSxFQUFFc3JCLE1BQWlCLElBQXNCLFFBQW5CdHJCLEVBQUVwRSxFQUFFMHhCLE9BQU9DLFNBQWlCLE1BQWV2dEIsR0FBSm9yQixFQUFFcHJCLEdBQU1zckIsS0FBS0YsRUFBRUUsS0FBSyxLQUFLMXZCLEVBQUV5eEIsZUFBZWpDLEVBQUV4dkIsRUFBRTB4QixPQUFPQyxRQUFRLElBQUksRUFBc0csR0FBNUYsT0FBT3BpQixJQUFJbEwsRUFBRWtyQixHQUFHdnZCLEVBQUV1eEIsVUFBVWx0QixFQUFFckUsRUFBRXd4QixnQkFBZ0JydEIsRUFBRW5FLEVBQUV5eEIsZUFBZWxpQixFQUE0QixRQUExQi9RLEVBQUV3QixFQUFFMHhCLE9BQU9SLGFBQXdCLENBQUNseEIsRUFBRXhCLEVBQUUsR0FBRzBCLEdBQUdGLEVBQUVneUIsS0FBS2h5QixFQUFFQSxFQUFFMHZCLFdBQVcxdkIsSUFBSXhCLEVBQUUsTUFBTSxPQUFPeUIsSUFBSUQsRUFBRTB4QixPQUFPaEIsTUFBTSxHQUFHOEIsSUFBSXR5QixFQUFFM0IsRUFBRW15QixNQUFNeHdCLEVBQUUzQixFQUFFNlIsY0FBY21mLENBQUMsQ0FBQyxDQUM5VixTQUFTa0QsR0FBR2wwQixFQUFFQyxFQUFFQyxHQUE4QixHQUEzQkYsRUFBRUMsRUFBRW96QixRQUFRcHpCLEVBQUVvekIsUUFBUSxLQUFRLE9BQU9yekIsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVJLE9BQU9ILElBQUksQ0FBQyxJQUFJdUIsRUFBRXhCLEVBQUVDLEdBQUd3QixFQUFFRCxFQUFFbXlCLFNBQVMsR0FBRyxPQUFPbHlCLEVBQUUsQ0FBcUIsR0FBcEJELEVBQUVteUIsU0FBUyxLQUFLbnlCLEVBQUV0QixFQUFLLG1CQUFvQnVCLEVBQUUsTUFBTXdELE1BQU1sRixFQUFFLElBQUkwQixJQUFJQSxFQUFFd0IsS0FBS3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTJ5QixHQUFHLENBQUMsRUFBRUMsR0FBR2xJLEdBQUdpSSxJQUFJRSxHQUFHbkksR0FBR2lJLElBQUlHLEdBQUdwSSxHQUFHaUksSUFBSSxTQUFTSSxHQUFHdjBCLEdBQUcsR0FBR0EsSUFBSW0wQixHQUFHLE1BQU1sdkIsTUFBTWxGLEVBQUUsTUFBTSxPQUFPQyxDQUFDLENBQ25TLFNBQVN3MEIsR0FBR3gwQixFQUFFQyxHQUF5QyxPQUF0Q21zQixHQUFFa0ksR0FBR3IwQixHQUFHbXNCLEdBQUVpSSxHQUFHcjBCLEdBQUdvc0IsR0FBRWdJLEdBQUdELElBQUluMEIsRUFBRUMsRUFBRXlLLFVBQW1CLEtBQUssRUFBRSxLQUFLLEdBQUd6SyxHQUFHQSxFQUFFQSxFQUFFeWtCLGlCQUFpQnprQixFQUFFOEosYUFBYUgsR0FBRyxLQUFLLElBQUksTUFBTSxRQUFrRTNKLEVBQUUySixHQUFyQzNKLEdBQXZCRCxFQUFFLElBQUlBLEVBQUVDLEVBQUV5UCxXQUFXelAsR0FBTThKLGNBQWMsS0FBSy9KLEVBQUVBLEVBQUV5MEIsU0FBa0J0SSxHQUFFaUksSUFBSWhJLEdBQUVnSSxHQUFHbjBCLEVBQUUsQ0FBQyxTQUFTeTBCLEtBQUt2SSxHQUFFaUksSUFBSWpJLEdBQUVrSSxJQUFJbEksR0FBRW1JLEdBQUcsQ0FBQyxTQUFTSyxHQUFHMzBCLEdBQUd1MEIsR0FBR0QsR0FBR25pQixTQUFTLElBQUlsUyxFQUFFczBCLEdBQUdILEdBQUdqaUIsU0FBYWpTLEVBQUUwSixHQUFHM0osRUFBRUQsRUFBRWtDLE1BQU1qQyxJQUFJQyxJQUFJa3NCLEdBQUVpSSxHQUFHcjBCLEdBQUdvc0IsR0FBRWdJLEdBQUdsMEIsR0FBRyxDQUFDLFNBQVMwMEIsR0FBRzUwQixHQUFHcTBCLEdBQUdsaUIsVUFBVW5TLElBQUltc0IsR0FBRWlJLElBQUlqSSxHQUFFa0ksSUFBSSxDQUFDLElBQUlRLEdBQUUzSSxHQUFHLEdBQ3haLFNBQVM0SSxHQUFHOTBCLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUVrRyxJQUFJLENBQUMsSUFBSWpHLEVBQUVELEVBQUU0UixjQUFjLEdBQUcsT0FBTzNSLElBQW1CLFFBQWZBLEVBQUVBLEVBQUU0UixhQUFxQixPQUFPNVIsRUFBRTJjLE1BQU0sT0FBTzNjLEVBQUUyYyxNQUFNLE9BQU81YyxDQUFDLE1BQU0sR0FBRyxLQUFLQSxFQUFFa0csVUFBSyxJQUFTbEcsRUFBRXl2QixjQUFjcUYsYUFBYSxHQUFnQixJQUFSOTBCLEVBQUUwUixNQUFXLE9BQU8xUixPQUFPLEdBQUcsT0FBT0EsRUFBRWdTLE1BQU0sQ0FBQ2hTLEVBQUVnUyxNQUFNUCxPQUFPelIsRUFBRUEsRUFBRUEsRUFBRWdTLE1BQU0sUUFBUSxDQUFDLEdBQUdoUyxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFaVMsU0FBUyxDQUFDLEdBQUcsT0FBT2pTLEVBQUV5UixRQUFRelIsRUFBRXlSLFNBQVMxUixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRXlSLE1BQU0sQ0FBQ3pSLEVBQUVpUyxRQUFRUixPQUFPelIsRUFBRXlSLE9BQU96UixFQUFFQSxFQUFFaVMsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUk4aUIsR0FBRyxHQUNyYyxTQUFTQyxLQUFLLElBQUksSUFBSWoxQixFQUFFLEVBQUVBLEVBQUVnMUIsR0FBRzUwQixPQUFPSixJQUFJZzFCLEdBQUdoMUIsR0FBR2sxQiw4QkFBOEIsS0FBS0YsR0FBRzUwQixPQUFPLENBQUMsQ0FBQyxJQUFJKzBCLEdBQUcxeEIsRUFBRzJ4Qix1QkFBdUJDLEdBQUc1eEIsRUFBR29VLHdCQUF3QnlkLEdBQUcsRUFBRUMsR0FBRSxLQUFLQyxHQUFFLEtBQUtDLEdBQUUsS0FBS0MsSUFBRyxFQUFHQyxJQUFHLEVBQUdDLEdBQUcsRUFBRUMsR0FBRyxFQUFFLFNBQVNDLEtBQUksTUFBTTd3QixNQUFNbEYsRUFBRSxLQUFNLENBQUMsU0FBU2cyQixHQUFHLzFCLEVBQUVDLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRUQsRUFBRUcsUUFBUUYsRUFBRUYsRUFBRUksT0FBT0YsSUFBSSxJQUFJcWpCLEdBQUd2akIsRUFBRUUsR0FBR0QsRUFBRUMsSUFBSSxPQUFNLEVBQUcsT0FBTSxDQUFFLENBQ2hXLFNBQVM4MUIsR0FBR2gyQixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsRUFBRUMsR0FBeUgsR0FBdEg0ekIsR0FBRzV6QixFQUFFNnpCLEdBQUV0MUIsRUFBRUEsRUFBRTRSLGNBQWMsS0FBSzVSLEVBQUU4eUIsWUFBWSxLQUFLOXlCLEVBQUVreUIsTUFBTSxFQUFFZ0QsR0FBR2hqQixRQUFRLE9BQU9uUyxHQUFHLE9BQU9BLEVBQUU2UixjQUFjb2tCLEdBQUdDLEdBQUdsMkIsRUFBRUUsRUFBRXNCLEVBQUVDLEdBQU1rMEIsR0FBRyxDQUFDajBCLEVBQUUsRUFBRSxFQUFFLENBQVksR0FBWGkwQixJQUFHLEVBQUdDLEdBQUcsRUFBSyxJQUFJbDBCLEVBQUUsTUFBTXVELE1BQU1sRixFQUFFLE1BQU0yQixHQUFHLEVBQUUrekIsR0FBRUQsR0FBRSxLQUFLdjFCLEVBQUU4eUIsWUFBWSxLQUFLb0MsR0FBR2hqQixRQUFRZ2tCLEdBQUduMkIsRUFBRUUsRUFBRXNCLEVBQUVDLEVBQUUsT0FBT2swQixHQUFHLENBQStELEdBQTlEUixHQUFHaGpCLFFBQVFpa0IsR0FBR24yQixFQUFFLE9BQU91MUIsSUFBRyxPQUFPQSxHQUFFckUsS0FBS21FLEdBQUcsRUFBRUcsR0FBRUQsR0FBRUQsR0FBRSxLQUFLRyxJQUFHLEVBQU16MUIsRUFBRSxNQUFNZ0YsTUFBTWxGLEVBQUUsTUFBTSxPQUFPQyxDQUFDLENBQUMsU0FBU3EyQixLQUFLLElBQUlyMkIsRUFBRSxJQUFJNDFCLEdBQVEsT0FBTEEsR0FBRyxFQUFTNTFCLENBQUMsQ0FDL1ksU0FBU3MyQixLQUFLLElBQUl0MkIsRUFBRSxDQUFDNlIsY0FBYyxLQUFLbWhCLFVBQVUsS0FBS3VELFVBQVUsS0FBS0MsTUFBTSxLQUFLckYsS0FBSyxNQUE4QyxPQUF4QyxPQUFPc0UsR0FBRUYsR0FBRTFqQixjQUFjNGpCLEdBQUV6MUIsRUFBRXkxQixHQUFFQSxHQUFFdEUsS0FBS254QixFQUFTeTFCLEVBQUMsQ0FBQyxTQUFTZ0IsS0FBSyxHQUFHLE9BQU9qQixHQUFFLENBQUMsSUFBSXgxQixFQUFFdTFCLEdBQUU5akIsVUFBVXpSLEVBQUUsT0FBT0EsRUFBRUEsRUFBRTZSLGNBQWMsSUFBSSxNQUFNN1IsRUFBRXcxQixHQUFFckUsS0FBSyxJQUFJbHhCLEVBQUUsT0FBT3cxQixHQUFFRixHQUFFMWpCLGNBQWM0akIsR0FBRXRFLEtBQUssR0FBRyxPQUFPbHhCLEVBQUV3MUIsR0FBRXgxQixFQUFFdTFCLEdBQUV4MUIsTUFBTSxDQUFDLEdBQUcsT0FBT0EsRUFBRSxNQUFNaUYsTUFBTWxGLEVBQUUsTUFBVUMsRUFBRSxDQUFDNlIsZUFBUDJqQixHQUFFeDFCLEdBQXFCNlIsY0FBY21oQixVQUFVd0MsR0FBRXhDLFVBQVV1RCxVQUFVZixHQUFFZSxVQUFVQyxNQUFNaEIsR0FBRWdCLE1BQU1yRixLQUFLLE1BQU0sT0FBT3NFLEdBQUVGLEdBQUUxakIsY0FBYzRqQixHQUFFejFCLEVBQUV5MUIsR0FBRUEsR0FBRXRFLEtBQUtueEIsQ0FBQyxDQUFDLE9BQU95MUIsRUFBQyxDQUNqZSxTQUFTaUIsR0FBRzEyQixFQUFFQyxHQUFHLE1BQU0sbUJBQW9CQSxFQUFFQSxFQUFFRCxHQUFHQyxDQUFDLENBQ25ELFNBQVMwMkIsR0FBRzMyQixHQUFHLElBQUlDLEVBQUV3MkIsS0FBS3YyQixFQUFFRCxFQUFFdTJCLE1BQU0sR0FBRyxPQUFPdDJCLEVBQUUsTUFBTStFLE1BQU1sRixFQUFFLE1BQU1HLEVBQUUwMkIsb0JBQW9CNTJCLEVBQUUsSUFBSXdCLEVBQUVnMEIsR0FBRS96QixFQUFFRCxFQUFFKzBCLFVBQVU3MEIsRUFBRXhCLEVBQUVrekIsUUFBUSxHQUFHLE9BQU8xeEIsRUFBRSxDQUFDLEdBQUcsT0FBT0QsRUFBRSxDQUFDLElBQUlFLEVBQUVGLEVBQUUwdkIsS0FBSzF2QixFQUFFMHZCLEtBQUt6dkIsRUFBRXl2QixLQUFLenZCLEVBQUV5dkIsS0FBS3h2QixDQUFDLENBQUNILEVBQUUrMEIsVUFBVTkwQixFQUFFQyxFQUFFeEIsRUFBRWt6QixRQUFRLElBQUksQ0FBQyxHQUFHLE9BQU8zeEIsRUFBRSxDQUFDQyxFQUFFRCxFQUFFMHZCLEtBQUszdkIsRUFBRUEsRUFBRXd4QixVQUFVLElBQUludEIsRUFBRWxFLEVBQUUsS0FBS21FLEVBQUUsS0FBS0YsRUFBRWxFLEVBQUUsRUFBRSxDQUFDLElBQUlzUCxFQUFFcEwsRUFBRTZ0QixLQUFLLElBQUk2QixHQUFHdGtCLEtBQUtBLEVBQUUsT0FBT2xMLElBQUlBLEVBQUVBLEVBQUVxckIsS0FBSyxDQUFDc0MsS0FBSyxFQUFFb0QsT0FBT2p4QixFQUFFaXhCLE9BQU9DLGNBQWNseEIsRUFBRWt4QixjQUFjQyxXQUFXbnhCLEVBQUVteEIsV0FBVzVGLEtBQUssT0FBTzN2QixFQUFFb0UsRUFBRWt4QixjQUFjbHhCLEVBQUVteEIsV0FBVy8yQixFQUFFd0IsRUFBRW9FLEVBQUVpeEIsWUFBWSxDQUFDLElBQUk3RixFQUFFLENBQUN5QyxLQUFLemlCLEVBQUU2bEIsT0FBT2p4QixFQUFFaXhCLE9BQU9DLGNBQWNseEIsRUFBRWt4QixjQUNuZ0JDLFdBQVdueEIsRUFBRW14QixXQUFXNUYsS0FBSyxNQUFNLE9BQU9yckIsR0FBR0QsRUFBRUMsRUFBRWtyQixFQUFFcnZCLEVBQUVILEdBQUdzRSxFQUFFQSxFQUFFcXJCLEtBQUtILEVBQUV1RSxHQUFFcEQsT0FBT25oQixFQUFFaWpCLElBQUlqakIsQ0FBQyxDQUFDcEwsRUFBRUEsRUFBRXVyQixJQUFJLE9BQU8sT0FBT3ZyQixHQUFHQSxJQUFJbEUsR0FBRyxPQUFPb0UsRUFBRW5FLEVBQUVILEVBQUVzRSxFQUFFcXJCLEtBQUt0ckIsRUFBRTBkLEdBQUcvaEIsRUFBRXZCLEVBQUU0UixpQkFBaUJ1Z0IsSUFBRyxHQUFJbnlCLEVBQUU0UixjQUFjclEsRUFBRXZCLEVBQUUreUIsVUFBVXJ4QixFQUFFMUIsRUFBRXMyQixVQUFVendCLEVBQUU1RixFQUFFODJCLGtCQUFrQngxQixDQUFDLENBQWlCLEdBQUcsUUFBbkJ4QixFQUFFRSxFQUFFeXlCLGFBQXdCLENBQUNseEIsRUFBRXpCLEVBQUUsR0FBRzBCLEVBQUVELEVBQUVneUIsS0FBSzhCLEdBQUVwRCxPQUFPendCLEVBQUV1eUIsSUFBSXZ5QixFQUFFRCxFQUFFQSxFQUFFMHZCLFdBQVcxdkIsSUFBSXpCLEVBQUUsTUFBTSxPQUFPeUIsSUFBSXZCLEVBQUVpeUIsTUFBTSxHQUFHLE1BQU0sQ0FBQ2x5QixFQUFFNFIsY0FBYzNSLEVBQUUrMkIsU0FBUyxDQUM5WCxTQUFTQyxHQUFHbDNCLEdBQUcsSUFBSUMsRUFBRXcyQixLQUFLdjJCLEVBQUVELEVBQUV1MkIsTUFBTSxHQUFHLE9BQU90MkIsRUFBRSxNQUFNK0UsTUFBTWxGLEVBQUUsTUFBTUcsRUFBRTAyQixvQkFBb0I1MkIsRUFBRSxJQUFJd0IsRUFBRXRCLEVBQUUrMkIsU0FBU3gxQixFQUFFdkIsRUFBRWt6QixRQUFRMXhCLEVBQUV6QixFQUFFNFIsY0FBYyxHQUFHLE9BQU9wUSxFQUFFLENBQUN2QixFQUFFa3pCLFFBQVEsS0FBSyxJQUFJenhCLEVBQUVGLEVBQUVBLEVBQUUwdkIsS0FBSyxHQUFHenZCLEVBQUUxQixFQUFFMEIsRUFBRUMsRUFBRWsxQixRQUFRbDFCLEVBQUVBLEVBQUV3dkIsV0FBV3h2QixJQUFJRixHQUFHOGhCLEdBQUc3aEIsRUFBRXpCLEVBQUU0UixpQkFBaUJ1Z0IsSUFBRyxHQUFJbnlCLEVBQUU0UixjQUFjblEsRUFBRSxPQUFPekIsRUFBRXMyQixZQUFZdDJCLEVBQUUreUIsVUFBVXR4QixHQUFHeEIsRUFBRTgyQixrQkFBa0J0MUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQ0EsRUFBRUYsRUFBRSxDQUFDLFNBQVMyMUIsS0FBSyxDQUNwVyxTQUFTQyxHQUFHcDNCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRXExQixHQUFFL3pCLEVBQUVpMUIsS0FBS2gxQixFQUFFeEIsSUFBSXlCLEdBQUc2aEIsR0FBRy9oQixFQUFFcVEsY0FBY3BRLEdBQXNFLEdBQW5FQyxJQUFJRixFQUFFcVEsY0FBY3BRLEVBQUUyd0IsSUFBRyxHQUFJNXdCLEVBQUVBLEVBQUVnMUIsTUFBTWEsR0FBR0MsR0FBRzNPLEtBQUssS0FBS3pvQixFQUFFc0IsRUFBRXhCLEdBQUcsQ0FBQ0EsSUFBT3dCLEVBQUUrMUIsY0FBY3QzQixHQUFHeUIsR0FBRyxPQUFPK3pCLElBQXVCLEVBQXBCQSxHQUFFNWpCLGNBQWMxTCxJQUFNLENBQXVELEdBQXREakcsRUFBRXlSLE9BQU8sS0FBSzZsQixHQUFHLEVBQUVDLEdBQUc5TyxLQUFLLEtBQUt6b0IsRUFBRXNCLEVBQUVDLEVBQUV4QixRQUFHLEVBQU8sTUFBUyxPQUFPeTNCLEdBQUUsTUFBTXp5QixNQUFNbEYsRUFBRSxNQUFjLEdBQUh1MUIsSUFBUXFDLEdBQUd6M0IsRUFBRUQsRUFBRXdCLEVBQUUsQ0FBQyxPQUFPQSxDQUFDLENBQUMsU0FBU2syQixHQUFHMzNCLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUUyUixPQUFPLE1BQU0zUixFQUFFLENBQUN1M0IsWUFBWXQzQixFQUFFMEgsTUFBTXpILEdBQW1CLFFBQWhCRCxFQUFFczFCLEdBQUV4QyxjQUFzQjl5QixFQUFFLENBQUMyM0IsV0FBVyxLQUFLQyxPQUFPLE1BQU10QyxHQUFFeEMsWUFBWTl5QixFQUFFQSxFQUFFNDNCLE9BQU8sQ0FBQzczQixJQUFnQixRQUFYRSxFQUFFRCxFQUFFNDNCLFFBQWdCNTNCLEVBQUU0M0IsT0FBTyxDQUFDNzNCLEdBQUdFLEVBQUVpUSxLQUFLblEsRUFBRyxDQUNsZixTQUFTeTNCLEdBQUd6M0IsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUd2QixFQUFFMEgsTUFBTXpILEVBQUVELEVBQUVzM0IsWUFBWS8xQixFQUFFczJCLEdBQUc3M0IsSUFBSTgzQixHQUFHLzNCLEVBQUUsQ0FBQyxTQUFTczNCLEdBQUd0M0IsRUFBRUMsRUFBRUMsR0FBRyxPQUFPQSxHQUFFLFdBQVc0M0IsR0FBRzczQixJQUFJODNCLEdBQUcvM0IsRUFBRSxHQUFFLENBQUMsU0FBUzgzQixHQUFHOTNCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXUzQixZQUFZdjNCLEVBQUVBLEVBQUUySCxNQUFNLElBQUksSUFBSXpILEVBQUVELElBQUksT0FBT3NqQixHQUFHdmpCLEVBQUVFLEVBQUUsQ0FBQyxNQUFNc0IsR0FBRyxPQUFNLENBQUUsQ0FBQyxDQUFDLFNBQVN1MkIsR0FBRy8zQixHQUFHLElBQUlDLEVBQUUyeUIsR0FBRzV5QixFQUFFLEdBQUcsT0FBT0MsR0FBRyszQixHQUFHLzNCLEVBQUVELEVBQUUsR0FBRyxFQUFFLENBQ2xRLFNBQVNpNEIsR0FBR2o0QixHQUFHLElBQUlDLEVBQUVxMkIsS0FBOE0sTUFBek0sbUJBQW9CdDJCLElBQUlBLEVBQUVBLEtBQUtDLEVBQUU0UixjQUFjNVIsRUFBRSt5QixVQUFVaHpCLEVBQUVBLEVBQUUsQ0FBQ296QixRQUFRLEtBQUtULFlBQVksS0FBS1IsTUFBTSxFQUFFOEUsU0FBUyxLQUFLTCxvQkFBb0JGLEdBQUdNLGtCQUFrQmgzQixHQUFHQyxFQUFFdTJCLE1BQU14MkIsRUFBRUEsRUFBRUEsRUFBRWkzQixTQUFTaUIsR0FBR3ZQLEtBQUssS0FBSzRNLEdBQUV2MUIsR0FBUyxDQUFDQyxFQUFFNFIsY0FBYzdSLEVBQUUsQ0FDNVAsU0FBU3czQixHQUFHeDNCLEVBQUVDLEVBQUVDLEVBQUVzQixHQUE4TyxPQUEzT3hCLEVBQUUsQ0FBQ21HLElBQUluRyxFQUFFbTRCLE9BQU9sNEIsRUFBRW00QixRQUFRbDRCLEVBQUVtNEIsS0FBSzcyQixFQUFFMnZCLEtBQUssTUFBc0IsUUFBaEJseEIsRUFBRXMxQixHQUFFeEMsY0FBc0I5eUIsRUFBRSxDQUFDMjNCLFdBQVcsS0FBS0MsT0FBTyxNQUFNdEMsR0FBRXhDLFlBQVk5eUIsRUFBRUEsRUFBRTIzQixXQUFXNTNCLEVBQUVteEIsS0FBS254QixHQUFtQixRQUFmRSxFQUFFRCxFQUFFMjNCLFlBQW9CMzNCLEVBQUUyM0IsV0FBVzUzQixFQUFFbXhCLEtBQUtueEIsR0FBR3dCLEVBQUV0QixFQUFFaXhCLEtBQUtqeEIsRUFBRWl4QixLQUFLbnhCLEVBQUVBLEVBQUVteEIsS0FBSzN2QixFQUFFdkIsRUFBRTIzQixXQUFXNTNCLEdBQVdBLENBQUMsQ0FBQyxTQUFTczRCLEtBQUssT0FBTzdCLEtBQUs1a0IsYUFBYSxDQUFDLFNBQVMwbUIsR0FBR3Y0QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxJQUFJQyxFQUFFNjBCLEtBQUtmLEdBQUU1akIsT0FBTzNSLEVBQUV5QixFQUFFb1EsY0FBYzJsQixHQUFHLEVBQUV2M0IsRUFBRUMsT0FBRSxPQUFPLElBQVNzQixFQUFFLEtBQUtBLEVBQUUsQ0FDOVksU0FBU2czQixHQUFHeDRCLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHLElBQUlDLEVBQUVnMUIsS0FBS2oxQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJRSxPQUFFLEVBQU8sR0FBRyxPQUFPOHpCLEdBQUUsQ0FBQyxJQUFJN3pCLEVBQUU2ekIsR0FBRTNqQixjQUEwQixHQUFablEsRUFBRUMsRUFBRXkyQixRQUFXLE9BQU81MkIsR0FBR3UwQixHQUFHdjBCLEVBQUVHLEVBQUUwMkIsTUFBbUMsWUFBNUI1MkIsRUFBRW9RLGNBQWMybEIsR0FBR3YzQixFQUFFQyxFQUFFd0IsRUFBRUYsR0FBVSxDQUFDK3pCLEdBQUU1akIsT0FBTzNSLEVBQUV5QixFQUFFb1EsY0FBYzJsQixHQUFHLEVBQUV2M0IsRUFBRUMsRUFBRXdCLEVBQUVGLEVBQUUsQ0FBQyxTQUFTaTNCLEdBQUd6NEIsRUFBRUMsR0FBRyxPQUFPczRCLEdBQUcsUUFBUSxFQUFFdjRCLEVBQUVDLEVBQUUsQ0FBQyxTQUFTbzNCLEdBQUdyM0IsRUFBRUMsR0FBRyxPQUFPdTRCLEdBQUcsS0FBSyxFQUFFeDRCLEVBQUVDLEVBQUUsQ0FBQyxTQUFTeTRCLEdBQUcxNEIsRUFBRUMsR0FBRyxPQUFPdTRCLEdBQUcsRUFBRSxFQUFFeDRCLEVBQUVDLEVBQUUsQ0FBQyxTQUFTMDRCLEdBQUczNEIsRUFBRUMsR0FBRyxPQUFPdTRCLEdBQUcsRUFBRSxFQUFFeDRCLEVBQUVDLEVBQUUsQ0FDaFgsU0FBUzI0QixHQUFHNTRCLEVBQUVDLEdBQUcsTUFBRyxtQkFBb0JBLEdBQVNELEVBQUVBLElBQUlDLEVBQUVELEdBQUcsV0FBV0MsRUFBRSxLQUFLLEdBQUssTUFBT0EsR0FBcUJELEVBQUVBLElBQUlDLEVBQUVrUyxRQUFRblMsRUFBRSxXQUFXQyxFQUFFa1MsUUFBUSxJQUFJLFFBQTFFLENBQTJFLENBQUMsU0FBUzBtQixHQUFHNzRCLEVBQUVDLEVBQUVDLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUU0bkIsT0FBTyxDQUFDOW5CLElBQUksS0FBWXc0QixHQUFHLEVBQUUsRUFBRUksR0FBR2pRLEtBQUssS0FBSzFvQixFQUFFRCxHQUFHRSxFQUFFLENBQUMsU0FBUzQ0QixLQUFLLENBQUMsU0FBU0MsR0FBRy80QixFQUFFQyxHQUFHLElBQUlDLEVBQUV1MkIsS0FBS3gyQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdUIsRUFBRXRCLEVBQUUyUixjQUFjLE9BQUcsT0FBT3JRLEdBQUcsT0FBT3ZCLEdBQUc4MUIsR0FBRzkxQixFQUFFdUIsRUFBRSxJQUFXQSxFQUFFLElBQUd0QixFQUFFMlIsY0FBYyxDQUFDN1IsRUFBRUMsR0FBVUQsRUFBQyxDQUM3WixTQUFTZzVCLEdBQUdoNUIsRUFBRUMsR0FBRyxJQUFJQyxFQUFFdTJCLEtBQUt4MkIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSXVCLEVBQUV0QixFQUFFMlIsY0FBYyxPQUFHLE9BQU9yUSxHQUFHLE9BQU92QixHQUFHODFCLEdBQUc5MUIsRUFBRXVCLEVBQUUsSUFBV0EsRUFBRSxJQUFHeEIsRUFBRUEsSUFBSUUsRUFBRTJSLGNBQWMsQ0FBQzdSLEVBQUVDLEdBQVVELEVBQUMsQ0FBQyxTQUFTaTVCLEdBQUdqNUIsRUFBRUMsRUFBRUMsR0FBRyxPQUFXLEdBQUhvMUIsSUFBb0UvUixHQUFHcmpCLEVBQUVELEtBQUtDLEVBQUU4VSxLQUFLdWdCLEdBQUVwRCxPQUFPanlCLEVBQUUrekIsSUFBSS96QixFQUFFRixFQUFFZ3pCLFdBQVUsR0FBVy95QixJQUEvR0QsRUFBRWd6QixZQUFZaHpCLEVBQUVnekIsV0FBVSxFQUFHWixJQUFHLEdBQUlweUIsRUFBRTZSLGNBQWMzUixFQUE0RCxDQUFDLFNBQVNnNUIsR0FBR2w1QixFQUFFQyxHQUFHLElBQUlDLEVBQUVtVixHQUFFQSxHQUFFLElBQUluVixHQUFHLEVBQUVBLEVBQUVBLEVBQUUsRUFBRUYsR0FBRSxHQUFJLElBQUl3QixFQUFFNnpCLEdBQUdyZCxXQUFXcWQsR0FBR3JkLFdBQVcsQ0FBQyxFQUFFLElBQUloWSxHQUFFLEdBQUlDLEdBQUcsQ0FBQyxRQUFRb1YsR0FBRW5WLEVBQUVtMUIsR0FBR3JkLFdBQVd4VyxDQUFDLENBQUMsQ0FBQyxTQUFTMjNCLEtBQUssT0FBTzFDLEtBQUs1a0IsYUFBYSxDQUMxZCxTQUFTdW5CLEdBQUdwNUIsRUFBRUMsRUFBRUMsR0FBRyxJQUFJc0IsRUFBRTYzQixHQUFHcjVCLEdBQUdFLEVBQUUsQ0FBQ3V6QixLQUFLanlCLEVBQUVxMUIsT0FBTzMyQixFQUFFNDJCLGVBQWMsRUFBR0MsV0FBVyxLQUFLNUYsS0FBSyxNQUFTbUksR0FBR3Q1QixHQUFHdTVCLEdBQUd0NUIsRUFBRUMsR0FBeUIsUUFBZEEsRUFBRXd5QixHQUFHMXlCLEVBQUVDLEVBQUVDLEVBQUVzQixNQUF1QncyQixHQUFHOTNCLEVBQUVGLEVBQUV3QixFQUFYZzRCLE1BQWdCQyxHQUFHdjVCLEVBQUVELEVBQUV1QixHQUFHLENBQy9LLFNBQVMwMkIsR0FBR2w0QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFNjNCLEdBQUdyNUIsR0FBR3lCLEVBQUUsQ0FBQ2d5QixLQUFLanlCLEVBQUVxMUIsT0FBTzMyQixFQUFFNDJCLGVBQWMsRUFBR0MsV0FBVyxLQUFLNUYsS0FBSyxNQUFNLEdBQUdtSSxHQUFHdDVCLEdBQUd1NUIsR0FBR3Q1QixFQUFFd0IsT0FBTyxDQUFDLElBQUlDLEVBQUUxQixFQUFFeVIsVUFBVSxHQUFHLElBQUl6UixFQUFFbXlCLFFBQVEsT0FBT3p3QixHQUFHLElBQUlBLEVBQUV5d0IsUUFBaUMsUUFBeEJ6d0IsRUFBRXpCLEVBQUUyMkIscUJBQThCLElBQUksSUFBSWoxQixFQUFFMUIsRUFBRSsyQixrQkFBa0JueEIsRUFBRW5FLEVBQUVDLEVBQUV6QixHQUFxQyxHQUFsQ3VCLEVBQUVxMUIsZUFBYyxFQUFHcjFCLEVBQUVzMUIsV0FBV2x4QixFQUFLMGQsR0FBRzFkLEVBQUVsRSxHQUFHLENBQUMsSUFBSW1FLEVBQUU3RixFQUFFMHlCLFlBQStFLE9BQW5FLE9BQU83c0IsR0FBR3JFLEVBQUUwdkIsS0FBSzF2QixFQUFFZ3hCLEdBQUd4eUIsS0FBS3dCLEVBQUUwdkIsS0FBS3JyQixFQUFFcXJCLEtBQUtyckIsRUFBRXFyQixLQUFLMXZCLFFBQUd4QixFQUFFMHlCLFlBQVlseEIsRUFBUSxDQUFDLENBQUMsTUFBTW1FLEdBQUcsQ0FBd0IsUUFBZDFGLEVBQUV3eUIsR0FBRzF5QixFQUFFQyxFQUFFd0IsRUFBRUQsTUFBb0J3MkIsR0FBRzkzQixFQUFFRixFQUFFd0IsRUFBYkMsRUFBRSszQixNQUFnQkMsR0FBR3Y1QixFQUFFRCxFQUFFdUIsR0FBRyxDQUFDLENBQy9jLFNBQVM4M0IsR0FBR3Q1QixHQUFHLElBQUlDLEVBQUVELEVBQUV5UixVQUFVLE9BQU96UixJQUFJdTFCLElBQUcsT0FBT3QxQixHQUFHQSxJQUFJczFCLEVBQUMsQ0FBQyxTQUFTZ0UsR0FBR3Y1QixFQUFFQyxHQUFHMDFCLEdBQUdELElBQUcsRUFBRyxJQUFJeDFCLEVBQUVGLEVBQUVvekIsUUFBUSxPQUFPbHpCLEVBQUVELEVBQUVreEIsS0FBS2x4QixHQUFHQSxFQUFFa3hCLEtBQUtqeEIsRUFBRWl4QixLQUFLanhCLEVBQUVpeEIsS0FBS2x4QixHQUFHRCxFQUFFb3pCLFFBQVFuekIsQ0FBQyxDQUFDLFNBQVN3NUIsR0FBR3o1QixFQUFFQyxFQUFFQyxHQUFHLEdBQVUsUUFBRkEsRUFBVyxDQUFDLElBQUlzQixFQUFFdkIsRUFBRWt5QixNQUF3Qmp5QixHQUFsQnNCLEdBQUd4QixFQUFFeVUsYUFBa0J4VSxFQUFFa3lCLE1BQU1qeUIsRUFBRWtWLEdBQUdwVixFQUFFRSxFQUFFLENBQUMsQ0FDOVAsSUFBSWsyQixHQUFHLENBQUNzRCxZQUFZckgsR0FBR3NILFlBQVk3RCxHQUFFOEQsV0FBVzlELEdBQUUrRCxVQUFVL0QsR0FBRWdFLG9CQUFvQmhFLEdBQUVpRSxtQkFBbUJqRSxHQUFFa0UsZ0JBQWdCbEUsR0FBRW1FLFFBQVFuRSxHQUFFb0UsV0FBV3BFLEdBQUVxRSxPQUFPckUsR0FBRXNFLFNBQVN0RSxHQUFFdUUsY0FBY3ZFLEdBQUV3RSxpQkFBaUJ4RSxHQUFFeUUsY0FBY3pFLEdBQUUwRSxpQkFBaUIxRSxHQUFFMkUscUJBQXFCM0UsR0FBRTRFLE1BQU01RSxHQUFFNkUsMEJBQXlCLEdBQUkxRSxHQUFHLENBQUN5RCxZQUFZckgsR0FBR3NILFlBQVksU0FBUzM1QixFQUFFQyxHQUE0QyxPQUF6Q3EyQixLQUFLemtCLGNBQWMsQ0FBQzdSLE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxDQUFDLEVBQUU0NUIsV0FBV3ZILEdBQUd3SCxVQUFVcEIsR0FBR3FCLG9CQUFvQixTQUFTOTVCLEVBQUVDLEVBQUVDLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUU0bkIsT0FBTyxDQUFDOW5CLElBQUksS0FBWXU0QixHQUFHLFFBQzNmLEVBQUVLLEdBQUdqUSxLQUFLLEtBQUsxb0IsRUFBRUQsR0FBR0UsRUFBRSxFQUFFODVCLGdCQUFnQixTQUFTaDZCLEVBQUVDLEdBQUcsT0FBT3M0QixHQUFHLFFBQVEsRUFBRXY0QixFQUFFQyxFQUFFLEVBQUU4NUIsbUJBQW1CLFNBQVMvNUIsRUFBRUMsR0FBRyxPQUFPczRCLEdBQUcsRUFBRSxFQUFFdjRCLEVBQUVDLEVBQUUsRUFBRWc2QixRQUFRLFNBQVNqNkIsRUFBRUMsR0FBRyxJQUFJQyxFQUFFbzJCLEtBQXFELE9BQWhEcjJCLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFRCxFQUFFQSxJQUFJRSxFQUFFMlIsY0FBYyxDQUFDN1IsRUFBRUMsR0FBVUQsQ0FBQyxFQUFFazZCLFdBQVcsU0FBU2w2QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFODBCLEtBQWtNLE9BQTdMcjJCLE9BQUUsSUFBU0MsRUFBRUEsRUFBRUQsR0FBR0EsRUFBRXVCLEVBQUVxUSxjQUFjclEsRUFBRXd4QixVQUFVL3lCLEVBQUVELEVBQUUsQ0FBQ296QixRQUFRLEtBQUtULFlBQVksS0FBS1IsTUFBTSxFQUFFOEUsU0FBUyxLQUFLTCxvQkFBb0I1MkIsRUFBRWczQixrQkFBa0IvMkIsR0FBR3VCLEVBQUVnMUIsTUFBTXgyQixFQUFFQSxFQUFFQSxFQUFFaTNCLFNBQVNtQyxHQUFHelEsS0FBSyxLQUFLNE0sR0FBRXYxQixHQUFTLENBQUN3QixFQUFFcVEsY0FBYzdSLEVBQUUsRUFBRW02QixPQUFPLFNBQVNuNkIsR0FDM2QsT0FBZEEsRUFBRSxDQUFDbVMsUUFBUW5TLEdBQWhCczJCLEtBQTRCemtCLGNBQWM3UixDQUFDLEVBQUVvNkIsU0FBU25DLEdBQUdvQyxjQUFjdkIsR0FBR3dCLGlCQUFpQixTQUFTdDZCLEdBQUcsT0FBT3MyQixLQUFLemtCLGNBQWM3UixDQUFDLEVBQUV1NkIsY0FBYyxXQUFXLElBQUl2NkIsRUFBRWk0QixJQUFHLEdBQUloNEIsRUFBRUQsRUFBRSxHQUE2QyxPQUExQ0EsRUFBRWs1QixHQUFHdlEsS0FBSyxLQUFLM29CLEVBQUUsSUFBSXMyQixLQUFLemtCLGNBQWM3UixFQUFRLENBQUNDLEVBQUVELEVBQUUsRUFBRXc2QixpQkFBaUIsV0FBVyxFQUFFQyxxQkFBcUIsU0FBU3o2QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFK3pCLEdBQUU5ekIsRUFBRTYwQixLQUFLLEdBQUc1SCxHQUFFLENBQUMsUUFBRyxJQUFTeHVCLEVBQUUsTUFBTStFLE1BQU1sRixFQUFFLE1BQU1HLEVBQUVBLEdBQUcsS0FBSyxDQUFPLEdBQU5BLEVBQUVELElBQU8sT0FBT3kzQixHQUFFLE1BQU16eUIsTUFBTWxGLEVBQUUsTUFBYyxHQUFIdTFCLElBQVFxQyxHQUFHbjJCLEVBQUV2QixFQUFFQyxFQUFFLENBQUN1QixFQUFFb1EsY0FBYzNSLEVBQUUsSUFBSXdCLEVBQUUsQ0FBQ2lHLE1BQU16SCxFQUFFcTNCLFlBQVl0M0IsR0FDdlosT0FEMFp3QixFQUFFKzBCLE1BQU05MEIsRUFBRSsyQixHQUFHbkIsR0FBRzNPLEtBQUssS0FBS25uQixFQUNwZkUsRUFBRTFCLEdBQUcsQ0FBQ0EsSUFBSXdCLEVBQUVtUSxPQUFPLEtBQUs2bEIsR0FBRyxFQUFFQyxHQUFHOU8sS0FBSyxLQUFLbm5CLEVBQUVFLEVBQUV4QixFQUFFRCxRQUFHLEVBQU8sTUFBYUMsQ0FBQyxFQUFFdzZCLE1BQU0sV0FBVyxJQUFJMTZCLEVBQUVzMkIsS0FBS3IyQixFQUFFeTNCLEdBQUVrRCxpQkFBaUIsR0FBR2xNLEdBQUUsQ0FBQyxJQUFJeHVCLEVBQUVpdUIsR0FBa0RsdUIsRUFBRSxJQUFJQSxFQUFFLEtBQTlDQyxHQUFIZ3VCLEtBQVUsR0FBRyxHQUFHcGEsR0FBaEJvYSxJQUFzQixJQUFJaGtCLFNBQVMsSUFBSWhLLEdBQXVCLEdBQVBBLEVBQUUwMUIsUUFBVzMxQixHQUFHLElBQUlDLEVBQUVnSyxTQUFTLEtBQUtqSyxHQUFHLEdBQUcsTUFBYUEsRUFBRSxJQUFJQSxFQUFFLEtBQWZDLEVBQUUyMUIsTUFBbUIzckIsU0FBUyxJQUFJLElBQUksT0FBT2xLLEVBQUU2UixjQUFjNVIsQ0FBQyxFQUFFMDZCLDBCQUF5QixHQUFJekUsR0FBRyxDQUFDd0QsWUFBWXJILEdBQUdzSCxZQUFZWixHQUFHYSxXQUFXdkgsR0FBR3dILFVBQVV4QyxHQUFHeUMsb0JBQW9CakIsR0FBR2tCLG1CQUFtQnJCLEdBQUdzQixnQkFBZ0JyQixHQUFHc0IsUUFBUWpCLEdBQUdrQixXQUFXdkQsR0FBR3dELE9BQU83QixHQUFHOEIsU0FBUyxXQUFXLE9BQU96RCxHQUFHRCxHQUFHLEVBQ3JoQjJELGNBQWN2QixHQUFHd0IsaUJBQWlCLFNBQVN0NkIsR0FBYyxPQUFPaTVCLEdBQVp4QyxLQUFpQmpCLEdBQUUzakIsY0FBYzdSLEVBQUUsRUFBRXU2QixjQUFjLFdBQWdELE1BQU0sQ0FBckM1RCxHQUFHRCxJQUFJLEdBQUtELEtBQUs1a0IsY0FBeUIsRUFBRTJvQixpQkFBaUJyRCxHQUFHc0QscUJBQXFCckQsR0FBR3NELE1BQU12QixHQUFHd0IsMEJBQXlCLEdBQUl4RSxHQUFHLENBQUN1RCxZQUFZckgsR0FBR3NILFlBQVlaLEdBQUdhLFdBQVd2SCxHQUFHd0gsVUFBVXhDLEdBQUd5QyxvQkFBb0JqQixHQUFHa0IsbUJBQW1CckIsR0FBR3NCLGdCQUFnQnJCLEdBQUdzQixRQUFRakIsR0FBR2tCLFdBQVdoRCxHQUFHaUQsT0FBTzdCLEdBQUc4QixTQUFTLFdBQVcsT0FBT2xELEdBQUdSLEdBQUcsRUFBRTJELGNBQWN2QixHQUFHd0IsaUJBQWlCLFNBQVN0NkIsR0FBRyxJQUFJQyxFQUFFdzJCLEtBQUssT0FBTyxPQUN6ZmpCLEdBQUV2MUIsRUFBRTRSLGNBQWM3UixFQUFFaTVCLEdBQUdoNUIsRUFBRXUxQixHQUFFM2pCLGNBQWM3UixFQUFFLEVBQUV1NkIsY0FBYyxXQUFnRCxNQUFNLENBQXJDckQsR0FBR1IsSUFBSSxHQUFLRCxLQUFLNWtCLGNBQXlCLEVBQUUyb0IsaUJBQWlCckQsR0FBR3NELHFCQUFxQnJELEdBQUdzRCxNQUFNdkIsR0FBR3dCLDBCQUF5QixHQUFJLFNBQVNFLEdBQUc3NkIsRUFBRUMsR0FBRyxHQUFHRCxHQUFHQSxFQUFFODZCLGFBQWEsQ0FBNEIsSUFBSSxJQUFJNTZCLEtBQW5DRCxFQUFFNkUsRUFBRSxDQUFDLEVBQUU3RSxHQUFHRCxFQUFFQSxFQUFFODZCLGtCQUE0QixJQUFTNzZCLEVBQUVDLEtBQUtELEVBQUVDLEdBQUdGLEVBQUVFLElBQUksT0FBT0QsQ0FBQyxDQUFDLE9BQU9BLENBQUMsQ0FBQyxTQUFTODZCLEdBQUcvNkIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQThCdEIsRUFBRSxPQUFYQSxFQUFFQSxFQUFFc0IsRUFBdEJ2QixFQUFFRCxFQUFFNlIsZ0JBQThDNVIsRUFBRTZFLEVBQUUsQ0FBQyxFQUFFN0UsRUFBRUMsR0FBR0YsRUFBRTZSLGNBQWMzUixFQUFFLElBQUlGLEVBQUVteUIsUUFBUW55QixFQUFFK3lCLFlBQVlDLFVBQVU5eUIsRUFBRSxDQUNyZCxJQUFJODZCLEdBQUcsQ0FBQ0MsVUFBVSxTQUFTajdCLEdBQUcsU0FBT0EsRUFBRUEsRUFBRWs3QixrQkFBaUIxcEIsR0FBR3hSLEtBQUtBLENBQUksRUFBRW03QixnQkFBZ0IsU0FBU243QixFQUFFQyxFQUFFQyxHQUFHRixFQUFFQSxFQUFFazdCLGdCQUFnQixJQUFJMTVCLEVBQUVnNEIsS0FBSS8zQixFQUFFNDNCLEdBQUdyNUIsR0FBRzBCLEVBQUU2eEIsR0FBRy94QixFQUFFQyxHQUFHQyxFQUFFZ3lCLFFBQVF6ekIsRUFBRSxNQUFTQyxJQUFjd0IsRUFBRWl5QixTQUFTenpCLEdBQWUsUUFBWkQsRUFBRTJ6QixHQUFHNXpCLEVBQUUwQixFQUFFRCxNQUFjdTJCLEdBQUcvM0IsRUFBRUQsRUFBRXlCLEVBQUVELEdBQUdzeUIsR0FBRzd6QixFQUFFRCxFQUFFeUIsR0FBRyxFQUFFMjVCLG9CQUFvQixTQUFTcDdCLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVBLEVBQUVrN0IsZ0JBQWdCLElBQUkxNUIsRUFBRWc0QixLQUFJLzNCLEVBQUU0M0IsR0FBR3I1QixHQUFHMEIsRUFBRTZ4QixHQUFHL3hCLEVBQUVDLEdBQUdDLEVBQUV5RSxJQUFJLEVBQUV6RSxFQUFFZ3lCLFFBQVF6ekIsRUFBRSxNQUFTQyxJQUFjd0IsRUFBRWl5QixTQUFTenpCLEdBQWUsUUFBWkQsRUFBRTJ6QixHQUFHNXpCLEVBQUUwQixFQUFFRCxNQUFjdTJCLEdBQUcvM0IsRUFBRUQsRUFBRXlCLEVBQUVELEdBQUdzeUIsR0FBRzd6QixFQUFFRCxFQUFFeUIsR0FBRyxFQUFFNDVCLG1CQUFtQixTQUFTcjdCLEVBQUVDLEdBQUdELEVBQUVBLEVBQUVrN0IsZ0JBQWdCLElBQUloN0IsRUFBRXM1QixLQUFJaDRCLEVBQ25mNjNCLEdBQUdyNUIsR0FBR3lCLEVBQUU4eEIsR0FBR3J6QixFQUFFc0IsR0FBR0MsRUFBRTBFLElBQUksRUFBRSxNQUFTbEcsSUFBY3dCLEVBQUVreUIsU0FBUzF6QixHQUFlLFFBQVpBLEVBQUUyekIsR0FBRzV6QixFQUFFeUIsRUFBRUQsTUFBY3cyQixHQUFHLzNCLEVBQUVELEVBQUV3QixFQUFFdEIsR0FBRzR6QixHQUFHN3pCLEVBQUVELEVBQUV3QixHQUFHLEdBQUcsU0FBUzg1QixHQUFHdDdCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxFQUFFQyxFQUFFQyxHQUFpQixNQUFNLG1CQUFwQjNCLEVBQUVBLEVBQUVnUSxXQUFzQ3VyQixzQkFBc0J2N0IsRUFBRXU3QixzQkFBc0IvNUIsRUFBRUUsRUFBRUMsS0FBRzFCLEVBQUVpQixXQUFXakIsRUFBRWlCLFVBQVVzNkIsc0JBQXNCaFksR0FBR3RqQixFQUFFc0IsSUFBS2dpQixHQUFHL2hCLEVBQUVDLEdBQUssQ0FDMVMsU0FBUys1QixHQUFHejdCLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEdBQUUsRUFBR0MsRUFBRTRxQixHQUFPM3FCLEVBQUV6QixFQUFFeTdCLFlBQTJXLE1BQS9WLGlCQUFrQmg2QixHQUFHLE9BQU9BLEVBQUVBLEVBQUUyd0IsR0FBRzN3QixJQUFJRCxFQUFFb3JCLEdBQUc1c0IsR0FBR3VzQixHQUFHRixHQUFFbmEsUUFBeUJ6USxHQUFHRixFQUFFLE9BQXRCQSxFQUFFdkIsRUFBRXlzQixlQUF3Q0QsR0FBR3pzQixFQUFFeUIsR0FBRzRxQixJQUFJcHNCLEVBQUUsSUFBSUEsRUFBRUMsRUFBRXdCLEdBQUcxQixFQUFFNlIsY0FBYyxPQUFPNVIsRUFBRTA3QixZQUFPLElBQVMxN0IsRUFBRTA3QixNQUFNMTdCLEVBQUUwN0IsTUFBTSxLQUFLMTdCLEVBQUUyN0IsUUFBUVosR0FBR2g3QixFQUFFZ1EsVUFBVS9QLEVBQUVBLEVBQUVpN0IsZ0JBQWdCbDdCLEVBQUV3QixLQUFJeEIsRUFBRUEsRUFBRWdRLFdBQVkyYyw0Q0FBNENsckIsRUFBRXpCLEVBQUU0c0IsMENBQTBDbHJCLEdBQVV6QixDQUFDLENBQzVaLFNBQVM0N0IsR0FBRzc3QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBR3hCLEVBQUVDLEVBQUUwN0IsTUFBTSxtQkFBb0IxN0IsRUFBRTY3QiwyQkFBMkI3N0IsRUFBRTY3QiwwQkFBMEI1N0IsRUFBRXNCLEdBQUcsbUJBQW9CdkIsRUFBRTg3QixrQ0FBa0M5N0IsRUFBRTg3QixpQ0FBaUM3N0IsRUFBRXNCLEdBQUd2QixFQUFFMDdCLFFBQVEzN0IsR0FBR2c3QixHQUFHSSxvQkFBb0JuN0IsRUFBRUEsRUFBRTA3QixNQUFNLEtBQUssQ0FDcFEsU0FBU0ssR0FBR2g4QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxJQUFJQyxFQUFFekIsRUFBRWdRLFVBQVV2TyxFQUFFa3ZCLE1BQU16d0IsRUFBRXVCLEVBQUVrNkIsTUFBTTM3QixFQUFFNlIsY0FBY3BRLEVBQUUwdUIsS0FBSyxDQUFDLEVBQUUyQyxHQUFHOXlCLEdBQUcsSUFBSTBCLEVBQUV6QixFQUFFeTdCLFlBQVksaUJBQWtCaDZCLEdBQUcsT0FBT0EsRUFBRUQsRUFBRTZ3QixRQUFRRCxHQUFHM3dCLElBQUlBLEVBQUVtckIsR0FBRzVzQixHQUFHdXNCLEdBQUdGLEdBQUVuYSxRQUFRMVEsRUFBRTZ3QixRQUFRN0YsR0FBR3pzQixFQUFFMEIsSUFBSUQsRUFBRWs2QixNQUFNMzdCLEVBQUU2UixjQUEyQyxtQkFBN0JuUSxFQUFFekIsRUFBRWc4Qiw0QkFBaURsQixHQUFHLzZCLEVBQUVDLEVBQUV5QixFQUFFeEIsR0FBR3VCLEVBQUVrNkIsTUFBTTM3QixFQUFFNlIsZUFBZSxtQkFBb0I1UixFQUFFZzhCLDBCQUEwQixtQkFBb0J4NkIsRUFBRXk2Qix5QkFBeUIsbUJBQW9CejZCLEVBQUUwNkIsMkJBQTJCLG1CQUFvQjE2QixFQUFFMjZCLHFCQUFxQm44QixFQUFFd0IsRUFBRWs2QixNQUNyZixtQkFBb0JsNkIsRUFBRTI2QixvQkFBb0IzNkIsRUFBRTI2QixxQkFBcUIsbUJBQW9CMzZCLEVBQUUwNkIsMkJBQTJCMTZCLEVBQUUwNkIsNEJBQTRCbDhCLElBQUl3QixFQUFFazZCLE9BQU9YLEdBQUdJLG9CQUFvQjM1QixFQUFFQSxFQUFFazZCLE1BQU0sTUFBTTNILEdBQUdoMEIsRUFBRUUsRUFBRXVCLEVBQUVELEdBQUdDLEVBQUVrNkIsTUFBTTM3QixFQUFFNlIsZUFBZSxtQkFBb0JwUSxFQUFFNDZCLG9CQUFvQnI4QixFQUFFMlIsT0FBTyxRQUFRLENBQUMsU0FBUzJxQixHQUFHdDhCLEVBQUVDLEdBQUcsSUFBSSxJQUFJQyxFQUFFLEdBQUdzQixFQUFFdkIsRUFBRSxHQUFHQyxHQUFHZ0csRUFBRzFFLEdBQUdBLEVBQUVBLEVBQUVrUSxhQUFhbFEsR0FBRyxJQUFJQyxFQUFFdkIsQ0FBQyxDQUFDLE1BQU13QixHQUFHRCxFQUFFLDZCQUE2QkMsRUFBRTY2QixRQUFRLEtBQUs3NkIsRUFBRXdELEtBQUssQ0FBQyxNQUFNLENBQUN5QyxNQUFNM0gsRUFBRStPLE9BQU85TyxFQUFFaUYsTUFBTXpELEVBQUUrNkIsT0FBTyxLQUFLLENBQzFkLFNBQVNDLEdBQUd6OEIsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLENBQUN5SCxNQUFNM0gsRUFBRStPLE9BQU8sS0FBSzdKLE1BQU0sTUFBTWhGLEVBQUVBLEVBQUUsS0FBS3M4QixPQUFPLE1BQU12OEIsRUFBRUEsRUFBRSxLQUFLLENBQUMsU0FBU3k4QixHQUFHMThCLEVBQUVDLEdBQUcsSUFBSTA4QixRQUFRQyxNQUFNMzhCLEVBQUUwSCxNQUFNLENBQUMsTUFBTXpILEdBQUcwcUIsWUFBVyxXQUFXLE1BQU0xcUIsQ0FBRSxHQUFFLENBQUMsQ0FBQyxJQUFJMjhCLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRNW1CLElBQUksU0FBUzZtQixHQUFHLzhCLEVBQUVDLEVBQUVDLElBQUdBLEVBQUVxekIsSUFBSSxFQUFFcnpCLElBQUtpRyxJQUFJLEVBQUVqRyxFQUFFd3pCLFFBQVEsQ0FBQzdOLFFBQVEsTUFBTSxJQUFJcmtCLEVBQUV2QixFQUFFMEgsTUFBc0QsT0FBaER6SCxFQUFFeXpCLFNBQVMsV0FBV3FKLEtBQUtBLElBQUcsRUFBR0MsR0FBR3o3QixHQUFHazdCLEdBQUcxOEIsRUFBRUMsRUFBRSxFQUFTQyxDQUFDLENBQ3JXLFNBQVNnOUIsR0FBR2w5QixFQUFFQyxFQUFFQyxJQUFHQSxFQUFFcXpCLElBQUksRUFBRXJ6QixJQUFLaUcsSUFBSSxFQUFFLElBQUkzRSxFQUFFeEIsRUFBRWtDLEtBQUtpN0IseUJBQXlCLEdBQUcsbUJBQW9CMzdCLEVBQUUsQ0FBQyxJQUFJQyxFQUFFeEIsRUFBRTBILE1BQU16SCxFQUFFd3pCLFFBQVEsV0FBVyxPQUFPbHlCLEVBQUVDLEVBQUUsRUFBRXZCLEVBQUV5ekIsU0FBUyxXQUFXK0ksR0FBRzE4QixFQUFFQyxFQUFFLENBQUMsQ0FBQyxJQUFJeUIsRUFBRTFCLEVBQUVnUSxVQUE4TyxPQUFwTyxPQUFPdE8sR0FBRyxtQkFBb0JBLEVBQUUwN0Isb0JBQW9CbDlCLEVBQUV5ekIsU0FBUyxXQUFXK0ksR0FBRzE4QixFQUFFQyxHQUFHLG1CQUFvQnVCLElBQUksT0FBTzY3QixHQUFHQSxHQUFHLElBQUk5OEIsSUFBSSxDQUFDcUIsT0FBT3k3QixHQUFHMThCLElBQUlpQixPQUFPLElBQUkxQixFQUFFRCxFQUFFaUYsTUFBTXRELEtBQUt3N0Isa0JBQWtCbjlCLEVBQUUwSCxNQUFNLENBQUMyMUIsZUFBZSxPQUFPcDlCLEVBQUVBLEVBQUUsSUFBSSxHQUFVQSxDQUFDLENBQ25iLFNBQVNxOUIsR0FBR3Y5QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFeEIsRUFBRXc5QixVQUFVLEdBQUcsT0FBT2g4QixFQUFFLENBQUNBLEVBQUV4QixFQUFFdzlCLFVBQVUsSUFBSVgsR0FBRyxJQUFJcDdCLEVBQUUsSUFBSWxCLElBQUlpQixFQUFFaUUsSUFBSXhGLEVBQUV3QixFQUFFLFdBQWlCLEtBQVhBLEVBQUVELEVBQUUwRixJQUFJakgsTUFBZ0J3QixFQUFFLElBQUlsQixJQUFJaUIsRUFBRWlFLElBQUl4RixFQUFFd0IsSUFBSUEsRUFBRTRtQixJQUFJbm9CLEtBQUt1QixFQUFFZCxJQUFJVCxHQUFHRixFQUFFeTlCLEdBQUc5VSxLQUFLLEtBQUszb0IsRUFBRUMsRUFBRUMsR0FBR0QsRUFBRW1yQixLQUFLcHJCLEVBQUVBLEdBQUcsQ0FBQyxTQUFTMDlCLEdBQUcxOUIsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBNEUsSUFBdkVBLEVBQUUsS0FBS0QsRUFBRW1HLE9BQXNCbEcsRUFBRSxRQUFwQkEsRUFBRUQsRUFBRTZSLGdCQUF5QixPQUFPNVIsRUFBRTZSLFlBQXVCN1IsRUFBRSxPQUFPRCxFQUFFQSxFQUFFQSxFQUFFMFIsTUFBTSxPQUFPLE9BQU8xUixHQUFHLE9BQU8sSUFBSSxDQUNoVyxTQUFTMjlCLEdBQUczOUIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsT0FBZSxFQUFQekIsRUFBRXN2QixNQUF3S3R2QixFQUFFMlIsT0FBTyxNQUFNM1IsRUFBRW15QixNQUFNMXdCLEVBQVN6QixJQUF6TEEsSUFBSUMsRUFBRUQsRUFBRTJSLE9BQU8sT0FBTzNSLEVBQUUyUixPQUFPLElBQUl6UixFQUFFeVIsT0FBTyxPQUFPelIsRUFBRXlSLFFBQVEsTUFBTSxJQUFJelIsRUFBRWlHLE1BQU0sT0FBT2pHLEVBQUV1UixVQUFVdlIsRUFBRWlHLElBQUksS0FBSWxHLEVBQUVzekIsSUFBSSxFQUFFLElBQUtwdEIsSUFBSSxFQUFFeXRCLEdBQUcxekIsRUFBRUQsRUFBRSxLQUFLQyxFQUFFaXlCLE9BQU8sR0FBR255QixFQUFtQyxDQUFDLElBQUk0OUIsR0FBR242QixFQUFHbzZCLGtCQUFrQnpMLElBQUcsRUFBRyxTQUFTMEwsR0FBRzk5QixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBR3ZCLEVBQUVnUyxNQUFNLE9BQU9qUyxFQUFFc3hCLEdBQUdyeEIsRUFBRSxLQUFLQyxFQUFFc0IsR0FBRzZ2QixHQUFHcHhCLEVBQUVELEVBQUVpUyxNQUFNL1IsRUFBRXNCLEVBQUUsQ0FDblYsU0FBU3U4QixHQUFHLzlCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxHQUFHdkIsRUFBRUEsRUFBRWtHLE9BQU8sSUFBSTFFLEVBQUV6QixFQUFFK3ZCLElBQXFDLE9BQWpDZ0MsR0FBRy94QixFQUFFd0IsR0FBR0QsRUFBRXcwQixHQUFHaDJCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFRSxFQUFFRCxHQUFHdkIsRUFBRW0yQixLQUFRLE9BQU9yMkIsR0FBSW95QixJQUEyRTFELElBQUd4dUIsR0FBR291QixHQUFHcnVCLEdBQUdBLEVBQUUwUixPQUFPLEVBQUVtc0IsR0FBRzk5QixFQUFFQyxFQUFFdUIsRUFBRUMsR0FBVXhCLEVBQUVnUyxRQUE3R2hTLEVBQUU4eUIsWUFBWS95QixFQUFFK3lCLFlBQVk5eUIsRUFBRTBSLFFBQVEsS0FBSzNSLEVBQUVteUIsUUFBUTF3QixFQUFFdThCLEdBQUdoK0IsRUFBRUMsRUFBRXdCLEdBQW9ELENBQ3pOLFNBQVN3OEIsR0FBR2orQixFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsR0FBRyxHQUFHLE9BQU96QixFQUFFLENBQUMsSUFBSTBCLEVBQUV4QixFQUFFZ0MsS0FBSyxNQUFHLG1CQUFvQlIsR0FBSXc4QixHQUFHeDhCLFNBQUksSUFBU0EsRUFBRW81QixjQUFjLE9BQU81NkIsRUFBRWkrQixjQUFTLElBQVNqK0IsRUFBRTQ2QixlQUFvRDk2QixFQUFFNHdCLEdBQUcxd0IsRUFBRWdDLEtBQUssS0FBS1YsRUFBRXZCLEVBQUVBLEVBQUVxdkIsS0FBSzd0QixJQUFLdXVCLElBQUkvdkIsRUFBRSt2QixJQUFJaHdCLEVBQUUwUixPQUFPelIsRUFBU0EsRUFBRWdTLE1BQU1qUyxJQUFyR0MsRUFBRWtHLElBQUksR0FBR2xHLEVBQUVpQyxLQUFLUixFQUFFMDhCLEdBQUdwK0IsRUFBRUMsRUFBRXlCLEVBQUVGLEVBQUVDLEdBQXlFLENBQVcsR0FBVkMsRUFBRTFCLEVBQUVpUyxRQUFjalMsRUFBRW15QixNQUFNMXdCLEdBQUcsQ0FBQyxJQUFJRSxFQUFFRCxFQUFFZ3VCLGNBQTBDLElBQWhCeHZCLEVBQUUsUUFBZEEsRUFBRUEsRUFBRWkrQixTQUFtQmorQixFQUFFc2pCLElBQVE3aEIsRUFBRUgsSUFBSXhCLEVBQUVnd0IsTUFBTS92QixFQUFFK3ZCLElBQUksT0FBT2dPLEdBQUdoK0IsRUFBRUMsRUFBRXdCLEVBQUUsQ0FBNkMsT0FBNUN4QixFQUFFMFIsT0FBTyxHQUFFM1IsRUFBRXl3QixHQUFHL3VCLEVBQUVGLElBQUt3dUIsSUFBSS92QixFQUFFK3ZCLElBQUlod0IsRUFBRTBSLE9BQU96UixFQUFTQSxFQUFFZ1MsTUFBTWpTLENBQUMsQ0FDMWIsU0FBU28rQixHQUFHcCtCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxHQUFHLEdBQUcsT0FBT3pCLEVBQUUsQ0FBQyxJQUFJMEIsRUFBRTFCLEVBQUUwdkIsY0FBYyxHQUFHbE0sR0FBRzloQixFQUFFRixJQUFJeEIsRUFBRWd3QixNQUFNL3ZCLEVBQUUrdkIsSUFBSSxJQUFHb0MsSUFBRyxFQUFHbnlCLEVBQUVndkIsYUFBYXp0QixFQUFFRSxJQUFPMUIsRUFBRW15QixNQUFNMXdCLEdBQXNDLE9BQU94QixFQUFFa3lCLE1BQU1ueUIsRUFBRW15QixNQUFNNkwsR0FBR2grQixFQUFFQyxFQUFFd0IsR0FBcEQsT0FBUnpCLEVBQUUyUixRQUFnQnlnQixJQUFHLEVBQXlDLEVBQUMsT0FBT2lNLEdBQUdyK0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUUsQ0FDeE4sU0FBUzY4QixHQUFHdCtCLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUV2QixFQUFFZ3ZCLGFBQWF4dEIsRUFBRUQsRUFBRThILFNBQVM1SCxFQUFFLE9BQU8xQixFQUFFQSxFQUFFNlIsY0FBYyxLQUFLLEdBQUcsV0FBV3JRLEVBQUU4dEIsS0FBSyxHQUFlLEVBQVBydkIsRUFBRXF2QixLQUF5RixDQUFDLEtBQVUsV0FBRnB2QixHQUFjLE9BQU9GLEVBQUUsT0FBTzBCLEVBQUVBLEVBQUU2OEIsVUFBVXIrQixFQUFFQSxFQUFFRCxFQUFFa3lCLE1BQU1seUIsRUFBRTh4QixXQUFXLFdBQVc5eEIsRUFBRTRSLGNBQWMsQ0FBQzBzQixVQUFVditCLEVBQUV3K0IsVUFBVSxLQUFLQyxZQUFZLE1BQU14K0IsRUFBRTh5QixZQUFZLEtBQUszRyxHQUFFc1MsR0FBR0MsSUFBSUEsSUFBSTMrQixFQUFFLEtBQUtDLEVBQUU0UixjQUFjLENBQUMwc0IsVUFBVSxFQUFFQyxVQUFVLEtBQUtDLFlBQVksTUFBTWo5QixFQUFFLE9BQU9FLEVBQUVBLEVBQUU2OEIsVUFBVXIrQixFQUFFa3NCLEdBQUVzUyxHQUFHQyxJQUFJQSxJQUFJbjlCLENBQUMsTUFBcFh2QixFQUFFNFIsY0FBYyxDQUFDMHNCLFVBQVUsRUFBRUMsVUFBVSxLQUFLQyxZQUFZLE1BQU1yUyxHQUFFc1MsR0FBR0MsSUFBSUEsSUFBSXorQixPQUErUyxPQUN0ZndCLEdBQUdGLEVBQUVFLEVBQUU2OEIsVUFBVXIrQixFQUFFRCxFQUFFNFIsY0FBYyxNQUFNclEsRUFBRXRCLEVBQUVrc0IsR0FBRXNTLEdBQUdDLElBQUlBLElBQUluOUIsRUFBYyxPQUFaczhCLEdBQUc5OUIsRUFBRUMsRUFBRXdCLEVBQUV2QixHQUFVRCxFQUFFZ1MsS0FBSyxDQUFDLFNBQVMyc0IsR0FBRzUrQixFQUFFQyxHQUFHLElBQUlDLEVBQUVELEVBQUUrdkIsS0FBTyxPQUFPaHdCLEdBQUcsT0FBT0UsR0FBRyxPQUFPRixHQUFHQSxFQUFFZ3dCLE1BQU05dkIsS0FBRUQsRUFBRTBSLE9BQU8sSUFBSTFSLEVBQUUwUixPQUFPLFFBQU8sQ0FBQyxTQUFTMHNCLEdBQUdyK0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRW1yQixHQUFHM3NCLEdBQUdzc0IsR0FBR0YsR0FBRW5hLFFBQW1ELE9BQTNDelEsRUFBRStxQixHQUFHeHNCLEVBQUV5QixHQUFHc3dCLEdBQUcveEIsRUFBRXdCLEdBQUd2QixFQUFFODFCLEdBQUdoMkIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVFLEVBQUVELEdBQUdELEVBQUU2MEIsS0FBUSxPQUFPcjJCLEdBQUlveUIsSUFBMkUxRCxJQUFHbHRCLEdBQUc4c0IsR0FBR3J1QixHQUFHQSxFQUFFMFIsT0FBTyxFQUFFbXNCLEdBQUc5OUIsRUFBRUMsRUFBRUMsRUFBRXVCLEdBQVV4QixFQUFFZ1MsUUFBN0doUyxFQUFFOHlCLFlBQVkveUIsRUFBRSt5QixZQUFZOXlCLEVBQUUwUixRQUFRLEtBQUszUixFQUFFbXlCLFFBQVExd0IsRUFBRXU4QixHQUFHaCtCLEVBQUVDLEVBQUV3QixHQUFvRCxDQUNsYSxTQUFTbzlCLEdBQUc3K0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsR0FBR29yQixHQUFHM3NCLEdBQUcsQ0FBQyxJQUFJd0IsR0FBRSxFQUFHeXJCLEdBQUdsdEIsRUFBRSxNQUFNeUIsR0FBRSxFQUFXLEdBQVJzd0IsR0FBRy94QixFQUFFd0IsR0FBTSxPQUFPeEIsRUFBRStQLFVBQVU4dUIsR0FBRzkrQixFQUFFQyxHQUFHdzdCLEdBQUd4N0IsRUFBRUMsRUFBRXNCLEdBQUd3NkIsR0FBRy83QixFQUFFQyxFQUFFc0IsRUFBRUMsR0FBR0QsR0FBRSxPQUFRLEdBQUcsT0FBT3hCLEVBQUUsQ0FBQyxJQUFJMkIsRUFBRTFCLEVBQUUrUCxVQUFVbkssRUFBRTVGLEVBQUV5dkIsY0FBYy90QixFQUFFZ3ZCLE1BQU05cUIsRUFBRSxJQUFJQyxFQUFFbkUsRUFBRTJ3QixRQUFRMXNCLEVBQUUxRixFQUFFdzdCLFlBQTBDOTFCLEVBQTlCLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFJeXNCLEdBQUd6c0IsR0FBMkI2bUIsR0FBR3hzQixFQUExQjJGLEVBQUVpbkIsR0FBRzNzQixHQUFHc3NCLEdBQUdGLEdBQUVuYSxTQUFtQixJQUFJbkIsRUFBRTlRLEVBQUUrN0IseUJBQXlCakwsRUFBRSxtQkFBb0JoZ0IsR0FBRyxtQkFBb0JyUCxFQUFFdTZCLHdCQUF3QmxMLEdBQUcsbUJBQW9CcnZCLEVBQUVvNkIsa0NBQWtDLG1CQUFvQnA2QixFQUFFbTZCLDRCQUMxZGoyQixJQUFJckUsR0FBR3NFLElBQUlGLElBQUlpMkIsR0FBRzU3QixFQUFFMEIsRUFBRUgsRUFBRW9FLEdBQUdpdEIsSUFBRyxFQUFHLElBQUk1QixFQUFFaHhCLEVBQUU0UixjQUFjbFEsRUFBRWc2QixNQUFNMUssRUFBRStDLEdBQUcvekIsRUFBRXVCLEVBQUVHLEVBQUVGLEdBQUdxRSxFQUFFN0YsRUFBRTRSLGNBQWNoTSxJQUFJckUsR0FBR3l2QixJQUFJbnJCLEdBQUd5bUIsR0FBR3BhLFNBQVMwZ0IsSUFBSSxtQkFBb0I3aEIsSUFBSStwQixHQUFHOTZCLEVBQUVDLEVBQUU4USxFQUFFeFAsR0FBR3NFLEVBQUU3RixFQUFFNFIsZ0JBQWdCaE0sRUFBRWd0QixJQUFJeUksR0FBR3I3QixFQUFFQyxFQUFFMkYsRUFBRXJFLEVBQUV5dkIsRUFBRW5yQixFQUFFRixLQUFLb3JCLEdBQUcsbUJBQW9CcnZCLEVBQUV3NkIsMkJBQTJCLG1CQUFvQng2QixFQUFFeTZCLHFCQUFxQixtQkFBb0J6NkIsRUFBRXk2QixvQkFBb0J6NkIsRUFBRXk2QixxQkFBcUIsbUJBQW9CejZCLEVBQUV3NkIsMkJBQTJCeDZCLEVBQUV3NkIsNkJBQTZCLG1CQUFvQng2QixFQUFFMDZCLG9CQUFvQnA4QixFQUFFMFIsT0FBTyxXQUNsZixtQkFBb0JoUSxFQUFFMDZCLG9CQUFvQnA4QixFQUFFMFIsT0FBTyxTQUFTMVIsRUFBRXl2QixjQUFjbHVCLEVBQUV2QixFQUFFNFIsY0FBYy9MLEdBQUduRSxFQUFFZ3ZCLE1BQU1udkIsRUFBRUcsRUFBRWc2QixNQUFNNzFCLEVBQUVuRSxFQUFFMndCLFFBQVExc0IsRUFBRXBFLEVBQUVxRSxJQUFJLG1CQUFvQmxFLEVBQUUwNkIsb0JBQW9CcDhCLEVBQUUwUixPQUFPLFNBQVNuUSxHQUFFLEVBQUcsS0FBSyxDQUFDRyxFQUFFMUIsRUFBRStQLFVBQVVzakIsR0FBR3R6QixFQUFFQyxHQUFHNEYsRUFBRTVGLEVBQUV5dkIsY0FBYzlwQixFQUFFM0YsRUFBRWlDLE9BQU9qQyxFQUFFNnVCLFlBQVlqcEIsRUFBRWcxQixHQUFHNTZCLEVBQUVpQyxLQUFLMkQsR0FBR2xFLEVBQUVndkIsTUFBTS9xQixFQUFFb3JCLEVBQUUvd0IsRUFBRWd2QixhQUFhZ0MsRUFBRXR2QixFQUFFMndCLFFBQXNEeHNCLEVBQTlCLGlCQUFoQkEsRUFBRTVGLEVBQUV3N0IsY0FBaUMsT0FBTzUxQixFQUFJdXNCLEdBQUd2c0IsR0FBMkIybUIsR0FBR3hzQixFQUExQjZGLEVBQUUrbUIsR0FBRzNzQixHQUFHc3NCLEdBQUdGLEdBQUVuYSxTQUFtQixJQUFJK2UsRUFBRWh4QixFQUFFKzdCLDBCQUEwQmpyQixFQUFFLG1CQUFvQmtnQixHQUFHLG1CQUFvQnZ2QixFQUFFdTZCLDBCQUM5ZSxtQkFBb0J2NkIsRUFBRW82QixrQ0FBa0MsbUJBQW9CcDZCLEVBQUVtNkIsNEJBQTRCajJCLElBQUltckIsR0FBR0MsSUFBSW5yQixJQUFJKzFCLEdBQUc1N0IsRUFBRTBCLEVBQUVILEVBQUVzRSxHQUFHK3NCLElBQUcsRUFBRzVCLEVBQUVoeEIsRUFBRTRSLGNBQWNsUSxFQUFFZzZCLE1BQU0xSyxFQUFFK0MsR0FBRy96QixFQUFFdUIsRUFBRUcsRUFBRUYsR0FBRyxJQUFJcW5CLEVBQUU3b0IsRUFBRTRSLGNBQWNoTSxJQUFJbXJCLEdBQUdDLElBQUluSSxHQUFHeUQsR0FBR3BhLFNBQVMwZ0IsSUFBSSxtQkFBb0IzQixJQUFJNkosR0FBRzk2QixFQUFFQyxFQUFFZ3hCLEVBQUUxdkIsR0FBR3NuQixFQUFFN29CLEVBQUU0UixnQkFBZ0JqTSxFQUFFaXRCLElBQUl5SSxHQUFHcjdCLEVBQUVDLEVBQUUwRixFQUFFcEUsRUFBRXl2QixFQUFFbkksRUFBRWhqQixLQUFJLElBQUtrTCxHQUFHLG1CQUFvQnJQLEVBQUVvOUIsNEJBQTRCLG1CQUFvQnA5QixFQUFFcTlCLHNCQUFzQixtQkFBb0JyOUIsRUFBRXE5QixxQkFBcUJyOUIsRUFBRXE5QixvQkFBb0J4OUIsRUFBRXNuQixFQUFFaGpCLEdBQUcsbUJBQW9CbkUsRUFBRW85Qiw0QkFDNWZwOUIsRUFBRW85QiwyQkFBMkJ2OUIsRUFBRXNuQixFQUFFaGpCLElBQUksbUJBQW9CbkUsRUFBRXM5QixxQkFBcUJoL0IsRUFBRTBSLE9BQU8sR0FBRyxtQkFBb0JoUSxFQUFFdTZCLDBCQUEwQmo4QixFQUFFMFIsT0FBTyxRQUFRLG1CQUFvQmhRLEVBQUVzOUIsb0JBQW9CcDVCLElBQUk3RixFQUFFMHZCLGVBQWV1QixJQUFJanhCLEVBQUU2UixnQkFBZ0I1UixFQUFFMFIsT0FBTyxHQUFHLG1CQUFvQmhRLEVBQUV1NkIseUJBQXlCcjJCLElBQUk3RixFQUFFMHZCLGVBQWV1QixJQUFJanhCLEVBQUU2UixnQkFBZ0I1UixFQUFFMFIsT0FBTyxNQUFNMVIsRUFBRXl2QixjQUFjbHVCLEVBQUV2QixFQUFFNFIsY0FBY2lYLEdBQUdubkIsRUFBRWd2QixNQUFNbnZCLEVBQUVHLEVBQUVnNkIsTUFBTTdTLEVBQUVubkIsRUFBRTJ3QixRQUFReHNCLEVBQUV0RSxFQUFFb0UsSUFBSSxtQkFBb0JqRSxFQUFFczlCLG9CQUFvQnA1QixJQUFJN0YsRUFBRTB2QixlQUFldUIsSUFDamZqeEIsRUFBRTZSLGdCQUFnQjVSLEVBQUUwUixPQUFPLEdBQUcsbUJBQW9CaFEsRUFBRXU2Qix5QkFBeUJyMkIsSUFBSTdGLEVBQUUwdkIsZUFBZXVCLElBQUlqeEIsRUFBRTZSLGdCQUFnQjVSLEVBQUUwUixPQUFPLE1BQU1uUSxHQUFFLEVBQUcsQ0FBQyxPQUFPMDlCLEdBQUdsL0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVFLEVBQUVELEVBQUUsQ0FDbkssU0FBU3k5QixHQUFHbC9CLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxFQUFFQyxHQUFHazlCLEdBQUc1K0IsRUFBRUMsR0FBRyxJQUFJMEIsS0FBZSxJQUFSMUIsRUFBRTBSLE9BQVcsSUFBSW5RLElBQUlHLEVBQUUsT0FBT0YsR0FBRzRyQixHQUFHcHRCLEVBQUVDLEdBQUUsR0FBSTg5QixHQUFHaCtCLEVBQUVDLEVBQUV5QixHQUFHRixFQUFFdkIsRUFBRStQLFVBQVU0dEIsR0FBR3pyQixRQUFRbFMsRUFBRSxJQUFJNEYsRUFBRWxFLEdBQUcsbUJBQW9CekIsRUFBRWk5Qix5QkFBeUIsS0FBSzM3QixFQUFFNEUsU0FBd0ksT0FBL0huRyxFQUFFMFIsT0FBTyxFQUFFLE9BQU8zUixHQUFHMkIsR0FBRzFCLEVBQUVnUyxNQUFNb2YsR0FBR3B4QixFQUFFRCxFQUFFaVMsTUFBTSxLQUFLdlEsR0FBR3pCLEVBQUVnUyxNQUFNb2YsR0FBR3B4QixFQUFFLEtBQUs0RixFQUFFbkUsSUFBSW84QixHQUFHOTlCLEVBQUVDLEVBQUU0RixFQUFFbkUsR0FBR3pCLEVBQUU0UixjQUFjclEsRUFBRW02QixNQUFNbDZCLEdBQUc0ckIsR0FBR3B0QixFQUFFQyxHQUFFLEdBQVdELEVBQUVnUyxLQUFLLENBQUMsU0FBU2t0QixHQUFHbi9CLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWdRLFVBQVUvUCxFQUFFbS9CLGVBQWVwUyxHQUFHaHRCLEVBQUVDLEVBQUVtL0IsZUFBZW4vQixFQUFFbS9CLGlCQUFpQm4vQixFQUFFcXlCLFNBQVNyeUIsRUFBRXF5QixTQUFTdEYsR0FBR2h0QixFQUFFQyxFQUFFcXlCLFNBQVEsR0FBSWtDLEdBQUd4MEIsRUFBRUMsRUFBRWtYLGNBQWMsQ0FDNWUsU0FBU2tvQixHQUFHci9CLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxHQUF1QyxPQUFwQ211QixLQUFLQyxHQUFHcHVCLEdBQUd4QixFQUFFMFIsT0FBTyxJQUFJbXNCLEdBQUc5OUIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQVV2QixFQUFFZ1MsS0FBSyxDQUFDLElBYXFMcXRCLEdBQUdDLEdBQUdDLEdBQUdDLEdBYjFMQyxHQUFHLENBQUM1dEIsV0FBVyxLQUFLcWQsWUFBWSxLQUFLQyxVQUFVLEdBQUcsU0FBU3VRLEdBQUczL0IsR0FBRyxNQUFNLENBQUN1K0IsVUFBVXYrQixFQUFFdytCLFVBQVUsS0FBS0MsWUFBWSxLQUFLLENBQ2xNLFNBQVNtQixHQUFHNS9CLEVBQUVDLEVBQUVDLEdBQUcsSUFBMEQyRixFQUF0RHJFLEVBQUV2QixFQUFFZ3ZCLGFBQWF4dEIsRUFBRW96QixHQUFFMWlCLFFBQVF6USxHQUFFLEVBQUdDLEtBQWUsSUFBUjFCLEVBQUUwUixPQUFxSixJQUF2STlMLEVBQUVsRSxLQUFLa0UsR0FBRSxPQUFPN0YsR0FBRyxPQUFPQSxFQUFFNlIsbUJBQXdCLEVBQUZwUSxJQUFTb0UsR0FBRW5FLEdBQUUsRUFBR3pCLEVBQUUwUixRQUFRLEtBQVksT0FBTzNSLEdBQUcsT0FBT0EsRUFBRTZSLGdCQUFjcFEsR0FBRyxHQUFFMnFCLEdBQUV5SSxHQUFJLEVBQUZwekIsR0FBUSxPQUFPekIsRUFBMkIsT0FBeEJ1dkIsR0FBR3R2QixHQUF3QixRQUFyQkQsRUFBRUMsRUFBRTRSLGdCQUEyQyxRQUFmN1IsRUFBRUEsRUFBRThSLGFBQXdDLEVBQVA3UixFQUFFcXZCLEtBQWtCLE9BQU90dkIsRUFBRTZjLEtBQUs1YyxFQUFFa3lCLE1BQU0sRUFBRWx5QixFQUFFa3lCLE1BQU0sV0FBMUNseUIsRUFBRWt5QixNQUFNLEVBQTZDLE9BQUt4d0IsRUFBRUgsRUFBRThILFNBQVN0SixFQUFFd0IsRUFBRXErQixTQUFnQm4rQixHQUFHRixFQUFFdkIsRUFBRXF2QixLQUFLNXRCLEVBQUV6QixFQUFFZ1MsTUFBTXRRLEVBQUUsQ0FBQzJ0QixLQUFLLFNBQVNobUIsU0FBUzNILEdBQVUsRUFBRkgsR0FBTSxPQUFPRSxFQUN0ZEEsRUFBRW8rQixHQUFHbitCLEVBQUVILEVBQUUsRUFBRSxPQUQ4Y0UsRUFBRXF3QixXQUFXLEVBQUVyd0IsRUFBRXV0QixhQUM3ZXR0QixHQUFvQjNCLEVBQUUrd0IsR0FBRy93QixFQUFFd0IsRUFBRXRCLEVBQUUsTUFBTXdCLEVBQUVnUSxPQUFPelIsRUFBRUQsRUFBRTBSLE9BQU96UixFQUFFeUIsRUFBRXdRLFFBQVFsUyxFQUFFQyxFQUFFZ1MsTUFBTXZRLEVBQUV6QixFQUFFZ1MsTUFBTUosY0FBYzh0QixHQUFHei9CLEdBQUdELEVBQUU0UixjQUFjNnRCLEdBQUcxL0IsR0FBRysvQixHQUFHOS9CLEVBQUUwQixJQUFxQixHQUFHLFFBQXJCRixFQUFFekIsRUFBRTZSLGdCQUEyQyxRQUFmaE0sRUFBRXBFLEVBQUVxUSxZQUFxQixPQUdwTSxTQUFZOVIsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsR0FBR3pCLEVBQUcsT0FBVyxJQUFSRCxFQUFFMFIsT0FBaUIxUixFQUFFMFIsUUFBUSxJQUF3QnF1QixHQUFHaGdDLEVBQUVDLEVBQUUwQixFQUEzQkgsRUFBRWk3QixHQUFHeDNCLE1BQU1sRixFQUFFLFNBQXNCLE9BQU9FLEVBQUU0UixlQUFxQjVSLEVBQUVnUyxNQUFNalMsRUFBRWlTLE1BQU1oUyxFQUFFMFIsT0FBTyxJQUFJLE9BQUtqUSxFQUFFRixFQUFFcStCLFNBQVNwK0IsRUFBRXhCLEVBQUVxdkIsS0FBSzl0QixFQUFFcytCLEdBQUcsQ0FBQ3hRLEtBQUssVUFBVWhtQixTQUFTOUgsRUFBRThILFVBQVU3SCxFQUFFLEVBQUUsT0FBTUMsRUFBRXF2QixHQUFHcnZCLEVBQUVELEVBQUVFLEVBQUUsT0FBUWdRLE9BQU8sRUFBRW5RLEVBQUVrUSxPQUFPelIsRUFBRXlCLEVBQUVnUSxPQUFPelIsRUFBRXVCLEVBQUUwUSxRQUFReFEsRUFBRXpCLEVBQUVnUyxNQUFNelEsRUFBYyxFQUFQdkIsRUFBRXF2QixNQUFTK0IsR0FBR3B4QixFQUFFRCxFQUFFaVMsTUFBTSxLQUFLdFEsR0FBRzFCLEVBQUVnUyxNQUFNSixjQUFjOHRCLEdBQUdoK0IsR0FBRzFCLEVBQUU0UixjQUFjNnRCLEdBQVVoK0IsR0FBRSxLQUFlLEVBQVB6QixFQUFFcXZCLE1BQVEsT0FBTzBRLEdBQUdoZ0MsRUFBRUMsRUFBRTBCLEVBQUUsTUFBTSxHQUFHLE9BQU9GLEVBQUVvYixLQUFLLENBQ2hkLEdBRGlkcmIsRUFBRUMsRUFBRW9pQixhQUFhcGlCLEVBQUVvaUIsWUFBWW9jLFFBQzNlLElBQUlwNkIsRUFBRXJFLEVBQUUwK0IsS0FBMEMsT0FBckMxK0IsRUFBRXFFLEVBQTBDbTZCLEdBQUdoZ0MsRUFBRUMsRUFBRTBCLEVBQS9CSCxFQUFFaTdCLEdBQWxCLzZCLEVBQUV1RCxNQUFNbEYsRUFBRSxNQUFheUIsT0FBRSxHQUEwQixDQUF3QixHQUF2QnFFLEtBQU9sRSxFQUFFM0IsRUFBRSt4QixZQUFlSyxJQUFJdnNCLEVBQUUsQ0FBSyxHQUFHLFFBQVByRSxFQUFFazJCLElBQWMsQ0FBQyxPQUFPLzFCLEdBQUdBLEdBQUcsS0FBSyxFQUFFRixFQUFFLEVBQUUsTUFBTSxLQUFLLEdBQUdBLEVBQUUsRUFBRSxNQUFNLEtBQUssR0FBRyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTQSxFQUFFLEdBQUcsTUFBTSxLQUFLLFVBQVVBLEVBQUUsVUFBVSxNQUFNLFFBQVFBLEVBQUUsRUFDaGQsS0FEa2RBLEVBQU9BLEdBQUdELEVBQUVrVCxlQUFlL1MsR0FBSSxFQUFFRixJQUM1ZUEsSUFBSUMsRUFBRTB0QixZQUFZMXRCLEVBQUUwdEIsVUFBVTN0QixFQUFFbXhCLEdBQUc1eUIsRUFBRXlCLEdBQUd1MkIsR0FBR3gyQixFQUFFeEIsRUFBRXlCLEdBQUcsR0FBRyxDQUEwQixPQUF6QjArQixLQUFnQ0gsR0FBR2hnQyxFQUFFQyxFQUFFMEIsRUFBbENILEVBQUVpN0IsR0FBR3gzQixNQUFNbEYsRUFBRSxPQUF5QixDQUFDLE1BQUcsT0FBTzBCLEVBQUVvYixNQUFZNWMsRUFBRTBSLE9BQU8sSUFBSTFSLEVBQUVnUyxNQUFNalMsRUFBRWlTLE1BQU1oUyxFQUFFbWdDLEdBQUd6WCxLQUFLLEtBQUszb0IsR0FBR3lCLEVBQUU0K0IsWUFBWXBnQyxFQUFFLE9BQUtELEVBQUUwQixFQUFFeXRCLFlBQVlWLEdBQUdqRCxHQUFHL3BCLEVBQUVvaUIsYUFBYTJLLEdBQUd2dUIsRUFBRXl1QixJQUFFLEVBQUdDLEdBQUcsS0FBSyxPQUFPM3VCLElBQUkrdEIsR0FBR0MsTUFBTUUsR0FBR0gsR0FBR0MsTUFBTUcsR0FBR0osR0FBR0MsTUFBTUMsR0FBR0MsR0FBR2x1QixFQUFFb1ksR0FBRytWLEdBQUdudUIsRUFBRWt2QixTQUFTakIsR0FBR2h1QixJQUFHQSxFQUFFOC9CLEdBQUc5L0IsRUFBRXVCLEVBQUU4SCxXQUFZcUksT0FBTyxLQUFZMVIsRUFBQyxDQUxyS3FnQyxDQUFHdGdDLEVBQUVDLEVBQUUwQixFQUFFSCxFQUFFcUUsRUFBRXBFLEVBQUV2QixHQUFHLEdBQUd3QixFQUFFLENBQUNBLEVBQUVGLEVBQUVxK0IsU0FBU2wrQixFQUFFMUIsRUFBRXF2QixLQUFlenBCLEdBQVZwRSxFQUFFekIsRUFBRWlTLE9BQVVDLFFBQVEsSUFBSXBNLEVBQUUsQ0FBQ3dwQixLQUFLLFNBQVNobUIsU0FBUzlILEVBQUU4SCxVQUNoRixPQURpRyxFQUFGM0gsR0FBTTFCLEVBQUVnUyxRQUFReFEsR0FBZ0VELEVBQUVpdkIsR0FBR2h2QixFQUFFcUUsSUFBS3k2QixhQUE0QixTQUFmOStCLEVBQUU4K0IsZUFBeEYvK0IsRUFBRXZCLEVBQUVnUyxPQUFROGYsV0FBVyxFQUFFdndCLEVBQUV5dEIsYUFBYW5wQixFQUFFN0YsRUFBRTh1QixVQUFVLE1BQXlELE9BQU9scEIsRUFBRW5FLEVBQUUrdUIsR0FBRzVxQixFQUFFbkUsSUFBSUEsRUFBRXF2QixHQUFHcnZCLEVBQUVDLEVBQUV6QixFQUFFLE9BQVF5UixPQUFPLEVBQUdqUSxFQUFFZ1EsT0FDbmZ6UixFQUFFdUIsRUFBRWtRLE9BQU96UixFQUFFdUIsRUFBRTBRLFFBQVF4USxFQUFFekIsRUFBRWdTLE1BQU16USxFQUFFQSxFQUFFRSxFQUFFQSxFQUFFekIsRUFBRWdTLE1BQThCdFEsRUFBRSxRQUExQkEsRUFBRTNCLEVBQUVpUyxNQUFNSixlQUF5Qjh0QixHQUFHei9CLEdBQUcsQ0FBQ3ErQixVQUFVNThCLEVBQUU0OEIsVUFBVXIrQixFQUFFcytCLFVBQVUsS0FBS0MsWUFBWTk4QixFQUFFODhCLGFBQWEvOEIsRUFBRW1RLGNBQWNsUSxFQUFFRCxFQUFFcXdCLFdBQVcveEIsRUFBRSt4QixZQUFZN3hCLEVBQUVELEVBQUU0UixjQUFjNnRCLEdBQVVsK0IsQ0FBQyxDQUFvTyxPQUF6TnhCLEdBQVYwQixFQUFFMUIsRUFBRWlTLE9BQVVDLFFBQVExUSxFQUFFaXZCLEdBQUcvdUIsRUFBRSxDQUFDNHRCLEtBQUssVUFBVWhtQixTQUFTOUgsRUFBRThILGFBQXVCLEVBQVBySixFQUFFcXZCLFFBQVU5dEIsRUFBRTJ3QixNQUFNanlCLEdBQUdzQixFQUFFa1EsT0FBT3pSLEVBQUV1QixFQUFFMFEsUUFBUSxLQUFLLE9BQU9sUyxJQUFrQixRQUFkRSxFQUFFRCxFQUFFOHVCLFlBQW9COXVCLEVBQUU4dUIsVUFBVSxDQUFDL3VCLEdBQUdDLEVBQUUwUixPQUFPLElBQUl6UixFQUFFaVEsS0FBS25RLElBQUlDLEVBQUVnUyxNQUFNelEsRUFBRXZCLEVBQUU0UixjQUFjLEtBQVlyUSxDQUFDLENBQ25kLFNBQVN1K0IsR0FBRy8vQixFQUFFQyxHQUE4RCxPQUEzREEsRUFBRTYvQixHQUFHLENBQUN4USxLQUFLLFVBQVVobUIsU0FBU3JKLEdBQUdELEVBQUVzdkIsS0FBSyxFQUFFLE9BQVE1ZCxPQUFPMVIsRUFBU0EsRUFBRWlTLE1BQU1oUyxDQUFDLENBQUMsU0FBUysvQixHQUFHaGdDLEVBQUVDLEVBQUVDLEVBQUVzQixHQUF3RyxPQUFyRyxPQUFPQSxHQUFHcXVCLEdBQUdydUIsR0FBRzZ2QixHQUFHcHhCLEVBQUVELEVBQUVpUyxNQUFNLEtBQUsvUixJQUFHRixFQUFFKy9CLEdBQUc5L0IsRUFBRUEsRUFBRWd2QixhQUFhM2xCLFdBQVlxSSxPQUFPLEVBQUUxUixFQUFFNFIsY0FBYyxLQUFZN1IsQ0FBQyxDQUdrSixTQUFTd2dDLEdBQUd4Z0MsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRW15QixPQUFPbHlCLEVBQUUsSUFBSXVCLEVBQUV4QixFQUFFeVIsVUFBVSxPQUFPalEsSUFBSUEsRUFBRTJ3QixPQUFPbHlCLEdBQUc2eEIsR0FBRzl4QixFQUFFMFIsT0FBT3pSLEVBQUVDLEVBQUUsQ0FDeGMsU0FBU3VnQyxHQUFHemdDLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxHQUFHLElBQUlDLEVBQUUxQixFQUFFNlIsY0FBYyxPQUFPblEsRUFBRTFCLEVBQUU2UixjQUFjLENBQUM2dUIsWUFBWXpnQyxFQUFFMGdDLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUtyL0IsRUFBRXMvQixLQUFLNWdDLEVBQUU2Z0MsU0FBU3QvQixJQUFJQyxFQUFFZy9CLFlBQVl6Z0MsRUFBRXlCLEVBQUVpL0IsVUFBVSxLQUFLai9CLEVBQUVrL0IsbUJBQW1CLEVBQUVsL0IsRUFBRW0vQixLQUFLci9CLEVBQUVFLEVBQUVvL0IsS0FBSzVnQyxFQUFFd0IsRUFBRXEvQixTQUFTdC9CLEVBQUUsQ0FDM08sU0FBU3UvQixHQUFHaGhDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUV2QixFQUFFZ3ZCLGFBQWF4dEIsRUFBRUQsRUFBRXV6QixZQUFZcnpCLEVBQUVGLEVBQUVzL0IsS0FBc0MsR0FBakNoRCxHQUFHOTlCLEVBQUVDLEVBQUV1QixFQUFFOEgsU0FBU3BKLEdBQXlCLEdBQXRCc0IsRUFBRXF6QixHQUFFMWlCLFNBQXFCM1EsRUFBSSxFQUFGQSxFQUFJLEVBQUV2QixFQUFFMFIsT0FBTyxRQUFRLENBQUMsR0FBRyxPQUFPM1IsR0FBZ0IsSUFBUkEsRUFBRTJSLE1BQVczUixFQUFFLElBQUlBLEVBQUVDLEVBQUVnUyxNQUFNLE9BQU9qUyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFbUcsSUFBSSxPQUFPbkcsRUFBRTZSLGVBQWUydUIsR0FBR3hnQyxFQUFFRSxFQUFFRCxRQUFRLEdBQUcsS0FBS0QsRUFBRW1HLElBQUlxNkIsR0FBR3hnQyxFQUFFRSxFQUFFRCxRQUFRLEdBQUcsT0FBT0QsRUFBRWlTLE1BQU0sQ0FBQ2pTLEVBQUVpUyxNQUFNUCxPQUFPMVIsRUFBRUEsRUFBRUEsRUFBRWlTLE1BQU0sUUFBUSxDQUFDLEdBQUdqUyxJQUFJQyxFQUFFLE1BQU1ELEVBQUUsS0FBSyxPQUFPQSxFQUFFa1MsU0FBUyxDQUFDLEdBQUcsT0FBT2xTLEVBQUUwUixRQUFRMVIsRUFBRTBSLFNBQVN6UixFQUFFLE1BQU1ELEVBQUVBLEVBQUVBLEVBQUUwUixNQUFNLENBQUMxUixFQUFFa1MsUUFBUVIsT0FBTzFSLEVBQUUwUixPQUFPMVIsRUFBRUEsRUFBRWtTLE9BQU8sQ0FBQzFRLEdBQUcsQ0FBQyxDQUFRLEdBQVA0cUIsR0FBRXlJLEdBQUVyekIsR0FBa0IsRUFBUHZCLEVBQUVxdkIsS0FDM2QsT0FBTzd0QixHQUFHLElBQUssV0FBcUIsSUFBVnZCLEVBQUVELEVBQUVnUyxNQUFVeFEsRUFBRSxLQUFLLE9BQU92QixHQUFpQixRQUFkRixFQUFFRSxFQUFFdVIsWUFBb0IsT0FBT3FqQixHQUFHOTBCLEtBQUt5QixFQUFFdkIsR0FBR0EsRUFBRUEsRUFBRWdTLFFBQVksUUFBSmhTLEVBQUV1QixJQUFZQSxFQUFFeEIsRUFBRWdTLE1BQU1oUyxFQUFFZ1MsTUFBTSxPQUFPeFEsRUFBRXZCLEVBQUVnUyxRQUFRaFMsRUFBRWdTLFFBQVEsTUFBTXV1QixHQUFHeGdDLEdBQUUsRUFBR3dCLEVBQUV2QixFQUFFd0IsR0FBRyxNQUFNLElBQUssWUFBNkIsSUFBakJ4QixFQUFFLEtBQUt1QixFQUFFeEIsRUFBRWdTLE1BQVVoUyxFQUFFZ1MsTUFBTSxLQUFLLE9BQU94USxHQUFHLENBQWUsR0FBRyxRQUFqQnpCLEVBQUV5QixFQUFFZ1EsWUFBdUIsT0FBT3FqQixHQUFHOTBCLEdBQUcsQ0FBQ0MsRUFBRWdTLE1BQU14USxFQUFFLEtBQUssQ0FBQ3pCLEVBQUV5QixFQUFFeVEsUUFBUXpRLEVBQUV5USxRQUFRaFMsRUFBRUEsRUFBRXVCLEVBQUVBLEVBQUV6QixDQUFDLENBQUN5Z0MsR0FBR3hnQyxHQUFFLEVBQUdDLEVBQUUsS0FBS3dCLEdBQUcsTUFBTSxJQUFLLFdBQVcrK0IsR0FBR3hnQyxHQUFFLEVBQUcsS0FBSyxVQUFLLEdBQVEsTUFBTSxRQUFRQSxFQUFFNFIsY0FBYyxVQURtQzVSLEVBQUU0UixjQUMvZSxLQUErYyxPQUFPNVIsRUFBRWdTLEtBQUssQ0FDN2QsU0FBUzZzQixHQUFHOStCLEVBQUVDLEtBQWUsRUFBUEEsRUFBRXF2QixPQUFTLE9BQU90dkIsSUFBSUEsRUFBRXlSLFVBQVUsS0FBS3hSLEVBQUV3UixVQUFVLEtBQUt4UixFQUFFMFIsT0FBTyxFQUFFLENBQUMsU0FBU3FzQixHQUFHaCtCLEVBQUVDLEVBQUVDLEdBQXlELEdBQXRELE9BQU9GLElBQUlDLEVBQUVneUIsYUFBYWp5QixFQUFFaXlCLGNBQWNnQyxJQUFJaDBCLEVBQUVreUIsUUFBY2p5QixFQUFFRCxFQUFFOHhCLFlBQVksT0FBTyxLQUFLLEdBQUcsT0FBTy94QixHQUFHQyxFQUFFZ1MsUUFBUWpTLEVBQUVpUyxNQUFNLE1BQU1oTixNQUFNbEYsRUFBRSxNQUFNLEdBQUcsT0FBT0UsRUFBRWdTLE1BQU0sQ0FBNEMsSUFBakMvUixFQUFFdXdCLEdBQVp6d0IsRUFBRUMsRUFBRWdTLE1BQWFqUyxFQUFFaXZCLGNBQWNodkIsRUFBRWdTLE1BQU0vUixFQUFNQSxFQUFFd1IsT0FBT3pSLEVBQUUsT0FBT0QsRUFBRWtTLFNBQVNsUyxFQUFFQSxFQUFFa1MsU0FBUWhTLEVBQUVBLEVBQUVnUyxRQUFRdWUsR0FBR3p3QixFQUFFQSxFQUFFaXZCLGVBQWdCdmQsT0FBT3pSLEVBQUVDLEVBQUVnUyxRQUFRLElBQUksQ0FBQyxPQUFPalMsRUFBRWdTLEtBQUssQ0FPOWEsU0FBU2d2QixHQUFHamhDLEVBQUVDLEdBQUcsSUFBSXl1QixHQUFFLE9BQU8xdUIsRUFBRStnQyxVQUFVLElBQUssU0FBUzlnQyxFQUFFRCxFQUFFOGdDLEtBQUssSUFBSSxJQUFJNWdDLEVBQUUsS0FBSyxPQUFPRCxHQUFHLE9BQU9BLEVBQUV3UixZQUFZdlIsRUFBRUQsR0FBR0EsRUFBRUEsRUFBRWlTLFFBQVEsT0FBT2hTLEVBQUVGLEVBQUU4Z0MsS0FBSyxLQUFLNWdDLEVBQUVnUyxRQUFRLEtBQUssTUFBTSxJQUFLLFlBQVloUyxFQUFFRixFQUFFOGdDLEtBQUssSUFBSSxJQUFJdC9CLEVBQUUsS0FBSyxPQUFPdEIsR0FBRyxPQUFPQSxFQUFFdVIsWUFBWWpRLEVBQUV0QixHQUFHQSxFQUFFQSxFQUFFZ1MsUUFBUSxPQUFPMVEsRUFBRXZCLEdBQUcsT0FBT0QsRUFBRThnQyxLQUFLOWdDLEVBQUU4Z0MsS0FBSyxLQUFLOWdDLEVBQUU4Z0MsS0FBSzV1QixRQUFRLEtBQUsxUSxFQUFFMFEsUUFBUSxLQUFLLENBQzVVLFNBQVNndkIsR0FBRWxoQyxHQUFHLElBQUlDLEVBQUUsT0FBT0QsRUFBRXlSLFdBQVd6UixFQUFFeVIsVUFBVVEsUUFBUWpTLEVBQUVpUyxNQUFNL1IsRUFBRSxFQUFFc0IsRUFBRSxFQUFFLEdBQUd2QixFQUFFLElBQUksSUFBSXdCLEVBQUV6QixFQUFFaVMsTUFBTSxPQUFPeFEsR0FBR3ZCLEdBQUd1QixFQUFFMHdCLE1BQU0xd0IsRUFBRXN3QixXQUFXdndCLEdBQWtCLFNBQWZDLEVBQUU4K0IsYUFBc0IvK0IsR0FBVyxTQUFSQyxFQUFFa1EsTUFBZWxRLEVBQUVpUSxPQUFPMVIsRUFBRXlCLEVBQUVBLEVBQUV5USxhQUFhLElBQUl6USxFQUFFekIsRUFBRWlTLE1BQU0sT0FBT3hRLEdBQUd2QixHQUFHdUIsRUFBRTB3QixNQUFNMXdCLEVBQUVzd0IsV0FBV3Z3QixHQUFHQyxFQUFFOCtCLGFBQWEvK0IsR0FBR0MsRUFBRWtRLE1BQU1sUSxFQUFFaVEsT0FBTzFSLEVBQUV5QixFQUFFQSxFQUFFeVEsUUFBeUMsT0FBakNsUyxFQUFFdWdDLGNBQWMvK0IsRUFBRXhCLEVBQUUreEIsV0FBVzd4QixFQUFTRCxDQUFDLENBQzdWLFNBQVNraEMsR0FBR25oQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFdkIsRUFBRWd2QixhQUFtQixPQUFOVixHQUFHdHVCLEdBQVVBLEVBQUVrRyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPKzZCLEdBQUVqaEMsR0FBRyxLQUFLLEtBQUssRUFVdEQsS0FBSyxHQUFHLE9BQU80c0IsR0FBRzVzQixFQUFFaUMsT0FBTzZxQixLQUFLbVUsR0FBRWpoQyxHQUFHLEtBVnFELEtBQUssRUFBMlEsT0FBelF1QixFQUFFdkIsRUFBRStQLFVBQVUwa0IsS0FBS3ZJLEdBQUVJLElBQUlKLEdBQUVHLElBQUcySSxLQUFLenpCLEVBQUU0OUIsaUJBQWlCNTlCLEVBQUU4d0IsUUFBUTl3QixFQUFFNDlCLGVBQWU1OUIsRUFBRTQ5QixlQUFlLE1BQVMsT0FBT3AvQixHQUFHLE9BQU9BLEVBQUVpUyxRQUFNd2QsR0FBR3h2QixHQUFHQSxFQUFFMFIsT0FBTyxFQUFFLE9BQU8zUixHQUFHQSxFQUFFNlIsY0FBY3FGLGdCQUEyQixJQUFSalgsRUFBRTBSLFNBQWExUixFQUFFMFIsT0FBTyxLQUFLLE9BQU9nZCxLQUFLeVMsR0FBR3pTLElBQUlBLEdBQUcsUUFBTzRRLEdBQUd2L0IsRUFBRUMsR0FBR2loQyxHQUFFamhDLEdBQVUsS0FBSyxLQUFLLEVBQUUyMEIsR0FBRzMwQixHQUFHLElBQUl3QixFQUFFOHlCLEdBQUdELEdBQUduaUIsU0FDN2UsR0FBVGpTLEVBQUVELEVBQUVpQyxLQUFRLE9BQU9sQyxHQUFHLE1BQU1DLEVBQUUrUCxVQUFVd3ZCLEdBQUd4L0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUd6QixFQUFFZ3dCLE1BQU0vdkIsRUFBRSt2QixNQUFNL3ZCLEVBQUUwUixPQUFPLElBQUkxUixFQUFFMFIsT0FBTyxhQUFhLENBQUMsSUFBSW5RLEVBQUUsQ0FBQyxHQUFHLE9BQU92QixFQUFFK1AsVUFBVSxNQUFNL0ssTUFBTWxGLEVBQUUsTUFBVyxPQUFMbWhDLEdBQUVqaEMsR0FBVSxJQUFJLENBQWtCLEdBQWpCRCxFQUFFdTBCLEdBQUdILEdBQUdqaUIsU0FBWXNkLEdBQUd4dkIsR0FBRyxDQUFDdUIsRUFBRXZCLEVBQUUrUCxVQUFVOVAsRUFBRUQsRUFBRWlDLEtBQUssSUFBSVIsRUFBRXpCLEVBQUV5dkIsY0FBK0MsT0FBakNsdUIsRUFBRW9xQixJQUFJM3JCLEVBQUV1QixFQUFFcXFCLElBQUlucUIsRUFBRTFCLEtBQWMsRUFBUEMsRUFBRXF2QixNQUFlcHZCLEdBQUcsSUFBSyxTQUFTaW9CLEdBQUUsU0FBUzNtQixHQUFHMm1CLEdBQUUsUUFBUTNtQixHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVEybUIsR0FBRSxPQUFPM21CLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUlDLEVBQUUsRUFBRUEsRUFBRW1tQixHQUFHeG5CLE9BQU9xQixJQUFJMG1CLEdBQUVQLEdBQUdubUIsR0FBR0QsR0FBRyxNQUFNLElBQUssU0FBUzJtQixHQUFFLFFBQVEzbUIsR0FBRyxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPMm1CLEdBQUUsUUFDbmhCM21CLEdBQUcybUIsR0FBRSxPQUFPM21CLEdBQUcsTUFBTSxJQUFLLFVBQVUybUIsR0FBRSxTQUFTM21CLEdBQUcsTUFBTSxJQUFLLFFBQVE0RyxFQUFHNUcsRUFBRUUsR0FBR3ltQixHQUFFLFVBQVUzbUIsR0FBRyxNQUFNLElBQUssU0FBU0EsRUFBRTBHLGNBQWMsQ0FBQ201QixjQUFjMy9CLEVBQUU0L0IsVUFBVW5aLEdBQUUsVUFBVTNtQixHQUFHLE1BQU0sSUFBSyxXQUFXK0gsR0FBRy9ILEVBQUVFLEdBQUd5bUIsR0FBRSxVQUFVM21CLEdBQWtCLElBQUksSUFBSUcsS0FBdkJ1TixHQUFHaFAsRUFBRXdCLEdBQUdELEVBQUUsS0FBa0JDLEVBQUUsR0FBR0EsRUFBRVAsZUFBZVEsR0FBRyxDQUFDLElBQUlrRSxFQUFFbkUsRUFBRUMsR0FBRyxhQUFhQSxFQUFFLGlCQUFrQmtFLEVBQUVyRSxFQUFFa0ksY0FBYzdELEtBQUksSUFBS25FLEVBQUU2L0IsMEJBQTBCbFgsR0FBRzdvQixFQUFFa0ksWUFBWTdELEVBQUU3RixHQUFHeUIsRUFBRSxDQUFDLFdBQVdvRSxJQUFJLGlCQUFrQkEsR0FBR3JFLEVBQUVrSSxjQUFjLEdBQUc3RCxLQUFJLElBQUtuRSxFQUFFNi9CLDBCQUEwQmxYLEdBQUc3b0IsRUFBRWtJLFlBQzFlN0QsRUFBRTdGLEdBQUd5QixFQUFFLENBQUMsV0FBVyxHQUFHb0UsSUFBSXJGLEVBQUdXLGVBQWVRLElBQUksTUFBTWtFLEdBQUcsYUFBYWxFLEdBQUd3bUIsR0FBRSxTQUFTM21CLEVBQUUsQ0FBQyxPQUFPdEIsR0FBRyxJQUFLLFFBQVE0RyxFQUFHdEYsR0FBR2tILEVBQUdsSCxFQUFFRSxHQUFFLEdBQUksTUFBTSxJQUFLLFdBQVdvRixFQUFHdEYsR0FBR2lJLEdBQUdqSSxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxNQUFNLFFBQVEsbUJBQW9CRSxFQUFFOC9CLFVBQVVoZ0MsRUFBRWlnQyxRQUFRblgsSUFBSTlvQixFQUFFQyxFQUFFeEIsRUFBRTh5QixZQUFZdnhCLEVBQUUsT0FBT0EsSUFBSXZCLEVBQUUwUixPQUFPLEVBQUUsS0FBSyxDQUFDaFEsRUFBRSxJQUFJRixFQUFFaUosU0FBU2pKLEVBQUVBLEVBQUVrSCxjQUFjLGlDQUFpQzNJLElBQUlBLEVBQUUySixHQUFHekosSUFBSSxpQ0FBaUNGLEVBQUUsV0FBV0UsSUFBR0YsRUFBRTJCLEVBQUVaLGNBQWMsUUFBU2lKLFVBQVUscUJBQXVCaEssRUFBRUEsRUFBRW9LLFlBQVlwSyxFQUFFbUssYUFDL2YsaUJBQWtCM0ksRUFBRTROLEdBQUdwUCxFQUFFMkIsRUFBRVosY0FBY2IsRUFBRSxDQUFDa1AsR0FBRzVOLEVBQUU0TixNQUFNcFAsRUFBRTJCLEVBQUVaLGNBQWNiLEdBQUcsV0FBV0EsSUFBSXlCLEVBQUUzQixFQUFFd0IsRUFBRTgvQixTQUFTMy9CLEVBQUUyL0IsVUFBUyxFQUFHOS9CLEVBQUVrZ0MsT0FBTy8vQixFQUFFKy9CLEtBQUtsZ0MsRUFBRWtnQyxRQUFRMWhDLEVBQUUyQixFQUFFZ2dDLGdCQUFnQjNoQyxFQUFFRSxHQUFHRixFQUFFNHJCLElBQUkzckIsRUFBRUQsRUFBRTZyQixJQUFJcnFCLEVBQUU4OUIsR0FBR3QvQixFQUFFQyxHQUFFLEdBQUcsR0FBSUEsRUFBRStQLFVBQVVoUSxFQUFFQSxFQUFFLENBQVcsT0FBVjJCLEVBQUV3TixHQUFHalAsRUFBRXNCLEdBQVV0QixHQUFHLElBQUssU0FBU2lvQixHQUFFLFNBQVNub0IsR0FBR21vQixHQUFFLFFBQVFub0IsR0FBR3lCLEVBQUVELEVBQUUsTUFBTSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssUUFBUTJtQixHQUFFLE9BQU9ub0IsR0FBR3lCLEVBQUVELEVBQUUsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUlDLEVBQUUsRUFBRUEsRUFBRW1tQixHQUFHeG5CLE9BQU9xQixJQUFJMG1CLEdBQUVQLEdBQUdubUIsR0FBR3pCLEdBQUd5QixFQUFFRCxFQUFFLE1BQU0sSUFBSyxTQUFTMm1CLEdBQUUsUUFBUW5vQixHQUFHeUIsRUFBRUQsRUFBRSxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPMm1CLEdBQUUsUUFDbGZub0IsR0FBR21vQixHQUFFLE9BQU9ub0IsR0FBR3lCLEVBQUVELEVBQUUsTUFBTSxJQUFLLFVBQVUybUIsR0FBRSxTQUFTbm9CLEdBQUd5QixFQUFFRCxFQUFFLE1BQU0sSUFBSyxRQUFRNEcsRUFBR3BJLEVBQUV3QixHQUFHQyxFQUFFc0csRUFBRy9ILEVBQUV3QixHQUFHMm1CLEdBQUUsVUFBVW5vQixHQUFHLE1BQU0sSUFBSyxTQUFpTCxRQUFReUIsRUFBRUQsUUFBeEssSUFBSyxTQUFTeEIsRUFBRWtJLGNBQWMsQ0FBQ201QixjQUFjNy9CLEVBQUU4L0IsVUFBVTcvQixFQUFFcUQsRUFBRSxDQUFDLEVBQUV0RCxFQUFFLENBQUNtRyxXQUFNLElBQVN3Z0IsR0FBRSxVQUFVbm9CLEdBQUcsTUFBTSxJQUFLLFdBQVd1SixHQUFHdkosRUFBRXdCLEdBQUdDLEVBQUUySCxHQUFHcEosRUFBRXdCLEdBQUcybUIsR0FBRSxVQUFVbm9CLEdBQWlDLElBQUkwQixLQUFoQndOLEdBQUdoUCxFQUFFdUIsR0FBR29FLEVBQUVwRSxFQUFhLEdBQUdvRSxFQUFFMUUsZUFBZU8sR0FBRyxDQUFDLElBQUlvRSxFQUFFRCxFQUFFbkUsR0FBRyxVQUFVQSxFQUFFZ00sR0FBRzFOLEVBQUU4RixHQUFHLDRCQUE0QnBFLEVBQXVCLE9BQXBCb0UsRUFBRUEsRUFBRUEsRUFBRTRrQixZQUFPLElBQWdCNWdCLEdBQUc5SixFQUFFOEYsR0FBSSxhQUFhcEUsRUFBRSxpQkFBa0JvRSxHQUFHLGFBQzdlNUYsR0FBRyxLQUFLNEYsSUFBSTBFLEdBQUd4SyxFQUFFOEYsR0FBRyxpQkFBa0JBLEdBQUcwRSxHQUFHeEssRUFBRSxHQUFHOEYsR0FBRyxtQ0FBbUNwRSxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJbEIsRUFBR1csZUFBZU8sR0FBRyxNQUFNb0UsR0FBRyxhQUFhcEUsR0FBR3ltQixHQUFFLFNBQVNub0IsR0FBRyxNQUFNOEYsR0FBR2xELEVBQUc1QyxFQUFFMEIsRUFBRW9FLEVBQUVuRSxHQUFHLENBQUMsT0FBT3pCLEdBQUcsSUFBSyxRQUFRNEcsRUFBRzlHLEdBQUcwSSxFQUFHMUksRUFBRXdCLEdBQUUsR0FBSSxNQUFNLElBQUssV0FBV3NGLEVBQUc5RyxHQUFHeUosR0FBR3pKLEdBQUcsTUFBTSxJQUFLLFNBQVMsTUFBTXdCLEVBQUVtRyxPQUFPM0gsRUFBRXFELGFBQWEsUUFBUSxHQUFHc0QsRUFBR25GLEVBQUVtRyxRQUFRLE1BQU0sSUFBSyxTQUFTM0gsRUFBRXNoQyxXQUFXOS9CLEVBQUU4L0IsU0FBbUIsT0FBVjUvQixFQUFFRixFQUFFbUcsT0FBY29CLEdBQUcvSSxJQUFJd0IsRUFBRTgvQixTQUFTNS9CLEdBQUUsR0FBSSxNQUFNRixFQUFFeUcsY0FBY2MsR0FBRy9JLElBQUl3QixFQUFFOC9CLFNBQVM5L0IsRUFBRXlHLGNBQ2xmLEdBQUksTUFBTSxRQUFRLG1CQUFvQnhHLEVBQUUrL0IsVUFBVXhoQyxFQUFFeWhDLFFBQVFuWCxJQUFJLE9BQU9wcUIsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVdzQixJQUFJQSxFQUFFb2dDLFVBQVUsTUFBTTVoQyxFQUFFLElBQUssTUFBTXdCLEdBQUUsRUFBRyxNQUFNeEIsRUFBRSxRQUFRd0IsR0FBRSxFQUFHLENBQUNBLElBQUl2QixFQUFFMFIsT0FBTyxFQUFFLENBQUMsT0FBTzFSLEVBQUUrdkIsTUFBTS92QixFQUFFMFIsT0FBTyxJQUFJMVIsRUFBRTBSLE9BQU8sUUFBUSxDQUFNLE9BQUx1dkIsR0FBRWpoQyxHQUFVLEtBQUssS0FBSyxFQUFFLEdBQUdELEdBQUcsTUFBTUMsRUFBRStQLFVBQVV5dkIsR0FBR3ovQixFQUFFQyxFQUFFRCxFQUFFMHZCLGNBQWNsdUIsT0FBTyxDQUFDLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU92QixFQUFFK1AsVUFBVSxNQUFNL0ssTUFBTWxGLEVBQUUsTUFBc0MsR0FBaENHLEVBQUVxMEIsR0FBR0QsR0FBR25pQixTQUFTb2lCLEdBQUdILEdBQUdqaUIsU0FBWXNkLEdBQUd4dkIsR0FBRyxDQUF5QyxHQUF4Q3VCLEVBQUV2QixFQUFFK1AsVUFBVTlQLEVBQUVELEVBQUV5dkIsY0FBY2x1QixFQUFFb3FCLElBQUkzckIsR0FBS3lCLEVBQUVGLEVBQUVtSixZQUFZekssSUFDL2UsUUFEb2ZGLEVBQ3Zmd3VCLElBQVksT0FBT3h1QixFQUFFbUcsS0FBSyxLQUFLLEVBQUVra0IsR0FBRzdvQixFQUFFbUosVUFBVXpLLEtBQWMsRUFBUEYsRUFBRXN2QixPQUFTLE1BQU0sS0FBSyxHQUFFLElBQUt0dkIsRUFBRTB2QixjQUFjNlIsMEJBQTBCbFgsR0FBRzdvQixFQUFFbUosVUFBVXpLLEtBQWMsRUFBUEYsRUFBRXN2QixPQUFTNXRCLElBQUl6QixFQUFFMFIsT0FBTyxFQUFFLE1BQU1uUSxHQUFHLElBQUl0QixFQUFFd0ssU0FBU3hLLEVBQUVBLEVBQUV5SSxlQUFlazVCLGVBQWVyZ0MsSUFBS29xQixJQUFJM3JCLEVBQUVBLEVBQUUrUCxVQUFVeE8sQ0FBQyxDQUFNLE9BQUwwL0IsR0FBRWpoQyxHQUFVLEtBQUssS0FBSyxHQUEwQixHQUF2QmtzQixHQUFFMEksSUFBR3J6QixFQUFFdkIsRUFBRTRSLGNBQWlCLE9BQU83UixHQUFHLE9BQU9BLEVBQUU2UixlQUFlLE9BQU83UixFQUFFNlIsY0FBY0MsV0FBVyxDQUFDLEdBQUc0YyxJQUFHLE9BQU9ELElBQWdCLEVBQVB4dUIsRUFBRXF2QixRQUFzQixJQUFScnZCLEVBQUUwUixPQUFXZ2UsS0FBS0MsS0FBSzN2QixFQUFFMFIsT0FBTyxNQUFNalEsR0FBRSxPQUFRLEdBQUdBLEVBQUUrdEIsR0FBR3h2QixHQUFHLE9BQU91QixHQUFHLE9BQU9BLEVBQUVzUSxXQUFXLENBQUMsR0FBRyxPQUM1ZjlSLEVBQUUsQ0FBQyxJQUFJMEIsRUFBRSxNQUFNdUQsTUFBTWxGLEVBQUUsTUFBcUQsS0FBN0IyQixFQUFFLFFBQXBCQSxFQUFFekIsRUFBRTRSLGVBQXlCblEsRUFBRW9RLFdBQVcsTUFBVyxNQUFNN00sTUFBTWxGLEVBQUUsTUFBTTJCLEVBQUVrcUIsSUFBSTNyQixDQUFDLE1BQU0ydkIsT0FBa0IsSUFBUjN2QixFQUFFMFIsU0FBYTFSLEVBQUU0UixjQUFjLE1BQU01UixFQUFFMFIsT0FBTyxFQUFFdXZCLEdBQUVqaEMsR0FBR3lCLEdBQUUsQ0FBRSxNQUFNLE9BQU9pdEIsS0FBS3lTLEdBQUd6UyxJQUFJQSxHQUFHLE1BQU1qdEIsR0FBRSxFQUFHLElBQUlBLEVBQUUsT0FBZSxNQUFSekIsRUFBRTBSLE1BQVkxUixFQUFFLElBQUksQ0FBQyxPQUFnQixJQUFSQSxFQUFFMFIsT0FBa0IxUixFQUFFa3lCLE1BQU1qeUIsRUFBRUQsS0FBRXVCLEVBQUUsT0FBT0EsS0FBTyxPQUFPeEIsR0FBRyxPQUFPQSxFQUFFNlIsZ0JBQWdCclEsSUFBSXZCLEVBQUVnUyxNQUFNTixPQUFPLEtBQWlCLEVBQVAxUixFQUFFcXZCLE9BQVUsT0FBT3R2QixHQUFrQixFQUFWNjBCLEdBQUUxaUIsUUFBVyxJQUFJMnZCLEtBQUlBLEdBQUUsR0FBRzNCLE9BQU8sT0FBT2xnQyxFQUFFOHlCLGNBQWM5eUIsRUFBRTBSLE9BQU8sR0FBR3V2QixHQUFFamhDLEdBQVUsTUFBSyxLQUFLLEVBQUUsT0FBT3kwQixLQUNyZjZLLEdBQUd2L0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHMG9CLEdBQUd6b0IsRUFBRStQLFVBQVVtSCxlQUFlK3BCLEdBQUVqaEMsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPMnhCLEdBQUczeEIsRUFBRWlDLEtBQUtxRSxVQUFVMjZCLEdBQUVqaEMsR0FBRyxLQUErQyxLQUFLLEdBQTBCLEdBQXZCa3NCLEdBQUUwSSxJQUF3QixRQUFyQm56QixFQUFFekIsRUFBRTRSLGVBQTBCLE9BQU9xdkIsR0FBRWpoQyxHQUFHLEtBQXVDLEdBQWxDdUIsS0FBZSxJQUFSdkIsRUFBRTBSLE9BQTRCLFFBQWpCaFEsRUFBRUQsRUFBRWkvQixXQUFzQixHQUFHbi9CLEVBQUV5L0IsR0FBR3YvQixHQUFFLE9BQVEsQ0FBQyxHQUFHLElBQUlvZ0MsSUFBRyxPQUFPOWhDLEdBQWdCLElBQVJBLEVBQUUyUixNQUFXLElBQUkzUixFQUFFQyxFQUFFZ1MsTUFBTSxPQUFPalMsR0FBRyxDQUFTLEdBQUcsUUFBWDJCLEVBQUVtekIsR0FBRzkwQixJQUFlLENBQW1HLElBQWxHQyxFQUFFMFIsT0FBTyxJQUFJc3ZCLEdBQUd2L0IsR0FBRSxHQUFvQixRQUFoQkYsRUFBRUcsRUFBRW94QixlQUF1Qjl5QixFQUFFOHlCLFlBQVl2eEIsRUFBRXZCLEVBQUUwUixPQUFPLEdBQUcxUixFQUFFc2dDLGFBQWEsRUFBRS8rQixFQUFFdEIsRUFBTUEsRUFBRUQsRUFBRWdTLE1BQU0sT0FBTy9SLEdBQU9GLEVBQUV3QixHQUFORSxFQUFFeEIsR0FBUXlSLE9BQU8sU0FDL2QsUUFBZGhRLEVBQUVELEVBQUUrUCxZQUFvQi9QLEVBQUVxd0IsV0FBVyxFQUFFcndCLEVBQUV5d0IsTUFBTW55QixFQUFFMEIsRUFBRXVRLE1BQU0sS0FBS3ZRLEVBQUU2K0IsYUFBYSxFQUFFNytCLEVBQUVndUIsY0FBYyxLQUFLaHVCLEVBQUVtUSxjQUFjLEtBQUtuUSxFQUFFcXhCLFlBQVksS0FBS3J4QixFQUFFdXdCLGFBQWEsS0FBS3Z3QixFQUFFc08sVUFBVSxPQUFPdE8sRUFBRXF3QixXQUFXcHdCLEVBQUVvd0IsV0FBV3J3QixFQUFFeXdCLE1BQU14d0IsRUFBRXd3QixNQUFNendCLEVBQUV1USxNQUFNdFEsRUFBRXNRLE1BQU12USxFQUFFNitCLGFBQWEsRUFBRTcrQixFQUFFcXRCLFVBQVUsS0FBS3J0QixFQUFFZ3VCLGNBQWMvdEIsRUFBRSt0QixjQUFjaHVCLEVBQUVtUSxjQUFjbFEsRUFBRWtRLGNBQWNuUSxFQUFFcXhCLFlBQVlweEIsRUFBRW94QixZQUFZcnhCLEVBQUVRLEtBQUtQLEVBQUVPLEtBQUtsQyxFQUFFMkIsRUFBRXN3QixhQUFhdndCLEVBQUV1d0IsYUFBYSxPQUFPanlCLEVBQUUsS0FBSyxDQUFDbXlCLE1BQU1ueUIsRUFBRW15QixNQUFNRCxhQUFhbHlCLEVBQUVreUIsZUFBZWh5QixFQUFFQSxFQUFFZ1MsUUFBMkIsT0FBbkJrYSxHQUFFeUksR0FBWSxFQUFWQSxHQUFFMWlCLFFBQVUsR0FBVWxTLEVBQUVnUyxLQUFLLENBQUNqUyxFQUNsZ0JBLEVBQUVrUyxPQUFPLENBQUMsT0FBT3hRLEVBQUVvL0IsTUFBTWh1QixLQUFJaXZCLEtBQUs5aEMsRUFBRTBSLE9BQU8sSUFBSW5RLEdBQUUsRUFBR3kvQixHQUFHdi9CLEdBQUUsR0FBSXpCLEVBQUVreUIsTUFBTSxRQUFRLEtBQUssQ0FBQyxJQUFJM3dCLEVBQUUsR0FBVyxRQUFSeEIsRUFBRTgwQixHQUFHbnpCLEtBQWEsR0FBRzFCLEVBQUUwUixPQUFPLElBQUluUSxHQUFFLEVBQW1CLFFBQWhCdEIsRUFBRUYsRUFBRSt5QixlQUF1Qjl5QixFQUFFOHlCLFlBQVk3eUIsRUFBRUQsRUFBRTBSLE9BQU8sR0FBR3N2QixHQUFHdi9CLEdBQUUsR0FBSSxPQUFPQSxFQUFFby9CLE1BQU0sV0FBV3AvQixFQUFFcS9CLFdBQVdwL0IsRUFBRThQLFlBQVlpZCxHQUFFLE9BQU93UyxHQUFFamhDLEdBQUcsVUFBVSxFQUFFNlMsS0FBSXBSLEVBQUVrL0IsbUJBQW1CbUIsSUFBSSxhQUFhN2hDLElBQUlELEVBQUUwUixPQUFPLElBQUluUSxHQUFFLEVBQUd5L0IsR0FBR3YvQixHQUFFLEdBQUl6QixFQUFFa3lCLE1BQU0sU0FBU3p3QixFQUFFZy9CLGFBQWEvK0IsRUFBRXVRLFFBQVFqUyxFQUFFZ1MsTUFBTWhTLEVBQUVnUyxNQUFNdFEsSUFBYSxRQUFUekIsRUFBRXdCLEVBQUVtL0IsTUFBYzNnQyxFQUFFZ1MsUUFBUXZRLEVBQUUxQixFQUFFZ1MsTUFBTXRRLEVBQUVELEVBQUVtL0IsS0FBS2wvQixFQUFFLENBQUMsT0FBRyxPQUFPRCxFQUFFby9CLE1BQVk3Z0MsRUFBRXlCLEVBQUVvL0IsS0FBS3AvQixFQUFFaS9CLFVBQzllMWdDLEVBQUV5QixFQUFFby9CLEtBQUs3Z0MsRUFBRWlTLFFBQVF4USxFQUFFay9CLG1CQUFtQjl0QixLQUFJN1MsRUFBRWlTLFFBQVEsS0FBS2hTLEVBQUUyMEIsR0FBRTFpQixRQUFRaWEsR0FBRXlJLEdBQUVyekIsRUFBSSxFQUFGdEIsRUFBSSxFQUFJLEVBQUZBLEdBQUtELElBQUVpaEMsR0FBRWpoQyxHQUFVLE1BQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPK2hDLEtBQUt4Z0MsRUFBRSxPQUFPdkIsRUFBRTRSLGNBQWMsT0FBTzdSLEdBQUcsT0FBT0EsRUFBRTZSLGdCQUFnQnJRLElBQUl2QixFQUFFMFIsT0FBTyxNQUFNblEsR0FBZSxFQUFQdkIsRUFBRXF2QixRQUFnQixXQUFIcVAsTUFBaUJ1QyxHQUFFamhDLEdBQWtCLEVBQWZBLEVBQUVzZ0MsZUFBaUJ0Z0MsRUFBRTBSLE9BQU8sT0FBT3V2QixHQUFFamhDLEdBQUcsS0FBSyxLQUFLLEdBQWUsS0FBSyxHQUFHLE9BQU8sS0FBSyxNQUFNZ0YsTUFBTWxGLEVBQUUsSUFBSUUsRUFBRWtHLEtBQU0sQ0FDbFgsU0FBUzg3QixHQUFHamlDLEVBQUVDLEdBQVMsT0FBTnN1QixHQUFHdHVCLEdBQVVBLEVBQUVrRyxLQUFLLEtBQUssRUFBRSxPQUFPMG1CLEdBQUc1c0IsRUFBRWlDLE9BQU82cUIsS0FBaUIsT0FBWi9zQixFQUFFQyxFQUFFMFIsUUFBZTFSLEVBQUUwUixPQUFTLE1BQUgzUixFQUFTLElBQUlDLEdBQUcsS0FBSyxLQUFLLEVBQUUsT0FBT3kwQixLQUFLdkksR0FBRUksSUFBSUosR0FBRUcsSUFBRzJJLEtBQXNCLE9BQWpCajFCLEVBQUVDLEVBQUUwUixVQUE0QixJQUFGM1IsSUFBUUMsRUFBRTBSLE9BQVMsTUFBSDNSLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssRUFBRSxPQUFPMjBCLEdBQUczMEIsR0FBRyxLQUFLLEtBQUssR0FBMEIsR0FBdkJrc0IsR0FBRTBJLElBQXdCLFFBQXJCNzBCLEVBQUVDLEVBQUU0UixnQkFBMkIsT0FBTzdSLEVBQUU4UixXQUFXLENBQUMsR0FBRyxPQUFPN1IsRUFBRXdSLFVBQVUsTUFBTXhNLE1BQU1sRixFQUFFLE1BQU02dkIsSUFBSSxDQUFXLE9BQVMsT0FBbkI1dkIsRUFBRUMsRUFBRTBSLFFBQXNCMVIsRUFBRTBSLE9BQVMsTUFBSDNSLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPa3NCLEdBQUUwSSxJQUFHLEtBQUssS0FBSyxFQUFFLE9BQU9ILEtBQUssS0FBSyxLQUFLLEdBQUcsT0FBTzlDLEdBQUczeEIsRUFBRWlDLEtBQUtxRSxVQUFVLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPeTdCLEtBQzFnQixLQUF5QixRQUFRLE9BQU8sS0FBSyxDQXJCN0MxQyxHQUFHLFNBQVN0L0IsRUFBRUMsR0FBRyxJQUFJLElBQUlDLEVBQUVELEVBQUVnUyxNQUFNLE9BQU8vUixHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFaUcsS0FBSyxJQUFJakcsRUFBRWlHLElBQUluRyxFQUFFcUssWUFBWW5LLEVBQUU4UCxnQkFBZ0IsR0FBRyxJQUFJOVAsRUFBRWlHLEtBQUssT0FBT2pHLEVBQUUrUixNQUFNLENBQUMvUixFQUFFK1IsTUFBTVAsT0FBT3hSLEVBQUVBLEVBQUVBLEVBQUUrUixNQUFNLFFBQVEsQ0FBQyxHQUFHL1IsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRWdTLFNBQVMsQ0FBQyxHQUFHLE9BQU9oUyxFQUFFd1IsUUFBUXhSLEVBQUV3UixTQUFTelIsRUFBRSxPQUFPQyxFQUFFQSxFQUFFd1IsTUFBTSxDQUFDeFIsRUFBRWdTLFFBQVFSLE9BQU94UixFQUFFd1IsT0FBT3hSLEVBQUVBLEVBQUVnUyxPQUFPLENBQUMsRUFBRXF0QixHQUFHLFdBQVcsRUFDeFRDLEdBQUcsU0FBU3gvQixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBRyxJQUFJQyxFQUFFekIsRUFBRTB2QixjQUFjLEdBQUdqdUIsSUFBSUQsRUFBRSxDQUFDeEIsRUFBRUMsRUFBRStQLFVBQVV1a0IsR0FBR0gsR0FBR2ppQixTQUFTLElBQTRSeFEsRUFBeFJELEVBQUUsS0FBSyxPQUFPeEIsR0FBRyxJQUFLLFFBQVF1QixFQUFFc0csRUFBRy9ILEVBQUV5QixHQUFHRCxFQUFFdUcsRUFBRy9ILEVBQUV3QixHQUFHRSxFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVNELEVBQUVxRCxFQUFFLENBQUMsRUFBRXJELEVBQUUsQ0FBQ2tHLFdBQU0sSUFBU25HLEVBQUVzRCxFQUFFLENBQUMsRUFBRXRELEVBQUUsQ0FBQ21HLFdBQU0sSUFBU2pHLEVBQUUsR0FBRyxNQUFNLElBQUssV0FBV0QsRUFBRTJILEdBQUdwSixFQUFFeUIsR0FBR0QsRUFBRTRILEdBQUdwSixFQUFFd0IsR0FBR0UsRUFBRSxHQUFHLE1BQU0sUUFBUSxtQkFBb0JELEVBQUUrL0IsU0FBUyxtQkFBb0JoZ0MsRUFBRWdnQyxVQUFVeGhDLEVBQUV5aEMsUUFBUW5YLElBQXlCLElBQUkxa0IsS0FBekJzSixHQUFHaFAsRUFBRXNCLEdBQVN0QixFQUFFLEtBQWN1QixFQUFFLElBQUlELEVBQUVMLGVBQWV5RSxJQUFJbkUsRUFBRU4sZUFBZXlFLElBQUksTUFBTW5FLEVBQUVtRSxHQUFHLEdBQUcsVUFBVUEsRUFBRSxDQUFDLElBQUlDLEVBQUVwRSxFQUFFbUUsR0FBRyxJQUFJakUsS0FBS2tFLEVBQUVBLEVBQUUxRSxlQUFlUSxLQUNqZnpCLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFeUIsR0FBRyxHQUFHLEtBQUssNEJBQTRCaUUsR0FBRyxhQUFhQSxHQUFHLG1DQUFtQ0EsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSXBGLEVBQUdXLGVBQWV5RSxHQUFHbEUsSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUl5TyxLQUFLdkssRUFBRSxPQUFPLElBQUlBLEtBQUtwRSxFQUFFLENBQUMsSUFBSXNFLEVBQUV0RSxFQUFFb0UsR0FBeUIsR0FBdEJDLEVBQUUsTUFBTXBFLEVBQUVBLEVBQUVtRSxRQUFHLEVBQVVwRSxFQUFFTCxlQUFleUUsSUFBSUUsSUFBSUQsSUFBSSxNQUFNQyxHQUFHLE1BQU1ELEdBQUcsR0FBRyxVQUFVRCxFQUFFLEdBQUdDLEVBQUUsQ0FBQyxJQUFJbEUsS0FBS2tFLEdBQUdBLEVBQUUxRSxlQUFlUSxJQUFJbUUsR0FBR0EsRUFBRTNFLGVBQWVRLEtBQUt6QixJQUFJQSxFQUFFLENBQUMsR0FBR0EsRUFBRXlCLEdBQUcsSUFBSSxJQUFJQSxLQUFLbUUsRUFBRUEsRUFBRTNFLGVBQWVRLElBQUlrRSxFQUFFbEUsS0FBS21FLEVBQUVuRSxLQUFLekIsSUFBSUEsRUFBRSxDQUFDLEdBQUdBLEVBQUV5QixHQUFHbUUsRUFBRW5FLEdBQUcsTUFBTXpCLElBQUl3QixJQUFJQSxFQUFFLElBQUlBLEVBQUV5TyxLQUFLdkssRUFDcGYxRixJQUFJQSxFQUFFNEYsTUFBTSw0QkFBNEJGLEdBQUdFLEVBQUVBLEVBQUVBLEVBQUU0a0IsWUFBTyxFQUFPN2tCLEVBQUVBLEVBQUVBLEVBQUU2a0IsWUFBTyxFQUFPLE1BQU01a0IsR0FBR0QsSUFBSUMsSUFBSXBFLEVBQUVBLEdBQUcsSUFBSXlPLEtBQUt2SyxFQUFFRSxJQUFJLGFBQWFGLEVBQUUsaUJBQWtCRSxHQUFHLGlCQUFrQkEsSUFBSXBFLEVBQUVBLEdBQUcsSUFBSXlPLEtBQUt2SyxFQUFFLEdBQUdFLEdBQUcsbUNBQW1DRixHQUFHLDZCQUE2QkEsSUFBSXBGLEVBQUdXLGVBQWV5RSxJQUFJLE1BQU1FLEdBQUcsYUFBYUYsR0FBR3VpQixHQUFFLFNBQVNub0IsR0FBRzBCLEdBQUdtRSxJQUFJQyxJQUFJcEUsRUFBRSxNQUFNQSxFQUFFQSxHQUFHLElBQUl5TyxLQUFLdkssRUFBRUUsR0FBRyxDQUFDNUYsSUFBSXdCLEVBQUVBLEdBQUcsSUFBSXlPLEtBQUssUUFBUWpRLEdBQUcsSUFBSTBGLEVBQUVsRSxHQUFLekIsRUFBRTh5QixZQUFZbnRCLEtBQUUzRixFQUFFMFIsT0FBTyxFQUFDLENBQUMsRUFBRTh0QixHQUFHLFNBQVN6L0IsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUd0QixJQUFJc0IsSUFBSXZCLEVBQUUwUixPQUFPLEVBQUUsRUFrQmxiLElBQUl1d0IsSUFBRyxFQUFHQyxJQUFFLEVBQUdDLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFROWhDLElBQUkraEMsR0FBRSxLQUFLLFNBQVNDLEdBQUd2aUMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFZ3dCLElBQUksR0FBRyxPQUFPOXZCLEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxLQUFLLENBQUMsTUFBTXNCLEdBQUdnaEMsR0FBRXhpQyxFQUFFQyxFQUFFdUIsRUFBRSxNQUFNdEIsRUFBRWlTLFFBQVEsSUFBSSxDQUFDLFNBQVNzd0IsR0FBR3ppQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlBLEdBQUcsQ0FBQyxNQUFNc0IsR0FBR2doQyxHQUFFeGlDLEVBQUVDLEVBQUV1QixFQUFFLENBQUMsQ0FBQyxJQUFJa2hDLElBQUcsRUFJeFIsU0FBU0MsR0FBRzNpQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFdkIsRUFBRTh5QixZQUF5QyxHQUFHLFFBQWhDdnhCLEVBQUUsT0FBT0EsRUFBRUEsRUFBRW8yQixXQUFXLE1BQWlCLENBQUMsSUFBSW4yQixFQUFFRCxFQUFFQSxFQUFFMnZCLEtBQUssRUFBRSxDQUFDLElBQUkxdkIsRUFBRTBFLElBQUluRyxLQUFLQSxFQUFFLENBQUMsSUFBSTBCLEVBQUVELEVBQUUyMkIsUUFBUTMyQixFQUFFMjJCLGFBQVEsT0FBTyxJQUFTMTJCLEdBQUcrZ0MsR0FBR3hpQyxFQUFFQyxFQUFFd0IsRUFBRSxDQUFDRCxFQUFFQSxFQUFFMHZCLElBQUksT0FBTzF2QixJQUFJRCxFQUFFLENBQUMsQ0FBQyxTQUFTb2hDLEdBQUc1aUMsRUFBRUMsR0FBZ0QsR0FBRyxRQUFoQ0EsRUFBRSxRQUFsQkEsRUFBRUEsRUFBRTh5QixhQUF1Qjl5QixFQUFFMjNCLFdBQVcsTUFBaUIsQ0FBQyxJQUFJMTNCLEVBQUVELEVBQUVBLEVBQUVreEIsS0FBSyxFQUFFLENBQUMsSUFBSWp4QixFQUFFaUcsSUFBSW5HLEtBQUtBLEVBQUUsQ0FBQyxJQUFJd0IsRUFBRXRCLEVBQUVpNEIsT0FBT2o0QixFQUFFazRCLFFBQVE1MkIsR0FBRyxDQUFDdEIsRUFBRUEsRUFBRWl4QixJQUFJLE9BQU9qeEIsSUFBSUQsRUFBRSxDQUFDLENBQUMsU0FBUzRpQyxHQUFHN2lDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWd3QixJQUFJLEdBQUcsT0FBTy92QixFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRWdRLFVBQWlCaFEsRUFBRW1HLElBQThCbkcsRUFBRUUsRUFBRSxtQkFBb0JELEVBQUVBLEVBQUVELEdBQUdDLEVBQUVrUyxRQUFRblMsQ0FBQyxDQUFDLENBQ2xmLFNBQVM4aUMsR0FBRzlpQyxHQUFHLElBQUlDLEVBQUVELEVBQUV5UixVQUFVLE9BQU94UixJQUFJRCxFQUFFeVIsVUFBVSxLQUFLcXhCLEdBQUc3aUMsSUFBSUQsRUFBRWlTLE1BQU0sS0FBS2pTLEVBQUUrdUIsVUFBVSxLQUFLL3VCLEVBQUVrUyxRQUFRLEtBQUssSUFBSWxTLEVBQUVtRyxLQUFvQixRQUFkbEcsRUFBRUQsRUFBRWdRLG9CQUE0Qi9QLEVBQUUyckIsV0FBVzNyQixFQUFFNHJCLFdBQVc1ckIsRUFBRW1vQixXQUFXbm9CLEVBQUU2ckIsV0FBVzdyQixFQUFFOHJCLEtBQU0vckIsRUFBRWdRLFVBQVUsS0FBS2hRLEVBQUUwUixPQUFPLEtBQUsxUixFQUFFaXlCLGFBQWEsS0FBS2p5QixFQUFFMHZCLGNBQWMsS0FBSzF2QixFQUFFNlIsY0FBYyxLQUFLN1IsRUFBRWl2QixhQUFhLEtBQUtqdkIsRUFBRWdRLFVBQVUsS0FBS2hRLEVBQUUreUIsWUFBWSxJQUFJLENBQUMsU0FBU2dRLEdBQUcvaUMsR0FBRyxPQUFPLElBQUlBLEVBQUVtRyxLQUFLLElBQUluRyxFQUFFbUcsS0FBSyxJQUFJbkcsRUFBRW1HLEdBQUcsQ0FDbmEsU0FBUzY4QixHQUFHaGpDLEdBQUdBLEVBQUUsT0FBTyxDQUFDLEtBQUssT0FBT0EsRUFBRWtTLFNBQVMsQ0FBQyxHQUFHLE9BQU9sUyxFQUFFMFIsUUFBUXF4QixHQUFHL2lDLEVBQUUwUixRQUFRLE9BQU8sS0FBSzFSLEVBQUVBLEVBQUUwUixNQUFNLENBQTJCLElBQTFCMVIsRUFBRWtTLFFBQVFSLE9BQU8xUixFQUFFMFIsT0FBVzFSLEVBQUVBLEVBQUVrUyxRQUFRLElBQUlsUyxFQUFFbUcsS0FBSyxJQUFJbkcsRUFBRW1HLEtBQUssS0FBS25HLEVBQUVtRyxLQUFLLENBQUMsR0FBVyxFQUFSbkcsRUFBRTJSLE1BQVEsU0FBUzNSLEVBQUUsR0FBRyxPQUFPQSxFQUFFaVMsT0FBTyxJQUFJalMsRUFBRW1HLElBQUksU0FBU25HLEVBQU9BLEVBQUVpUyxNQUFNUCxPQUFPMVIsRUFBRUEsRUFBRUEsRUFBRWlTLEtBQUssQ0FBQyxLQUFhLEVBQVJqUyxFQUFFMlIsT0FBUyxPQUFPM1IsRUFBRWdRLFNBQVMsQ0FBQyxDQUN6VCxTQUFTaXpCLEdBQUdqakMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJc0IsRUFBRXhCLEVBQUVtRyxJQUFJLEdBQUcsSUFBSTNFLEdBQUcsSUFBSUEsRUFBRXhCLEVBQUVBLEVBQUVnUSxVQUFVL1AsRUFBRSxJQUFJQyxFQUFFd0ssU0FBU3hLLEVBQUV3UCxXQUFXd3pCLGFBQWFsakMsRUFBRUMsR0FBR0MsRUFBRWdqQyxhQUFhbGpDLEVBQUVDLElBQUksSUFBSUMsRUFBRXdLLFVBQVV6SyxFQUFFQyxFQUFFd1AsWUFBYXd6QixhQUFhbGpDLEVBQUVFLElBQUtELEVBQUVDLEdBQUltSyxZQUFZckssR0FBNEIsT0FBeEJFLEVBQUVBLEVBQUVpakMsc0JBQTBDLE9BQU9sakMsRUFBRXdoQyxVQUFVeGhDLEVBQUV3aEMsUUFBUW5YLFVBQVUsR0FBRyxJQUFJOW9CLEdBQWMsUUFBVnhCLEVBQUVBLEVBQUVpUyxPQUFnQixJQUFJZ3hCLEdBQUdqakMsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRUEsRUFBRWtTLFFBQVEsT0FBT2xTLEdBQUdpakMsR0FBR2pqQyxFQUFFQyxFQUFFQyxHQUFHRixFQUFFQSxFQUFFa1MsT0FBTyxDQUMxWCxTQUFTa3hCLEdBQUdwakMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJc0IsRUFBRXhCLEVBQUVtRyxJQUFJLEdBQUcsSUFBSTNFLEdBQUcsSUFBSUEsRUFBRXhCLEVBQUVBLEVBQUVnUSxVQUFVL1AsRUFBRUMsRUFBRWdqQyxhQUFhbGpDLEVBQUVDLEdBQUdDLEVBQUVtSyxZQUFZckssUUFBUSxHQUFHLElBQUl3QixHQUFjLFFBQVZ4QixFQUFFQSxFQUFFaVMsT0FBZ0IsSUFBSW14QixHQUFHcGpDLEVBQUVDLEVBQUVDLEdBQUdGLEVBQUVBLEVBQUVrUyxRQUFRLE9BQU9sUyxHQUFHb2pDLEdBQUdwakMsRUFBRUMsRUFBRUMsR0FBR0YsRUFBRUEsRUFBRWtTLE9BQU8sQ0FBQyxJQUFJbXhCLEdBQUUsS0FBS0MsSUFBRyxFQUFHLFNBQVNDLEdBQUd2akMsRUFBRUMsRUFBRUMsR0FBRyxJQUFJQSxFQUFFQSxFQUFFK1IsTUFBTSxPQUFPL1IsR0FBR3NqQyxHQUFHeGpDLEVBQUVDLEVBQUVDLEdBQUdBLEVBQUVBLEVBQUVnUyxPQUFPLENBQ25SLFNBQVNzeEIsR0FBR3hqQyxFQUFFQyxFQUFFQyxHQUFHLEdBQUcyVCxJQUFJLG1CQUFvQkEsR0FBRzR2QixxQkFBcUIsSUFBSTV2QixHQUFHNHZCLHFCQUFxQjd2QixHQUFHMVQsRUFBRSxDQUFDLE1BQU0yRixHQUFHLENBQUMsT0FBTzNGLEVBQUVpRyxLQUFLLEtBQUssRUFBRWc4QixJQUFHSSxHQUFHcmlDLEVBQUVELEdBQUcsS0FBSyxFQUFFLElBQUl1QixFQUFFNmhDLEdBQUU1aEMsRUFBRTZoQyxHQUFHRCxHQUFFLEtBQUtFLEdBQUd2akMsRUFBRUMsRUFBRUMsR0FBT29qQyxHQUFHN2hDLEVBQUUsUUFBVDRoQyxHQUFFN2hDLEtBQWtCOGhDLElBQUl0akMsRUFBRXFqQyxHQUFFbmpDLEVBQUVBLEVBQUU4UCxVQUFVLElBQUloUSxFQUFFMEssU0FBUzFLLEVBQUUwUCxXQUFXdEYsWUFBWWxLLEdBQUdGLEVBQUVvSyxZQUFZbEssSUFBSW1qQyxHQUFFajVCLFlBQVlsSyxFQUFFOFAsWUFBWSxNQUFNLEtBQUssR0FBRyxPQUFPcXpCLEtBQUlDLElBQUl0akMsRUFBRXFqQyxHQUFFbmpDLEVBQUVBLEVBQUU4UCxVQUFVLElBQUloUSxFQUFFMEssU0FBUzZnQixHQUFHdnJCLEVBQUUwUCxXQUFXeFAsR0FBRyxJQUFJRixFQUFFMEssVUFBVTZnQixHQUFHdnJCLEVBQUVFLEdBQUd5WCxHQUFHM1gsSUFBSXVyQixHQUFHOFgsR0FBRW5qQyxFQUFFOFAsWUFBWSxNQUFNLEtBQUssRUFBRXhPLEVBQUU2aEMsR0FBRTVoQyxFQUFFNmhDLEdBQUdELEdBQUVuakMsRUFBRThQLFVBQVVtSCxjQUFjbXNCLElBQUcsRUFDbGZDLEdBQUd2akMsRUFBRUMsRUFBRUMsR0FBR21qQyxHQUFFN2hDLEVBQUU4aEMsR0FBRzdoQyxFQUFFLE1BQU0sS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUkwZ0MsSUFBb0IsUUFBaEIzZ0MsRUFBRXRCLEVBQUU2eUIsY0FBc0MsUUFBZnZ4QixFQUFFQSxFQUFFbzJCLFlBQXNCLENBQUNuMkIsRUFBRUQsRUFBRUEsRUFBRTJ2QixLQUFLLEVBQUUsQ0FBQyxJQUFJenZCLEVBQUVELEVBQUVFLEVBQUVELEVBQUUwMkIsUUFBUTEyQixFQUFFQSxFQUFFeUUsU0FBSSxJQUFTeEUsSUFBVyxFQUFGRCxHQUFzQixFQUFGQSxJQUFmK2dDLEdBQUd2aUMsRUFBRUQsRUFBRTBCLEdBQXlCRixFQUFFQSxFQUFFMHZCLElBQUksT0FBTzF2QixJQUFJRCxFQUFFLENBQUMraEMsR0FBR3ZqQyxFQUFFQyxFQUFFQyxHQUFHLE1BQU0sS0FBSyxFQUFFLElBQUlpaUMsS0FBSUksR0FBR3JpQyxFQUFFRCxHQUFpQixtQkFBZHVCLEVBQUV0QixFQUFFOFAsV0FBZ0MwekIsc0JBQXNCLElBQUlsaUMsRUFBRW12QixNQUFNendCLEVBQUV3dkIsY0FBY2x1QixFQUFFbTZCLE1BQU16N0IsRUFBRTJSLGNBQWNyUSxFQUFFa2lDLHNCQUFzQixDQUFDLE1BQU03OUIsR0FBRzI4QixHQUFFdGlDLEVBQUVELEVBQUU0RixFQUFFLENBQUMwOUIsR0FBR3ZqQyxFQUFFQyxFQUFFQyxHQUFHLE1BQU0sS0FBSyxHQUFHcWpDLEdBQUd2akMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLEtBQUssR0FBVSxFQUFQQSxFQUFFb3ZCLE1BQVE2UyxJQUFHM2dDLEVBQUUyZ0MsS0FBSSxPQUNoZmppQyxFQUFFMlIsY0FBYzB4QixHQUFHdmpDLEVBQUVDLEVBQUVDLEdBQUdpaUMsR0FBRTNnQyxHQUFHK2hDLEdBQUd2akMsRUFBRUMsRUFBRUMsR0FBRyxNQUFNLFFBQVFxakMsR0FBR3ZqQyxFQUFFQyxFQUFFQyxHQUFHLENBQUMsU0FBU3lqQyxHQUFHM2pDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSt5QixZQUFZLEdBQUcsT0FBTzl5QixFQUFFLENBQUNELEVBQUUreUIsWUFBWSxLQUFLLElBQUk3eUIsRUFBRUYsRUFBRWdRLFVBQVUsT0FBTzlQLElBQUlBLEVBQUVGLEVBQUVnUSxVQUFVLElBQUlveUIsSUFBSW5pQyxFQUFFc0MsU0FBUSxTQUFTdEMsR0FBRyxJQUFJdUIsRUFBRW9pQyxHQUFHamIsS0FBSyxLQUFLM29CLEVBQUVDLEdBQUdDLEVBQUVtb0IsSUFBSXBvQixLQUFLQyxFQUFFUyxJQUFJVixHQUFHQSxFQUFFbXJCLEtBQUs1cEIsRUFBRUEsR0FBRyxHQUFFLENBQUMsQ0FDelEsU0FBU3FpQyxHQUFHN2pDLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTh1QixVQUFVLEdBQUcsT0FBTzd1QixFQUFFLElBQUksSUFBSXNCLEVBQUUsRUFBRUEsRUFBRXRCLEVBQUVFLE9BQU9vQixJQUFJLENBQUMsSUFBSUMsRUFBRXZCLEVBQUVzQixHQUFHLElBQUksSUFBSUUsRUFBRTFCLEVBQUUyQixFQUFFMUIsRUFBRTRGLEVBQUVsRSxFQUFFM0IsRUFBRSxLQUFLLE9BQU82RixHQUFHLENBQUMsT0FBT0EsRUFBRU0sS0FBSyxLQUFLLEVBQUVrOUIsR0FBRXg5QixFQUFFbUssVUFBVXN6QixJQUFHLEVBQUcsTUFBTXRqQyxFQUFFLEtBQUssRUFBNEMsS0FBSyxFQUFFcWpDLEdBQUV4OUIsRUFBRW1LLFVBQVVtSCxjQUFjbXNCLElBQUcsRUFBRyxNQUFNdGpDLEVBQUU2RixFQUFFQSxFQUFFNkwsTUFBTSxDQUFDLEdBQUcsT0FBTzJ4QixHQUFFLE1BQU1wK0IsTUFBTWxGLEVBQUUsTUFBTXlqQyxHQUFHOWhDLEVBQUVDLEVBQUVGLEdBQUc0aEMsR0FBRSxLQUFLQyxJQUFHLEVBQUcsSUFBSXg5QixFQUFFckUsRUFBRWdRLFVBQVUsT0FBTzNMLElBQUlBLEVBQUU0TCxPQUFPLE1BQU1qUSxFQUFFaVEsT0FBTyxJQUFJLENBQUMsTUFBTTlMLEdBQUc0OEIsR0FBRS9nQyxFQUFFeEIsRUFBRTJGLEVBQUUsQ0FBQyxDQUFDLEdBQWtCLE1BQWYzRixFQUFFc2dDLGFBQW1CLElBQUl0Z0MsRUFBRUEsRUFBRWdTLE1BQU0sT0FBT2hTLEdBQUc2akMsR0FBRzdqQyxFQUFFRCxHQUFHQyxFQUFFQSxFQUFFaVMsT0FBTyxDQUNqZSxTQUFTNHhCLEdBQUc5akMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFeVIsVUFBVWpRLEVBQUV4QixFQUFFMlIsTUFBTSxPQUFPM1IsRUFBRW1HLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFpQixHQUFkMDlCLEdBQUc1akMsRUFBRUQsR0FBRytqQyxHQUFHL2pDLEdBQVEsRUFBRndCLEVBQUksQ0FBQyxJQUFJbWhDLEdBQUcsRUFBRTNpQyxFQUFFQSxFQUFFMFIsUUFBUWt4QixHQUFHLEVBQUU1aUMsRUFBRSxDQUFDLE1BQU0rb0IsR0FBR3laLEdBQUV4aUMsRUFBRUEsRUFBRTBSLE9BQU9xWCxFQUFFLENBQUMsSUFBSTRaLEdBQUcsRUFBRTNpQyxFQUFFQSxFQUFFMFIsT0FBTyxDQUFDLE1BQU1xWCxHQUFHeVosR0FBRXhpQyxFQUFFQSxFQUFFMFIsT0FBT3FYLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFOGEsR0FBRzVqQyxFQUFFRCxHQUFHK2pDLEdBQUcvakMsR0FBSyxJQUFGd0IsR0FBTyxPQUFPdEIsR0FBR3FpQyxHQUFHcmlDLEVBQUVBLEVBQUV3UixRQUFRLE1BQU0sS0FBSyxFQUFnRCxHQUE5Q215QixHQUFHNWpDLEVBQUVELEdBQUcrakMsR0FBRy9qQyxHQUFLLElBQUZ3QixHQUFPLE9BQU90QixHQUFHcWlDLEdBQUdyaUMsRUFBRUEsRUFBRXdSLFFBQW1CLEdBQVIxUixFQUFFMlIsTUFBUyxDQUFDLElBQUlsUSxFQUFFekIsRUFBRWdRLFVBQVUsSUFBSXhGLEdBQUcvSSxFQUFFLEdBQUcsQ0FBQyxNQUFNc25CLEdBQUd5WixHQUFFeGlDLEVBQUVBLEVBQUUwUixPQUFPcVgsRUFBRSxDQUFDLENBQUMsR0FBSyxFQUFGdm5CLEdBQW9CLE9BQWRDLEVBQUV6QixFQUFFZ1EsV0FBbUIsQ0FBQyxJQUFJdE8sRUFBRTFCLEVBQUUwdkIsY0FBYy90QixFQUFFLE9BQU96QixFQUFFQSxFQUFFd3ZCLGNBQWNodUIsRUFBRW1FLEVBQUU3RixFQUFFa0MsS0FBSzRELEVBQUU5RixFQUFFK3lCLFlBQ2plLEdBQW5CL3lCLEVBQUUreUIsWUFBWSxLQUFRLE9BQU9qdEIsRUFBRSxJQUFJLFVBQVVELEdBQUcsVUFBVW5FLEVBQUVRLE1BQU0sTUFBTVIsRUFBRXVFLE1BQU1zQyxFQUFHOUcsRUFBRUMsR0FBR3lOLEdBQUd0SixFQUFFbEUsR0FBRyxJQUFJaUUsRUFBRXVKLEdBQUd0SixFQUFFbkUsR0FBRyxJQUFJQyxFQUFFLEVBQUVBLEVBQUVtRSxFQUFFMUYsT0FBT3VCLEdBQUcsRUFBRSxDQUFDLElBQUlxUCxFQUFFbEwsRUFBRW5FLEdBQUdxdkIsRUFBRWxyQixFQUFFbkUsRUFBRSxHQUFHLFVBQVVxUCxFQUFFdEQsR0FBR2pNLEVBQUV1dkIsR0FBRyw0QkFBNEJoZ0IsRUFBRWxILEdBQUdySSxFQUFFdXZCLEdBQUcsYUFBYWhnQixFQUFFeEcsR0FBRy9JLEVBQUV1dkIsR0FBR3B1QixFQUFHbkIsRUFBRXVQLEVBQUVnZ0IsRUFBRXByQixFQUFFLENBQUMsT0FBT0MsR0FBRyxJQUFLLFFBQVEyQyxFQUFHL0csRUFBRUMsR0FBRyxNQUFNLElBQUssV0FBVzhILEdBQUcvSCxFQUFFQyxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUl1dkIsRUFBRXh2QixFQUFFeUcsY0FBY201QixZQUFZNS9CLEVBQUV5RyxjQUFjbTVCLGNBQWMzL0IsRUFBRTQvQixTQUFTLElBQUlwUSxFQUFFeHZCLEVBQUVpRyxNQUFNLE1BQU11cEIsRUFBRW5vQixHQUFHdEgsSUFBSUMsRUFBRTQvQixTQUFTcFEsR0FBRSxHQUFJRCxNQUFNdnZCLEVBQUU0L0IsV0FBVyxNQUFNNS9CLEVBQUV1RyxhQUFhYyxHQUFHdEgsSUFBSUMsRUFBRTQvQixTQUNuZjUvQixFQUFFdUcsY0FBYSxHQUFJYyxHQUFHdEgsSUFBSUMsRUFBRTQvQixTQUFTNS9CLEVBQUU0L0IsU0FBUyxHQUFHLElBQUcsSUFBSzcvQixFQUFFb3FCLElBQUlucUIsQ0FBQyxDQUFDLE1BQU1xbkIsR0FBR3laLEdBQUV4aUMsRUFBRUEsRUFBRTBSLE9BQU9xWCxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBZ0IsR0FBZDhhLEdBQUc1akMsRUFBRUQsR0FBRytqQyxHQUFHL2pDLEdBQVEsRUFBRndCLEVBQUksQ0FBQyxHQUFHLE9BQU94QixFQUFFZ1EsVUFBVSxNQUFNL0ssTUFBTWxGLEVBQUUsTUFBTTBCLEVBQUV6QixFQUFFZ1EsVUFBVXRPLEVBQUUxQixFQUFFMHZCLGNBQWMsSUFBSWp1QixFQUFFa0osVUFBVWpKLENBQUMsQ0FBQyxNQUFNcW5CLEdBQUd5WixHQUFFeGlDLEVBQUVBLEVBQUUwUixPQUFPcVgsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQWdCLEdBQWQ4YSxHQUFHNWpDLEVBQUVELEdBQUcrakMsR0FBRy9qQyxHQUFRLEVBQUZ3QixHQUFLLE9BQU90QixHQUFHQSxFQUFFMlIsY0FBY3FGLGFBQWEsSUFBSVMsR0FBRzFYLEVBQUVrWCxjQUFjLENBQUMsTUFBTTRSLEdBQUd5WixHQUFFeGlDLEVBQUVBLEVBQUUwUixPQUFPcVgsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUc0RyxRQUFROGEsR0FBRzVqQyxFQUNuZkQsR0FBRytqQyxHQUFHL2pDLFNBSjRZLEtBQUssR0FBRzZqQyxHQUFHNWpDLEVBQUVELEdBQUcrakMsR0FBRy9qQyxHQUFxQixNQUFsQnlCLEVBQUV6QixFQUFFaVMsT0FBUU4sUUFBYWpRLEVBQUUsT0FBT0QsRUFBRW9RLGNBQWNwUSxFQUFFdU8sVUFBVWcwQixTQUFTdGlDLEdBQUdBLEdBQ2xmLE9BQU9ELEVBQUVnUSxXQUFXLE9BQU9oUSxFQUFFZ1EsVUFBVUksZ0JBQWdCb3lCLEdBQUdueEIsT0FBUSxFQUFGdFIsR0FBS21pQyxHQUFHM2pDLEdBQUcsTUFBTSxLQUFLLEdBQXNGLEdBQW5GZ1IsRUFBRSxPQUFPOVEsR0FBRyxPQUFPQSxFQUFFMlIsY0FBcUIsRUFBUDdSLEVBQUVzdkIsTUFBUTZTLElBQUd2OEIsRUFBRXU4QixLQUFJbnhCLEVBQUU2eUIsR0FBRzVqQyxFQUFFRCxHQUFHbWlDLEdBQUV2OEIsR0FBR2krQixHQUFHNWpDLEVBQUVELEdBQUcrakMsR0FBRy9qQyxHQUFRLEtBQUZ3QixFQUFPLENBQTBCLEdBQXpCb0UsRUFBRSxPQUFPNUYsRUFBRTZSLGVBQWtCN1IsRUFBRWdRLFVBQVVnMEIsU0FBU3ArQixLQUFLb0wsR0FBZSxFQUFQaFIsRUFBRXN2QixLQUFRLElBQUlnVCxHQUFFdGlDLEVBQUVnUixFQUFFaFIsRUFBRWlTLE1BQU0sT0FBT2pCLEdBQUcsQ0FBQyxJQUFJZ2dCLEVBQUVzUixHQUFFdHhCLEVBQUUsT0FBT3N4QixJQUFHLENBQWUsT0FBVnBSLEdBQUpELEVBQUVxUixJQUFNcndCLE1BQWFnZixFQUFFOXFCLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHdzhCLEdBQUcsRUFBRTFSLEVBQUVBLEVBQUV2ZixRQUFRLE1BQU0sS0FBSyxFQUFFNndCLEdBQUd0UixFQUFFQSxFQUFFdmYsUUFBUSxJQUFJb1gsRUFBRW1JLEVBQUVqaEIsVUFBVSxHQUFHLG1CQUFvQjhZLEVBQUU0YSxxQkFBcUIsQ0FBQ2xpQyxFQUFFeXZCLEVBQUUvd0IsRUFBRSt3QixFQUFFdmYsT0FBTyxJQUFJelIsRUFBRXVCLEVBQUVzbkIsRUFBRTZILE1BQ3BmMXdCLEVBQUV5dkIsY0FBYzVHLEVBQUU2UyxNQUFNMTdCLEVBQUU0UixjQUFjaVgsRUFBRTRhLHNCQUFzQixDQUFDLE1BQU0zYSxHQUFHeVosR0FBRWhoQyxFQUFFdEIsRUFBRTZvQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRXdaLEdBQUd0UixFQUFFQSxFQUFFdmYsUUFBUSxNQUFNLEtBQUssR0FBRyxHQUFHLE9BQU91ZixFQUFFcGYsY0FBYyxDQUFDcXlCLEdBQUdsVCxHQUFHLFFBQVEsRUFBRSxPQUFPRSxHQUFHQSxFQUFFeGYsT0FBT3VmLEVBQUVxUixHQUFFcFIsR0FBR2dULEdBQUdsVCxFQUFFLENBQUNoZ0IsRUFBRUEsRUFBRWtCLE9BQU8sQ0FBQ2xTLEVBQUUsSUFBSWdSLEVBQUUsS0FBS2dnQixFQUFFaHhCLElBQUksQ0FBQyxHQUFHLElBQUlneEIsRUFBRTdxQixLQUFLLEdBQUcsT0FBTzZLLEVBQUUsQ0FBQ0EsRUFBRWdnQixFQUFFLElBQUl2dkIsRUFBRXV2QixFQUFFaGhCLFVBQVVwSyxFQUFhLG1CQUFWbEUsRUFBRUQsRUFBRWtNLE9BQTRCRSxZQUFZbk0sRUFBRW1NLFlBQVksVUFBVSxPQUFPLGFBQWFuTSxFQUFFeWlDLFFBQVEsUUFBU3QrQixFQUFFbXJCLEVBQUVoaEIsVUFBa0NyTyxFQUFFLE9BQTFCbUUsRUFBRWtyQixFQUFFdEIsY0FBYy9oQixRQUE4QjdILEVBQUUzRSxlQUFlLFdBQVcyRSxFQUFFcStCLFFBQVEsS0FBS3QrQixFQUFFOEgsTUFBTXcyQixRQUN6ZjEyQixHQUFHLFVBQVU5TCxHQUFHLENBQUMsTUFBTW9uQixHQUFHeVosR0FBRXhpQyxFQUFFQSxFQUFFMFIsT0FBT3FYLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSWlJLEVBQUU3cUIsS0FBSyxHQUFHLE9BQU82SyxFQUFFLElBQUlnZ0IsRUFBRWhoQixVQUFVckYsVUFBVS9FLEVBQUUsR0FBR29yQixFQUFFdEIsYUFBYSxDQUFDLE1BQU0zRyxHQUFHeVosR0FBRXhpQyxFQUFFQSxFQUFFMFIsT0FBT3FYLEVBQUUsT0FBTyxJQUFJLEtBQUtpSSxFQUFFN3FCLEtBQUssS0FBSzZxQixFQUFFN3FCLEtBQUssT0FBTzZxQixFQUFFbmYsZUFBZW1mLElBQUloeEIsSUFBSSxPQUFPZ3hCLEVBQUUvZSxNQUFNLENBQUMrZSxFQUFFL2UsTUFBTVAsT0FBT3NmLEVBQUVBLEVBQUVBLEVBQUUvZSxNQUFNLFFBQVEsQ0FBQyxHQUFHK2UsSUFBSWh4QixFQUFFLE1BQU1BLEVBQUUsS0FBSyxPQUFPZ3hCLEVBQUU5ZSxTQUFTLENBQUMsR0FBRyxPQUFPOGUsRUFBRXRmLFFBQVFzZixFQUFFdGYsU0FBUzFSLEVBQUUsTUFBTUEsRUFBRWdSLElBQUlnZ0IsSUFBSWhnQixFQUFFLE1BQU1nZ0IsRUFBRUEsRUFBRXRmLE1BQU0sQ0FBQ1YsSUFBSWdnQixJQUFJaGdCLEVBQUUsTUFBTWdnQixFQUFFOWUsUUFBUVIsT0FBT3NmLEVBQUV0ZixPQUFPc2YsRUFBRUEsRUFBRTllLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHMnhCLEdBQUc1akMsRUFBRUQsR0FBRytqQyxHQUFHL2pDLEdBQUssRUFBRndCLEdBQUttaUMsR0FBRzNqQyxHQUFTLEtBQUssSUFDdGQsQ0FBQyxTQUFTK2pDLEdBQUcvakMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFMlIsTUFBTSxHQUFLLEVBQUYxUixFQUFJLENBQUMsSUFBSUQsRUFBRSxDQUFDLElBQUksSUFBSUUsRUFBRUYsRUFBRTBSLE9BQU8sT0FBT3hSLEdBQUcsQ0FBQyxHQUFHNmlDLEdBQUc3aUMsR0FBRyxDQUFDLElBQUlzQixFQUFFdEIsRUFBRSxNQUFNRixDQUFDLENBQUNFLEVBQUVBLEVBQUV3UixNQUFNLENBQUMsTUFBTXpNLE1BQU1sRixFQUFFLEtBQU0sQ0FBQyxPQUFPeUIsRUFBRTJFLEtBQUssS0FBSyxFQUFFLElBQUkxRSxFQUFFRCxFQUFFd08sVUFBa0IsR0FBUnhPLEVBQUVtUSxRQUFXbkgsR0FBRy9JLEVBQUUsSUFBSUQsRUFBRW1RLFFBQVEsSUFBZ0J5eEIsR0FBR3BqQyxFQUFUZ2pDLEdBQUdoakMsR0FBVXlCLEdBQUcsTUFBTSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUlFLEVBQUVILEVBQUV3TyxVQUFVbUgsY0FBc0I4ckIsR0FBR2pqQyxFQUFUZ2pDLEdBQUdoakMsR0FBVTJCLEdBQUcsTUFBTSxRQUFRLE1BQU1zRCxNQUFNbEYsRUFBRSxNQUFPLENBQUMsTUFBTStGLEdBQUcwOEIsR0FBRXhpQyxFQUFFQSxFQUFFMFIsT0FBTzVMLEVBQUUsQ0FBQzlGLEVBQUUyUixRQUFRLENBQUMsQ0FBRyxLQUFGMVIsSUFBU0QsRUFBRTJSLFFBQVEsS0FBSyxDQUFDLFNBQVN5eUIsR0FBR3BrQyxFQUFFQyxFQUFFQyxHQUFHb2lDLEdBQUV0aUMsRUFBRXFrQyxHQUFHcmtDLEVBQUVDLEVBQUVDLEVBQUUsQ0FDdmIsU0FBU21rQyxHQUFHcmtDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSSxJQUFJc0IsS0FBYyxFQUFQeEIsRUFBRXN2QixNQUFRLE9BQU9nVCxJQUFHLENBQUMsSUFBSTdnQyxFQUFFNmdDLEdBQUU1Z0MsRUFBRUQsRUFBRXdRLE1BQU0sR0FBRyxLQUFLeFEsRUFBRTBFLEtBQUszRSxFQUFFLENBQUMsSUFBSUcsRUFBRSxPQUFPRixFQUFFb1EsZUFBZXF3QixHQUFHLElBQUl2Z0MsRUFBRSxDQUFDLElBQUlrRSxFQUFFcEUsRUFBRWdRLFVBQVUzTCxFQUFFLE9BQU9ELEdBQUcsT0FBT0EsRUFBRWdNLGVBQWVzd0IsR0FBRXQ4QixFQUFFcThCLEdBQUcsSUFBSXQ4QixFQUFFdThCLEdBQU8sR0FBTEQsR0FBR3ZnQyxHQUFNd2dDLEdBQUVyOEIsS0FBS0YsRUFBRSxJQUFJMDhCLEdBQUU3Z0MsRUFBRSxPQUFPNmdDLElBQU94OEIsR0FBSm5FLEVBQUUyZ0MsSUFBTXJ3QixNQUFNLEtBQUt0USxFQUFFd0UsS0FBSyxPQUFPeEUsRUFBRWtRLGNBQWN5eUIsR0FBRzdpQyxHQUFHLE9BQU9xRSxHQUFHQSxFQUFFNEwsT0FBTy9QLEVBQUUyZ0MsR0FBRXg4QixHQUFHdytCLEdBQUc3aUMsR0FBRyxLQUFLLE9BQU9DLEdBQUc0Z0MsR0FBRTVnQyxFQUFFMmlDLEdBQUczaUMsRUFBRXpCLEVBQUVDLEdBQUd3QixFQUFFQSxFQUFFd1EsUUFBUW93QixHQUFFN2dDLEVBQUV5Z0MsR0FBR3I4QixFQUFFczhCLEdBQUV2OEIsQ0FBQyxDQUFDMitCLEdBQUd2a0MsRUFBTSxNQUEwQixLQUFmeUIsRUFBRTgrQixjQUFvQixPQUFPNytCLEdBQUdBLEVBQUVnUSxPQUFPalEsRUFBRTZnQyxHQUFFNWdDLEdBQUc2aUMsR0FBR3ZrQyxFQUFNLENBQUMsQ0FDdmMsU0FBU3VrQyxHQUFHdmtDLEdBQUcsS0FBSyxPQUFPc2lDLElBQUcsQ0FBQyxJQUFJcmlDLEVBQUVxaUMsR0FBRSxHQUFnQixLQUFScmlDLEVBQUUwUixNQUFZLENBQUMsSUFBSXpSLEVBQUVELEVBQUV3UixVQUFVLElBQUksR0FBZ0IsS0FBUnhSLEVBQUUwUixNQUFZLE9BQU8xUixFQUFFa0csS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR2c4QixJQUFHUyxHQUFHLEVBQUUzaUMsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJdUIsRUFBRXZCLEVBQUUrUCxVQUFVLEdBQVcsRUFBUi9QLEVBQUUwUixRQUFVd3dCLEdBQUUsR0FBRyxPQUFPamlDLEVBQUVzQixFQUFFNjZCLHdCQUF3QixDQUFDLElBQUk1NkIsRUFBRXhCLEVBQUU2dUIsY0FBYzd1QixFQUFFaUMsS0FBS2hDLEVBQUV3dkIsY0FBY21MLEdBQUc1NkIsRUFBRWlDLEtBQUtoQyxFQUFFd3ZCLGVBQWVsdUIsRUFBRXk5QixtQkFBbUJ4OUIsRUFBRXZCLEVBQUUyUixjQUFjclEsRUFBRWdqQyxvQ0FBb0MsQ0FBQyxJQUFJOWlDLEVBQUV6QixFQUFFOHlCLFlBQVksT0FBT3J4QixHQUFHd3lCLEdBQUdqMEIsRUFBRXlCLEVBQUVGLEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSUcsRUFBRTFCLEVBQUU4eUIsWUFBWSxHQUFHLE9BQU9weEIsRUFBRSxDQUFRLEdBQVB6QixFQUFFLEtBQVEsT0FBT0QsRUFBRWdTLE1BQU0sT0FBT2hTLEVBQUVnUyxNQUFNOUwsS0FBSyxLQUFLLEVBQ3ZmLEtBQUssRUFBRWpHLEVBQUVELEVBQUVnUyxNQUFNakMsVUFBVWtrQixHQUFHajBCLEVBQUUwQixFQUFFekIsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUkyRixFQUFFNUYsRUFBRStQLFVBQVUsR0FBRyxPQUFPOVAsR0FBVyxFQUFSRCxFQUFFMFIsTUFBUSxDQUFDelIsRUFBRTJGLEVBQUUsSUFBSUMsRUFBRTdGLEVBQUV5dkIsY0FBYyxPQUFPenZCLEVBQUVpQyxNQUFNLElBQUssU0FBUyxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssV0FBVzRELEVBQUU4N0IsV0FBVzFoQyxFQUFFZ21CLFFBQVEsTUFBTSxJQUFLLE1BQU1wZ0IsRUFBRTIrQixNQUFNdmtDLEVBQUV1a0MsSUFBSTMrQixFQUFFMitCLEtBQUssQ0FBQyxNQUFNLEtBQUssRUFBUSxLQUFLLEVBQVEsS0FBSyxHQUF5SixLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFoTSxLQUFLLEdBQUcsR0FBRyxPQUFPeGtDLEVBQUU0UixjQUFjLENBQUMsSUFBSWpNLEVBQUUzRixFQUFFd1IsVUFBVSxHQUFHLE9BQU83TCxFQUFFLENBQUMsSUFBSW9MLEVBQUVwTCxFQUFFaU0sY0FBYyxHQUFHLE9BQU9iLEVBQUUsQ0FBQyxJQUFJZ2dCLEVBQUVoZ0IsRUFBRWMsV0FBVyxPQUFPa2YsR0FBR3JaLEdBQUdxWixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQzVjLFFBQVEsTUFBTS9yQixNQUFNbEYsRUFBRSxNQUFPb2lDLElBQVcsSUFBUmxpQyxFQUFFMFIsT0FBV2t4QixHQUFHNWlDLEVBQUUsQ0FBQyxNQUFNZ3hCLEdBQUd1UixHQUFFdmlDLEVBQUVBLEVBQUV5UixPQUFPdWYsRUFBRSxDQUFDLENBQUMsR0FBR2h4QixJQUFJRCxFQUFFLENBQUNzaUMsR0FBRSxLQUFLLEtBQUssQ0FBYSxHQUFHLFFBQWZwaUMsRUFBRUQsRUFBRWlTLFNBQW9CLENBQUNoUyxFQUFFd1IsT0FBT3pSLEVBQUV5UixPQUFPNHdCLEdBQUVwaUMsRUFBRSxLQUFLLENBQUNvaUMsR0FBRXJpQyxFQUFFeVIsTUFBTSxDQUFDLENBQUMsU0FBU3d5QixHQUFHbGtDLEdBQUcsS0FBSyxPQUFPc2lDLElBQUcsQ0FBQyxJQUFJcmlDLEVBQUVxaUMsR0FBRSxHQUFHcmlDLElBQUlELEVBQUUsQ0FBQ3NpQyxHQUFFLEtBQUssS0FBSyxDQUFDLElBQUlwaUMsRUFBRUQsRUFBRWlTLFFBQVEsR0FBRyxPQUFPaFMsRUFBRSxDQUFDQSxFQUFFd1IsT0FBT3pSLEVBQUV5UixPQUFPNHdCLEdBQUVwaUMsRUFBRSxLQUFLLENBQUNvaUMsR0FBRXJpQyxFQUFFeVIsTUFBTSxDQUFDLENBQ3ZTLFNBQVM0eUIsR0FBR3RrQyxHQUFHLEtBQUssT0FBT3NpQyxJQUFHLENBQUMsSUFBSXJpQyxFQUFFcWlDLEdBQUUsSUFBSSxPQUFPcmlDLEVBQUVrRyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUlqRyxFQUFFRCxFQUFFeVIsT0FBTyxJQUFJa3hCLEdBQUcsRUFBRTNpQyxFQUFFLENBQUMsTUFBTTZGLEdBQUcwOEIsR0FBRXZpQyxFQUFFQyxFQUFFNEYsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUl0RSxFQUFFdkIsRUFBRStQLFVBQVUsR0FBRyxtQkFBb0J4TyxFQUFFNjZCLGtCQUFrQixDQUFDLElBQUk1NkIsRUFBRXhCLEVBQUV5UixPQUFPLElBQUlsUSxFQUFFNjZCLG1CQUFtQixDQUFDLE1BQU12MkIsR0FBRzA4QixHQUFFdmlDLEVBQUV3QixFQUFFcUUsRUFBRSxDQUFDLENBQUMsSUFBSXBFLEVBQUV6QixFQUFFeVIsT0FBTyxJQUFJbXhCLEdBQUc1aUMsRUFBRSxDQUFDLE1BQU02RixHQUFHMDhCLEdBQUV2aUMsRUFBRXlCLEVBQUVvRSxFQUFFLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSW5FLEVBQUUxQixFQUFFeVIsT0FBTyxJQUFJbXhCLEdBQUc1aUMsRUFBRSxDQUFDLE1BQU02RixHQUFHMDhCLEdBQUV2aUMsRUFBRTBCLEVBQUVtRSxFQUFFLEVBQUUsQ0FBQyxNQUFNQSxHQUFHMDhCLEdBQUV2aUMsRUFBRUEsRUFBRXlSLE9BQU81TCxFQUFFLENBQUMsR0FBRzdGLElBQUlELEVBQUUsQ0FBQ3NpQyxHQUFFLEtBQUssS0FBSyxDQUFDLElBQUl6OEIsRUFBRTVGLEVBQUVpUyxRQUFRLEdBQUcsT0FBT3JNLEVBQUUsQ0FBQ0EsRUFBRTZMLE9BQU96UixFQUFFeVIsT0FBTzR3QixHQUFFejhCLEVBQUUsS0FBSyxDQUFDeThCLEdBQUVyaUMsRUFBRXlSLE1BQU0sQ0FBQyxDQUM3ZCxJQXdCa05nekIsR0F4QjlNQyxHQUFHNXdCLEtBQUs2d0IsS0FBS0MsR0FBR3BoQyxFQUFHMnhCLHVCQUF1QjBQLEdBQUdyaEMsRUFBR282QixrQkFBa0JrSCxHQUFHdGhDLEVBQUdvVSx3QkFBd0JnYyxHQUFFLEVBQUU2RCxHQUFFLEtBQUtzTixHQUFFLEtBQUtDLEdBQUUsRUFBRXRHLEdBQUcsRUFBRUQsR0FBR3hTLEdBQUcsR0FBRzRWLEdBQUUsRUFBRW9ELEdBQUcsS0FBS2pSLEdBQUcsRUFBRWtSLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsS0FBS3JCLEdBQUcsRUFBRWxDLEdBQUd3RCxJQUFTQyxHQUFHLEtBQUt4SSxJQUFHLEVBQUdDLEdBQUcsS0FBS0ksR0FBRyxLQUFLb0ksSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLElBQUksRUFBRUMsR0FBRyxFQUFFLFNBQVN2TSxLQUFJLE9BQWMsRUFBRjNGLEdBQUsvZ0IsTUFBSyxJQUFJZ3pCLEdBQUdBLEdBQUdBLEdBQUdoekIsSUFBRyxDQUNoVSxTQUFTdW1CLEdBQUdyNUIsR0FBRyxPQUFlLEVBQVBBLEVBQUVzdkIsS0FBMkIsRUFBRnVFLElBQU0sSUFBSW9SLEdBQVNBLElBQUdBLEdBQUssT0FBT25WLEdBQUc5WCxZQUFrQixJQUFJK3RCLEtBQUtBLEdBQUcvd0IsTUFBTSt3QixJQUFVLEtBQVAvbEMsRUFBRXFWLElBQWtCclYsRUFBaUJBLE9BQUUsS0FBakJBLEVBQUVhLE9BQU9vaEIsT0FBbUIsR0FBRzFKLEdBQUd2WSxFQUFFa0MsTUFBaEosQ0FBOEosQ0FBQyxTQUFTODFCLEdBQUdoNEIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsR0FBRyxHQUFHb2tDLEdBQUcsTUFBTUEsR0FBRyxFQUFFQyxHQUFHLEtBQUs1Z0MsTUFBTWxGLEVBQUUsTUFBTW1WLEdBQUdsVixFQUFFRSxFQUFFc0IsR0FBYSxFQUFGcXlCLElBQU03ekIsSUFBSTAzQixLQUFFMTNCLElBQUkwM0IsT0FBVyxFQUFGN0QsTUFBT3NSLElBQUlqbEMsR0FBRyxJQUFJNGhDLElBQUdrRSxHQUFHaG1DLEVBQUVpbEMsS0FBSWdCLEdBQUdqbUMsRUFBRXdCLEdBQUcsSUFBSXRCLEdBQUcsSUFBSTJ6QixNQUFlLEVBQVA1ekIsRUFBRXF2QixRQUFVeVMsR0FBR2p2QixLQUFJLElBQUl5YSxJQUFJRyxNQUFLLENBQzFZLFNBQVN1WSxHQUFHam1DLEVBQUVDLEdBQUcsSUFBSUMsRUFBRUYsRUFBRWttQyxjQTNNekIsU0FBWWxtQyxFQUFFQyxHQUFHLElBQUksSUFBSUMsRUFBRUYsRUFBRTBVLGVBQWVsVCxFQUFFeEIsRUFBRTJVLFlBQVlsVCxFQUFFekIsRUFBRW1tQyxnQkFBZ0J6a0MsRUFBRTFCLEVBQUV5VSxhQUFhLEVBQUUvUyxHQUFHLENBQUMsSUFBSUMsRUFBRSxHQUFHbVMsR0FBR3BTLEdBQUdtRSxFQUFFLEdBQUdsRSxFQUFFbUUsRUFBRXJFLEVBQUVFLElBQU8sSUFBSW1FLEVBQVdELEVBQUUzRixLQUFTMkYsRUFBRXJFLEtBQUdDLEVBQUVFLEdBQUdtVCxHQUFHalAsRUFBRTVGLElBQVE2RixHQUFHN0YsSUFBSUQsRUFBRW9tQyxjQUFjdmdDLEdBQUduRSxJQUFJbUUsQ0FBQyxDQUFDLENBMk1uTHdnQyxDQUFHcm1DLEVBQUVDLEdBQUcsSUFBSXVCLEVBQUVnVCxHQUFHeFUsRUFBRUEsSUFBSTAzQixHQUFFdU4sR0FBRSxHQUFHLEdBQUcsSUFBSXpqQyxFQUFFLE9BQU90QixHQUFHc1MsR0FBR3RTLEdBQUdGLEVBQUVrbUMsYUFBYSxLQUFLbG1DLEVBQUVzbUMsaUJBQWlCLE9BQU8sR0FBR3JtQyxFQUFFdUIsR0FBR0EsRUFBRXhCLEVBQUVzbUMsbUJBQW1Ccm1DLEVBQUUsQ0FBZ0IsR0FBZixNQUFNQyxHQUFHc1MsR0FBR3RTLEdBQU0sSUFBSUQsRUFBRSxJQUFJRCxFQUFFbUcsSUE1SXNKLFNBQVluRyxHQUFHdXRCLElBQUcsRUFBR0UsR0FBR3p0QixFQUFFLENBNEk1S3VtQyxDQUFHQyxHQUFHN2QsS0FBSyxLQUFLM29CLElBQUl5dEIsR0FBRytZLEdBQUc3ZCxLQUFLLEtBQUszb0IsSUFBSWlyQixJQUFHLGFBQWtCLEVBQUY0SSxLQUFNbkcsSUFBSSxJQUFHeHRCLEVBQUUsU0FBUyxDQUFDLE9BQU9vVixHQUFHOVQsSUFBSSxLQUFLLEVBQUV0QixFQUFFZ1QsR0FBRyxNQUFNLEtBQUssRUFBRWhULEVBQUVrVCxHQUFHLE1BQU0sS0FBSyxHQUF3QyxRQUFRbFQsRUFBRW9ULFNBQXBDLEtBQUssVUFBVXBULEVBQUV3VCxHQUFzQnhULEVBQUV1bUMsR0FBR3ZtQyxFQUFFd21DLEdBQUcvZCxLQUFLLEtBQUszb0IsR0FBRyxDQUFDQSxFQUFFc21DLGlCQUFpQnJtQyxFQUFFRCxFQUFFa21DLGFBQWFobUMsQ0FBQyxDQUFDLENBQzdjLFNBQVN3bUMsR0FBRzFtQyxFQUFFQyxHQUFjLEdBQVg2bEMsSUFBSSxFQUFFQyxHQUFHLEVBQVksRUFBRmxTLEdBQUssTUFBTTV1QixNQUFNbEYsRUFBRSxNQUFNLElBQUlHLEVBQUVGLEVBQUVrbUMsYUFBYSxHQUFHUyxNQUFNM21DLEVBQUVrbUMsZUFBZWhtQyxFQUFFLE9BQU8sS0FBSyxJQUFJc0IsRUFBRWdULEdBQUd4VSxFQUFFQSxJQUFJMDNCLEdBQUV1TixHQUFFLEdBQUcsR0FBRyxJQUFJempDLEVBQUUsT0FBTyxLQUFLLEdBQVUsR0FBRkEsR0FBWUEsRUFBRXhCLEVBQUVvbUMsY0FBZW5tQyxFQUFFQSxFQUFFMm1DLEdBQUc1bUMsRUFBRXdCLE9BQU8sQ0FBQ3ZCLEVBQUV1QixFQUFFLElBQUlDLEVBQUVveUIsR0FBRUEsSUFBRyxFQUFFLElBQUlueUIsRUFBRW1sQyxLQUFnRCxJQUF4Q25QLEtBQUkxM0IsR0FBR2lsQyxLQUFJaGxDLElBQUV1bEMsR0FBRyxLQUFLekQsR0FBR2p2QixLQUFJLElBQUlnMEIsR0FBRzltQyxFQUFFQyxVQUFVOG1DLEtBQUssS0FBSyxDQUFDLE1BQU1saEMsR0FBR21oQyxHQUFHaG5DLEVBQUU2RixFQUFFLENBQVU4ckIsS0FBS2tULEdBQUcxeUIsUUFBUXpRLEVBQUVteUIsR0FBRXB5QixFQUFFLE9BQU91akMsR0FBRS9rQyxFQUFFLEdBQUd5M0IsR0FBRSxLQUFLdU4sR0FBRSxFQUFFaGxDLEVBQUU2aEMsR0FBRSxDQUFDLEdBQUcsSUFBSTdoQyxFQUFFLENBQXlDLEdBQXhDLElBQUlBLEdBQVksS0FBUndCLEVBQUVzVCxHQUFHL1UsTUFBV3dCLEVBQUVDLEVBQUV4QixFQUFFZ25DLEdBQUdqbkMsRUFBRXlCLElBQVEsSUFBSXhCLEVBQUUsTUFBTUMsRUFBRWdsQyxHQUFHNEIsR0FBRzltQyxFQUFFLEdBQUdnbUMsR0FBR2htQyxFQUFFd0IsR0FBR3lrQyxHQUFHam1DLEVBQUU4UyxNQUFLNVMsRUFBRSxHQUFHLElBQUlELEVBQUUrbEMsR0FBR2htQyxFQUFFd0IsT0FDaGYsQ0FBdUIsR0FBdEJDLEVBQUV6QixFQUFFbVMsUUFBUVYsWUFBb0IsR0FBRmpRLEdBR25DLFNBQVl4QixHQUFHLElBQUksSUFBSUMsRUFBRUQsSUFBSSxDQUFDLEdBQVcsTUFBUkMsRUFBRTBSLE1BQVksQ0FBQyxJQUFJelIsRUFBRUQsRUFBRTh5QixZQUFZLEdBQUcsT0FBTzd5QixHQUFlLFFBQVhBLEVBQUVBLEVBQUUyM0IsUUFBaUIsSUFBSSxJQUFJcjJCLEVBQUUsRUFBRUEsRUFBRXRCLEVBQUVFLE9BQU9vQixJQUFJLENBQUMsSUFBSUMsRUFBRXZCLEVBQUVzQixHQUFHRSxFQUFFRCxFQUFFODFCLFlBQVk5MUIsRUFBRUEsRUFBRWtHLE1BQU0sSUFBSSxJQUFJNGIsR0FBRzdoQixJQUFJRCxHQUFHLE9BQU0sQ0FBRSxDQUFDLE1BQU1FLEdBQUcsT0FBTSxDQUFFLENBQUMsQ0FBQyxDQUFXLEdBQVZ6QixFQUFFRCxFQUFFZ1MsTUFBd0IsTUFBZmhTLEVBQUVzZ0MsY0FBb0IsT0FBT3JnQyxFQUFFQSxFQUFFd1IsT0FBT3pSLEVBQUVBLEVBQUVDLE1BQU0sQ0FBQyxHQUFHRCxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFaVMsU0FBUyxDQUFDLEdBQUcsT0FBT2pTLEVBQUV5UixRQUFRelIsRUFBRXlSLFNBQVMxUixFQUFFLE9BQU0sRUFBR0MsRUFBRUEsRUFBRXlSLE1BQU0sQ0FBQ3pSLEVBQUVpUyxRQUFRUixPQUFPelIsRUFBRXlSLE9BQU96UixFQUFFQSxFQUFFaVMsT0FBTyxDQUFDLENBQUMsT0FBTSxDQUFFLENBSHZYZzFCLENBQUd6bEMsS0FBS3hCLEVBQUUybUMsR0FBRzVtQyxFQUFFd0IsR0FBRyxJQUFJdkIsSUFBSXlCLEVBQUVxVCxHQUFHL1UsR0FBRyxJQUFJMEIsSUFBSUYsRUFBRUUsRUFBRXpCLEVBQUVnbkMsR0FBR2puQyxFQUFFMEIsS0FBSyxJQUFJekIsSUFBRyxNQUFNQyxFQUFFZ2xDLEdBQUc0QixHQUFHOW1DLEVBQUUsR0FBR2dtQyxHQUFHaG1DLEVBQUV3QixHQUFHeWtDLEdBQUdqbUMsRUFBRThTLE1BQUs1UyxFQUFxQyxPQUFuQ0YsRUFBRW1uQyxhQUFhMWxDLEVBQUV6QixFQUFFb25DLGNBQWM1bEMsRUFBU3ZCLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNZ0YsTUFBTWxGLEVBQUUsTUFBTSxLQUFLLEVBQzhCLEtBQUssRUFBRXNuQyxHQUFHcm5DLEVBQUVzbEMsR0FBR0UsSUFBSSxNQUQ3QixLQUFLLEVBQVUsR0FBUlEsR0FBR2htQyxFQUFFd0IsSUFBUyxVQUFGQSxLQUFlQSxHQUFpQixJQUFidkIsRUFBRWdrQyxHQUFHLElBQUlueEIsTUFBVSxDQUFDLEdBQUcsSUFBSTBCLEdBQUd4VSxFQUFFLEdBQUcsTUFBeUIsS0FBbkJ5QixFQUFFekIsRUFBRTBVLGdCQUFxQmxULEtBQUtBLEVBQUUsQ0FBQ2c0QixLQUFJeDVCLEVBQUUyVSxhQUFhM1UsRUFBRTBVLGVBQWVqVCxFQUFFLEtBQUssQ0FBQ3pCLEVBQUVzbkMsY0FBYzNjLEdBQUcwYyxHQUFHMWUsS0FBSyxLQUFLM29CLEVBQUVzbEMsR0FBR0UsSUFBSXZsQyxHQUFHLEtBQUssQ0FBQ29uQyxHQUFHcm5DLEVBQUVzbEMsR0FBR0UsSUFBSSxNQUFNLEtBQUssRUFBVSxHQUFSUSxHQUFHaG1DLEVBQUV3QixJQUFTLFFBQUZBLEtBQzllQSxFQUFFLE1BQXFCLElBQWZ2QixFQUFFRCxFQUFFbVYsV0FBZTFULEdBQUcsRUFBRSxFQUFFRCxHQUFHLENBQUMsSUFBSUcsRUFBRSxHQUFHbVMsR0FBR3RTLEdBQUdFLEVBQUUsR0FBR0MsR0FBRUEsRUFBRTFCLEVBQUUwQixJQUFLRixJQUFJQSxFQUFFRSxHQUFHSCxJQUFJRSxDQUFDLENBQXFHLEdBQXBHRixFQUFFQyxFQUFxRyxJQUEzRkQsR0FBRyxLQUFYQSxFQUFFc1IsS0FBSXRSLEdBQVcsSUFBSSxJQUFJQSxFQUFFLElBQUksS0FBS0EsRUFBRSxLQUFLLEtBQUtBLEVBQUUsS0FBSyxJQUFJQSxFQUFFLElBQUksS0FBS0EsRUFBRSxLQUFLLEtBQUttakMsR0FBR25qQyxFQUFFLE9BQU9BLEdBQVUsQ0FBQ3hCLEVBQUVzbkMsY0FBYzNjLEdBQUcwYyxHQUFHMWUsS0FBSyxLQUFLM29CLEVBQUVzbEMsR0FBR0UsSUFBSWhrQyxHQUFHLEtBQUssQ0FBQzZsQyxHQUFHcm5DLEVBQUVzbEMsR0FBR0UsSUFBSSxNQUErQixRQUFRLE1BQU12Z0MsTUFBTWxGLEVBQUUsTUFBTyxDQUFDLENBQVcsT0FBVmttQyxHQUFHam1DLEVBQUU4UyxNQUFZOVMsRUFBRWttQyxlQUFlaG1DLEVBQUV3bUMsR0FBRy9kLEtBQUssS0FBSzNvQixHQUFHLElBQUksQ0FDclgsU0FBU2luQyxHQUFHam5DLEVBQUVDLEdBQUcsSUFBSUMsRUFBRW1sQyxHQUEyRyxPQUF4R3JsQyxFQUFFbVMsUUFBUU4sY0FBY3FGLGVBQWU0dkIsR0FBRzltQyxFQUFFQyxHQUFHMFIsT0FBTyxLQUFlLEtBQVYzUixFQUFFNG1DLEdBQUc1bUMsRUFBRUMsTUFBV0EsRUFBRXFsQyxHQUFHQSxHQUFHcGxDLEVBQUUsT0FBT0QsR0FBR21oQyxHQUFHbmhDLElBQVdELENBQUMsQ0FBQyxTQUFTb2hDLEdBQUdwaEMsR0FBRyxPQUFPc2xDLEdBQUdBLEdBQUd0bEMsRUFBRXNsQyxHQUFHbjFCLEtBQUtZLE1BQU11MEIsR0FBR3RsQyxFQUFFLENBRTVMLFNBQVNnbUMsR0FBR2htQyxFQUFFQyxHQUF1RCxJQUFwREEsSUFBSW1sQyxHQUFHbmxDLElBQUlrbEMsR0FBR25sQyxFQUFFMFUsZ0JBQWdCelUsRUFBRUQsRUFBRTJVLGNBQWMxVSxFQUFNRCxFQUFFQSxFQUFFbW1DLGdCQUFnQixFQUFFbG1DLEdBQUcsQ0FBQyxJQUFJQyxFQUFFLEdBQUc0VCxHQUFHN1QsR0FBR3VCLEVBQUUsR0FBR3RCLEVBQUVGLEVBQUVFLElBQUksRUFBRUQsSUFBSXVCLENBQUMsQ0FBQyxDQUFDLFNBQVNnbEMsR0FBR3htQyxHQUFHLEdBQVUsRUFBRjZ6QixHQUFLLE1BQU01dUIsTUFBTWxGLEVBQUUsTUFBTTRtQyxLQUFLLElBQUkxbUMsRUFBRXVVLEdBQUd4VSxFQUFFLEdBQUcsS0FBVSxFQUFGQyxHQUFLLE9BQU9nbUMsR0FBR2ptQyxFQUFFOFMsTUFBSyxLQUFLLElBQUk1UyxFQUFFMG1DLEdBQUc1bUMsRUFBRUMsR0FBRyxHQUFHLElBQUlELEVBQUVtRyxLQUFLLElBQUlqRyxFQUFFLENBQUMsSUFBSXNCLEVBQUV1VCxHQUFHL1UsR0FBRyxJQUFJd0IsSUFBSXZCLEVBQUV1QixFQUFFdEIsRUFBRSttQyxHQUFHam5DLEVBQUV3QixHQUFHLENBQUMsR0FBRyxJQUFJdEIsRUFBRSxNQUFNQSxFQUFFZ2xDLEdBQUc0QixHQUFHOW1DLEVBQUUsR0FBR2dtQyxHQUFHaG1DLEVBQUVDLEdBQUdnbUMsR0FBR2ptQyxFQUFFOFMsTUFBSzVTLEVBQUUsR0FBRyxJQUFJQSxFQUFFLE1BQU0rRSxNQUFNbEYsRUFBRSxNQUFpRixPQUEzRUMsRUFBRW1uQyxhQUFhbm5DLEVBQUVtUyxRQUFRVixVQUFVelIsRUFBRW9uQyxjQUFjbm5DLEVBQUVvbkMsR0FBR3JuQyxFQUFFc2xDLEdBQUdFLElBQUlTLEdBQUdqbUMsRUFBRThTLE1BQVksSUFBSSxDQUN2ZCxTQUFTeTBCLEdBQUd2bkMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFMnpCLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU83ekIsRUFBRUMsRUFBRSxDQUFDLFFBQVksS0FBSjR6QixHQUFFM3pCLEtBQVU2aEMsR0FBR2p2QixLQUFJLElBQUl5YSxJQUFJRyxLQUFLLENBQUMsQ0FBQyxTQUFTOFosR0FBR3huQyxHQUFHLE9BQU8wbEMsSUFBSSxJQUFJQSxHQUFHdi9CLE9BQVksRUFBRjB0QixLQUFNOFMsS0FBSyxJQUFJMW1DLEVBQUU0ekIsR0FBRUEsSUFBRyxFQUFFLElBQUkzekIsRUFBRTZrQyxHQUFHL3NCLFdBQVd4VyxFQUFFNlQsR0FBRSxJQUFJLEdBQUcwdkIsR0FBRy9zQixXQUFXLEtBQUszQyxHQUFFLEVBQUVyVixFQUFFLE9BQU9BLEdBQUcsQ0FBQyxRQUFRcVYsR0FBRTdULEVBQUV1akMsR0FBRy9zQixXQUFXOVgsSUFBYSxHQUFYMnpCLEdBQUU1ekIsS0FBYXl0QixJQUFJLENBQUMsQ0FBQyxTQUFTc1UsS0FBS3JELEdBQUdELEdBQUd2c0IsUUFBUWdhLEdBQUV1UyxHQUFHLENBQ2hULFNBQVNvSSxHQUFHOW1DLEVBQUVDLEdBQUdELEVBQUVtbkMsYUFBYSxLQUFLbm5DLEVBQUVvbkMsY0FBYyxFQUFFLElBQUlsbkMsRUFBRUYsRUFBRXNuQyxjQUFpRCxJQUFsQyxJQUFJcG5DLElBQUlGLEVBQUVzbkMsZUFBZSxFQUFFemMsR0FBRzNxQixJQUFPLE9BQU84a0MsR0FBRSxJQUFJOWtDLEVBQUU4a0MsR0FBRXR6QixPQUFPLE9BQU94UixHQUFHLENBQUMsSUFBSXNCLEVBQUV0QixFQUFRLE9BQU5xdUIsR0FBRy9zQixHQUFVQSxFQUFFMkUsS0FBSyxLQUFLLEVBQTZCLE9BQTNCM0UsRUFBRUEsRUFBRVUsS0FBSzRxQixvQkFBd0NDLEtBQUssTUFBTSxLQUFLLEVBQUUySCxLQUFLdkksR0FBRUksSUFBSUosR0FBRUcsSUFBRzJJLEtBQUssTUFBTSxLQUFLLEVBQUVMLEdBQUdwekIsR0FBRyxNQUFNLEtBQUssRUFBRWt6QixLQUFLLE1BQU0sS0FBSyxHQUFjLEtBQUssR0FBR3ZJLEdBQUUwSSxJQUFHLE1BQU0sS0FBSyxHQUFHakQsR0FBR3B3QixFQUFFVSxLQUFLcUUsVUFBVSxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUd5N0IsS0FBSzloQyxFQUFFQSxFQUFFd1IsTUFBTSxDQUFxRSxHQUFwRWdtQixHQUFFMTNCLEVBQUVnbEMsR0FBRWhsQyxFQUFFeXdCLEdBQUd6d0IsRUFBRW1TLFFBQVEsTUFBTTh5QixHQUFFdEcsR0FBRzErQixFQUFFNmhDLEdBQUUsRUFBRW9ELEdBQUcsS0FBS0UsR0FBR0QsR0FBR2xSLEdBQUcsRUFBRXFSLEdBQUdELEdBQUcsS0FBUSxPQUFPN1MsR0FBRyxDQUFDLElBQUl2eUIsRUFDMWYsRUFBRUEsRUFBRXV5QixHQUFHcHlCLE9BQU9ILElBQUksR0FBMkIsUUFBaEJ1QixHQUFSdEIsRUFBRXN5QixHQUFHdnlCLElBQU8weUIsYUFBcUIsQ0FBQ3p5QixFQUFFeXlCLFlBQVksS0FBSyxJQUFJbHhCLEVBQUVELEVBQUUydkIsS0FBS3p2QixFQUFFeEIsRUFBRWt6QixRQUFRLEdBQUcsT0FBTzF4QixFQUFFLENBQUMsSUFBSUMsRUFBRUQsRUFBRXl2QixLQUFLenZCLEVBQUV5dkIsS0FBSzF2QixFQUFFRCxFQUFFMnZCLEtBQUt4dkIsQ0FBQyxDQUFDekIsRUFBRWt6QixRQUFRNXhCLENBQUMsQ0FBQ2d4QixHQUFHLElBQUksQ0FBQyxPQUFPeHlCLENBQUMsQ0FDM0ssU0FBU2duQyxHQUFHaG5DLEVBQUVDLEdBQUcsT0FBRSxDQUFDLElBQUlDLEVBQUU4a0MsR0FBRSxJQUF1QixHQUFuQnJULEtBQUt3RCxHQUFHaGpCLFFBQVFpa0IsR0FBTVYsR0FBRyxDQUFDLElBQUksSUFBSWwwQixFQUFFK3pCLEdBQUUxakIsY0FBYyxPQUFPclEsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUVnMUIsTUFBTSxPQUFPLzBCLElBQUlBLEVBQUUyeEIsUUFBUSxNQUFNNXhCLEVBQUVBLEVBQUUydkIsSUFBSSxDQUFDdUUsSUFBRyxDQUFFLENBQTRDLEdBQTNDSixHQUFHLEVBQUVHLEdBQUVELEdBQUVELEdBQUUsS0FBS0ksSUFBRyxFQUFHQyxHQUFHLEVBQUVrUCxHQUFHM3lCLFFBQVEsS0FBUSxPQUFPalMsR0FBRyxPQUFPQSxFQUFFd1IsT0FBTyxDQUFDb3dCLEdBQUUsRUFBRW9ELEdBQUdqbEMsRUFBRStrQyxHQUFFLEtBQUssS0FBSyxDQUFDaGxDLEVBQUUsQ0FBQyxJQUFJMEIsRUFBRTFCLEVBQUUyQixFQUFFekIsRUFBRXdSLE9BQU83TCxFQUFFM0YsRUFBRTRGLEVBQUU3RixFQUFxQixHQUFuQkEsRUFBRWdsQyxHQUFFcC9CLEVBQUU4TCxPQUFPLE1BQVMsT0FBTzdMLEdBQUcsaUJBQWtCQSxHQUFHLG1CQUFvQkEsRUFBRXNsQixLQUFLLENBQUMsSUFBSXhsQixFQUFFRSxFQUFFa0wsRUFBRW5MLEVBQUVtckIsRUFBRWhnQixFQUFFN0ssSUFBSSxLQUFlLEVBQVA2SyxFQUFFc2UsTUFBVSxJQUFJMEIsR0FBRyxLQUFLQSxHQUFHLEtBQUtBLEdBQUcsQ0FBQyxJQUFJQyxFQUFFamdCLEVBQUVTLFVBQVV3ZixHQUFHamdCLEVBQUUraEIsWUFBWTlCLEVBQUU4QixZQUFZL2hCLEVBQUVhLGNBQWNvZixFQUFFcGYsY0FDeGViLEVBQUVtaEIsTUFBTWxCLEVBQUVrQixRQUFRbmhCLEVBQUUraEIsWUFBWSxLQUFLL2hCLEVBQUVhLGNBQWMsS0FBSyxDQUFDLElBQUlxZixFQUFFd00sR0FBRy83QixHQUFHLEdBQUcsT0FBT3V2QixFQUFFLENBQUNBLEVBQUV2ZixRQUFRLElBQUlnc0IsR0FBR3pNLEVBQUV2dkIsRUFBRWtFLEVBQUVuRSxFQUFFekIsR0FBVSxFQUFQaXhCLEVBQUU1QixNQUFRaU8sR0FBRzc3QixFQUFFa0UsRUFBRTNGLEdBQU82RixFQUFFRixFQUFFLElBQUlrakIsR0FBWjdvQixFQUFFaXhCLEdBQWM2QixZQUFZLEdBQUcsT0FBT2pLLEVBQUUsQ0FBQyxJQUFJQyxFQUFFLElBQUl4b0IsSUFBSXdvQixFQUFFcG9CLElBQUltRixHQUFHN0YsRUFBRTh5QixZQUFZaEssQ0FBQyxNQUFNRCxFQUFFbm9CLElBQUltRixHQUFHLE1BQU05RixDQUFDLENBQU0sS0FBVSxFQUFGQyxHQUFLLENBQUNzOUIsR0FBRzc3QixFQUFFa0UsRUFBRTNGLEdBQUdrZ0MsS0FBSyxNQUFNbmdDLENBQUMsQ0FBQzhGLEVBQUViLE1BQU1sRixFQUFFLEtBQU0sTUFBTSxHQUFHMnVCLElBQVUsRUFBUDdvQixFQUFFeXBCLEtBQU8sQ0FBQyxJQUFJdEcsRUFBRTBVLEdBQUcvN0IsR0FBRyxHQUFHLE9BQU9xbkIsRUFBRSxHQUFjLE1BQVJBLEVBQUVyWCxTQUFlcVgsRUFBRXJYLE9BQU8sS0FBS2dzQixHQUFHM1UsRUFBRXJuQixFQUFFa0UsRUFBRW5FLEVBQUV6QixHQUFHNHZCLEdBQUd5TSxHQUFHeDJCLEVBQUVELElBQUksTUFBTTdGLENBQUMsQ0FBQyxDQUFDMEIsRUFBRW9FLEVBQUV3MkIsR0FBR3gyQixFQUFFRCxHQUFHLElBQUlpOEIsS0FBSUEsR0FBRSxHQUFHLE9BQU91RCxHQUFHQSxHQUFHLENBQUMzakMsR0FBRzJqQyxHQUFHbDFCLEtBQUt6TyxHQUFHQSxFQUFFQyxFQUFFLEVBQUUsQ0FBQyxPQUFPRCxFQUFFeUUsS0FBSyxLQUFLLEVBQUV6RSxFQUFFaVEsT0FBTyxNQUNwZjFSLElBQUlBLEVBQUV5QixFQUFFeXdCLE9BQU9seUIsRUFBa0I4ekIsR0FBR3J5QixFQUFicTdCLEdBQUdyN0IsRUFBRW9FLEVBQUU3RixJQUFXLE1BQU1ELEVBQUUsS0FBSyxFQUFFNkYsRUFBRUMsRUFBRSxJQUFJcWpCLEVBQUV6bkIsRUFBRVEsS0FBS2duQixFQUFFeG5CLEVBQUVzTyxVQUFVLEtBQWdCLElBQVJ0TyxFQUFFaVEsT0FBYSxtQkFBb0J3WCxFQUFFZ1UsMkJBQTBCLE9BQU9qVSxHQUFHLG1CQUFvQkEsRUFBRWtVLG1CQUFvQixPQUFPQyxJQUFLQSxHQUFHaFYsSUFBSWEsS0FBSyxDQUFDeG5CLEVBQUVpUSxPQUFPLE1BQU0xUixJQUFJQSxFQUFFeUIsRUFBRXl3QixPQUFPbHlCLEVBQWtCOHpCLEdBQUdyeUIsRUFBYnc3QixHQUFHeDdCLEVBQUVtRSxFQUFFNUYsSUFBVyxNQUFNRCxDQUFDLEVBQUUwQixFQUFFQSxFQUFFZ1EsTUFBTSxPQUFPLE9BQU9oUSxFQUFFLENBQUMrbEMsR0FBR3ZuQyxFQUFFLENBQUMsTUFBTXdwQixHQUFJenBCLEVBQUV5cEIsRUFBR3NiLEtBQUk5a0MsR0FBRyxPQUFPQSxJQUFJOGtDLEdBQUU5a0MsRUFBRUEsRUFBRXdSLFFBQVEsUUFBUSxDQUFDLEtBQUssQ0FBUyxDQUFDLFNBQVNtMUIsS0FBSyxJQUFJN21DLEVBQUU2a0MsR0FBRzF5QixRQUFzQixPQUFkMHlCLEdBQUcxeUIsUUFBUWlrQixHQUFVLE9BQU9wMkIsRUFBRW8yQixHQUFHcDJCLENBQUMsQ0FDcmQsU0FBU21nQyxLQUFRLElBQUkyQixJQUFHLElBQUlBLElBQUcsSUFBSUEsS0FBRUEsR0FBRSxHQUFFLE9BQU9wSyxNQUFXLFVBQUh6RCxPQUF1QixVQUFIa1IsS0FBZWEsR0FBR3RPLEdBQUV1TixHQUFFLENBQUMsU0FBUzJCLEdBQUc1bUMsRUFBRUMsR0FBRyxJQUFJQyxFQUFFMnpCLEdBQUVBLElBQUcsRUFBRSxJQUFJcnlCLEVBQUVxbEMsS0FBcUMsSUFBN0JuUCxLQUFJMTNCLEdBQUdpbEMsS0FBSWhsQyxJQUFFdWxDLEdBQUcsS0FBS3NCLEdBQUc5bUMsRUFBRUMsVUFBVXluQyxLQUFLLEtBQUssQ0FBQyxNQUFNam1DLEdBQUd1bEMsR0FBR2huQyxFQUFFeUIsRUFBRSxDQUFnQyxHQUF0Qmt3QixLQUFLa0MsR0FBRTN6QixFQUFFMmtDLEdBQUcxeUIsUUFBUTNRLEVBQUssT0FBT3dqQyxHQUFFLE1BQU0vL0IsTUFBTWxGLEVBQUUsTUFBaUIsT0FBWDIzQixHQUFFLEtBQUt1TixHQUFFLEVBQVNuRCxFQUFDLENBQUMsU0FBUzRGLEtBQUssS0FBSyxPQUFPMUMsSUFBRzJDLEdBQUczQyxHQUFFLENBQUMsU0FBUytCLEtBQUssS0FBSyxPQUFPL0IsS0FBSXR5QixNQUFNaTFCLEdBQUczQyxHQUFFLENBQUMsU0FBUzJDLEdBQUczbkMsR0FBRyxJQUFJQyxFQUFFeWtDLEdBQUcxa0MsRUFBRXlSLFVBQVV6UixFQUFFMitCLElBQUkzK0IsRUFBRTB2QixjQUFjMXZCLEVBQUVpdkIsYUFBYSxPQUFPaHZCLEVBQUV3bkMsR0FBR3puQyxHQUFHZ2xDLEdBQUUva0MsRUFBRTZrQyxHQUFHM3lCLFFBQVEsSUFBSSxDQUMxZCxTQUFTczFCLEdBQUd6bkMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxJQUFJRSxFQUFFRCxFQUFFd1IsVUFBcUIsR0FBWHpSLEVBQUVDLEVBQUV5UixPQUF1QixNQUFSelIsRUFBRTBSLE1BQXdELENBQVcsR0FBRyxRQUFielIsRUFBRStoQyxHQUFHL2hDLEVBQUVELElBQW1DLE9BQW5CQyxFQUFFeVIsT0FBTyxXQUFNcXpCLEdBQUU5a0MsR0FBUyxHQUFHLE9BQU9GLEVBQW1FLE9BQVg4aEMsR0FBRSxPQUFFa0QsR0FBRSxNQUE1RGhsQyxFQUFFMlIsT0FBTyxNQUFNM1IsRUFBRXVnQyxhQUFhLEVBQUV2Z0MsRUFBRSt1QixVQUFVLElBQTRCLE1BQWhMLEdBQWdCLFFBQWI3dUIsRUFBRWloQyxHQUFHamhDLEVBQUVELEVBQUUwK0IsS0FBa0IsWUFBSnFHLEdBQUU5a0MsR0FBaUssR0FBRyxRQUFmRCxFQUFFQSxFQUFFaVMsU0FBeUIsWUFBSjh5QixHQUFFL2tDLEdBQVMra0MsR0FBRS9rQyxFQUFFRCxDQUFDLE9BQU8sT0FBT0MsR0FBRyxJQUFJNmhDLEtBQUlBLEdBQUUsRUFBRSxDQUFDLFNBQVN1RixHQUFHcm5DLEVBQUVDLEVBQUVDLEdBQUcsSUFBSXNCLEVBQUU2VCxHQUFFNVQsRUFBRXNqQyxHQUFHL3NCLFdBQVcsSUFBSStzQixHQUFHL3NCLFdBQVcsS0FBSzNDLEdBQUUsRUFDM1ksU0FBWXJWLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHLEdBQUdtbEMsV0FBVyxPQUFPakIsSUFBSSxHQUFVLEVBQUY3UixHQUFLLE1BQU01dUIsTUFBTWxGLEVBQUUsTUFBTUcsRUFBRUYsRUFBRW1uQyxhQUFhLElBQUkxbEMsRUFBRXpCLEVBQUVvbkMsY0FBYyxHQUFHLE9BQU9sbkMsRUFBRSxPQUFPLEtBQTJDLEdBQXRDRixFQUFFbW5DLGFBQWEsS0FBS25uQyxFQUFFb25DLGNBQWMsRUFBS2xuQyxJQUFJRixFQUFFbVMsUUFBUSxNQUFNbE4sTUFBTWxGLEVBQUUsTUFBTUMsRUFBRWttQyxhQUFhLEtBQUtsbUMsRUFBRXNtQyxpQkFBaUIsRUFBRSxJQUFJNWtDLEVBQUV4QixFQUFFaXlCLE1BQU1qeUIsRUFBRTZ4QixXQUE4SixHQXpOdFQsU0FBWS94QixFQUFFQyxHQUFHLElBQUlDLEVBQUVGLEVBQUV5VSxjQUFjeFUsRUFBRUQsRUFBRXlVLGFBQWF4VSxFQUFFRCxFQUFFMFUsZUFBZSxFQUFFMVUsRUFBRTJVLFlBQVksRUFBRTNVLEVBQUVvbUMsY0FBY25tQyxFQUFFRCxFQUFFNG5DLGtCQUFrQjNuQyxFQUFFRCxFQUFFNFUsZ0JBQWdCM1UsRUFBRUEsRUFBRUQsRUFBRTZVLGNBQWMsSUFBSXJULEVBQUV4QixFQUFFbVYsV0FBVyxJQUFJblYsRUFBRUEsRUFBRW1tQyxnQkFBZ0IsRUFBRWptQyxHQUFHLENBQUMsSUFBSXVCLEVBQUUsR0FBR3FTLEdBQUc1VCxHQUFHd0IsRUFBRSxHQUFHRCxFQUFFeEIsRUFBRXdCLEdBQUcsRUFBRUQsRUFBRUMsSUFBSSxFQUFFekIsRUFBRXlCLElBQUksRUFBRXZCLElBQUl3QixDQUFDLENBQUMsQ0F5TjVHbW1DLENBQUc3bkMsRUFBRTBCLEdBQUcxQixJQUFJMDNCLEtBQUlzTixHQUFFdE4sR0FBRSxLQUFLdU4sR0FBRSxLQUF1QixLQUFmL2tDLEVBQUVxZ0MsaUJBQWlDLEtBQVJyZ0MsRUFBRXlSLFFBQWE4ekIsS0FBS0EsSUFBRyxFQUFHZ0IsR0FBR256QixJQUFHLFdBQWdCLE9BQUxxekIsS0FBWSxJQUFJLEtBQUlqbEMsS0FBZSxNQUFSeEIsRUFBRXlSLE9BQW9DLE1BQWZ6UixFQUFFcWdDLGNBQXFCNytCLEVBQUUsQ0FBQ0EsRUFBRXFqQyxHQUFHL3NCLFdBQVcrc0IsR0FBRy9zQixXQUFXLEtBQ2hmLElBQUlyVyxFQUFFMFQsR0FBRUEsR0FBRSxFQUFFLElBQUl4UCxFQUFFZ3VCLEdBQUVBLElBQUcsRUFBRWlSLEdBQUczeUIsUUFBUSxLQTFDcEMsU0FBWW5TLEVBQUVDLEdBQWdCLEdBQWJzcUIsR0FBR3pTLEdBQWF1TSxHQUFWcmtCLEVBQUVpa0IsTUFBYyxDQUFDLEdBQUcsbUJBQW1CamtCLEVBQUUsSUFBSUUsRUFBRSxDQUFDeWtCLE1BQU0za0IsRUFBRTZrQixlQUFlRCxJQUFJNWtCLEVBQUU4a0IsbUJBQW1COWtCLEVBQUUsQ0FBOEMsSUFBSXdCLEdBQWpEdEIsR0FBR0EsRUFBRUYsRUFBRTJJLGdCQUFnQnpJLEVBQUU4a0IsYUFBYW5rQixRQUFlb2tCLGNBQWMva0IsRUFBRStrQixlQUFlLEdBQUd6akIsR0FBRyxJQUFJQSxFQUFFMmpCLFdBQVcsQ0FBQ2psQixFQUFFc0IsRUFBRTRqQixXQUFXLElBQUkzakIsRUFBRUQsRUFBRTZqQixhQUFhM2pCLEVBQUVGLEVBQUU4akIsVUFBVTlqQixFQUFFQSxFQUFFK2pCLFlBQVksSUFBSXJsQixFQUFFd0ssU0FBU2hKLEVBQUVnSixRQUFRLENBQUMsTUFBTTBlLEdBQUdscEIsRUFBRSxLQUFLLE1BQU1GLENBQUMsQ0FBQyxJQUFJMkIsRUFBRSxFQUFFa0UsR0FBRyxFQUFFQyxHQUFHLEVBQUVGLEVBQUUsRUFBRW9MLEVBQUUsRUFBRWdnQixFQUFFaHhCLEVBQUVpeEIsRUFBRSxLQUFLaHhCLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSWl4QixFQUFLRixJQUFJOXdCLEdBQUcsSUFBSXVCLEdBQUcsSUFBSXV2QixFQUFFdG1CLFdBQVc3RSxFQUFFbEUsRUFBRUYsR0FBR3V2QixJQUFJdHZCLEdBQUcsSUFBSUYsR0FBRyxJQUFJd3ZCLEVBQUV0bUIsV0FBVzVFLEVBQUVuRSxFQUFFSCxHQUFHLElBQUl3dkIsRUFBRXRtQixXQUFXL0ksR0FDbmZxdkIsRUFBRXJtQixVQUFVdkssUUFBVyxRQUFROHdCLEVBQUVGLEVBQUU3bUIsYUFBa0I4bUIsRUFBRUQsRUFBRUEsRUFBRUUsRUFBRSxPQUFPLENBQUMsR0FBR0YsSUFBSWh4QixFQUFFLE1BQU1DLEVBQThDLEdBQTVDZ3hCLElBQUkvd0IsS0FBSzBGLElBQUluRSxJQUFJb0UsRUFBRWxFLEdBQUdzdkIsSUFBSXZ2QixLQUFLc1AsSUFBSXhQLElBQUlzRSxFQUFFbkUsR0FBTSxRQUFRdXZCLEVBQUVGLEVBQUVuTixhQUFhLE1BQVVvTixHQUFKRCxFQUFFQyxHQUFNdmhCLFVBQVUsQ0FBQ3NoQixFQUFFRSxDQUFDLENBQUNoeEIsR0FBRyxJQUFJMkYsSUFBSSxJQUFJQyxFQUFFLEtBQUssQ0FBQzZlLE1BQU05ZSxFQUFFK2UsSUFBSTllLEVBQUUsTUFBTTVGLEVBQUUsSUFBSSxDQUFDQSxFQUFFQSxHQUFHLENBQUN5a0IsTUFBTSxFQUFFQyxJQUFJLEVBQUUsTUFBTTFrQixFQUFFLEtBQStDLElBQTFDc3FCLEdBQUcsQ0FBQ2hHLFlBQVl4a0IsRUFBRXlrQixlQUFldmtCLEdBQUc0WCxJQUFHLEVBQU93cUIsR0FBRXJpQyxFQUFFLE9BQU9xaUMsSUFBRyxHQUFPdGlDLEdBQUpDLEVBQUVxaUMsSUFBTXJ3QixNQUEwQixLQUFmaFMsRUFBRXNnQyxjQUFvQixPQUFPdmdDLEVBQUVBLEVBQUUwUixPQUFPelIsRUFBRXFpQyxHQUFFdGlDLE9BQU8sS0FBSyxPQUFPc2lDLElBQUcsQ0FBQ3JpQyxFQUFFcWlDLEdBQUUsSUFBSSxJQUFJeFosRUFBRTdvQixFQUFFd1IsVUFBVSxHQUFnQixLQUFSeFIsRUFBRTBSLE1BQVksT0FBTzFSLEVBQUVrRyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUN2SyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBM1csS0FBSyxFQUFFLEdBQUcsT0FBTzJpQixFQUFFLENBQUMsSUFBSUMsRUFBRUQsRUFBRTRHLGNBQWMxRyxFQUFFRixFQUFFalgsY0FBY29YLEVBQUVocEIsRUFBRStQLFVBQVVtWixFQUFFRixFQUFFaVQsd0JBQXdCajhCLEVBQUU2dUIsY0FBYzd1QixFQUFFaUMsS0FBSzZtQixFQUFFOFIsR0FBRzU2QixFQUFFaUMsS0FBSzZtQixHQUFHQyxHQUFHQyxFQUFFdWIsb0NBQW9DcmIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUlELEVBQUVqcEIsRUFBRStQLFVBQVVtSCxjQUFjLElBQUkrUixFQUFFeGUsU0FBU3dlLEVBQUV4ZixZQUFZLEdBQUcsSUFBSXdmLEVBQUV4ZSxVQUFVd2UsRUFBRXhFLGlCQUFpQndFLEVBQUU5ZSxZQUFZOGUsRUFBRXhFLGlCQUFpQixNQUF5QyxRQUFRLE1BQU16ZixNQUFNbEYsRUFBRSxNQUFPLENBQUMsTUFBTXFwQixHQUFHb1osR0FBRXZpQyxFQUFFQSxFQUFFeVIsT0FBTzBYLEVBQUUsQ0FBYSxHQUFHLFFBQWZwcEIsRUFBRUMsRUFBRWlTLFNBQW9CLENBQUNsUyxFQUFFMFIsT0FBT3pSLEVBQUV5UixPQUFPNHdCLEdBQUV0aUMsRUFBRSxLQUFLLENBQUNzaUMsR0FBRXJpQyxFQUFFeVIsTUFBTSxDQUFDb1gsRUFBRTRaLEdBQUdBLElBQUcsQ0FBVyxDQXdDbGRvRixDQUFHOW5DLEVBQUVFLEdBQUc0akMsR0FBRzVqQyxFQUFFRixHQUFHdWtCLEdBQUdpRyxJQUFJMVMsS0FBS3lTLEdBQUdDLEdBQUdELEdBQUcsS0FBS3ZxQixFQUFFbVMsUUFBUWpTLEVBQUVra0MsR0FBR2xrQyxFQUFFRixFQUFFeUIsR0FBR21SLEtBQUtpaEIsR0FBRWh1QixFQUFFd1AsR0FBRTFULEVBQUVvakMsR0FBRy9zQixXQUFXdFcsQ0FBQyxNQUFNMUIsRUFBRW1TLFFBQVFqUyxFQUFzRixHQUFwRnVsQyxLQUFLQSxJQUFHLEVBQUdDLEdBQUcxbEMsRUFBRTJsQyxHQUFHbGtDLEdBQW9CLEtBQWpCQyxFQUFFMUIsRUFBRXlVLGdCQUFxQjRvQixHQUFHLE1BaE9tSixTQUFZcjlCLEdBQUcsR0FBRzZULElBQUksbUJBQW9CQSxHQUFHazBCLGtCQUFrQixJQUFJbDBCLEdBQUdrMEIsa0JBQWtCbjBCLEdBQUc1VCxPQUFFLElBQU8sS0FBT0EsRUFBRW1TLFFBQVFSLE9BQVcsQ0FBQyxNQUFNMVIsR0FBRyxDQUFDLENBZ094UituQyxDQUFHOW5DLEVBQUU4UCxXQUFhaTJCLEdBQUdqbUMsRUFBRThTLE1BQVEsT0FBTzdTLEVBQUUsSUFBSXVCLEVBQUV4QixFQUFFaW9DLG1CQUFtQi9uQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVHLE9BQU9GLElBQVdzQixHQUFQQyxFQUFFeEIsRUFBRUMsSUFBT3lILE1BQU0sQ0FBQzIxQixlQUFlNzdCLEVBQUV5RCxNQUFNczNCLE9BQU8vNkIsRUFBRSs2QixTQUFTLEdBQUdRLEdBQUcsTUFBTUEsSUFBRyxFQUFHaDlCLEVBQUVpOUIsR0FBR0EsR0FBRyxLQUFLajlCLEtBQVUsRUFBSDJsQyxLQUFPLElBQUkzbEMsRUFBRW1HLEtBQUt3Z0MsS0FBNkIsR0FBeEJqbEMsRUFBRTFCLEVBQUV5VSxjQUF1QnpVLElBQUk2bEMsR0FBR0QsTUFBTUEsR0FBRyxFQUFFQyxHQUFHN2xDLEdBQUc0bEMsR0FBRyxFQUFFbFksSUFBZ0IsQ0FGeEZ3YSxDQUFHbG9DLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFLENBQUMsUUFBUXVqQyxHQUFHL3NCLFdBQVd2VyxFQUFFNFQsR0FBRTdULENBQUMsQ0FBQyxPQUFPLElBQUksQ0FHaGMsU0FBU21sQyxLQUFLLEdBQUcsT0FBT2pCLEdBQUcsQ0FBQyxJQUFJMWxDLEVBQUVzVixHQUFHcXdCLElBQUkxbEMsRUFBRThrQyxHQUFHL3NCLFdBQVc5WCxFQUFFbVYsR0FBRSxJQUFtQyxHQUEvQjB2QixHQUFHL3NCLFdBQVcsS0FBSzNDLEdBQUUsR0FBR3JWLEVBQUUsR0FBR0EsRUFBSyxPQUFPMGxDLEdBQUcsSUFBSWxrQyxHQUFFLE1BQU8sQ0FBbUIsR0FBbEJ4QixFQUFFMGxDLEdBQUdBLEdBQUcsS0FBS0MsR0FBRyxFQUFZLEVBQUY5UixHQUFLLE1BQU01dUIsTUFBTWxGLEVBQUUsTUFBTSxJQUFJMEIsRUFBRW95QixHQUFPLElBQUxBLElBQUcsRUFBTXlPLEdBQUV0aUMsRUFBRW1TLFFBQVEsT0FBT213QixJQUFHLENBQUMsSUFBSTVnQyxFQUFFNGdDLEdBQUUzZ0MsRUFBRUQsRUFBRXVRLE1BQU0sR0FBZ0IsR0FBUnF3QixHQUFFM3dCLE1BQVUsQ0FBQyxJQUFJOUwsRUFBRW5FLEVBQUVxdEIsVUFBVSxHQUFHLE9BQU9scEIsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFekYsT0FBTzBGLElBQUksQ0FBQyxJQUFJRixFQUFFQyxFQUFFQyxHQUFHLElBQUl3OEIsR0FBRTE4QixFQUFFLE9BQU8wOEIsSUFBRyxDQUFDLElBQUl0eEIsRUFBRXN4QixHQUFFLE9BQU90eEIsRUFBRTdLLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUd3OEIsR0FBRyxFQUFFM3hCLEVBQUV0UCxHQUFHLElBQUlzdkIsRUFBRWhnQixFQUFFaUIsTUFBTSxHQUFHLE9BQU8rZSxFQUFFQSxFQUFFdGYsT0FBT1YsRUFBRXN4QixHQUFFdFIsT0FBTyxLQUFLLE9BQU9zUixJQUFHLENBQUssSUFBSXJSLEdBQVJqZ0IsRUFBRXN4QixJQUFVcHdCLFFBQVFnZixFQUFFbGdCLEVBQUVVLE9BQWEsR0FBTm94QixHQUFHOXhCLEdBQU1BLElBQ25mcEwsRUFBRSxDQUFDMDhCLEdBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxPQUFPclIsRUFBRSxDQUFDQSxFQUFFdmYsT0FBT3dmLEVBQUVvUixHQUFFclIsRUFBRSxLQUFLLENBQUNxUixHQUFFcFIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJcEksRUFBRXBuQixFQUFFK1AsVUFBVSxHQUFHLE9BQU9xWCxFQUFFLENBQUMsSUFBSUMsRUFBRUQsRUFBRTdXLE1BQU0sR0FBRyxPQUFPOFcsRUFBRSxDQUFDRCxFQUFFN1csTUFBTSxLQUFLLEVBQUUsQ0FBQyxJQUFJK1csRUFBRUQsRUFBRTdXLFFBQVE2VyxFQUFFN1csUUFBUSxLQUFLNlcsRUFBRUMsQ0FBQyxPQUFPLE9BQU9ELEVBQUUsQ0FBQyxDQUFDdVosR0FBRTVnQyxDQUFDLENBQUMsQ0FBQyxHQUF1QixLQUFmQSxFQUFFNitCLGNBQW9CLE9BQU81K0IsRUFBRUEsRUFBRStQLE9BQU9oUSxFQUFFNGdDLEdBQUUzZ0MsT0FBTzFCLEVBQUUsS0FBSyxPQUFPcWlDLElBQUcsQ0FBSyxHQUFnQixNQUFwQjVnQyxFQUFFNGdDLElBQVkzd0IsTUFBWSxPQUFPalEsRUFBRXlFLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUd3OEIsR0FBRyxFQUFFamhDLEVBQUVBLEVBQUVnUSxRQUFRLElBQUl1WCxFQUFFdm5CLEVBQUV3USxRQUFRLEdBQUcsT0FBTytXLEVBQUUsQ0FBQ0EsRUFBRXZYLE9BQU9oUSxFQUFFZ1EsT0FBTzR3QixHQUFFclosRUFBRSxNQUFNaHBCLENBQUMsQ0FBQ3FpQyxHQUFFNWdDLEVBQUVnUSxNQUFNLENBQUMsQ0FBQyxJQUFJeVgsRUFBRW5wQixFQUFFbVMsUUFBUSxJQUFJbXdCLEdBQUVuWixFQUFFLE9BQU9tWixJQUFHLENBQUssSUFBSXBaLEdBQVJ2bkIsRUFBRTJnQyxJQUFVcndCLE1BQU0sR0FBdUIsS0FBZnRRLEVBQUU0K0IsY0FBb0IsT0FDbGZyWCxFQUFFQSxFQUFFeFgsT0FBTy9QLEVBQUUyZ0MsR0FBRXBaLE9BQU9qcEIsRUFBRSxJQUFJMEIsRUFBRXduQixFQUFFLE9BQU9tWixJQUFHLENBQUssR0FBZ0IsTUFBcEJ6OEIsRUFBRXk4QixJQUFZM3dCLE1BQVksSUFBSSxPQUFPOUwsRUFBRU0sS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR3k4QixHQUFHLEVBQUUvOEIsR0FBRyxDQUFDLE1BQU02akIsR0FBSThZLEdBQUUzOEIsRUFBRUEsRUFBRTZMLE9BQU9nWSxFQUFHLENBQUMsR0FBRzdqQixJQUFJbEUsRUFBRSxDQUFDMmdDLEdBQUUsS0FBSyxNQUFNcmlDLENBQUMsQ0FBQyxJQUFJbXBCLEVBQUV2akIsRUFBRXFNLFFBQVEsR0FBRyxPQUFPa1gsRUFBRSxDQUFDQSxFQUFFMVgsT0FBTzdMLEVBQUU2TCxPQUFPNHdCLEdBQUVsWixFQUFFLE1BQU1ucEIsQ0FBQyxDQUFDcWlDLEdBQUV6OEIsRUFBRTZMLE1BQU0sQ0FBQyxDQUFVLEdBQVRtaUIsR0FBRXB5QixFQUFFaXNCLEtBQVE3WixJQUFJLG1CQUFvQkEsR0FBR3MwQixzQkFBc0IsSUFBSXQwQixHQUFHczBCLHNCQUFzQnYwQixHQUFHNVQsRUFBRSxDQUFDLE1BQU0wcEIsR0FBSSxDQUFDbG9CLEdBQUUsQ0FBRSxDQUFDLE9BQU9BLENBQUMsQ0FBQyxRQUFRNlQsR0FBRW5WLEVBQUU2a0MsR0FBRy9zQixXQUFXL1gsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBU21vQyxHQUFHcG9DLEVBQUVDLEVBQUVDLEdBQXlCRixFQUFFNHpCLEdBQUc1ekIsRUFBakJDLEVBQUU4OEIsR0FBRy84QixFQUFmQyxFQUFFcThCLEdBQUdwOEIsRUFBRUQsR0FBWSxHQUFZLEdBQUdBLEVBQUV1NUIsS0FBSSxPQUFPeDVCLElBQUlrVixHQUFHbFYsRUFBRSxFQUFFQyxHQUFHZ21DLEdBQUdqbUMsRUFBRUMsR0FBRyxDQUN6ZSxTQUFTdWlDLEdBQUV4aUMsRUFBRUMsRUFBRUMsR0FBRyxHQUFHLElBQUlGLEVBQUVtRyxJQUFJaWlDLEdBQUdwb0MsRUFBRUEsRUFBRUUsUUFBUSxLQUFLLE9BQU9ELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUVrRyxJQUFJLENBQUNpaUMsR0FBR25vQyxFQUFFRCxFQUFFRSxHQUFHLEtBQUssQ0FBTSxHQUFHLElBQUlELEVBQUVrRyxJQUFJLENBQUMsSUFBSTNFLEVBQUV2QixFQUFFK1AsVUFBVSxHQUFHLG1CQUFvQi9QLEVBQUVpQyxLQUFLaTdCLDBCQUEwQixtQkFBb0IzN0IsRUFBRTQ3QixvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR2hWLElBQUk3bUIsSUFBSSxDQUF1QnZCLEVBQUUyekIsR0FBRzN6QixFQUFqQkQsRUFBRWs5QixHQUFHajlCLEVBQWZELEVBQUVzOEIsR0FBR3A4QixFQUFFRixHQUFZLEdBQVksR0FBR0EsRUFBRXc1QixLQUFJLE9BQU92NUIsSUFBSWlWLEdBQUdqVixFQUFFLEVBQUVELEdBQUdpbUMsR0FBR2htQyxFQUFFRCxJQUFJLEtBQUssQ0FBQyxDQUFDQyxFQUFFQSxFQUFFeVIsTUFBTSxDQUFDLENBQ25WLFNBQVMrckIsR0FBR3o5QixFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFeEIsRUFBRXc5QixVQUFVLE9BQU9oOEIsR0FBR0EsRUFBRStVLE9BQU90VyxHQUFHQSxFQUFFdTVCLEtBQUl4NUIsRUFBRTJVLGFBQWEzVSxFQUFFMFUsZUFBZXhVLEVBQUV3M0IsS0FBSTEzQixJQUFJaWxDLEdBQUUva0MsS0FBS0EsSUFBSSxJQUFJNGhDLElBQUcsSUFBSUEsS0FBTSxVQUFGbUQsTUFBZUEsSUFBRyxJQUFJbnlCLEtBQUlteEIsR0FBRzZDLEdBQUc5bUMsRUFBRSxHQUFHb2xDLElBQUlsbEMsR0FBRytsQyxHQUFHam1DLEVBQUVDLEVBQUUsQ0FBQyxTQUFTb29DLEdBQUdyb0MsRUFBRUMsR0FBRyxJQUFJQSxJQUFnQixFQUFQRCxFQUFFc3ZCLE1BQWFydkIsRUFBRXFVLEtBQWtCLFdBQWZBLEtBQUssTUFBdUJBLEdBQUcsVUFBekNyVSxFQUFFLEdBQWtELElBQUlDLEVBQUVzNUIsS0FBYyxRQUFWeDVCLEVBQUU0eUIsR0FBRzV5QixFQUFFQyxNQUFjaVYsR0FBR2xWLEVBQUVDLEVBQUVDLEdBQUcrbEMsR0FBR2ptQyxFQUFFRSxHQUFHLENBQUMsU0FBU2tnQyxHQUFHcGdDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTZSLGNBQWMzUixFQUFFLEVBQUUsT0FBT0QsSUFBSUMsRUFBRUQsRUFBRW12QixXQUFXaVosR0FBR3JvQyxFQUFFRSxFQUFFLENBQ2paLFNBQVMwakMsR0FBRzVqQyxFQUFFQyxHQUFHLElBQUlDLEVBQUUsRUFBRSxPQUFPRixFQUFFbUcsS0FBSyxLQUFLLEdBQUcsSUFBSTNFLEVBQUV4QixFQUFFZ1EsVUFBY3ZPLEVBQUV6QixFQUFFNlIsY0FBYyxPQUFPcFEsSUFBSXZCLEVBQUV1QixFQUFFMnRCLFdBQVcsTUFBTSxLQUFLLEdBQUc1dEIsRUFBRXhCLEVBQUVnUSxVQUFVLE1BQU0sUUFBUSxNQUFNL0ssTUFBTWxGLEVBQUUsTUFBTyxPQUFPeUIsR0FBR0EsRUFBRStVLE9BQU90VyxHQUFHb29DLEdBQUdyb0MsRUFBRUUsRUFBRSxDQVFxSyxTQUFTdW1DLEdBQUd6bUMsRUFBRUMsR0FBRyxPQUFPcVMsR0FBR3RTLEVBQUVDLEVBQUUsQ0FDalosU0FBU3FvQyxHQUFHdG9DLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHSSxLQUFLdUUsSUFBSW5HLEVBQUU0QixLQUFLdWMsSUFBSWplLEVBQUUwQixLQUFLc1EsUUFBUXRRLEtBQUtxUSxNQUFNclEsS0FBSzhQLE9BQU85UCxLQUFLb08sVUFBVXBPLEtBQUtNLEtBQUtOLEtBQUtrdEIsWUFBWSxLQUFLbHRCLEtBQUs0dUIsTUFBTSxFQUFFNXVCLEtBQUtvdUIsSUFBSSxLQUFLcHVCLEtBQUtxdEIsYUFBYWh2QixFQUFFMkIsS0FBS3F3QixhQUFhcndCLEtBQUtpUSxjQUFjalEsS0FBS214QixZQUFZbnhCLEtBQUs4dEIsY0FBYyxLQUFLOXRCLEtBQUswdEIsS0FBSzl0QixFQUFFSSxLQUFLMitCLGFBQWEzK0IsS0FBSytQLE1BQU0sRUFBRS9QLEtBQUttdEIsVUFBVSxLQUFLbnRCLEtBQUttd0IsV0FBV253QixLQUFLdXdCLE1BQU0sRUFBRXZ3QixLQUFLNlAsVUFBVSxJQUFJLENBQUMsU0FBU29kLEdBQUc3dUIsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsT0FBTyxJQUFJOG1DLEdBQUd0b0MsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUUsQ0FBQyxTQUFTMDhCLEdBQUdsK0IsR0FBaUIsVUFBZEEsRUFBRUEsRUFBRWtCLGFBQXVCbEIsRUFBRXVvQyxpQkFBaUIsQ0FFcGQsU0FBUzlYLEdBQUd6d0IsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFeVIsVUFDdUIsT0FEYixPQUFPdlIsSUFBR0EsRUFBRTJ1QixHQUFHN3VCLEVBQUVtRyxJQUFJbEcsRUFBRUQsRUFBRW1lLElBQUluZSxFQUFFc3ZCLE9BQVFSLFlBQVk5dUIsRUFBRTh1QixZQUFZNXVCLEVBQUVnQyxLQUFLbEMsRUFBRWtDLEtBQUtoQyxFQUFFOFAsVUFBVWhRLEVBQUVnUSxVQUFVOVAsRUFBRXVSLFVBQVV6UixFQUFFQSxFQUFFeVIsVUFBVXZSLElBQUlBLEVBQUUrdUIsYUFBYWh2QixFQUFFQyxFQUFFZ0MsS0FBS2xDLEVBQUVrQyxLQUFLaEMsRUFBRXlSLE1BQU0sRUFBRXpSLEVBQUVxZ0MsYUFBYSxFQUFFcmdDLEVBQUU2dUIsVUFBVSxNQUFNN3VCLEVBQUV5UixNQUFjLFNBQVIzUixFQUFFMlIsTUFBZXpSLEVBQUU2eEIsV0FBVy94QixFQUFFK3hCLFdBQVc3eEIsRUFBRWl5QixNQUFNbnlCLEVBQUVteUIsTUFBTWp5QixFQUFFK1IsTUFBTWpTLEVBQUVpUyxNQUFNL1IsRUFBRXd2QixjQUFjMXZCLEVBQUUwdkIsY0FBY3h2QixFQUFFMlIsY0FBYzdSLEVBQUU2UixjQUFjM1IsRUFBRTZ5QixZQUFZL3lCLEVBQUUreUIsWUFBWTl5QixFQUFFRCxFQUFFaXlCLGFBQWEveEIsRUFBRSt4QixhQUFhLE9BQU9oeUIsRUFBRSxLQUFLLENBQUNreUIsTUFBTWx5QixFQUFFa3lCLE1BQU1ELGFBQWFqeUIsRUFBRWl5QixjQUMvZWh5QixFQUFFZ1MsUUFBUWxTLEVBQUVrUyxRQUFRaFMsRUFBRXN3QixNQUFNeHdCLEVBQUV3d0IsTUFBTXR3QixFQUFFOHZCLElBQUlod0IsRUFBRWd3QixJQUFXOXZCLENBQUMsQ0FDeEQsU0FBUzB3QixHQUFHNXdCLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxFQUFFQyxHQUFHLElBQUlDLEVBQUUsRUFBTSxHQUFKSCxFQUFFeEIsRUFBSyxtQkFBb0JBLEVBQUVrK0IsR0FBR2wrQixLQUFLMkIsRUFBRSxRQUFRLEdBQUcsaUJBQWtCM0IsRUFBRTJCLEVBQUUsT0FBTzNCLEVBQUUsT0FBT0EsR0FBRyxLQUFLK0QsRUFBRyxPQUFPZ3RCLEdBQUc3d0IsRUFBRW9KLFNBQVM3SCxFQUFFQyxFQUFFekIsR0FBRyxLQUFLK0QsRUFBR3JDLEVBQUUsRUFBRUYsR0FBRyxFQUFFLE1BQU0sS0FBS3dDLEVBQUcsT0FBT2pFLEVBQUU2dUIsR0FBRyxHQUFHM3VCLEVBQUVELEVBQUksRUFBRndCLElBQU9xdEIsWUFBWTdxQixFQUFHakUsRUFBRW15QixNQUFNendCLEVBQUUxQixFQUFFLEtBQUtxRSxFQUFHLE9BQU9yRSxFQUFFNnVCLEdBQUcsR0FBRzN1QixFQUFFRCxFQUFFd0IsSUFBS3F0QixZQUFZenFCLEVBQUdyRSxFQUFFbXlCLE1BQU16d0IsRUFBRTFCLEVBQUUsS0FBS3NFLEVBQUcsT0FBT3RFLEVBQUU2dUIsR0FBRyxHQUFHM3VCLEVBQUVELEVBQUV3QixJQUFLcXRCLFlBQVl4cUIsRUFBR3RFLEVBQUVteUIsTUFBTXp3QixFQUFFMUIsRUFBRSxLQUFLeUUsRUFBRyxPQUFPcTdCLEdBQUc1L0IsRUFBRXVCLEVBQUVDLEVBQUV6QixHQUFHLFFBQVEsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxPQUFPQSxFQUFFc0csVUFBVSxLQUFLcEMsRUFBR3ZDLEVBQUUsR0FBRyxNQUFNM0IsRUFBRSxLQUFLbUUsRUFBR3hDLEVBQUUsRUFBRSxNQUFNM0IsRUFBRSxLQUFLb0UsRUFBR3pDLEVBQUUsR0FDcGYsTUFBTTNCLEVBQUUsS0FBS3VFLEVBQUc1QyxFQUFFLEdBQUcsTUFBTTNCLEVBQUUsS0FBS3dFLEVBQUc3QyxFQUFFLEdBQUdILEVBQUUsS0FBSyxNQUFNeEIsRUFBRSxNQUFNaUYsTUFBTWxGLEVBQUUsSUFBSSxNQUFNQyxFQUFFQSxTQUFTQSxFQUFFLEtBQXVELE9BQWpEQyxFQUFFNHVCLEdBQUdsdEIsRUFBRXpCLEVBQUVELEVBQUV3QixJQUFLcXRCLFlBQVk5dUIsRUFBRUMsRUFBRWlDLEtBQUtWLEVBQUV2QixFQUFFa3lCLE1BQU16d0IsRUFBU3pCLENBQUMsQ0FBQyxTQUFTOHdCLEdBQUcvd0IsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQTJCLE9BQXhCeEIsRUFBRTZ1QixHQUFHLEVBQUU3dUIsRUFBRXdCLEVBQUV2QixJQUFLa3lCLE1BQU1qeUIsRUFBU0YsQ0FBQyxDQUFDLFNBQVM4L0IsR0FBRzkvQixFQUFFQyxFQUFFQyxFQUFFc0IsR0FBdUUsT0FBcEV4QixFQUFFNnVCLEdBQUcsR0FBRzd1QixFQUFFd0IsRUFBRXZCLElBQUs2dUIsWUFBWXJxQixFQUFHekUsRUFBRW15QixNQUFNanlCLEVBQUVGLEVBQUVnUSxVQUFVLENBQUNnMEIsVUFBUyxHQUFXaGtDLENBQUMsQ0FBQyxTQUFTMHdCLEdBQUcxd0IsRUFBRUMsRUFBRUMsR0FBOEIsT0FBM0JGLEVBQUU2dUIsR0FBRyxFQUFFN3VCLEVBQUUsS0FBS0MsSUFBS2t5QixNQUFNanlCLEVBQVNGLENBQUMsQ0FDNVcsU0FBUzh3QixHQUFHOXdCLEVBQUVDLEVBQUVDLEdBQThKLE9BQTNKRCxFQUFFNHVCLEdBQUcsRUFBRSxPQUFPN3VCLEVBQUVzSixTQUFTdEosRUFBRXNKLFNBQVMsR0FBR3RKLEVBQUVtZSxJQUFJbGUsSUFBS2t5QixNQUFNanlCLEVBQUVELEVBQUUrUCxVQUFVLENBQUNtSCxjQUFjblgsRUFBRW1YLGNBQWNxeEIsZ0JBQWdCLEtBQUszWCxlQUFlN3dCLEVBQUU2d0IsZ0JBQXVCNXdCLENBQUMsQ0FDdEwsU0FBU3dvQyxHQUFHem9DLEVBQUVDLEVBQUVDLEVBQUVzQixFQUFFQyxHQUFHRyxLQUFLdUUsSUFBSWxHLEVBQUUyQixLQUFLdVYsY0FBY25YLEVBQUU0QixLQUFLdWxDLGFBQWF2bEMsS0FBSzQ3QixVQUFVNTdCLEtBQUt1USxRQUFRdlEsS0FBSzRtQyxnQkFBZ0IsS0FBSzVtQyxLQUFLMGxDLGVBQWUsRUFBRTFsQyxLQUFLc2tDLGFBQWF0a0MsS0FBS3c5QixlQUFleDlCLEtBQUswd0IsUUFBUSxLQUFLMXdCLEtBQUswa0MsaUJBQWlCLEVBQUUxa0MsS0FBS3VULFdBQVdGLEdBQUcsR0FBR3JULEtBQUt1a0MsZ0JBQWdCbHhCLElBQUksR0FBR3JULEtBQUtnVCxlQUFlaFQsS0FBS3dsQyxjQUFjeGxDLEtBQUtnbUMsaUJBQWlCaG1DLEtBQUt3a0MsYUFBYXhrQyxLQUFLK1MsWUFBWS9TLEtBQUs4UyxlQUFlOVMsS0FBSzZTLGFBQWEsRUFBRTdTLEtBQUtpVCxjQUFjSSxHQUFHLEdBQUdyVCxLQUFLZzVCLGlCQUFpQnA1QixFQUFFSSxLQUFLcW1DLG1CQUFtQnhtQyxFQUFFRyxLQUFLOG1DLGdDQUMvZSxJQUFJLENBQUMsU0FBU0MsR0FBRzNvQyxFQUFFQyxFQUFFQyxFQUFFc0IsRUFBRUMsRUFBRUMsRUFBRUMsRUFBRWtFLEVBQUVDLEdBQWdOLE9BQTdNOUYsRUFBRSxJQUFJeW9DLEdBQUd6b0MsRUFBRUMsRUFBRUMsRUFBRTJGLEVBQUVDLEdBQUcsSUFBSTdGLEdBQUdBLEVBQUUsR0FBRSxJQUFLeUIsSUFBSXpCLEdBQUcsSUFBSUEsRUFBRSxFQUFFeUIsRUFBRW10QixHQUFHLEVBQUUsS0FBSyxLQUFLNXVCLEdBQUdELEVBQUVtUyxRQUFRelEsRUFBRUEsRUFBRXNPLFVBQVVoUSxFQUFFMEIsRUFBRW1RLGNBQWMsQ0FBQ2dVLFFBQVFya0IsRUFBRTBWLGFBQWFoWCxFQUFFMG9DLE1BQU0sS0FBS25LLFlBQVksS0FBS29LLDBCQUEwQixNQUFNL1YsR0FBR3B4QixHQUFVMUIsQ0FBQyxDQUN6UCxTQUFTOG9DLEdBQUc5b0MsR0FBRyxJQUFJQSxFQUFFLE9BQU9xc0IsR0FBdUJyc0IsRUFBRSxDQUFDLEdBQUd3UixHQUExQnhSLEVBQUVBLEVBQUVrN0IsbUJBQThCbDdCLEdBQUcsSUFBSUEsRUFBRW1HLElBQUksTUFBTWxCLE1BQU1sRixFQUFFLE1BQU0sSUFBSUUsRUFBRUQsRUFBRSxFQUFFLENBQUMsT0FBT0MsRUFBRWtHLEtBQUssS0FBSyxFQUFFbEcsRUFBRUEsRUFBRStQLFVBQVVzaUIsUUFBUSxNQUFNdHlCLEVBQUUsS0FBSyxFQUFFLEdBQUc2c0IsR0FBRzVzQixFQUFFaUMsTUFBTSxDQUFDakMsRUFBRUEsRUFBRStQLFVBQVVvZCwwQ0FBMEMsTUFBTXB0QixDQUFDLEVBQUVDLEVBQUVBLEVBQUV5UixNQUFNLE9BQU8sT0FBT3pSLEdBQUcsTUFBTWdGLE1BQU1sRixFQUFFLEtBQU0sQ0FBQyxHQUFHLElBQUlDLEVBQUVtRyxJQUFJLENBQUMsSUFBSWpHLEVBQUVGLEVBQUVrQyxLQUFLLEdBQUcycUIsR0FBRzNzQixHQUFHLE9BQU8rc0IsR0FBR2p0QixFQUFFRSxFQUFFRCxFQUFFLENBQUMsT0FBT0EsQ0FBQyxDQUNwVyxTQUFTOG9DLEdBQUcvb0MsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEVBQUVDLEVBQUVDLEVBQUVrRSxFQUFFQyxHQUF3SyxPQUFySzlGLEVBQUUyb0MsR0FBR3pvQyxFQUFFc0IsR0FBRSxFQUFHeEIsRUFBRXlCLEVBQUVDLEVBQUVDLEVBQUVrRSxFQUFFQyxJQUFLd3NCLFFBQVF3VyxHQUFHLE1BQU01b0MsRUFBRUYsRUFBRW1TLFNBQXNCelEsRUFBRTZ4QixHQUFoQi94QixFQUFFZzRCLEtBQUkvM0IsRUFBRTQzQixHQUFHbjVCLEtBQWV5ekIsU0FBUyxNQUFTMXpCLEVBQVlBLEVBQUUsS0FBSzJ6QixHQUFHMXpCLEVBQUV3QixFQUFFRCxHQUFHekIsRUFBRW1TLFFBQVFnZ0IsTUFBTTF3QixFQUFFeVQsR0FBR2xWLEVBQUV5QixFQUFFRCxHQUFHeWtDLEdBQUdqbUMsRUFBRXdCLEdBQVV4QixDQUFDLENBQUMsU0FBU2dwQyxHQUFHaHBDLEVBQUVDLEVBQUVDLEVBQUVzQixHQUFHLElBQUlDLEVBQUV4QixFQUFFa1MsUUFBUXpRLEVBQUU4M0IsS0FBSTczQixFQUFFMDNCLEdBQUc1M0IsR0FBc0wsT0FBbkx2QixFQUFFNG9DLEdBQUc1b0MsR0FBRyxPQUFPRCxFQUFFcXlCLFFBQVFyeUIsRUFBRXF5QixRQUFRcHlCLEVBQUVELEVBQUVtL0IsZUFBZWwvQixHQUFFRCxFQUFFc3pCLEdBQUc3eEIsRUFBRUMsSUFBSyt4QixRQUFRLENBQUM3TixRQUFRN2xCLEdBQXVCLFFBQXBCd0IsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEtBQWF2QixFQUFFMHpCLFNBQVNueUIsR0FBZSxRQUFaeEIsRUFBRTR6QixHQUFHbnlCLEVBQUV4QixFQUFFMEIsTUFBY3EyQixHQUFHaDRCLEVBQUV5QixFQUFFRSxFQUFFRCxHQUFHb3lCLEdBQUc5ekIsRUFBRXlCLEVBQUVFLElBQVdBLENBQUMsQ0FDM2IsU0FBU3NuQyxHQUFHanBDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRW1TLFNBQWNGLE9BQXlCalMsRUFBRWlTLE1BQU05TCxJQUFvRG5HLEVBQUVpUyxNQUFNakMsV0FBaEYsSUFBMEYsQ0FBQyxTQUFTazVCLEdBQUdscEMsRUFBRUMsR0FBcUIsR0FBRyxRQUFyQkQsRUFBRUEsRUFBRTZSLGdCQUEyQixPQUFPN1IsRUFBRThSLFdBQVcsQ0FBQyxJQUFJNVIsRUFBRUYsRUFBRW92QixVQUFVcHZCLEVBQUVvdkIsVUFBVSxJQUFJbHZCLEdBQUdBLEVBQUVELEVBQUVDLEVBQUVELENBQUMsQ0FBQyxDQUFDLFNBQVNrcEMsR0FBR25wQyxFQUFFQyxHQUFHaXBDLEdBQUdscEMsRUFBRUMsSUFBSUQsRUFBRUEsRUFBRXlSLFlBQVl5M0IsR0FBR2xwQyxFQUFFQyxFQUFFLENBbkI3U3lrQyxHQUFHLFNBQVMxa0MsRUFBRUMsRUFBRUMsR0FBRyxHQUFHLE9BQU9GLEVBQUUsR0FBR0EsRUFBRTB2QixnQkFBZ0J6dkIsRUFBRWd2QixjQUFjMUMsR0FBR3BhLFFBQVFpZ0IsSUFBRyxNQUFPLENBQUMsS0FBUXB5QixFQUFFbXlCLE1BQU1qeUIsR0FBaUIsSUFBUkQsRUFBRTBSLE9BQVcsT0FBT3lnQixJQUFHLEVBekUxSSxTQUFZcHlCLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0QsRUFBRWtHLEtBQUssS0FBSyxFQUFFZzVCLEdBQUdsL0IsR0FBRzJ2QixLQUFLLE1BQU0sS0FBSyxFQUFFK0UsR0FBRzEwQixHQUFHLE1BQU0sS0FBSyxFQUFFNHNCLEdBQUc1c0IsRUFBRWlDLE9BQU9pckIsR0FBR2x0QixHQUFHLE1BQU0sS0FBSyxFQUFFdTBCLEdBQUd2MEIsRUFBRUEsRUFBRStQLFVBQVVtSCxlQUFlLE1BQU0sS0FBSyxHQUFHLElBQUkzVixFQUFFdkIsRUFBRWlDLEtBQUtxRSxTQUFTOUUsRUFBRXhCLEVBQUV5dkIsY0FBYy9uQixNQUFNeWtCLEdBQUVtRixHQUFHL3ZCLEVBQUVxd0IsZUFBZXJ3QixFQUFFcXdCLGNBQWNwd0IsRUFBRSxNQUFNLEtBQUssR0FBcUIsR0FBRyxRQUFyQkQsRUFBRXZCLEVBQUU0UixlQUEyQixPQUFHLE9BQU9yUSxFQUFFc1EsWUFBa0JzYSxHQUFFeUksR0FBWSxFQUFWQSxHQUFFMWlCLFNBQVdsUyxFQUFFMFIsT0FBTyxJQUFJLE1BQWF6UixFQUFFRCxFQUFFZ1MsTUFBTThmLFdBQW1CNk4sR0FBRzUvQixFQUFFQyxFQUFFQyxJQUFHa3NCLEdBQUV5SSxHQUFZLEVBQVZBLEdBQUUxaUIsU0FBOEIsUUFBbkJuUyxFQUFFZytCLEdBQUdoK0IsRUFBRUMsRUFBRUMsSUFBbUJGLEVBQUVrUyxRQUFRLE1BQUtrYSxHQUFFeUksR0FBWSxFQUFWQSxHQUFFMWlCLFNBQVcsTUFBTSxLQUFLLEdBQzdkLEdBRGdlM1EsS0FBT3RCLEVBQ3JmRCxFQUFFOHhCLFlBQTRCLElBQVIveEIsRUFBRTJSLE1BQVcsQ0FBQyxHQUFHblEsRUFBRSxPQUFPdy9CLEdBQUdoaEMsRUFBRUMsRUFBRUMsR0FBR0QsRUFBRTBSLE9BQU8sR0FBRyxDQUE2RixHQUExRSxRQUFsQmxRLEVBQUV4QixFQUFFNFIsaUJBQXlCcFEsRUFBRWsvQixVQUFVLEtBQUtsL0IsRUFBRXEvQixLQUFLLEtBQUtyL0IsRUFBRW0yQixXQUFXLE1BQU14TCxHQUFFeUksR0FBRUEsR0FBRTFpQixTQUFZM1EsRUFBRSxNQUFXLE9BQU8sS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU92QixFQUFFa3lCLE1BQU0sRUFBRW1NLEdBQUd0K0IsRUFBRUMsRUFBRUMsR0FBRyxPQUFPODlCLEdBQUdoK0IsRUFBRUMsRUFBRUMsRUFBRSxDQXdFN0drcEMsQ0FBR3BwQyxFQUFFQyxFQUFFQyxHQUFHa3lCLE1BQWdCLE9BQVJweUIsRUFBRTJSLE1BQW1CLE1BQU15Z0IsSUFBRyxFQUFHMUQsSUFBZ0IsUUFBUnp1QixFQUFFMFIsT0FBZ0IwYyxHQUFHcHVCLEVBQUU2dEIsR0FBRzd0QixFQUFFdXdCLE9BQWlCLE9BQVZ2d0IsRUFBRWt5QixNQUFNLEVBQVNseUIsRUFBRWtHLEtBQUssS0FBSyxFQUFFLElBQUkzRSxFQUFFdkIsRUFBRWlDLEtBQUs0OEIsR0FBRzkrQixFQUFFQyxHQUFHRCxFQUFFQyxFQUFFZ3ZCLGFBQWEsSUFBSXh0QixFQUFFZ3JCLEdBQUd4c0IsRUFBRXFzQixHQUFFbmEsU0FBUzZmLEdBQUcveEIsRUFBRUMsR0FBR3VCLEVBQUV1MEIsR0FBRyxLQUFLLzFCLEVBQUV1QixFQUFFeEIsRUFBRXlCLEVBQUV2QixHQUFHLElBQUl3QixFQUFFMjBCLEtBQ3ZJLE9BRDRJcDJCLEVBQUUwUixPQUFPLEVBQUUsaUJBQWtCbFEsR0FBRyxPQUFPQSxHQUFHLG1CQUFvQkEsRUFBRTJFLGFBQVEsSUFBUzNFLEVBQUU2RSxVQUFVckcsRUFBRWtHLElBQUksRUFBRWxHLEVBQUU0UixjQUFjLEtBQUs1UixFQUFFOHlCLFlBQzFlLEtBQUtsRyxHQUFHcnJCLElBQUlFLEdBQUUsRUFBR3lyQixHQUFHbHRCLElBQUl5QixHQUFFLEVBQUd6QixFQUFFNFIsY0FBYyxPQUFPcFEsRUFBRWs2QixZQUFPLElBQVNsNkIsRUFBRWs2QixNQUFNbDZCLEVBQUVrNkIsTUFBTSxLQUFLN0ksR0FBRzd5QixHQUFHd0IsRUFBRW02QixRQUFRWixHQUFHLzZCLEVBQUUrUCxVQUFVdk8sRUFBRUEsRUFBRXk1QixnQkFBZ0JqN0IsRUFBRSs3QixHQUFHLzdCLEVBQUV1QixFQUFFeEIsRUFBRUUsR0FBR0QsRUFBRWkvQixHQUFHLEtBQUtqL0IsRUFBRXVCLEdBQUUsRUFBR0UsRUFBRXhCLEtBQUtELEVBQUVrRyxJQUFJLEVBQUV1b0IsSUFBR2h0QixHQUFHNHNCLEdBQUdydUIsR0FBRzY5QixHQUFHLEtBQUs3OUIsRUFBRXdCLEVBQUV2QixHQUFHRCxFQUFFQSxFQUFFZ1MsT0FBY2hTLEVBQUUsS0FBSyxHQUFHdUIsRUFBRXZCLEVBQUU2dUIsWUFBWTl1QixFQUFFLENBQXFGLE9BQXBGOCtCLEdBQUc5K0IsRUFBRUMsR0FBR0QsRUFBRUMsRUFBRWd2QixhQUF1Qnp0QixHQUFWQyxFQUFFRCxFQUFFaUYsT0FBVWpGLEVBQUVnRixVQUFVdkcsRUFBRWlDLEtBQUtWLEVBQUVDLEVBQUV4QixFQUFFa0csSUFRdFUsU0FBWW5HLEdBQUcsR0FBRyxtQkFBb0JBLEVBQUUsT0FBT2srQixHQUFHbCtCLEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBU0EsRUFBWSxDQUFjLElBQWJBLEVBQUVBLEVBQUVzRyxZQUFnQmxDLEVBQUcsT0FBTyxHQUFHLEdBQUdwRSxJQUFJdUUsRUFBRyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FSMkw4a0MsQ0FBRzduQyxHQUFHeEIsRUFBRTY2QixHQUFHcjVCLEVBQUV4QixHQUFVeUIsR0FBRyxLQUFLLEVBQUV4QixFQUFFbytCLEdBQUcsS0FBS3ArQixFQUFFdUIsRUFBRXhCLEVBQUVFLEdBQUcsTUFBTUYsRUFBRSxLQUFLLEVBQUVDLEVBQUU0K0IsR0FBRyxLQUFLNStCLEVBQUV1QixFQUFFeEIsRUFBRUUsR0FBRyxNQUFNRixFQUFFLEtBQUssR0FBR0MsRUFBRTg5QixHQUFHLEtBQUs5OUIsRUFBRXVCLEVBQUV4QixFQUFFRSxHQUFHLE1BQU1GLEVBQUUsS0FBSyxHQUFHQyxFQUFFZytCLEdBQUcsS0FBS2grQixFQUFFdUIsRUFBRXE1QixHQUFHcjVCLEVBQUVVLEtBQUtsQyxHQUFHRSxHQUFHLE1BQU1GLEVBQUUsTUFBTWlGLE1BQU1sRixFQUFFLElBQ3ZnQnlCLEVBQUUsSUFBSyxDQUFDLE9BQU92QixFQUFFLEtBQUssRUFBRSxPQUFPdUIsRUFBRXZCLEVBQUVpQyxLQUFLVCxFQUFFeEIsRUFBRWd2QixhQUEyQ29QLEdBQUdyK0IsRUFBRUMsRUFBRXVCLEVBQXJDQyxFQUFFeEIsRUFBRTZ1QixjQUFjdHRCLEVBQUVDLEVBQUVvNUIsR0FBR3I1QixFQUFFQyxHQUFjdkIsR0FBRyxLQUFLLEVBQUUsT0FBT3NCLEVBQUV2QixFQUFFaUMsS0FBS1QsRUFBRXhCLEVBQUVndkIsYUFBMkM0UCxHQUFHNytCLEVBQUVDLEVBQUV1QixFQUFyQ0MsRUFBRXhCLEVBQUU2dUIsY0FBY3R0QixFQUFFQyxFQUFFbzVCLEdBQUdyNUIsRUFBRUMsR0FBY3ZCLEdBQUcsS0FBSyxFQUFFRixFQUFFLENBQU8sR0FBTm0vQixHQUFHbC9CLEdBQU0sT0FBT0QsRUFBRSxNQUFNaUYsTUFBTWxGLEVBQUUsTUFBTXlCLEVBQUV2QixFQUFFZ3ZCLGFBQStCeHRCLEdBQWxCQyxFQUFFekIsRUFBRTRSLGVBQWtCZ1UsUUFBUXlOLEdBQUd0ekIsRUFBRUMsR0FBRyt6QixHQUFHL3pCLEVBQUV1QixFQUFFLEtBQUt0QixHQUFHLElBQUl5QixFQUFFMUIsRUFBRTRSLGNBQTBCLEdBQVpyUSxFQUFFRyxFQUFFa2tCLFFBQVdua0IsRUFBRXdWLGFBQVksQ0FBQyxHQUFHeFYsRUFBRSxDQUFDbWtCLFFBQVFya0IsRUFBRTBWLGNBQWEsRUFBRzB4QixNQUFNam5DLEVBQUVpbkMsTUFBTUMsMEJBQTBCbG5DLEVBQUVrbkMsMEJBQTBCcEssWUFBWTk4QixFQUFFODhCLGFBQWF4K0IsRUFBRTh5QixZQUFZQyxVQUNoZnR4QixFQUFFekIsRUFBRTRSLGNBQWNuUSxFQUFVLElBQVJ6QixFQUFFMFIsTUFBVSxDQUF1QjFSLEVBQUVvL0IsR0FBR3IvQixFQUFFQyxFQUFFdUIsRUFBRXRCLEVBQWpDdUIsRUFBRTY2QixHQUFHcjNCLE1BQU1sRixFQUFFLE1BQU1FLElBQW1CLE1BQU1ELENBQUMsQ0FBTSxHQUFHd0IsSUFBSUMsRUFBRSxDQUF1QnhCLEVBQUVvL0IsR0FBR3IvQixFQUFFQyxFQUFFdUIsRUFBRXRCLEVBQWpDdUIsRUFBRTY2QixHQUFHcjNCLE1BQU1sRixFQUFFLE1BQU1FLElBQW1CLE1BQU1ELENBQUMsQ0FBTSxJQUFJeXVCLEdBQUdqRCxHQUFHdnJCLEVBQUUrUCxVQUFVbUgsY0FBY2hOLFlBQVlxa0IsR0FBR3Z1QixFQUFFeXVCLElBQUUsRUFBR0MsR0FBRyxLQUFLenVCLEVBQUVveEIsR0FBR3J4QixFQUFFLEtBQUt1QixFQUFFdEIsR0FBR0QsRUFBRWdTLE1BQU0vUixFQUFFQSxHQUFHQSxFQUFFeVIsT0FBZSxFQUFUelIsRUFBRXlSLE1BQVMsS0FBS3pSLEVBQUVBLEVBQUVnUyxPQUFRLEtBQUksQ0FBTSxHQUFMMGQsS0FBUXB1QixJQUFJQyxFQUFFLENBQUN4QixFQUFFKzlCLEdBQUdoK0IsRUFBRUMsRUFBRUMsR0FBRyxNQUFNRixDQUFDLENBQUM4OUIsR0FBRzk5QixFQUFFQyxFQUFFdUIsRUFBRXRCLEVBQUUsQ0FBQ0QsRUFBRUEsRUFBRWdTLEtBQUssQ0FBQyxPQUFPaFMsRUFBRSxLQUFLLEVBQUUsT0FBTzAwQixHQUFHMTBCLEdBQUcsT0FBT0QsR0FBR3V2QixHQUFHdHZCLEdBQUd1QixFQUFFdkIsRUFBRWlDLEtBQUtULEVBQUV4QixFQUFFZ3ZCLGFBQWF2dEIsRUFBRSxPQUFPMUIsRUFBRUEsRUFBRTB2QixjQUFjLEtBQUsvdEIsRUFBRUYsRUFBRTZILFNBQVNtaEIsR0FBR2pwQixFQUFFQyxHQUFHRSxFQUFFLEtBQUssT0FBT0QsR0FBRytvQixHQUFHanBCLEVBQUVFLEtBQUt6QixFQUFFMFIsT0FBTyxJQUNuZml0QixHQUFHNStCLEVBQUVDLEdBQUc2OUIsR0FBRzk5QixFQUFFQyxFQUFFMEIsRUFBRXpCLEdBQUdELEVBQUVnUyxNQUFNLEtBQUssRUFBRSxPQUFPLE9BQU9qUyxHQUFHdXZCLEdBQUd0dkIsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPMi9CLEdBQUc1L0IsRUFBRUMsRUFBRUMsR0FBRyxLQUFLLEVBQUUsT0FBT3MwQixHQUFHdjBCLEVBQUVBLEVBQUUrUCxVQUFVbUgsZUFBZTNWLEVBQUV2QixFQUFFZ3ZCLGFBQWEsT0FBT2p2QixFQUFFQyxFQUFFZ1MsTUFBTW9mLEdBQUdweEIsRUFBRSxLQUFLdUIsRUFBRXRCLEdBQUc0OUIsR0FBRzk5QixFQUFFQyxFQUFFdUIsRUFBRXRCLEdBQUdELEVBQUVnUyxNQUFNLEtBQUssR0FBRyxPQUFPelEsRUFBRXZCLEVBQUVpQyxLQUFLVCxFQUFFeEIsRUFBRWd2QixhQUEyQzhPLEdBQUcvOUIsRUFBRUMsRUFBRXVCLEVBQXJDQyxFQUFFeEIsRUFBRTZ1QixjQUFjdHRCLEVBQUVDLEVBQUVvNUIsR0FBR3I1QixFQUFFQyxHQUFjdkIsR0FBRyxLQUFLLEVBQUUsT0FBTzQ5QixHQUFHOTlCLEVBQUVDLEVBQUVBLEVBQUVndkIsYUFBYS91QixHQUFHRCxFQUFFZ1MsTUFBTSxLQUFLLEVBQW1ELEtBQUssR0FBRyxPQUFPNnJCLEdBQUc5OUIsRUFBRUMsRUFBRUEsRUFBRWd2QixhQUFhM2xCLFNBQVNwSixHQUFHRCxFQUFFZ1MsTUFBTSxLQUFLLEdBQUdqUyxFQUFFLENBQ3haLEdBRHlad0IsRUFBRXZCLEVBQUVpQyxLQUFLcUUsU0FBUzlFLEVBQUV4QixFQUFFZ3ZCLGFBQWF2dEIsRUFBRXpCLEVBQUV5dkIsY0FDbGYvdEIsRUFBRUYsRUFBRWtHLE1BQU15a0IsR0FBRW1GLEdBQUcvdkIsRUFBRXF3QixlQUFlcndCLEVBQUVxd0IsY0FBY2x3QixFQUFLLE9BQU9ELEVBQUUsR0FBRzZoQixHQUFHN2hCLEVBQUVpRyxNQUFNaEcsSUFBSSxHQUFHRCxFQUFFNEgsV0FBVzdILEVBQUU2SCxXQUFXaWpCLEdBQUdwYSxRQUFRLENBQUNsUyxFQUFFKzlCLEdBQUdoK0IsRUFBRUMsRUFBRUMsR0FBRyxNQUFNRixDQUFDLE9BQU8sSUFBYyxRQUFWMEIsRUFBRXpCLEVBQUVnUyxTQUFpQnZRLEVBQUVnUSxPQUFPelIsR0FBRyxPQUFPeUIsR0FBRyxDQUFDLElBQUltRSxFQUFFbkUsRUFBRXV3QixhQUFhLEdBQUcsT0FBT3BzQixFQUFFLENBQUNsRSxFQUFFRCxFQUFFdVEsTUFBTSxJQUFJLElBQUluTSxFQUFFRCxFQUFFcXNCLGFBQWEsT0FBT3BzQixHQUFHLENBQUMsR0FBR0EsRUFBRXdzQixVQUFVOXdCLEVBQUUsQ0FBQyxHQUFHLElBQUlFLEVBQUV5RSxJQUFJLEVBQUNMLEVBQUV5dEIsSUFBSSxFQUFFcnpCLEdBQUdBLElBQUtpRyxJQUFJLEVBQUUsSUFBSVAsRUFBRWxFLEVBQUVxeEIsWUFBWSxHQUFHLE9BQU9udEIsRUFBRSxDQUFZLElBQUlvTCxHQUFmcEwsRUFBRUEsRUFBRXV0QixRQUFlQyxRQUFRLE9BQU9waUIsRUFBRWxMLEVBQUVxckIsS0FBS3JyQixHQUFHQSxFQUFFcXJCLEtBQUtuZ0IsRUFBRW1nQixLQUFLbmdCLEVBQUVtZ0IsS0FBS3JyQixHQUFHRixFQUFFd3RCLFFBQVF0dEIsQ0FBQyxDQUFDLENBQUNwRSxFQUFFeXdCLE9BQU9qeUIsRUFBZ0IsUUFBZDRGLEVBQUVwRSxFQUFFK1AsYUFBcUIzTCxFQUFFcXNCLE9BQU9qeUIsR0FBRzR4QixHQUFHcHdCLEVBQUVnUSxPQUNsZnhSLEVBQUVELEdBQUc0RixFQUFFc3NCLE9BQU9qeUIsRUFBRSxLQUFLLENBQUM0RixFQUFFQSxFQUFFcXJCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBS3p2QixFQUFFeUUsSUFBSXhFLEVBQUVELEVBQUVRLE9BQU9qQyxFQUFFaUMsS0FBSyxLQUFLUixFQUFFdVEsV0FBVyxHQUFHLEtBQUt2USxFQUFFeUUsSUFBSSxDQUFZLEdBQUcsUUFBZHhFLEVBQUVELEVBQUVnUSxRQUFtQixNQUFNek0sTUFBTWxGLEVBQUUsTUFBTTRCLEVBQUV3d0IsT0FBT2p5QixFQUFnQixRQUFkMkYsRUFBRWxFLEVBQUU4UCxhQUFxQjVMLEVBQUVzc0IsT0FBT2p5QixHQUFHNHhCLEdBQUdud0IsRUFBRXpCLEVBQUVELEdBQUcwQixFQUFFRCxFQUFFd1EsT0FBTyxNQUFNdlEsRUFBRUQsRUFBRXVRLE1BQU0sR0FBRyxPQUFPdFEsRUFBRUEsRUFBRStQLE9BQU9oUSxPQUFPLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsR0FBRyxDQUFDLEdBQUdBLElBQUkxQixFQUFFLENBQUMwQixFQUFFLEtBQUssS0FBSyxDQUFhLEdBQUcsUUFBZkQsRUFBRUMsRUFBRXVRLFNBQW9CLENBQUN4USxFQUFFZ1EsT0FBTy9QLEVBQUUrUCxPQUFPL1AsRUFBRUQsRUFBRSxLQUFLLENBQUNDLEVBQUVBLEVBQUUrUCxNQUFNLENBQUNoUSxFQUFFQyxDQUFDLENBQUNtOEIsR0FBRzk5QixFQUFFQyxFQUFFd0IsRUFBRTZILFNBQVNwSixHQUFHRCxFQUFFQSxFQUFFZ1MsS0FBSyxDQUFDLE9BQU9oUyxFQUFFLEtBQUssRUFBRSxPQUFPd0IsRUFBRXhCLEVBQUVpQyxLQUFLVixFQUFFdkIsRUFBRWd2QixhQUFhM2xCLFNBQVMwb0IsR0FBRy94QixFQUFFQyxHQUFXc0IsRUFBRUEsRUFBVkMsRUFBRTR3QixHQUFHNXdCLElBQVV4QixFQUFFMFIsT0FBTyxFQUFFbXNCLEdBQUc5OUIsRUFBRUMsRUFBRXVCLEVBQUV0QixHQUNwZkQsRUFBRWdTLE1BQU0sS0FBSyxHQUFHLE9BQWdCeFEsRUFBRW81QixHQUFYcjVCLEVBQUV2QixFQUFFaUMsS0FBWWpDLEVBQUVndkIsY0FBNkJnUCxHQUFHaitCLEVBQUVDLEVBQUV1QixFQUF0QkMsRUFBRW81QixHQUFHcjVCLEVBQUVVLEtBQUtULEdBQWN2QixHQUFHLEtBQUssR0FBRyxPQUFPaytCLEdBQUdwK0IsRUFBRUMsRUFBRUEsRUFBRWlDLEtBQUtqQyxFQUFFZ3ZCLGFBQWEvdUIsR0FBRyxLQUFLLEdBQUcsT0FBT3NCLEVBQUV2QixFQUFFaUMsS0FBS1QsRUFBRXhCLEVBQUVndkIsYUFBYXh0QixFQUFFeEIsRUFBRTZ1QixjQUFjdHRCLEVBQUVDLEVBQUVvNUIsR0FBR3I1QixFQUFFQyxHQUFHcTlCLEdBQUc5K0IsRUFBRUMsR0FBR0EsRUFBRWtHLElBQUksRUFBRTBtQixHQUFHcnJCLElBQUl4QixHQUFFLEVBQUdtdEIsR0FBR2x0QixJQUFJRCxHQUFFLEVBQUdneUIsR0FBRy94QixFQUFFQyxHQUFHdTdCLEdBQUd4N0IsRUFBRXVCLEVBQUVDLEdBQUd1NkIsR0FBRy83QixFQUFFdUIsRUFBRUMsRUFBRXZCLEdBQUdnL0IsR0FBRyxLQUFLai9CLEVBQUV1QixHQUFFLEVBQUd4QixFQUFFRSxHQUFHLEtBQUssR0FBRyxPQUFPOGdDLEdBQUdoaEMsRUFBRUMsRUFBRUMsR0FBRyxLQUFLLEdBQUcsT0FBT28rQixHQUFHdCtCLEVBQUVDLEVBQUVDLEdBQUcsTUFBTStFLE1BQU1sRixFQUFFLElBQUlFLEVBQUVrRyxLQUFNLEVBWXhDLElBQUltakMsR0FBRyxtQkFBb0JDLFlBQVlBLFlBQVksU0FBU3ZwQyxHQUFHMjhCLFFBQVFDLE1BQU01OEIsRUFBRSxFQUFFLFNBQVN3cEMsR0FBR3hwQyxHQUFHNEIsS0FBSzZuQyxjQUFjenBDLENBQUMsQ0FDakksU0FBUzBwQyxHQUFHMXBDLEdBQUc0QixLQUFLNm5DLGNBQWN6cEMsQ0FBQyxDQUM1SixTQUFTMnBDLEdBQUczcEMsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUUwSyxVQUFVLElBQUkxSyxFQUFFMEssVUFBVSxLQUFLMUssRUFBRTBLLFNBQVMsQ0FBQyxTQUFTay9CLEdBQUc1cEMsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUUwSyxVQUFVLElBQUkxSyxFQUFFMEssVUFBVSxLQUFLMUssRUFBRTBLLFdBQVcsSUFBSTFLLEVBQUUwSyxVQUFVLGlDQUFpQzFLLEVBQUUySyxXQUFXLENBQUMsU0FBU2svQixLQUFLLENBRXhhLFNBQVNDLEdBQUc5cEMsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsSUFBSUMsRUFBRXhCLEVBQUVpakMsb0JBQW9CLEdBQUd6aEMsRUFBRSxDQUFDLElBQUlDLEVBQUVELEVBQUUsR0FBRyxtQkFBb0JELEVBQUUsQ0FBQyxJQUFJb0UsRUFBRXBFLEVBQUVBLEVBQUUsV0FBVyxJQUFJekIsRUFBRWlwQyxHQUFHdG5DLEdBQUdrRSxFQUFFNUMsS0FBS2pELEVBQUUsQ0FBQyxDQUFDZ3BDLEdBQUcvb0MsRUFBRTBCLEVBQUUzQixFQUFFeUIsRUFBRSxNQUFNRSxFQUR4SixTQUFZM0IsRUFBRUMsRUFBRUMsRUFBRXNCLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFLENBQUMsSUFBSUUsRUFBRUYsRUFBRUEsRUFBRSxXQUFXLElBQUl4QixFQUFFaXBDLEdBQUd0bkMsR0FBR0QsRUFBRXVCLEtBQUtqRCxFQUFFLENBQUMsQ0FBQyxJQUFJMkIsRUFBRW9uQyxHQUFHOW9DLEVBQUV1QixFQUFFeEIsRUFBRSxFQUFFLE1BQUssRUFBRyxFQUFHLEdBQUc2cEMsSUFBbUYsT0FBL0U3cEMsRUFBRW1qQyxvQkFBb0J4aEMsRUFBRTNCLEVBQUVzcEIsSUFBSTNuQixFQUFFd1EsUUFBUXVXLEdBQUcsSUFBSTFvQixFQUFFMEssU0FBUzFLLEVBQUUwUCxXQUFXMVAsR0FBR3duQyxLQUFZN2xDLENBQUMsQ0FBQyxLQUFLRixFQUFFekIsRUFBRXlLLFdBQVd6SyxFQUFFb0ssWUFBWTNJLEdBQUcsR0FBRyxtQkFBb0JELEVBQUUsQ0FBQyxJQUFJcUUsRUFBRXJFLEVBQUVBLEVBQUUsV0FBVyxJQUFJeEIsRUFBRWlwQyxHQUFHbmpDLEdBQUdELEVBQUU1QyxLQUFLakQsRUFBRSxDQUFDLENBQUMsSUFBSThGLEVBQUU2aUMsR0FBRzNvQyxFQUFFLEdBQUUsRUFBRyxLQUFLLEdBQUssRUFBRyxFQUFHLEdBQUc2cEMsSUFBMEcsT0FBdEc3cEMsRUFBRW1qQyxvQkFBb0JyOUIsRUFBRTlGLEVBQUVzcEIsSUFBSXhqQixFQUFFcU0sUUFBUXVXLEdBQUcsSUFBSTFvQixFQUFFMEssU0FBUzFLLEVBQUUwUCxXQUFXMVAsR0FBR3duQyxJQUFHLFdBQVd3QixHQUFHL29DLEVBQUU2RixFQUFFNUYsRUFBRXNCLEVBQUUsSUFBVXNFLENBQUMsQ0FDcFVpa0MsQ0FBRzdwQyxFQUFFRCxFQUFFRCxFQUFFeUIsRUFBRUQsR0FBRyxPQUFPeW5DLEdBQUd0bkMsRUFBRSxDQUhwTCtuQyxHQUFHeG9DLFVBQVVrRixPQUFPb2pDLEdBQUd0b0MsVUFBVWtGLE9BQU8sU0FBU3BHLEdBQUcsSUFBSUMsRUFBRTJCLEtBQUs2bkMsY0FBYyxHQUFHLE9BQU94cEMsRUFBRSxNQUFNZ0YsTUFBTWxGLEVBQUUsTUFBTWlwQyxHQUFHaHBDLEVBQUVDLEVBQUUsS0FBSyxLQUFLLEVBQUV5cEMsR0FBR3hvQyxVQUFVOG9DLFFBQVFSLEdBQUd0b0MsVUFBVThvQyxRQUFRLFdBQVcsSUFBSWhxQyxFQUFFNEIsS0FBSzZuQyxjQUFjLEdBQUcsT0FBT3pwQyxFQUFFLENBQUM0QixLQUFLNm5DLGNBQWMsS0FBSyxJQUFJeHBDLEVBQUVELEVBQUVtWCxjQUFjcXdCLElBQUcsV0FBV3dCLEdBQUcsS0FBS2hwQyxFQUFFLEtBQUssS0FBSyxJQUFHQyxFQUFFcXBCLElBQUksSUFBSSxDQUFDLEVBQ3pUb2dCLEdBQUd4b0MsVUFBVStvQywyQkFBMkIsU0FBU2pxQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFeVYsS0FBSzFWLEVBQUUsQ0FBQzJXLFVBQVUsS0FBS3BILE9BQU92UCxFQUFFaVgsU0FBU2hYLEdBQUcsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVrVyxHQUFHaFcsUUFBUSxJQUFJSCxHQUFHQSxFQUFFbVcsR0FBR2xXLEdBQUcrVyxTQUFTL1csS0FBS2tXLEdBQUc4ekIsT0FBT2hxQyxFQUFFLEVBQUVGLEdBQUcsSUFBSUUsR0FBRzZXLEdBQUcvVyxFQUFFLENBQUMsRUFFWHVWLEdBQUcsU0FBU3ZWLEdBQUcsT0FBT0EsRUFBRW1HLEtBQUssS0FBSyxFQUFFLElBQUlsRyxFQUFFRCxFQUFFZ1EsVUFBVSxHQUFHL1AsRUFBRWtTLFFBQVFOLGNBQWNxRixhQUFhLENBQUMsSUFBSWhYLEVBQUVxVSxHQUFHdFUsRUFBRXdVLGNBQWMsSUFBSXZVLElBQUlrVixHQUFHblYsRUFBSSxFQUFGQyxHQUFLK2xDLEdBQUdobUMsRUFBRTZTLFFBQVksRUFBRitnQixNQUFPa08sR0FBR2p2QixLQUFJLElBQUk0YSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUc4WixJQUFHLFdBQVcsSUFBSXZuQyxFQUFFMnlCLEdBQUc1eUIsRUFBRSxHQUFHLEdBQUcsT0FBT0MsRUFBRSxDQUFDLElBQUlDLEVBQUVzNUIsS0FBSXhCLEdBQUcvM0IsRUFBRUQsRUFBRSxFQUFFRSxFQUFFLENBQUMsSUFBR2lwQyxHQUFHbnBDLEVBQUUsR0FBRyxFQUMvYndWLEdBQUcsU0FBU3hWLEdBQUcsR0FBRyxLQUFLQSxFQUFFbUcsSUFBSSxDQUFDLElBQUlsRyxFQUFFMnlCLEdBQUc1eUIsRUFBRSxXQUFjLE9BQU9DLEdBQWErM0IsR0FBRy8zQixFQUFFRCxFQUFFLFVBQVh3NUIsTUFBd0IyUCxHQUFHbnBDLEVBQUUsVUFBVSxDQUFDLEVBQUV5VixHQUFHLFNBQVN6VixHQUFHLEdBQUcsS0FBS0EsRUFBRW1HLElBQUksQ0FBQyxJQUFJbEcsRUFBRW81QixHQUFHcjVCLEdBQUdFLEVBQUUweUIsR0FBRzV5QixFQUFFQyxHQUFNLE9BQU9DLEdBQWE4M0IsR0FBRzkzQixFQUFFRixFQUFFQyxFQUFYdTVCLE1BQWdCMlAsR0FBR25wQyxFQUFFQyxFQUFFLENBQUMsRUFBRXlWLEdBQUcsV0FBVyxPQUFPTCxFQUFDLEVBQUVNLEdBQUcsU0FBUzNWLEVBQUVDLEdBQUcsSUFBSUMsRUFBRW1WLEdBQUUsSUFBSSxPQUFPQSxHQUFFclYsRUFBRUMsR0FBRyxDQUFDLFFBQVFvVixHQUFFblYsQ0FBQyxDQUFDLEVBQ2xTeVAsR0FBRyxTQUFTM1AsRUFBRUMsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBeUIsR0FBakJ1SSxFQUFHeEksRUFBRUUsR0FBR0QsRUFBRUMsRUFBRStGLEtBQVEsVUFBVS9GLEVBQUVnQyxNQUFNLE1BQU1qQyxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRUUsRUFBRXdQLFlBQVl4UCxFQUFFQSxFQUFFd1AsV0FBc0YsSUFBM0V4UCxFQUFFQSxFQUFFaXFDLGlCQUFpQixjQUFjQyxLQUFLQyxVQUFVLEdBQUdwcUMsR0FBRyxtQkFBdUJBLEVBQUUsRUFBRUEsRUFBRUMsRUFBRUUsT0FBT0gsSUFBSSxDQUFDLElBQUl1QixFQUFFdEIsRUFBRUQsR0FBRyxHQUFHdUIsSUFBSXhCLEdBQUd3QixFQUFFOG9DLE9BQU90cUMsRUFBRXNxQyxLQUFLLENBQUMsSUFBSTdvQyxFQUFFd08sR0FBR3pPLEdBQUcsSUFBSUMsRUFBRSxNQUFNd0QsTUFBTWxGLEVBQUUsS0FBSzBILEVBQUdqRyxHQUFHZ0gsRUFBR2hILEVBQUVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFLLFdBQVcrSCxHQUFHeEosRUFBRUUsR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVkQsRUFBRUMsRUFBRXlILFFBQWVvQixHQUFHL0ksSUFBSUUsRUFBRW9oQyxTQUFTcmhDLEdBQUUsR0FBSSxFQUFFb1EsR0FBR2szQixHQUFHajNCLEdBQUdrM0IsR0FDcGEsSUFBSStDLEdBQUcsQ0FBQ0MsdUJBQXNCLEVBQUdDLE9BQU8sQ0FBQzE2QixHQUFHeVMsR0FBR3ZTLEdBQUdDLEdBQUdFLEdBQUdtM0IsS0FBS21ELEdBQUcsQ0FBQ0Msd0JBQXdCM3pCLEdBQUc0ekIsV0FBVyxFQUFFQyxRQUFRLFNBQVNDLG9CQUFvQixhQUMxSUMsR0FBRyxDQUFDSCxXQUFXRixHQUFHRSxXQUFXQyxRQUFRSCxHQUFHRyxRQUFRQyxvQkFBb0JKLEdBQUdJLG9CQUFvQkUsZUFBZU4sR0FBR00sZUFBZUMsa0JBQWtCLEtBQUtDLDRCQUE0QixLQUFLQyw0QkFBNEIsS0FBS0MsY0FBYyxLQUFLQyx3QkFBd0IsS0FBS0Msd0JBQXdCLEtBQUtDLGdCQUFnQixLQUFLQyxtQkFBbUIsS0FBS0MsZUFBZSxLQUFLQyxxQkFBcUJqb0MsRUFBRzJ4Qix1QkFBdUJ1Vyx3QkFBd0IsU0FBUzNyQyxHQUFXLE9BQU8sUUFBZkEsRUFBRWdTLEdBQUdoUyxJQUFtQixLQUFLQSxFQUFFZ1EsU0FBUyxFQUFFMjZCLHdCQUF3QkQsR0FBR0MseUJBUmpOLFdBQWMsT0FBTyxJQUFJLEVBU3BVaUIsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsS0FBS0Msa0JBQWtCLG1DQUFtQyxHQUFHLG9CQUFxQkMsK0JBQStCLENBQUMsSUFBSUMsR0FBR0QsK0JBQStCLElBQUlDLEdBQUdDLFlBQVlELEdBQUdFLGNBQWMsSUFBSXo0QixHQUFHdTRCLEdBQUdHLE9BQU92QixJQUFJbDNCLEdBQUdzNEIsRUFBRSxDQUFDLE1BQU1uc0MsSUFBRyxDQUFDLENBQUN1c0MsRUFBUTdvQyxtREFBbUQ2bUMsR0FDL1lnQyxFQUFRQyxhQUFhLFNBQVN4c0MsRUFBRUMsR0FBRyxJQUFJQyxFQUFFLEVBQUVDLFVBQVVDLGFBQVEsSUFBU0QsVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSyxJQUFJd3BDLEdBQUcxcEMsR0FBRyxNQUFNZ0YsTUFBTWxGLEVBQUUsTUFBTSxPQWJ1SCxTQUFZQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFLEVBQUVyQixVQUFVQyxhQUFRLElBQVNELFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssTUFBTSxDQUFDbUcsU0FBU3hDLEVBQUdxYSxJQUFJLE1BQU0zYyxFQUFFLEtBQUssR0FBR0EsRUFBRThILFNBQVN0SixFQUFFbVgsY0FBY2xYLEVBQUU0d0IsZUFBZTN3QixFQUFFLENBYTFSdXNDLENBQUd6c0MsRUFBRUMsRUFBRSxLQUFLQyxFQUFFLEVBQUVxc0MsRUFBUUcsV0FBVyxTQUFTMXNDLEVBQUVDLEdBQUcsSUFBSTBwQyxHQUFHM3BDLEdBQUcsTUFBTWlGLE1BQU1sRixFQUFFLE1BQU0sSUFBSUcsR0FBRSxFQUFHc0IsRUFBRSxHQUFHQyxFQUFFNm5DLEdBQTRQLE9BQXpQLE1BQU9ycEMsS0FBZ0IsSUFBS0EsRUFBRTBzQyxzQkFBc0J6c0MsR0FBRSxRQUFJLElBQVNELEVBQUUyNkIsbUJBQW1CcDVCLEVBQUV2QixFQUFFMjZCLHVCQUFrQixJQUFTMzZCLEVBQUVnb0MscUJBQXFCeG1DLEVBQUV4QixFQUFFZ29DLHFCQUFxQmhvQyxFQUFFMG9DLEdBQUczb0MsRUFBRSxHQUFFLEVBQUcsS0FBSyxFQUFLRSxFQUFFLEVBQUdzQixFQUFFQyxHQUFHekIsRUFBRXNwQixJQUFJcnBCLEVBQUVrUyxRQUFRdVcsR0FBRyxJQUFJMW9CLEVBQUUwSyxTQUFTMUssRUFBRTBQLFdBQVcxUCxHQUFVLElBQUl3cEMsR0FBR3ZwQyxFQUFFLEVBQ3Jmc3NDLEVBQVFLLFlBQVksU0FBUzVzQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFMEssU0FBUyxPQUFPMUssRUFBRSxJQUFJQyxFQUFFRCxFQUFFazdCLGdCQUFnQixRQUFHLElBQVNqN0IsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFb0csT0FBTyxNQUFNbkIsTUFBTWxGLEVBQUUsTUFBaUMsTUFBM0JDLEVBQUVpQixPQUFPNk0sS0FBSzlOLEdBQUdxd0IsS0FBSyxLQUFXcHJCLE1BQU1sRixFQUFFLElBQUlDLEdBQUksQ0FBcUMsT0FBMUIsUUFBVkEsRUFBRWdTLEdBQUcvUixJQUFjLEtBQUtELEVBQUVnUSxTQUFrQixFQUFFdThCLEVBQVFNLFVBQVUsU0FBUzdzQyxHQUFHLE9BQU93bkMsR0FBR3huQyxFQUFFLEVBQUV1c0MsRUFBUU8sUUFBUSxTQUFTOXNDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSTBwQyxHQUFHM3BDLEdBQUcsTUFBTWdGLE1BQU1sRixFQUFFLE1BQU0sT0FBTytwQyxHQUFHLEtBQUs5cEMsRUFBRUMsR0FBRSxFQUFHQyxFQUFFLEVBQy9ZcXNDLEVBQVFRLFlBQVksU0FBUy9zQyxFQUFFQyxFQUFFQyxHQUFHLElBQUl5cEMsR0FBRzNwQyxHQUFHLE1BQU1pRixNQUFNbEYsRUFBRSxNQUFNLElBQUl5QixFQUFFLE1BQU10QixHQUFHQSxFQUFFOHNDLGlCQUFpQixLQUFLdnJDLEdBQUUsRUFBR0MsRUFBRSxHQUFHQyxFQUFFMm5DLEdBQXlPLEdBQXRPLE1BQU9wcEMsS0FBZ0IsSUFBS0EsRUFBRXlzQyxzQkFBc0JsckMsR0FBRSxRQUFJLElBQVN2QixFQUFFMDZCLG1CQUFtQmw1QixFQUFFeEIsRUFBRTA2Qix1QkFBa0IsSUFBUzE2QixFQUFFK25DLHFCQUFxQnRtQyxFQUFFekIsRUFBRStuQyxxQkFBcUJob0MsRUFBRThvQyxHQUFHOW9DLEVBQUUsS0FBS0QsRUFBRSxFQUFFLE1BQU1FLEVBQUVBLEVBQUUsS0FBS3VCLEVBQUUsRUFBR0MsRUFBRUMsR0FBRzNCLEVBQUVzcEIsSUFBSXJwQixFQUFFa1MsUUFBUXVXLEdBQUcxb0IsR0FBTXdCLEVBQUUsSUFBSXhCLEVBQUUsRUFBRUEsRUFBRXdCLEVBQUVwQixPQUFPSixJQUEyQnlCLEdBQWhCQSxHQUFQdkIsRUFBRXNCLEVBQUV4QixJQUFPaXRDLGFBQWdCL3NDLEVBQUVndEMsU0FBUyxNQUFNanRDLEVBQUV5b0MsZ0NBQWdDem9DLEVBQUV5b0MsZ0NBQWdDLENBQUN4b0MsRUFBRXVCLEdBQUd4QixFQUFFeW9DLGdDQUFnQ3Y0QixLQUFLalEsRUFDdmhCdUIsR0FBRyxPQUFPLElBQUlpb0MsR0FBR3pwQyxFQUFFLEVBQUVzc0MsRUFBUW5tQyxPQUFPLFNBQVNwRyxFQUFFQyxFQUFFQyxHQUFHLElBQUkwcEMsR0FBRzNwQyxHQUFHLE1BQU1nRixNQUFNbEYsRUFBRSxNQUFNLE9BQU8rcEMsR0FBRyxLQUFLOXBDLEVBQUVDLEdBQUUsRUFBR0MsRUFBRSxFQUFFcXNDLEVBQVFZLHVCQUF1QixTQUFTbnRDLEdBQUcsSUFBSTRwQyxHQUFHNXBDLEdBQUcsTUFBTWlGLE1BQU1sRixFQUFFLEtBQUssUUFBT0MsRUFBRW1qQyxzQkFBcUJxRSxJQUFHLFdBQVdzQyxHQUFHLEtBQUssS0FBSzlwQyxHQUFFLEdBQUcsV0FBV0EsRUFBRW1qQyxvQkFBb0IsS0FBS25qQyxFQUFFc3BCLElBQUksSUFBSSxHQUFFLEtBQUcsRUFBTSxFQUFFaWpCLEVBQVFhLHdCQUF3QjdGLEdBQy9VZ0YsRUFBUWMsb0NBQW9DLFNBQVNydEMsRUFBRUMsRUFBRUMsRUFBRXNCLEdBQUcsSUFBSW9vQyxHQUFHMXBDLEdBQUcsTUFBTStFLE1BQU1sRixFQUFFLE1BQU0sR0FBRyxNQUFNQyxRQUFHLElBQVNBLEVBQUVrN0IsZ0JBQWdCLE1BQU1qMkIsTUFBTWxGLEVBQUUsS0FBSyxPQUFPK3BDLEdBQUc5cEMsRUFBRUMsRUFBRUMsR0FBRSxFQUFHc0IsRUFBRSxFQUFFK3FDLEVBQVExQixRQUFRLHFEQy9Uekw3NUIsRUFBSW5SLEVBQVEsS0FFZDBzQyxFQUFRLEVBQWF2N0IsRUFBRTA3QixXQUNEMTdCLEVBQUUrN0IsNEJDSDFCLFNBQVNPLElBRVAsR0FDNEMsb0JBQW5DcEIsZ0NBQzRDLG1CQUE1Q0EsK0JBQStCb0IsU0FjeEMsSUFFRXBCLCtCQUErQm9CLFNBQVNBLEVBQzFDLENBQUUsTUFBT0MsR0FHUDVRLFFBQVFDLE1BQU0yUSxFQUNoQixDQUNGLENBS0VELEdBQ0FFLEVBQU9qQixRQUFVLEVBQWpCaUIsa0JDekJXLElBQUk1bkMsRUFBRWhDLE9BQU9DLElBQUksaUJBQWlCaWxCLEVBQUVsbEIsT0FBT0MsSUFBSSxnQkFBZ0I5RCxFQUFFNkQsT0FBT0MsSUFBSSxrQkFBa0JtdEIsRUFBRXB0QixPQUFPQyxJQUFJLHFCQUFxQm90QixFQUFFcnRCLE9BQU9DLElBQUksa0JBQWtCa2xCLEVBQUVubEIsT0FBT0MsSUFBSSxrQkFBa0JxbEIsRUFBRXRsQixPQUFPQyxJQUFJLGlCQUFpQnRDLEVBQUVxQyxPQUFPQyxJQUFJLHFCQUFxQnNsQixFQUFFdmxCLE9BQU9DLElBQUksa0JBQWtCb2xCLEVBQUVybEIsT0FBT0MsSUFBSSxjQUFjcXRCLEVBQUV0dEIsT0FBT0MsSUFBSSxjQUFjeEIsRUFBRXVCLE9BQU9lLFNBQ3JXbU8sRUFBRSxDQUFDbW9CLFVBQVUsV0FBVyxPQUFNLENBQUUsRUFBRUksbUJBQW1CLFdBQVcsRUFBRUQsb0JBQW9CLFdBQVcsRUFBRUQsZ0JBQWdCLFdBQVcsR0FBRzlsQixFQUFFcFUsT0FBTzhELE9BQU9vakIsRUFBRSxDQUFDLEVBQUUsU0FBU2dFLEVBQUVuc0IsRUFBRUMsRUFBRXdCLEdBQUdHLEtBQUsrdUIsTUFBTTN3QixFQUFFNEIsS0FBSzB3QixRQUFRcnlCLEVBQUUyQixLQUFLdXVCLEtBQUtoSSxFQUFFdm1CLEtBQUtnNkIsUUFBUW42QixHQUFHcVIsQ0FBQyxDQUN3SSxTQUFTc1csSUFBSSxDQUF5QixTQUFTZ0QsRUFBRXBzQixFQUFFQyxFQUFFd0IsR0FBR0csS0FBSyt1QixNQUFNM3dCLEVBQUU0QixLQUFLMHdCLFFBQVFyeUIsRUFBRTJCLEtBQUt1dUIsS0FBS2hJLEVBQUV2bUIsS0FBS2c2QixRQUFRbjZCLEdBQUdxUixDQUFDLENBRHhQcVosRUFBRWpyQixVQUFVcW5DLGlCQUFpQixDQUFDLEVBQ3BRcGMsRUFBRWpyQixVQUFVdXNDLFNBQVMsU0FBU3p0QyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU1pRixNQUFNLHlIQUF5SHJELEtBQUtnNkIsUUFBUVQsZ0JBQWdCdjVCLEtBQUs1QixFQUFFQyxFQUFFLFdBQVcsRUFBRWtzQixFQUFFanJCLFVBQVV3c0MsWUFBWSxTQUFTMXRDLEdBQUc0QixLQUFLZzZCLFFBQVFQLG1CQUFtQno1QixLQUFLNUIsRUFBRSxjQUFjLEVBQWdCb3BCLEVBQUVsb0IsVUFBVWlyQixFQUFFanJCLFVBQXNGLElBQUlvckIsRUFBRUYsRUFBRWxyQixVQUFVLElBQUlrb0IsRUFDcmZrRCxFQUFFcmxCLFlBQVltbEIsRUFBRS9XLEVBQUVpWCxFQUFFSCxFQUFFanJCLFdBQVdvckIsRUFBRWtQLHNCQUFxQixFQUFHLElBQUk5TSxFQUFFN2xCLE1BQU1DLFFBQVFrZ0IsRUFBRS9uQixPQUFPQyxVQUFVQyxlQUFlMHlCLEVBQUUsQ0FBQzFoQixRQUFRLE1BQU0waUIsRUFBRSxDQUFDMVcsS0FBSSxFQUFHNlIsS0FBSSxFQUFHMmQsUUFBTyxFQUFHQyxVQUFTLEdBQ3RLLFNBQVNyWSxFQUFFdjFCLEVBQUVDLEVBQUV3QixHQUFHLElBQUlELEVBQUV0QixFQUFFLENBQUMsRUFBRTRGLEVBQUUsS0FBS0QsRUFBRSxLQUFLLEdBQUcsTUFBTTVGLEVBQUUsSUFBSXVCLFVBQUssSUFBU3ZCLEVBQUUrdkIsTUFBTW5xQixFQUFFNUYsRUFBRSt2QixVQUFLLElBQVMvdkIsRUFBRWtlLE1BQU1yWSxFQUFFLEdBQUc3RixFQUFFa2UsS0FBS2xlLEVBQUUrb0IsRUFBRS9sQixLQUFLaEQsRUFBRXVCLEtBQUtxekIsRUFBRTF6QixlQUFlSyxLQUFLdEIsRUFBRXNCLEdBQUd2QixFQUFFdUIsSUFBSSxJQUFJRyxFQUFFeEIsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSXVCLEVBQUV6QixFQUFFb0osU0FBUzdILE9BQU8sR0FBRyxFQUFFRSxFQUFFLENBQUMsSUFBSSxJQUFJRCxFQUFFbUgsTUFBTWxILEdBQUdxUCxFQUFFLEVBQUVBLEVBQUVyUCxFQUFFcVAsSUFBSXRQLEVBQUVzUCxHQUFHN1EsVUFBVTZRLEVBQUUsR0FBRzlRLEVBQUVvSixTQUFTNUgsQ0FBQyxDQUFDLEdBQUcxQixHQUFHQSxFQUFFODZCLGFBQWEsSUFBSXQ1QixLQUFLRyxFQUFFM0IsRUFBRTg2QixrQkFBZSxJQUFTNTZCLEVBQUVzQixLQUFLdEIsRUFBRXNCLEdBQUdHLEVBQUVILElBQUksTUFBTSxDQUFDOEUsU0FBU1YsRUFBRTFELEtBQUtsQyxFQUFFbWUsSUFBSXJZLEVBQUVrcUIsSUFBSW5xQixFQUFFOHFCLE1BQU16d0IsRUFBRSt2QixPQUFPNEQsRUFBRTFoQixRQUFRLENBQ2hWLFNBQVNzakIsRUFBRXoxQixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVzRyxXQUFXVixDQUFDLENBQW9HLElBQUlrd0IsRUFBRSxPQUFPLFNBQVM0QixFQUFFMTNCLEVBQUVDLEdBQUcsTUFBTSxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxNQUFNQSxFQUFFbWUsSUFBN0ssU0FBZ0JuZSxHQUFHLElBQUlDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSUQsRUFBRXVELFFBQVEsU0FBUSxTQUFTdkQsR0FBRyxPQUFPQyxFQUFFRCxFQUFFLEdBQUUsQ0FBK0U2dEMsQ0FBTyxHQUFHN3RDLEVBQUVtZSxLQUFLbGUsRUFBRWlLLFNBQVMsR0FBRyxDQUMvVyxTQUFTc3ZCLEVBQUV4NUIsRUFBRUMsRUFBRXdCLEVBQUVELEVBQUV0QixHQUFHLElBQUk0RixTQUFTOUYsRUFBSyxjQUFjOEYsR0FBRyxZQUFZQSxJQUFFOUYsRUFBRSxNQUFLLElBQUk2RixHQUFFLEVBQUcsR0FBRyxPQUFPN0YsRUFBRTZGLEdBQUUsT0FBUSxPQUFPQyxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVNELEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPN0YsRUFBRXNHLFVBQVUsS0FBS1YsRUFBRSxLQUFLa2pCLEVBQUVqakIsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBVzNGLEVBQUVBLEVBQU4yRixFQUFFN0YsR0FBU0EsRUFBRSxLQUFLd0IsRUFBRSxJQUFJazJCLEVBQUU3eEIsRUFBRSxHQUFHckUsRUFBRWt0QixFQUFFeHVCLElBQUl1QixFQUFFLEdBQUcsTUFBTXpCLElBQUl5QixFQUFFekIsRUFBRXVELFFBQVF1eUIsRUFBRSxPQUFPLEtBQUswRCxFQUFFdDVCLEVBQUVELEVBQUV3QixFQUFFLElBQUcsU0FBU3pCLEdBQUcsT0FBT0EsQ0FBQyxLQUFJLE1BQU1FLElBQUl1MUIsRUFBRXYxQixLQUFLQSxFQURuVyxTQUFXRixFQUFFQyxHQUFHLE1BQU0sQ0FBQ3FHLFNBQVNWLEVBQUUxRCxLQUFLbEMsRUFBRWtDLEtBQUtpYyxJQUFJbGUsRUFBRSt2QixJQUFJaHdCLEVBQUVnd0IsSUFBSVcsTUFBTTN3QixFQUFFMndCLE1BQU1WLE9BQU9qd0IsRUFBRWl3QixPQUFPLENBQ3lRdUYsQ0FBRXQxQixFQUFFdUIsSUFBSXZCLEVBQUVpZSxLQUFLdFksR0FBR0EsRUFBRXNZLE1BQU1qZSxFQUFFaWUsSUFBSSxJQUFJLEdBQUdqZSxFQUFFaWUsS0FBSzVhLFFBQVF1eUIsRUFBRSxPQUFPLEtBQUs5MUIsSUFBSUMsRUFBRWtRLEtBQUtqUSxJQUFJLEVBQXlCLEdBQXZCMkYsRUFBRSxFQUFFckUsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBT2t0QixFQUFFMXVCLEdBQUcsSUFBSSxJQUFJMkIsRUFBRSxFQUFFQSxFQUFFM0IsRUFBRUksT0FBT3VCLElBQUksQ0FDL2UsSUFBSUQsRUFBRUYsRUFBRWsyQixFQUR3ZTV4QixFQUNyZjlGLEVBQUUyQixHQUFlQSxHQUFHa0UsR0FBRzJ6QixFQUFFMXpCLEVBQUU3RixFQUFFd0IsRUFBRUMsRUFBRXhCLEVBQUUsTUFBTSxHQUFHd0IsRUFQc1UsU0FBVzFCLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUFzQyxtQkFBakNBLEVBQUVxQyxHQUFHckMsRUFBRXFDLElBQUlyQyxFQUFFLGVBQTBDQSxFQUFFLElBQUksQ0FPNWI4RSxDQUFFOUUsR0FBRyxtQkFBb0IwQixFQUFFLElBQUkxQixFQUFFMEIsRUFBRXVCLEtBQUtqRCxHQUFHMkIsRUFBRSxJQUFJbUUsRUFBRTlGLEVBQUVteEIsUUFBUUMsTUFBNkJ2ckIsR0FBRzJ6QixFQUExQjF6QixFQUFFQSxFQUFFNkIsTUFBMEIxSCxFQUFFd0IsRUFBdEJDLEVBQUVGLEVBQUVrMkIsRUFBRTV4QixFQUFFbkUsS0FBa0J6QixRQUFRLEdBQUcsV0FBVzRGLEVBQUUsTUFBTTdGLEVBQUVtZSxPQUFPcGUsR0FBR2lGLE1BQU0sbURBQW1ELG9CQUFvQmhGLEVBQUUscUJBQXFCZ0IsT0FBTzZNLEtBQUs5TixHQUFHcXdCLEtBQUssTUFBTSxJQUFJcHdCLEdBQUcsNkVBQTZFLE9BQU80RixDQUFDLENBQ3paLFNBQVNxN0IsRUFBRWxoQyxFQUFFQyxFQUFFd0IsR0FBRyxHQUFHLE1BQU16QixFQUFFLE9BQU9BLEVBQUUsSUFBSXdCLEVBQUUsR0FBR3RCLEVBQUUsRUFBbUQsT0FBakRzNUIsRUFBRXg1QixFQUFFd0IsRUFBRSxHQUFHLElBQUcsU0FBU3hCLEdBQUcsT0FBT0MsRUFBRWdELEtBQUt4QixFQUFFekIsRUFBRUUsSUFBSSxJQUFVc0IsQ0FBQyxDQUFDLFNBQVNzZ0MsRUFBRTloQyxHQUFHLElBQUksSUFBSUEsRUFBRTh0QyxRQUFRLENBQUMsSUFBSTd0QyxFQUFFRCxFQUFFK3RDLFNBQVE5dEMsRUFBRUEsS0FBTW1yQixNQUFLLFNBQVNuckIsR0FBTSxJQUFJRCxFQUFFOHRDLFVBQVUsSUFBSTl0QyxFQUFFOHRDLFVBQVE5dEMsRUFBRTh0QyxRQUFRLEVBQUU5dEMsRUFBRSt0QyxRQUFROXRDLEVBQUMsSUFBRSxTQUFTQSxHQUFNLElBQUlELEVBQUU4dEMsVUFBVSxJQUFJOXRDLEVBQUU4dEMsVUFBUTl0QyxFQUFFOHRDLFFBQVEsRUFBRTl0QyxFQUFFK3RDLFFBQVE5dEMsRUFBQyxLQUFJLElBQUlELEVBQUU4dEMsVUFBVTl0QyxFQUFFOHRDLFFBQVEsRUFBRTl0QyxFQUFFK3RDLFFBQVE5dEMsRUFBRSxDQUFDLEdBQUcsSUFBSUQsRUFBRTh0QyxRQUFRLE9BQU85dEMsRUFBRSt0QyxRQUFRQyxRQUFRLE1BQU1odUMsRUFBRSt0QyxPQUFRLENBQzVaLElBQUk1TCxFQUFFLENBQUNod0IsUUFBUSxNQUFNbXdCLEVBQUUsQ0FBQ3RxQixXQUFXLE1BQU13cUIsRUFBRSxDQUFDcE4sdUJBQXVCK00sRUFBRXRxQix3QkFBd0J5cUIsRUFBRXpFLGtCQUFrQmhLLEdBQUcsU0FBU3dQLElBQUksTUFBTXArQixNQUFNLDJEQUE0RCxDQUN6TXNuQyxFQUFRMEIsU0FBUyxDQUFDQyxJQUFJaE4sRUFBRTMrQixRQUFRLFNBQVN2QyxFQUFFQyxFQUFFd0IsR0FBR3kvQixFQUFFbGhDLEdBQUUsV0FBV0MsRUFBRThRLE1BQU1uUCxLQUFLekIsVUFBVSxHQUFFc0IsRUFBRSxFQUFFMHNDLE1BQU0sU0FBU251QyxHQUFHLElBQUlDLEVBQUUsRUFBdUIsT0FBckJpaEMsRUFBRWxoQyxHQUFFLFdBQVdDLEdBQUcsSUFBVUEsQ0FBQyxFQUFFbXVDLFFBQVEsU0FBU3B1QyxHQUFHLE9BQU9raEMsRUFBRWxoQyxHQUFFLFNBQVNBLEdBQUcsT0FBT0EsQ0FBQyxLQUFJLEVBQUUsRUFBRXF1QyxLQUFLLFNBQVNydUMsR0FBRyxJQUFJeTFCLEVBQUV6MUIsR0FBRyxNQUFNaUYsTUFBTSx5RUFBeUUsT0FBT2pGLENBQUMsR0FBR3VzQyxFQUFRK0IsVUFBVW5pQixFQUFFb2dCLEVBQVFnQyxTQUFTeHVDLEVBQUV3c0MsRUFBUWlDLFNBQVN2ZCxFQUFFc2IsRUFBUWtDLGNBQWNyaUIsRUFBRW1nQixFQUFRbUMsV0FBVzFkLEVBQUV1YixFQUFRb0MsU0FBU3hsQixFQUNsY29qQixFQUFRN29DLG1EQUFtRDgrQixFQUFFK0osRUFBUXFDLElBQUl2TCxFQUN6RWtKLEVBQVFzQyxhQUFhLFNBQVM3dUMsRUFBRUMsRUFBRXdCLEdBQUcsR0FBRyxNQUFPekIsRUFBYyxNQUFNaUYsTUFBTSxpRkFBaUZqRixFQUFFLEtBQUssSUFBSXdCLEVBQUU2VCxFQUFFLENBQUMsRUFBRXJWLEVBQUUyd0IsT0FBT3p3QixFQUFFRixFQUFFbWUsSUFBSXJZLEVBQUU5RixFQUFFZ3dCLElBQUlucUIsRUFBRTdGLEVBQUVpd0IsT0FBTyxHQUFHLE1BQU1od0IsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFK3ZCLE1BQU1scUIsRUFBRTdGLEVBQUUrdkIsSUFBSW5xQixFQUFFZ3VCLEVBQUUxaEIsY0FBUyxJQUFTbFMsRUFBRWtlLE1BQU1qZSxFQUFFLEdBQUdELEVBQUVrZSxLQUFRbmUsRUFBRWtDLE1BQU1sQyxFQUFFa0MsS0FBSzQ0QixhQUFhLElBQUluNUIsRUFBRTNCLEVBQUVrQyxLQUFLNDRCLGFBQWEsSUFBSXA1QixLQUFLekIsRUFBRStvQixFQUFFL2xCLEtBQUtoRCxFQUFFeUIsS0FBS216QixFQUFFMXpCLGVBQWVPLEtBQUtGLEVBQUVFLFFBQUcsSUFBU3pCLEVBQUV5QixTQUFJLElBQVNDLEVBQUVBLEVBQUVELEdBQUd6QixFQUFFeUIsR0FBRyxDQUFDLElBQUlBLEVBQUV2QixVQUFVQyxPQUFPLEVBQUUsR0FBRyxJQUFJc0IsRUFBRUYsRUFBRThILFNBQVM3SCxPQUFPLEdBQUcsRUFBRUMsRUFBRSxDQUFDQyxFQUFFa0gsTUFBTW5ILEdBQ3JmLElBQUksSUFBSXNQLEVBQUUsRUFBRUEsRUFBRXRQLEVBQUVzUCxJQUFJclAsRUFBRXFQLEdBQUc3USxVQUFVNlEsRUFBRSxHQUFHeFAsRUFBRThILFNBQVMzSCxDQUFDLENBQUMsTUFBTSxDQUFDMkUsU0FBU1YsRUFBRTFELEtBQUtsQyxFQUFFa0MsS0FBS2ljLElBQUlqZSxFQUFFOHZCLElBQUlscUIsRUFBRTZxQixNQUFNbnZCLEVBQUV5dUIsT0FBT3BxQixFQUFFLEVBQUUwbUMsRUFBUXVDLGNBQWMsU0FBUzl1QyxHQUFxSyxPQUFsS0EsRUFBRSxDQUFDc0csU0FBUzRpQixFQUFFMkksY0FBYzd4QixFQUFFK3VDLGVBQWUvdUMsRUFBRWd2QyxhQUFhLEVBQUVDLFNBQVMsS0FBS0MsU0FBUyxLQUFLQyxjQUFjLEtBQUtDLFlBQVksT0FBUUgsU0FBUyxDQUFDM29DLFNBQVN5aUIsRUFBRXhpQixTQUFTdkcsR0FBVUEsRUFBRWt2QyxTQUFTbHZDLENBQUMsRUFBRXVzQyxFQUFReHJDLGNBQWN3MEIsRUFBRWdYLEVBQVE4QyxjQUFjLFNBQVNydkMsR0FBRyxJQUFJQyxFQUFFczFCLEVBQUU1TSxLQUFLLEtBQUszb0IsR0FBWSxPQUFUQyxFQUFFaUMsS0FBS2xDLEVBQVNDLENBQUMsRUFBRXNzQyxFQUFRK0MsVUFBVSxXQUFXLE1BQU0sQ0FBQ245QixRQUFRLEtBQUssRUFDOWRvNkIsRUFBUWdELFdBQVcsU0FBU3Z2QyxHQUFHLE1BQU0sQ0FBQ3NHLFNBQVMvRSxFQUFFNkUsT0FBT3BHLEVBQUUsRUFBRXVzQyxFQUFRaUQsZUFBZS9aLEVBQUU4VyxFQUFRa0QsS0FBSyxTQUFTenZDLEdBQUcsTUFBTSxDQUFDc0csU0FBUzRxQixFQUFFMXFCLFNBQVMsQ0FBQ3NuQyxTQUFTLEVBQUVDLFFBQVEvdEMsR0FBR3lHLE1BQU1xN0IsRUFBRSxFQUFFeUssRUFBUW1ELEtBQUssU0FBUzF2QyxFQUFFQyxHQUFHLE1BQU0sQ0FBQ3FHLFNBQVMyaUIsRUFBRS9tQixLQUFLbEMsRUFBRW0rQixhQUFRLElBQVNsK0IsRUFBRSxLQUFLQSxFQUFFLEVBQUVzc0MsRUFBUW9ELGdCQUFnQixTQUFTM3ZDLEdBQUcsSUFBSUMsRUFBRXFpQyxFQUFFdHFCLFdBQVdzcUIsRUFBRXRxQixXQUFXLENBQUMsRUFBRSxJQUFJaFksR0FBRyxDQUFDLFFBQVFzaUMsRUFBRXRxQixXQUFXL1gsQ0FBQyxDQUFDLEVBQUVzc0MsRUFBUXFELGFBQWF2TSxFQUFFa0osRUFBUTVTLFlBQVksU0FBUzM1QixFQUFFQyxHQUFHLE9BQU9raUMsRUFBRWh3QixRQUFRd25CLFlBQVkzNUIsRUFBRUMsRUFBRSxFQUFFc3NDLEVBQVEzUyxXQUFXLFNBQVM1NUIsR0FBRyxPQUFPbWlDLEVBQUVod0IsUUFBUXluQixXQUFXNTVCLEVBQUUsRUFDM2Z1c0MsRUFBUWxTLGNBQWMsV0FBVyxFQUFFa1MsRUFBUWpTLGlCQUFpQixTQUFTdDZCLEdBQUcsT0FBT21pQyxFQUFFaHdCLFFBQVFtb0IsaUJBQWlCdDZCLEVBQUUsRUFBRXVzQyxFQUFRMVMsVUFBVSxTQUFTNzVCLEVBQUVDLEdBQUcsT0FBT2tpQyxFQUFFaHdCLFFBQVEwbkIsVUFBVTc1QixFQUFFQyxFQUFFLEVBQUVzc0MsRUFBUTdSLE1BQU0sV0FBVyxPQUFPeUgsRUFBRWh3QixRQUFRdW9CLE9BQU8sRUFBRTZSLEVBQVF6UyxvQkFBb0IsU0FBUzk1QixFQUFFQyxFQUFFd0IsR0FBRyxPQUFPMGdDLEVBQUVod0IsUUFBUTJuQixvQkFBb0I5NUIsRUFBRUMsRUFBRXdCLEVBQUUsRUFBRThxQyxFQUFReFMsbUJBQW1CLFNBQVMvNUIsRUFBRUMsR0FBRyxPQUFPa2lDLEVBQUVod0IsUUFBUTRuQixtQkFBbUIvNUIsRUFBRUMsRUFBRSxFQUFFc3NDLEVBQVF2UyxnQkFBZ0IsU0FBU2g2QixFQUFFQyxHQUFHLE9BQU9raUMsRUFBRWh3QixRQUFRNm5CLGdCQUFnQmg2QixFQUFFQyxFQUFFLEVBQ3pkc3NDLEVBQVF0UyxRQUFRLFNBQVNqNkIsRUFBRUMsR0FBRyxPQUFPa2lDLEVBQUVod0IsUUFBUThuQixRQUFRajZCLEVBQUVDLEVBQUUsRUFBRXNzQyxFQUFRclMsV0FBVyxTQUFTbDZCLEVBQUVDLEVBQUV3QixHQUFHLE9BQU8wZ0MsRUFBRWh3QixRQUFRK25CLFdBQVdsNkIsRUFBRUMsRUFBRXdCLEVBQUUsRUFBRThxQyxFQUFRcFMsT0FBTyxTQUFTbjZCLEdBQUcsT0FBT21pQyxFQUFFaHdCLFFBQVFnb0IsT0FBT242QixFQUFFLEVBQUV1c0MsRUFBUW5TLFNBQVMsU0FBU3A2QixHQUFHLE9BQU9taUMsRUFBRWh3QixRQUFRaW9CLFNBQVNwNkIsRUFBRSxFQUFFdXNDLEVBQVE5UixxQkFBcUIsU0FBU3o2QixFQUFFQyxFQUFFd0IsR0FBRyxPQUFPMGdDLEVBQUVod0IsUUFBUXNvQixxQkFBcUJ6NkIsRUFBRUMsRUFBRXdCLEVBQUUsRUFBRThxQyxFQUFRaFMsY0FBYyxXQUFXLE9BQU80SCxFQUFFaHdCLFFBQVFvb0IsZUFBZSxFQUFFZ1MsRUFBUTFCLFFBQVEsd0JDdEJsYTJDLEVBQU9qQixRQUFVLEVBQWpCaUIsa0JDTVcsU0FBUzlyQyxFQUFFMUIsRUFBRUMsR0FBRyxJQUFJQyxFQUFFRixFQUFFSSxPQUFPSixFQUFFbVEsS0FBS2xRLEdBQUdELEVBQUUsS0FBSyxFQUFFRSxHQUFHLENBQUMsSUFBSXNCLEVBQUV0QixFQUFFLElBQUksRUFBRXVCLEVBQUV6QixFQUFFd0IsR0FBRyxLQUFHLEVBQUVHLEVBQUVGLEVBQUV4QixJQUEwQixNQUFNRCxFQUE3QkEsRUFBRXdCLEdBQUd2QixFQUFFRCxFQUFFRSxHQUFHdUIsRUFBRXZCLEVBQUVzQixDQUFjLENBQUMsQ0FBQyxTQUFTcUUsRUFBRTdGLEdBQUcsT0FBTyxJQUFJQSxFQUFFSSxPQUFPLEtBQUtKLEVBQUUsRUFBRSxDQUFDLFNBQVM4RixFQUFFOUYsR0FBRyxHQUFHLElBQUlBLEVBQUVJLE9BQU8sT0FBTyxLQUFLLElBQUlILEVBQUVELEVBQUUsR0FBR0UsRUFBRUYsRUFBRTZ2QyxNQUFNLEdBQUczdkMsSUFBSUQsRUFBRSxDQUFDRCxFQUFFLEdBQUdFLEVBQUVGLEVBQUUsSUFBSSxJQUFJd0IsRUFBRSxFQUFFQyxFQUFFekIsRUFBRUksT0FBTytvQixFQUFFMW5CLElBQUksRUFBRUQsRUFBRTJuQixHQUFHLENBQUMsSUFBSW5ZLEVBQUUsR0FBR3hQLEVBQUUsR0FBRyxFQUFFNlQsRUFBRXJWLEVBQUVnUixHQUFHOFgsRUFBRTlYLEVBQUUsRUFBRWlZLEVBQUVqcEIsRUFBRThvQixHQUFHLEdBQUcsRUFBRW5uQixFQUFFMFQsRUFBRW5WLEdBQUc0b0IsRUFBRXJuQixHQUFHLEVBQUVFLEVBQUVzbkIsRUFBRTVULElBQUlyVixFQUFFd0IsR0FBR3luQixFQUFFanBCLEVBQUU4b0IsR0FBRzVvQixFQUFFc0IsRUFBRXNuQixJQUFJOW9CLEVBQUV3QixHQUFHNlQsRUFBRXJWLEVBQUVnUixHQUFHOVEsRUFBRXNCLEVBQUV3UCxPQUFRLE1BQUc4WCxFQUFFcm5CLEdBQUcsRUFBRUUsRUFBRXNuQixFQUFFL29CLElBQTBCLE1BQU1GLEVBQTdCQSxFQUFFd0IsR0FBR3luQixFQUFFanBCLEVBQUU4b0IsR0FBRzVvQixFQUFFc0IsRUFBRXNuQixDQUFjLEVBQUMsQ0FBQyxPQUFPN29CLENBQUMsQ0FDM2MsU0FBUzBCLEVBQUUzQixFQUFFQyxHQUFHLElBQUlDLEVBQUVGLEVBQUU4dkMsVUFBVTd2QyxFQUFFNnZDLFVBQVUsT0FBTyxJQUFJNXZDLEVBQUVBLEVBQUVGLEVBQUVvWSxHQUFHblksRUFBRW1ZLEVBQUUsQ0FBQyxHQUFHLGlCQUFrQjIzQixhQUFhLG1CQUFvQkEsWUFBWXoxQixJQUFJLENBQUMsSUFBSTFVLEVBQUVtcUMsWUFBWXhELEVBQVF4NUIsYUFBYSxXQUFXLE9BQU9uTixFQUFFMFUsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJdmEsRUFBRXNhLEtBQUsyVyxFQUFFanhCLEVBQUV1YSxNQUFNaXlCLEVBQVF4NUIsYUFBYSxXQUFXLE9BQU9oVCxFQUFFdWEsTUFBTTBXLENBQUMsQ0FBQyxDQUFDLElBQUlDLEVBQUUsR0FBR2xJLEVBQUUsR0FBR0csRUFBRSxFQUFFM25CLEVBQUUsS0FBSzJ2QixFQUFFLEVBQUU3dUIsR0FBRSxFQUFHeUMsR0FBRSxFQUFHZ08sR0FBRSxFQUFHcVYsRUFBRSxtQkFBb0J5QyxXQUFXQSxXQUFXLEtBQUt1QixFQUFFLG1CQUFvQnJCLGFBQWFBLGFBQWEsS0FBSzFCLEVBQUUsb0JBQXFCNG1CLGFBQWFBLGFBQWEsS0FDblQsU0FBUzVqQixFQUFFcHNCLEdBQUcsSUFBSSxJQUFJQyxFQUFFNEYsRUFBRWtqQixHQUFHLE9BQU85b0IsR0FBRyxDQUFDLEdBQUcsT0FBT0EsRUFBRTB6QixTQUFTN3RCLEVBQUVpakIsT0FBUSxNQUFHOW9CLEVBQUVnd0MsV0FBV2p3QyxHQUFnRCxNQUE5QzhGLEVBQUVpakIsR0FBRzlvQixFQUFFNnZDLFVBQVU3dkMsRUFBRWl3QyxlQUFleHVDLEVBQUV1dkIsRUFBRWh4QixFQUFhLENBQUNBLEVBQUU0RixFQUFFa2pCLEVBQUUsQ0FBQyxDQUFDLFNBQVN1RCxFQUFFdHNCLEdBQWEsR0FBVjhTLEdBQUUsRUFBR3NaLEVBQUVwc0IsSUFBTzhFLEVBQUUsR0FBRyxPQUFPZSxFQUFFb3JCLEdBQUduc0IsR0FBRSxFQUFHNHBCLEVBQUUxRixPQUFPLENBQUMsSUFBSS9vQixFQUFFNEYsRUFBRWtqQixHQUFHLE9BQU85b0IsR0FBRzR6QixFQUFFdkgsRUFBRXJzQixFQUFFZ3dDLFVBQVVqd0MsRUFBRSxDQUFDLENBQ3JhLFNBQVNncEIsRUFBRWhwQixFQUFFQyxHQUFHNkUsR0FBRSxFQUFHZ08sSUFBSUEsR0FBRSxFQUFHcVosRUFBRTBJLEdBQUdBLEdBQUcsR0FBR3h5QixHQUFFLEVBQUcsSUFBSW5DLEVBQUVneEIsRUFBRSxJQUFTLElBQUw5RSxFQUFFbnNCLEdBQU9zQixFQUFFc0UsRUFBRW9yQixHQUFHLE9BQU8xdkIsTUFBTUEsRUFBRTJ1QyxlQUFlandDLElBQUlELElBQUl1MUIsTUFBTSxDQUFDLElBQUkvekIsRUFBRUQsRUFBRW95QixTQUFTLEdBQUcsbUJBQW9CbnlCLEVBQUUsQ0FBQ0QsRUFBRW95QixTQUFTLEtBQUt6QyxFQUFFM3ZCLEVBQUU0dUMsY0FBYyxJQUFJMXVDLEVBQUVELEVBQUVELEVBQUUydUMsZ0JBQWdCandDLEdBQUdBLEVBQUVzc0MsRUFBUXg1QixlQUFlLG1CQUFvQnRSLEVBQUVGLEVBQUVveUIsU0FBU2x5QixFQUFFRixJQUFJc0UsRUFBRW9yQixJQUFJbnJCLEVBQUVtckIsR0FBRzdFLEVBQUVuc0IsRUFBRSxNQUFNNkYsRUFBRW1yQixHQUFHMXZCLEVBQUVzRSxFQUFFb3JCLEVBQUUsQ0FBQyxHQUFHLE9BQU8xdkIsRUFBRSxJQUFJNG5CLEdBQUUsTUFBTyxDQUFDLElBQUluWSxFQUFFbkwsRUFBRWtqQixHQUFHLE9BQU8vWCxHQUFHNmlCLEVBQUV2SCxFQUFFdGIsRUFBRWkvQixVQUFVaHdDLEdBQUdrcEIsR0FBRSxDQUFFLENBQUMsT0FBT0EsQ0FBQyxDQUFDLFFBQVE1bkIsRUFBRSxLQUFLMnZCLEVBQUVoeEIsRUFBRW1DLEdBQUUsQ0FBRSxDQUFDLENBRDFhLG9CQUFxQit0QyxnQkFBVyxJQUFTQSxVQUFVQyxpQkFBWSxJQUFTRCxVQUFVQyxXQUFXQyxnQkFBZ0JGLFVBQVVDLFdBQVdDLGVBQWUzbkIsS0FBS3luQixVQUFVQyxZQUMyUSxJQUN6UG5QLEVBRDZQMUwsR0FBRSxFQUFHQyxFQUFFLEtBQUtaLEdBQUcsRUFBRWlCLEVBQUUsRUFBRTRCLEdBQUcsRUFDdmMsU0FBU25DLElBQUksUUFBT2dYLEVBQVF4NUIsZUFBZTJrQixFQUFFNUIsRUFBTyxDQUFDLFNBQVMwRCxJQUFJLEdBQUcsT0FBTy9ELEVBQUUsQ0FBQyxJQUFJejFCLEVBQUV1c0MsRUFBUXg1QixlQUFlMmtCLEVBQUUxM0IsRUFBRSxJQUFJQyxHQUFFLEVBQUcsSUFBSUEsRUFBRXcxQixHQUFFLEVBQUd6MUIsRUFBRSxDQUFDLFFBQVFDLEVBQUVpaEMsS0FBSzFMLEdBQUUsRUFBR0MsRUFBRSxLQUFLLENBQUMsTUFBTUQsR0FBRSxDQUFFLENBQU8sR0FBRyxtQkFBb0JwTSxFQUFFOFgsRUFBRSxXQUFXOVgsRUFBRW9RLEVBQUUsT0FBTyxHQUFHLG9CQUFxQitXLGVBQWUsQ0FBQyxJQUFJek8sRUFBRSxJQUFJeU8sZUFBZXBPLEVBQUVMLEVBQUUwTyxNQUFNMU8sRUFBRTJPLE1BQU1DLFVBQVVsWCxFQUFFMEgsRUFBRSxXQUFXaUIsRUFBRXdPLFlBQVksS0FBSyxDQUFDLE1BQU16UCxFQUFFLFdBQVcvWSxFQUFFcVIsRUFBRSxFQUFFLEVBQUUsU0FBUzlLLEVBQUUxdUIsR0FBR3kxQixFQUFFejFCLEVBQUV3MUIsSUFBSUEsR0FBRSxFQUFHMEwsSUFBSSxDQUFDLFNBQVNyTixFQUFFN3pCLEVBQUVDLEdBQUc0MEIsRUFBRTFNLEdBQUUsV0FBV25vQixFQUFFdXNDLEVBQVF4NUIsZUFBZSxHQUFFOVMsRUFBRSxDQUM1ZHNzQyxFQUFRNTRCLHNCQUFzQixFQUFFNDRCLEVBQVFwNUIsMkJBQTJCLEVBQUVvNUIsRUFBUTk0QixxQkFBcUIsRUFBRTg0QixFQUFRaDVCLHdCQUF3QixFQUFFZzVCLEVBQVFxRSxtQkFBbUIsS0FBS3JFLEVBQVFsNUIsOEJBQThCLEVBQUVrNUIsRUFBUTk1Qix3QkFBd0IsU0FBU3pTLEdBQUdBLEVBQUUyekIsU0FBUyxJQUFJLEVBQUU0WSxFQUFRc0UsMkJBQTJCLFdBQVcvckMsR0FBR3pDLElBQUl5QyxHQUFFLEVBQUc0cEIsRUFBRTFGLEdBQUcsRUFDMVV1akIsRUFBUXVFLHdCQUF3QixTQUFTOXdDLEdBQUcsRUFBRUEsR0FBRyxJQUFJQSxFQUFFMjhCLFFBQVFDLE1BQU0sbUhBQW1IOUcsRUFBRSxFQUFFOTFCLEVBQUUrVCxLQUFLZzlCLE1BQU0sSUFBSS93QyxHQUFHLENBQUMsRUFBRXVzQyxFQUFRdDVCLGlDQUFpQyxXQUFXLE9BQU9pZSxDQUFDLEVBQUVxYixFQUFReUUsOEJBQThCLFdBQVcsT0FBT25yQyxFQUFFb3JCLEVBQUUsRUFBRXNiLEVBQVEwRSxjQUFjLFNBQVNqeEMsR0FBRyxPQUFPa3hCLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSWp4QixFQUFFLEVBQUUsTUFBTSxRQUFRQSxFQUFFaXhCLEVBQUUsSUFBSWh4QixFQUFFZ3hCLEVBQUVBLEVBQUVqeEIsRUFBRSxJQUFJLE9BQU9ELEdBQUcsQ0FBQyxRQUFRa3hCLEVBQUVoeEIsQ0FBQyxDQUFDLEVBQUVxc0MsRUFBUTJFLHdCQUF3QixXQUFXLEVBQzlmM0UsRUFBUTE1QixzQkFBc0IsV0FBVyxFQUFFMDVCLEVBQVE0RSx5QkFBeUIsU0FBU254QyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJRSxFQUFFZ3hCLEVBQUVBLEVBQUVseEIsRUFBRSxJQUFJLE9BQU9DLEdBQUcsQ0FBQyxRQUFRaXhCLEVBQUVoeEIsQ0FBQyxDQUFDLEVBQ2hNcXNDLEVBQVFoNkIsMEJBQTBCLFNBQVN2UyxFQUFFQyxFQUFFQyxHQUFHLElBQUlzQixFQUFFK3FDLEVBQVF4NUIsZUFBOEYsT0FBdEM3UyxFQUF6QyxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBZSxpQkFBWkEsRUFBRUEsRUFBRWt4QyxRQUE2QixFQUFFbHhDLEVBQUVzQixFQUFFdEIsRUFBT3NCLEVBQVN4QixHQUFHLEtBQUssRUFBRSxJQUFJeUIsR0FBRyxFQUFFLE1BQU0sS0FBSyxFQUFFQSxFQUFFLElBQUksTUFBTSxLQUFLLEVBQUVBLEVBQUUsV0FBVyxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sUUFBUUEsRUFBRSxJQUFtTixPQUF6TXpCLEVBQUUsQ0FBQ29ZLEdBQUc4USxJQUFJeUssU0FBUzF6QixFQUFFa3dDLGNBQWNud0MsRUFBRWl3QyxVQUFVL3ZDLEVBQUVnd0MsZUFBdkR6dUMsRUFBRXZCLEVBQUV1QixFQUFvRXF1QyxXQUFXLEdBQUc1dkMsRUFBRXNCLEdBQUd4QixFQUFFOHZDLFVBQVU1dkMsRUFBRXdCLEVBQUVxbkIsRUFBRS9vQixHQUFHLE9BQU82RixFQUFFb3JCLElBQUlqeEIsSUFBSTZGLEVBQUVrakIsS0FBS2pXLEdBQUdxWixFQUFFMEksR0FBR0EsR0FBRyxHQUFHL2hCLEdBQUUsRUFBRytnQixFQUFFdkgsRUFBRXBzQixFQUFFc0IsTUFBTXhCLEVBQUU4dkMsVUFBVXJ1QyxFQUFFQyxFQUFFdXZCLEVBQUVqeEIsR0FBRzhFLEdBQUd6QyxJQUFJeUMsR0FBRSxFQUFHNHBCLEVBQUUxRixLQUFZaHBCLENBQUMsRUFDbmV1c0MsRUFBUTU1QixxQkFBcUI0aUIsRUFBRWdYLEVBQVE4RSxzQkFBc0IsU0FBU3J4QyxHQUFHLElBQUlDLEVBQUVpeEIsRUFBRSxPQUFPLFdBQVcsSUFBSWh4QixFQUFFZ3hCLEVBQUVBLEVBQUVqeEIsRUFBRSxJQUFJLE9BQU9ELEVBQUUrUSxNQUFNblAsS0FBS3pCLFVBQVUsQ0FBQyxRQUFRK3dCLEVBQUVoeEIsQ0FBQyxDQUFDLENBQUMsaUJDZjdKc3RDLEVBQU9qQixRQUFVLEVBQWpCaUIsT0NGRThELEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYWxGLFFBR3JCLElBQUlpQixFQUFTOEQsRUFBeUJFLEdBQVksQ0FHakRqRixRQUFTLENBQUMsR0FPWCxPQUhBb0YsRUFBb0JILEdBQVVoRSxFQUFRQSxFQUFPakIsUUFBU2dGLEdBRy9DL0QsRUFBT2pCLE9BQ2YsQ1J0Qkk1c0MsRUFBV3NCLE9BQU8yd0MsZUFBa0JDLEdBQVM1d0MsT0FBTzJ3QyxlQUFlQyxHQUFTQSxHQUFTQSxFQUFhLFVBUXRHTixFQUFvQnhvQixFQUFJLFNBQVNwaEIsRUFBTzJuQixHQUV2QyxHQURVLEVBQVBBLElBQVUzbkIsRUFBUS9GLEtBQUsrRixJQUNoQixFQUFQMm5CLEVBQVUsT0FBTzNuQixFQUNwQixHQUFvQixpQkFBVkEsR0FBc0JBLEVBQU8sQ0FDdEMsR0FBVyxFQUFQMm5CLEdBQWEzbkIsRUFBTW1xQyxXQUFZLE9BQU9ucUMsRUFDMUMsR0FBVyxHQUFQMm5CLEdBQW9DLG1CQUFmM25CLEVBQU15akIsS0FBcUIsT0FBT3pqQixDQUM1RCxDQUNBLElBQUlvcUMsRUFBSzl3QyxPQUFPazNCLE9BQU8sTUFDdkJvWixFQUFvQnRnQixFQUFFOGdCLEdBQ3RCLElBQUlDLEVBQU0sQ0FBQyxFQUNYdHlDLEVBQWlCQSxHQUFrQixDQUFDLEtBQU1DLEVBQVMsQ0FBQyxHQUFJQSxFQUFTLElBQUtBLEVBQVNBLElBQy9FLElBQUksSUFBSXdTLEVBQWlCLEVBQVBtZCxHQUFZM25CLEVBQXlCLGlCQUFYd0ssS0FBeUJ6UyxFQUFla08sUUFBUXVFLEdBQVVBLEVBQVV4UyxFQUFTd1MsR0FDeEhsUixPQUFPZ3hDLG9CQUFvQjkvQixHQUFTNVAsU0FBUzRiLEdBQVM2ekIsRUFBSTd6QixHQUFPLElBQU94VyxFQUFNd1csS0FJL0UsT0FGQTZ6QixFQUFhLFFBQUksSUFBTSxFQUN2QlQsRUFBb0IvdkMsRUFBRXV3QyxFQUFJQyxHQUNuQkQsQ0FDUixFU3hCQVIsRUFBb0IvdkMsRUFBSSxDQUFDK3FDLEVBQVMyRixLQUNqQyxJQUFJLElBQUkvekIsS0FBTyt6QixFQUNYWCxFQUFvQlksRUFBRUQsRUFBWS96QixLQUFTb3pCLEVBQW9CWSxFQUFFNUYsRUFBU3B1QixJQUM1RWxkLE9BQU91RSxlQUFlK21DLEVBQVNwdUIsRUFBSyxDQUFFL1csWUFBWSxFQUFNRixJQUFLZ3JDLEVBQVcvekIsSUFFMUUsRUNORG96QixFQUFvQlksRUFBSSxDQUFDTixFQUFLTyxJQUFVbnhDLE9BQU9DLFVBQVVDLGVBQWU4QixLQUFLNHVDLEVBQUtPLEdDQ2xGYixFQUFvQnRnQixFQUFLc2IsSUFDSCxvQkFBWDNvQyxRQUEwQkEsT0FBT3l1QyxhQUMxQ3B4QyxPQUFPdUUsZUFBZSttQyxFQUFTM29DLE9BQU95dUMsWUFBYSxDQUFFMXFDLE1BQU8sV0FFN0QxRyxPQUFPdUUsZUFBZSttQyxFQUFTLGFBQWMsQ0FBRTVrQyxPQUFPLEdBQU8scUlDRWxEMnFDLHdSQUFaLFNBQVlBLEdBUVZBLEVBQUEsVUFPQUEsRUFBQSxZQU1BQSxFQUFBLGlCQUNELENBdEJELENBQVlBLElBQUFBLEVBc0JYLEtBcUtELE1BQU1DLEVBQW9CLFdBeVNWLFNBQUFDLEVBQVU3cUMsRUFBWTQwQixHQUNwQyxJQUFjLElBQVY1MEIsU0FBbUJBLEVBQ3JCLE1BQU0sSUFBSTFDLE1BQU1zM0IsRUFFcEIsQ0FFZ0IsU0FBQWtXLEVBQVFDLEVBQVduVyxHQUNqQyxJQUFLbVcsRUFBTSxDQUVjLG9CQUFaL1YsU0FBeUJBLFFBQVFnVyxLQUFLcFcsR0FFakQsSUFNRSxNQUFNLElBQUl0M0IsTUFBTXMzQixFQUVqQixDQUFDLE1BQU85NkIsR0FBSSxDQUNkLENBQ0gsQ0FTQSxTQUFTbXhDLEVBQWdCcjBCLEVBQW9CaVMsR0FDM0MsTUFBTyxDQUNMcWlCLElBQUt0MEIsRUFBU29kLE1BQ2R4ZCxJQUFLSSxFQUFTSixJQUNkMjBCLElBQUt0aUIsRUFFVCxDQUtNLFNBQVV1aUIsRUFDZDVnQyxFQUNBNmdDLEVBQ0FyWCxFQUNBeGQsR0FjQSxZQWZBLElBQUF3ZCxJQUFBQSxFQUFhLE1BR0RzWCxFQUFBLENBQ1ZDLFNBQTZCLGlCQUFaL2dDLEVBQXVCQSxFQUFVQSxFQUFRK2dDLFNBQzFEMXhCLE9BQVEsR0FDUjJ4QixLQUFNLElBQ1ksaUJBQVBILEVBQWtCSSxFQUFVSixHQUFNQSxFQUFFLENBQy9DclgsUUFLQXhkLElBQU02MEIsR0FBT0EsRUFBZ0I3MEIsS0FBUUEsR0FqQ2hDcEssS0FBSzBVLFNBQVN2ZSxTQUFTLElBQUltcEMsT0FBTyxFQUFHLElBb0M5QyxDQUtnQixTQUFBQyxFQUFVQyxHQUlWLElBSlcsU0FDekJMLEVBQVcsSUFBRyxPQUNkMXhCLEVBQVMsR0FBRSxLQUNYMnhCLEVBQU8sSUFDT0ksRUFLZCxPQUpJL3hCLEdBQXFCLE1BQVhBLElBQ1oweEIsR0FBaUMsTUFBckIxeEIsRUFBT3pULE9BQU8sR0FBYXlULEVBQVMsSUFBTUEsR0FDcEQyeEIsR0FBaUIsTUFBVEEsSUFDVkQsR0FBK0IsTUFBbkJDLEVBQUtwbEMsT0FBTyxHQUFhb2xDLEVBQU8sSUFBTUEsR0FDN0NELENBQ1QsQ0FLTSxTQUFVRSxFQUFVSSxHQUN4QixJQUFJQyxFQUE0QixDQUFDLEVBRWpDLEdBQUlELEVBQU0sQ0FDUixJQUFJRSxFQUFZRixFQUFLNWxDLFFBQVEsS0FDekI4bEMsR0FBYSxJQUNmRCxFQUFXTixLQUFPSyxFQUFLSCxPQUFPSyxHQUM5QkYsRUFBT0EsRUFBS0gsT0FBTyxFQUFHSyxJQUd4QixJQUFJQyxFQUFjSCxFQUFLNWxDLFFBQVEsS0FDM0IrbEMsR0FBZSxJQUNqQkYsRUFBV2p5QixPQUFTZ3lCLEVBQUtILE9BQU9NLEdBQ2hDSCxFQUFPQSxFQUFLSCxPQUFPLEVBQUdNLElBR3BCSCxJQUNGQyxFQUFXUCxTQUFXTSxFQUV6QixDQUVELE9BQU9DLENBQ1QsQ0N2a0JBLElBQVlHLEdBQVosU0FBWUEsR0FDVkEsRUFBQSxZQUNBQSxFQUFBLG9CQUNBQSxFQUFBLG9CQUNBQSxFQUFBLGFBQ0QsQ0FMRCxDQUFZQSxJQUFBQSxFQUtYLEtBbVJNLE1BQU1DLEVBQXFCLElBQUl0ekMsSUFBdUIsQ0FDM0QsT0FDQSxnQkFDQSxPQUNBLEtBQ0EsUUFDQSxhQTZKSSxTQUFVdXpDLEVBQ2RDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUEsWUFIdUIsSUFBdkJELElBQUFBLEVBQXVCLFNBQ3ZCLElBQUFDLElBQUFBLEVBQTBCLENBQUMsR0FFcEJILEVBQU83RixLQUFJLENBQUNpRyxFQUFPM2pCLEtBQ3hCLElBQUk0akIsRUFBVyxJQUFJSCxFQUFZNzFCLE9BQU9vUyxJQUNsQ3BZLEVBQXlCLGlCQUFiKzdCLEVBQU0vN0IsR0FBa0IrN0IsRUFBTS83QixHQUFLZzhCLEVBQVMvakIsS0FBSyxLQVdqRSxHQVZBbWlCLEdBQ2tCLElBQWhCMkIsRUFBTTNqQixRQUFtQjJqQixFQUFNN3FDLFNBQVEsNkNBR3pDa3BDLEdBQ0cwQixFQUFTOTdCLEdBQ1YscUNBQXFDQSxFQUFyQyxxRUF2Qk4sU0FDRSs3QixHQUVBLE9BQXVCLElBQWhCQSxFQUFNM2pCLEtBQ2YsQ0F1QlE2akIsQ0FBYUYsR0FBUSxDQUN2QixJQUFJRyxFQUFVckIsRUFBQSxHQUNUa0IsRUFDQUgsRUFBbUJHLEdBQU0sQ0FDNUIvN0IsT0FHRixPQURBODdCLEVBQVM5N0IsR0FBTWs4QixFQUNSQSxDQUNSLENBQU0sQ0FDTCxJQUFJQyxFQUFpQnRCLEVBQUEsR0FDaEJrQixFQUNBSCxFQUFtQkcsR0FBTSxDQUM1Qi83QixLQUNBOU8sY0FBVW9vQyxJQWFaLE9BWEF3QyxFQUFTOTdCLEdBQU1tOEIsRUFFWEosRUFBTTdxQyxXQUNSaXJDLEVBQWtCanJDLFNBQVd3cUMsRUFDM0JLLEVBQU03cUMsU0FDTjBxQyxFQUNBSSxFQUNBRixJQUlHSyxDQUNSLElBRUwsQ0FPTSxTQUFVQyxFQUdkVCxFQUNBVSxFQUNBQyxHQUVBLFlBRlEsSUFBUkEsSUFBQUEsRUFBVyxLQUVKQyxFQUFnQlosRUFBUVUsRUFBYUMsR0FBVSxFQUN4RCxDQUVNLFNBQVVDLEVBR2RaLEVBQ0FVLEVBQ0FDLEVBQ0FFLEdBRUEsSUFHSTFCLEVBQVcyQixHQUZVLGlCQUFoQkosRUFBMkJyQixFQUFVcUIsR0FBZUEsR0FFdkJ2QixVQUFZLElBQUt3QixHQUV2RCxHQUFnQixNQUFaeEIsRUFDRixPQUFPLEtBR1QsSUFBSTRCLEVBQVdDLEVBQWNoQixJQW1NL0IsU0FBMkJlLEdBQ3pCQSxFQUFTRSxNQUFLLENBQUNoMUMsRUFBR0MsSUFDaEJELEVBQUVpMUMsUUFBVWgxQyxFQUFFZzFDLE1BQ1ZoMUMsRUFBRWcxQyxNQUFRajFDLEVBQUVpMUMsTUF5Q3BCLFNBQXdCajFDLEVBQWFDLEdBSW5DLE9BRkVELEVBQUVJLFNBQVdILEVBQUVHLFFBQVVKLEVBQUU2QyxNQUFNLEdBQUksR0FBR3F5QyxPQUFNLENBQUNwc0IsRUFBR3FzQixJQUFNcnNCLElBQU03b0IsRUFBRWsxQyxLQU85RG4xQyxFQUFFQSxFQUFFSSxPQUFTLEdBQUtILEVBQUVBLEVBQUVHLE9BQVMsR0FHL0IsQ0FDTixDQXJEUWcxQyxDQUNFcDFDLEVBQUVxMUMsV0FBV25ILEtBQUtyL0IsR0FBU0EsRUFBS3ltQyxnQkFDaENyMUMsRUFBRW8xQyxXQUFXbkgsS0FBS3IvQixHQUFTQSxFQUFLeW1DLGtCQUcxQyxDQTNNRUMsQ0FBa0JULEdBRWxCLElBQUlVLEVBQVUsS0FDZCxJQUFLLElBQUlMLEVBQUksRUFBYyxNQUFYSyxHQUFtQkwsRUFBSUwsRUFBUzEwQyxTQUFVKzBDLEVBQUcsQ0FPM0QsSUFBSU0sRUFBVUMsRUFBV3hDLEdBQ3pCc0MsRUFBVUcsRUFDUmIsRUFBU0ssR0FDVE0sRUFDQWIsRUFFSCxDQUVELE9BQU9ZLENBQ1QsQ0F5Q0EsU0FBU1QsRUFHUGhCLEVBQ0FlLEVBQ0FjLEVBQ0EzQixRQUYyQyxJQUEzQ2EsSUFBQUEsRUFBMkMsU0FDM0MsSUFBQWMsSUFBQUEsRUFBNEMsU0FDbEMsSUFBVjNCLElBQUFBLEVBQWEsSUFFYixJQUFJNEIsRUFBZUEsQ0FDakIxQixFQUNBM2pCLEVBQ0FzbEIsS0FFQSxJQUFJam5DLEVBQW1DLENBQ3JDaW5DLGtCQUNtQnBFLElBQWpCb0UsRUFBNkIzQixFQUFNWCxNQUFRLEdBQUtzQyxFQUNsREMsZUFBdUMsSUFBeEI1QixFQUFNNEIsY0FDckJULGNBQWU5a0IsRUFDZjJqQixTQUdFdGxDLEVBQUtpbkMsYUFBYUUsV0FBVyxPQUMvQnhELEVBQ0UzakMsRUFBS2luQyxhQUFhRSxXQUFXL0IsR0FDN0Isd0JBQXdCcGxDLEVBQUtpbkMsYUFBN0Isd0JBQ003QixFQUROLDRHQUtGcGxDLEVBQUtpbkMsYUFBZWpuQyxFQUFLaW5DLGFBQWFqekMsTUFBTW94QyxFQUFXN3pDLFNBR3pELElBQUlvekMsRUFBT3lDLEVBQVUsQ0FBQ2hDLEVBQVlwbEMsRUFBS2luQyxlQUNuQ1QsRUFBYU8sRUFBWTl0QixPQUFPalosR0FLaENzbEMsRUFBTTdxQyxVQUFZNnFDLEVBQU03cUMsU0FBU2xKLE9BQVMsSUFDNUNveUMsR0FHa0IsSUFBaEIyQixFQUFNM2pCLE1BQ04sNEZBQ3VDZ2pCLEVBQUksTUFFN0N1QixFQUFjWixFQUFNN3FDLFNBQVV3ckMsRUFBVU8sRUFBWTdCLEtBS3BDLE1BQWRXLEVBQU1YLE1BQWlCVyxFQUFNM2pCLFFBSWpDc2tCLEVBQVMza0MsS0FBSyxDQUNacWpDLE9BQ0F5QixNQUFPaUIsRUFBYTFDLEVBQU1XLEVBQU0zakIsT0FDaEM2a0IsY0FDQSxFQWFKLE9BWEF0QixFQUFPeHhDLFNBQVEsQ0FBQzR4QyxFQUFPM2pCLEtBQVMsSUFBQTJsQixFQUU5QixHQUFtQixLQUFmaEMsRUFBTVgsTUFBMEIsT0FBWDJDLEVBQUNoQyxFQUFNWCxPQUFOMkMsRUFBWW53QyxTQUFTLEtBRzdDLElBQUssSUFBSW93QyxLQUFZQyxFQUF3QmxDLEVBQU1YLE1BQ2pEcUMsRUFBYTFCLEVBQU8zakIsRUFBTzRsQixRQUg3QlAsRUFBYTFCLEVBQU8zakIsRUFLckIsSUFHSXNrQixDQUNULENBZ0JBLFNBQVN1QixFQUF3QjdDLEdBQy9CLElBQUk4QyxFQUFXOUMsRUFBS2x4QyxNQUFNLEtBQzFCLEdBQXdCLElBQXBCZzBDLEVBQVNsMkMsT0FBYyxNQUFPLEdBRWxDLElBQUttMkMsS0FBVUMsR0FBUUYsRUFHbkJHLEVBQWFGLEVBQU1HLFNBQVMsS0FFNUJDLEVBQVdKLEVBQU1oekMsUUFBUSxNQUFPLElBRXBDLEdBQW9CLElBQWhCaXpDLEVBQUtwMkMsT0FHUCxPQUFPcTJDLEVBQWEsQ0FBQ0UsRUFBVSxJQUFNLENBQUNBLEdBR3hDLElBQUlDLEVBQWVQLEVBQXdCRyxFQUFLbm1CLEtBQUssTUFFakR3bUIsRUFBbUIsR0FxQnZCLE9BWkFBLEVBQU8xbUMsUUFDRnltQyxFQUFhMUksS0FBSzRJLEdBQ1AsS0FBWkEsRUFBaUJILEVBQVcsQ0FBQ0EsRUFBVUcsR0FBU3ptQixLQUFLLFFBS3JEb21CLEdBQ0ZJLEVBQU8xbUMsUUFBUXltQyxHQUlWQyxFQUFPM0ksS0FBS2tJLEdBQ2pCNUMsRUFBS3dDLFdBQVcsTUFBcUIsS0FBYkksRUFBa0IsSUFBTUEsR0FFcEQsQ0FhQSxNQUFNVyxFQUFVLFlBQ1ZDLEVBQXNCLEVBQ3RCQyxFQUFrQixFQUNsQkMsRUFBb0IsRUFDcEJDLEVBQXFCLEdBQ3JCQyxHQUFnQixFQUNoQkMsRUFBV0MsR0FBb0IsTUFBTkEsRUFFL0IsU0FBU3BCLEVBQWExQyxFQUFjaGpCLEdBQ2xDLElBQUk4bEIsRUFBVzlDLEVBQUtseEMsTUFBTSxLQUN0QmkxQyxFQUFlakIsRUFBU2wyQyxPQVM1QixPQVJJazJDLEVBQVNrQixLQUFLSCxLQUNoQkUsR0FBZ0JILEdBR2Q1bUIsSUFDRittQixHQUFnQk4sR0FHWFgsRUFDSm1CLFFBQVFILElBQU9ELEVBQVFDLEtBQ3ZCSSxRQUNDLENBQUN6QyxFQUFPMEMsSUFDTjFDLEdBQ0M4QixFQUFRN3pDLEtBQUt5MEMsR0FDVlgsRUFDWSxLQUFaVyxFQUNBVCxFQUNBQyxJQUNOSSxFQUVOLENBaUJBLFNBQVM1QixFQUlQaUMsRUFDQTFFLEVBQ0EwQixRQUFZLElBQVpBLElBQUFBLEdBQWUsR0FFZixJQUFJLFdBQUVTLEdBQWV1QyxFQUVqQkMsRUFBZ0IsQ0FBQyxFQUNqQkMsRUFBa0IsSUFDbEJ0QyxFQUEyRCxHQUMvRCxJQUFLLElBQUlMLEVBQUksRUFBR0EsRUFBSUUsRUFBV2oxQyxTQUFVKzBDLEVBQUcsQ0FDMUMsSUFBSXRtQyxFQUFPd21DLEVBQVdGLEdBQ2xCdndCLEVBQU11d0IsSUFBTUUsRUFBV2oxQyxPQUFTLEVBQ2hDMjNDLEVBQ2tCLE1BQXBCRCxFQUNJNUUsRUFDQUEsRUFBU3J3QyxNQUFNaTFDLEVBQWdCMTNDLFNBQVcsSUFDNUNnRixFQUFRNHlDLEVBQ1YsQ0FBRXhFLEtBQU0za0MsRUFBS2luQyxhQUFjQyxjQUFlbG5DLEVBQUtrbkMsY0FBZW54QixPQUM5RG16QixHQUdFNUQsRUFBUXRsQyxFQUFLc2xDLE1Ba0JqQixJQWZHL3VDLEdBQ0R3ZixHQUNBZ3dCLElBQ0NTLEVBQVdBLEVBQVdqMUMsT0FBUyxHQUFHK3pDLE1BQU0zakIsUUFFekNwckIsRUFBUTR5QyxFQUNOLENBQ0V4RSxLQUFNM2tDLEVBQUtpbkMsYUFDWEMsY0FBZWxuQyxFQUFLa25DLGNBQ3BCbnhCLEtBQUssR0FFUG16QixLQUlDM3lDLEVBQ0gsT0FBTyxLQUdUbkUsT0FBTzhELE9BQU84eUMsRUFBZXp5QyxFQUFNNnlDLFFBRW5DekMsRUFBUXJsQyxLQUFLLENBRVg4bkMsT0FBUUosRUFDUjNFLFNBQVUrQyxFQUFVLENBQUM2QixFQUFpQjF5QyxFQUFNOHRDLFdBQzVDZ0YsYUFBY0MsRUFDWmxDLEVBQVUsQ0FBQzZCLEVBQWlCMXlDLEVBQU04eUMsZ0JBRXBDL0QsVUFHeUIsTUFBdkIvdUMsRUFBTTh5QyxlQUNSSixFQUFrQjdCLEVBQVUsQ0FBQzZCLEVBQWlCMXlDLEVBQU04eUMsZUFFdkQsQ0FFRCxPQUFPMUMsQ0FDVCxDQWlIZ0IsU0FBQXdDLEVBSWRJLEVBQ0FsRixHQUV1QixpQkFBWmtGLElBQ1RBLEVBQVUsQ0FBRTVFLEtBQU00RSxFQUFTckMsZUFBZSxFQUFPbnhCLEtBQUssSUFHeEQsSUFBS3l6QixFQUFTQyxHQTRDaEIsU0FDRTlFLEVBQ0F1QyxFQUNBbnhCLFFBRGEsSUFBYm14QixJQUFBQSxHQUFnQixRQUNiLElBQUhueEIsSUFBQUEsR0FBTSxHQUVONnRCLEVBQ1csTUFBVGUsSUFBaUJBLEVBQUtrRCxTQUFTLE1BQVFsRCxFQUFLa0QsU0FBUyxNQUNyRCxlQUFlbEQsRUFBZixvQ0FDTUEsRUFBS2p3QyxRQUFRLE1BQU8sTUFEMUIscUlBR3NDaXdDLEVBQUtqd0MsUUFBUSxNQUFPLE1BQUssTUFHakUsSUFBSTAwQyxFQUE4QixHQUM5Qk0sRUFDRixJQUNBL0UsRUFDR2p3QyxRQUFRLFVBQVcsSUFDbkJBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxxQkFBc0IsUUFDOUJBLFFBQ0MscUJBQ0EsQ0FBQ2kxQyxFQUFXQyxFQUFtQmhDLEtBQzdCd0IsRUFBTzluQyxLQUFLLENBQUVzb0MsWUFBV2hDLFdBQTBCLE1BQWRBLElBQzlCQSxFQUFhLGVBQWlCLGdCQTRCN0MsT0F4QklqRCxFQUFLa0QsU0FBUyxNQUNoQnVCLEVBQU85bkMsS0FBSyxDQUFFc29DLFVBQVcsTUFDekJGLEdBQ1csTUFBVC9FLEdBQXlCLE9BQVRBLEVBQ1osUUFDQSxxQkFDRzV1QixFQUVUMnpCLEdBQWdCLFFBQ0UsS0FBVC9FLEdBQXdCLE1BQVRBLElBUXhCK0UsR0FBZ0IsaUJBT1gsQ0FGTyxJQUFJRyxPQUFPSCxFQUFjeEMsT0FBZ0JyRSxFQUFZLEtBRWxEdUcsRUFDbkIsQ0FqR2tDVSxDQUM5QlAsRUFBUTVFLEtBQ1I0RSxFQUFRckMsY0FDUnFDLEVBQVF4ekIsS0FHTnhmLEVBQVE4dEMsRUFBUzl0QyxNQUFNaXpDLEdBQzNCLElBQUtqekMsRUFBTyxPQUFPLEtBRW5CLElBQUkweUMsRUFBa0IxeUMsRUFBTSxHQUN4Qjh5QyxFQUFlSixFQUFnQnYwQyxRQUFRLFVBQVcsTUFDbERxMUMsRUFBZ0J4ekMsRUFBTXZDLE1BQU0sR0F1QmhDLE1BQU8sQ0FDTG8xQyxPQXZCbUJLLEVBQWVaLFFBQ2xDLENBQUNoSSxFQUFJNkQsRUFBNkIvaUIsS0FBUyxJQUFwQyxVQUFFaW9CLEVBQVMsV0FBRWhDLEdBQVlsRCxFQUc5QixHQUFrQixNQUFka0YsRUFBbUIsQ0FDckIsSUFBSUksRUFBYUQsRUFBY3BvQixJQUFVLEdBQ3pDMG5CLEVBQWVKLEVBQ1pqMUMsTUFBTSxFQUFHaTFDLEVBQWdCMTNDLE9BQVN5NEMsRUFBV3o0QyxRQUM3Q21ELFFBQVEsVUFBVyxLQUN2QixDQUVELE1BQU1vRSxFQUFRaXhDLEVBQWNwb0IsR0FNNUIsT0FKRWtmLEVBQUsrSSxHQURIaEMsSUFBZTl1QyxPQUNDK3BDLEdBRUMvcEMsR0FBUyxJQUFJcEUsUUFBUSxPQUFRLEtBRTNDbXNDLENBQUksR0FFYixDQUFDLEdBS0R3RCxTQUFVNEUsRUFDVkksZUFDQUUsVUFFSixDQTJEQSxTQUFTMUMsRUFBVy90QyxHQUNsQixJQUNFLE9BQU9BLEVBQ0pyRixNQUFNLEtBQ040ckMsS0FBSzNzQyxHQUFNdTNDLG1CQUFtQnYzQyxHQUFHZ0MsUUFBUSxNQUFPLFNBQ2hEOHNCLEtBQUssS0FDUixNQUFPdU0sR0FRUCxPQVBBNlYsR0FDRSxFQUNBLGlCQUFpQjlxQyxFQUFqQixvSEFFZWkxQixFQUFLLE1BR2ZqMUIsQ0FDUixDQUNILENBS2dCLFNBQUFrdEMsRUFDZDNCLEVBQ0F3QixHQUVBLEdBQWlCLE1BQWJBLEVBQWtCLE9BQU94QixFQUU3QixJQUFLQSxFQUFTMXdDLGNBQWN3ekMsV0FBV3RCLEVBQVNseUMsZUFDOUMsT0FBTyxLQUtULElBQUl1MkMsRUFBYXJFLEVBQVNnQyxTQUFTLEtBQy9CaEMsRUFBU3QwQyxPQUFTLEVBQ2xCczBDLEVBQVN0MEMsT0FDVDQ0QyxFQUFXOUYsRUFBU25sQyxPQUFPZ3JDLEdBQy9CLE9BQUlDLEdBQXlCLE1BQWJBLEVBRVAsS0FHRjlGLEVBQVNyd0MsTUFBTWsyQyxJQUFlLEdBQ3ZDLENBMkNBLFNBQVNFLEVBQ1BsdkIsRUFDQW12QixFQUNBQyxFQUNBM0YsR0FFQSxNQUNFLHFCQUFxQnpwQixFQUFyQiwyQ0FDUW12QixFQUFLLFlBQWE5TyxLQUFLQyxVQUM3Qm1KLEdBRkYseUNBSVEyRixFQUpSLDJIQU9KLENBeUJNLFNBQVVDLEVBRWQ1RCxHQUNBLE9BQU9BLEVBQVFpQyxRQUNiLENBQUNyeUMsRUFBT29yQixJQUNJLElBQVZBLEdBQWdCcHJCLEVBQU0rdUMsTUFBTVgsTUFBUXB1QyxFQUFNK3VDLE1BQU1YLEtBQUtwekMsT0FBUyxHQUVwRSxDQUlnQixTQUFBaTVDLEVBRWQ3RCxFQUFjOEQsR0FDZCxJQUFJQyxFQUFjSCxFQUEyQjVELEdBSzdDLE9BQUk4RCxFQUNLQyxFQUFZckwsS0FBSSxDQUFDOW9DLEVBQU8wdEMsSUFDN0JBLElBQVF5RyxFQUFZbjVDLE9BQVMsRUFBSWdGLEVBQU04dEMsU0FBVzl0QyxFQUFNOHlDLGVBSXJEcUIsRUFBWXJMLEtBQUs5b0MsR0FBVUEsRUFBTTh5QyxjQUMxQyxDQUtNLFNBQVVzQixFQUNkQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBLElBQUk1RyxPQUZVLElBQWQ0RyxJQUFBQSxHQUFpQixHQUdJLGlCQUFWSCxFQUNUekcsRUFBS0ksRUFBVXFHLElBRWZ6RyxFQUFFQyxFQUFRLEdBQUF3RyxHQUVWakgsR0FDR1EsRUFBR0UsV0FBYUYsRUFBR0UsU0FBU2x0QyxTQUFTLEtBQ3RDaXpDLEVBQW9CLElBQUssV0FBWSxTQUFVakcsSUFFakRSLEdBQ0dRLEVBQUdFLFdBQWFGLEVBQUdFLFNBQVNsdEMsU0FBUyxLQUN0Q2l6QyxFQUFvQixJQUFLLFdBQVksT0FBUWpHLElBRS9DUixHQUNHUSxFQUFHeHhCLFNBQVd3eEIsRUFBR3h4QixPQUFPeGIsU0FBUyxLQUNsQ2l6QyxFQUFvQixJQUFLLFNBQVUsT0FBUWpHLEtBSS9DLElBR0k2RyxFQUhBQyxFQUF3QixLQUFWTCxHQUFnQyxLQUFoQnpHLEVBQUdFLFNBQ2pDNkcsRUFBYUQsRUFBYyxJQUFNOUcsRUFBR0UsU0FheEMsR0FBa0IsTUFBZDZHLEVBQ0ZGLEVBQU9GLE1BQ0YsQ0FDTCxJQUFJSyxFQUFxQk4sRUFBZXQ1QyxPQUFTLEVBTWpELElBQUt3NUMsR0FBa0JHLEVBQVcvRCxXQUFXLE1BQU8sQ0FDbEQsSUFBSWlFLEVBQWFGLEVBQVd6M0MsTUFBTSxLQUVsQyxLQUF5QixPQUFsQjIzQyxFQUFXLElBQ2hCQSxFQUFXMWlDLFFBQ1h5aUMsR0FBc0IsRUFHeEJoSCxFQUFHRSxTQUFXK0csRUFBVzVwQixLQUFLLElBQy9CLENBRUR3cEIsRUFBT0csR0FBc0IsRUFBSU4sRUFBZU0sR0FBc0IsR0FDdkUsQ0FFRCxJQUFJeEcsV0F6S3NCUixFQUFRa0gsUUFBWSxJQUFaQSxJQUFBQSxFQUFlLEtBQ2pELElBQ0VoSCxTQUFVNkcsRUFBVSxPQUNwQnY0QixFQUFTLEdBQUUsS0FDWDJ4QixFQUFPLElBQ1MsaUJBQVBILEVBQWtCSSxFQUFVSixHQUFNQSxFQUV6Q0UsRUFBVzZHLEVBQ1hBLEVBQVcvRCxXQUFXLEtBQ3BCK0QsRUFXUixTQUF5QmpFLEVBQXNCb0UsR0FDN0MsSUFBSTVELEVBQVc0RCxFQUFhMzJDLFFBQVEsT0FBUSxJQUFJakIsTUFBTSxLQVl0RCxPQVh1Qnd6QyxFQUFheHpDLE1BQU0sS0FFekJDLFNBQVNvMUMsSUFDUixPQUFaQSxFQUVFckIsRUFBU2wyQyxPQUFTLEdBQUdrMkMsRUFBU3pHLE1BQ2IsTUFBWjhILEdBQ1RyQixFQUFTbm1DLEtBQUt3bkMsRUFDZixJQUdJckIsRUFBU2wyQyxPQUFTLEVBQUlrMkMsRUFBU2ptQixLQUFLLEtBQU8sR0FDcEQsQ0F4QlE4cEIsQ0FBZ0JKLEVBQVlHLEdBQzlCQSxFQUVKLE1BQU8sQ0FDTGhILFdBQ0ExeEIsT0FBUTQ0QixFQUFnQjU0QixHQUN4QjJ4QixLQUFNa0gsRUFBY2xILEdBRXhCLENBdUphbUgsQ0FBWXRILEVBQUk2RyxHQUd2QlUsRUFDRlIsR0FBNkIsTUFBZkEsR0FBc0JBLEVBQVdyRCxTQUFTLEtBRXREOEQsR0FDRFYsR0FBOEIsTUFBZkMsSUFBdUJKLEVBQWlCakQsU0FBUyxLQVFuRSxPQU5HbEQsRUFBS04sU0FBU3dELFNBQVMsT0FDdkI2RCxJQUE0QkMsSUFFN0JoSCxFQUFLTixVQUFZLEtBR1pNLENBQ1QsT0FpQmF5QyxFQUFhd0UsR0FDeEJBLEVBQU1wcUIsS0FBSyxLQUFLOXNCLFFBQVEsU0FBVSxLQUt2QjQwQyxFQUFxQmpGLEdBQ2hDQSxFQUFTM3ZDLFFBQVEsT0FBUSxJQUFJQSxRQUFRLE9BQVEsS0FLbEM2MkMsRUFBbUI1NEIsR0FDN0JBLEdBQXFCLE1BQVhBLEVBRVBBLEVBQU93MEIsV0FBVyxLQUNsQngwQixFQUNBLElBQU1BLEVBSE4sR0FRTzY0QixFQUFpQmxILEdBQzNCQSxHQUFpQixNQUFUQSxFQUFvQkEsRUFBSzZDLFdBQVcsS0FBTzdDLEVBQU8sSUFBTUEsRUFBekMsR0ErQmdCbHVDLFlBNFA3QnkxQyxFQU9YenpDLFdBQUFBLENBQ0UwekMsRUFDQUMsRUFDQS85QixFQUNBZytCLFFBQVEsSUFBUkEsSUFBQUEsR0FBVyxHQUVYajVDLEtBQUsrNEMsT0FBU0EsRUFDZC80QyxLQUFLZzVDLFdBQWFBLEdBQWMsR0FDaENoNUMsS0FBS2k1QyxTQUFXQSxFQUNaaCtCLGFBQWdCNVgsT0FDbEJyRCxLQUFLaWIsS0FBT0EsRUFBSzNTLFdBQ2pCdEksS0FBS2c3QixNQUFRL2YsR0FFYmpiLEtBQUtpYixLQUFPQSxDQUVoQixFQU9JLFNBQVVpK0IsRUFBcUJsZSxHQUNuQyxPQUNXLE1BQVRBLEdBQ3dCLGlCQUFqQkEsRUFBTStkLFFBQ2UsaUJBQXJCL2QsRUFBTWdlLFlBQ2Esa0JBQW5CaGUsRUFBTWllLFVBQ2IsU0FBVWplLENBRWQsQ0NwOUJBLE1BQU1tZSxFQUFnRCxDQUNwRCxPQUNBLE1BQ0EsUUFDQSxVQUVJQyxFQUF1QixJQUFJejZDLElBQy9CdzZDLEdBR0lFLEVBQXVDLENBQzNDLFNBQ0dGLEdBRUNHLEVBQXNCLElBQUkzNkMsSUFBZ0IwNkMsR0FFMUNFLEVBQXNCLElBQUk1NkMsSUFBSSxDQUFDLElBQUssSUFBSyxJQUFLLElBQUssTUFDbkQ2NkMsR0FBb0MsSUFBSTc2QyxJQUFJLENBQUMsSUFBSyxNQUUzQzg2QyxHQUE0QyxDQUN2RDFmLE1BQU8sT0FDUHBkLGNBQVVtekIsRUFDVjRKLGdCQUFZNUosRUFDWjZKLGdCQUFZN0osRUFDWjhKLGlCQUFhOUosRUFDYitKLGNBQVUvSixFQUNWZ0ssVUFBTWhLLEVBQ05od0IsVUFBTWd3QixHQUdLaUssR0FBc0MsQ0FDakRoZ0IsTUFBTyxPQUNQOWUsVUFBTTYwQixFQUNONEosZ0JBQVk1SixFQUNaNkosZ0JBQVk3SixFQUNaOEosaUJBQWE5SixFQUNiK0osY0FBVS9KLEVBQ1ZnSyxVQUFNaEssRUFDTmh3QixVQUFNZ3dCLEdBR0trSyxHQUFpQyxDQUM1Q2pnQixNQUFPLFlBQ1BrZ0IsYUFBU25LLEVBQ1RvSyxXQUFPcEssRUFDUG56QixjQUFVbXpCLEdBR05xSyxHQUFxQixnQ0FFckJDLEdBQXlEN0gsSUFBSyxDQUNsRThILGlCQUFrQkMsUUFBUS9ILEVBQU04SCxvQkFHNUJFLEdBQTBCLDJCQXV2R2hDLFNBQVNDLEdBQ1A3OUIsRUFDQWkzQixFQUNBZCxFQUNBMkgsRUFDQXJKLEVBQ0FzRyxFQUNBZ0QsRUFDQUMsR0FFQSxJQUFJQyxFQUNBQyxFQUNKLEdBQUlILEVBQWEsQ0FHZkUsRUFBb0IsR0FDcEIsSUFBSyxJQUFJcDNDLEtBQVNvd0MsRUFFaEIsR0FEQWdILEVBQWtCcnNDLEtBQUsvSyxHQUNuQkEsRUFBTSt1QyxNQUFNLzdCLEtBQU9ra0MsRUFBYSxDQUNsQ0csRUFBbUJyM0MsRUFDbkIsS0FDRCxDQUVKLE1BQ0NvM0MsRUFBb0JoSCxFQUNwQmlILEVBQW1CakgsRUFBUUEsRUFBUXAxQyxPQUFTLEdBSTlDLElBQUlvekMsRUFBT2dHLEVBQ1R4RyxHQUFVLElBQ1ZxRyxFQUFvQm1ELEVBQW1CbEQsR0FDdkN6RSxFQUFjdDJCLEVBQVMyMEIsU0FBVXdCLElBQWFuMkIsRUFBUzIwQixTQUMxQyxTQUFicUosR0FnQ0YsT0ExQlUsTUFBTnZKLElBQ0ZRLEVBQUtoeUIsT0FBU2pELEVBQVNpRCxPQUN2Qmd5QixFQUFLTCxLQUFPNTBCLEVBQVM0MEIsTUFLZCxNQUFOSCxHQUFxQixLQUFQQSxHQUFvQixNQUFQQSxJQUM1QnlKLElBQ0FBLEVBQWlCdEksTUFBTTNqQixPQUN0QmtzQixHQUFtQmxKLEVBQUtoeUIsVUFFekJneUIsRUFBS2h5QixPQUFTZ3lCLEVBQUtoeUIsT0FDZmd5QixFQUFLaHlCLE9BQU9qZSxRQUFRLE1BQU8sV0FDM0IsVUFPRjg0QyxHQUFnQyxNQUFiM0gsSUFDckJsQixFQUFLTixTQUNlLE1BQWxCTSxFQUFLTixTQUFtQndCLEVBQVd1QixFQUFVLENBQUN2QixFQUFVbEIsRUFBS04sWUFHMURJLEVBQVdFLEVBQ3BCLENBSUEsU0FBU21KLEdBQ1BDLEVBQ0FDLEVBQ0FySixFQUNBc0osR0FPQSxJQUFLQSxJQTNGUCxTQUNFQSxHQUVBLE9BQ1UsTUFBUkEsSUFDRSxhQUFjQSxHQUF5QixNQUFqQkEsRUFBS3JCLFVBQzFCLFNBQVVxQixRQUFzQnBMLElBQWRvTCxFQUFLaDFDLEtBRTlCLENBbUZnQmkxQyxDQUF1QkQsR0FDbkMsTUFBTyxDQUFFdEosUUFHWCxHQUFJc0osRUFBS3hCLGFBNDBDWTBCLEVBNTBDaUJGLEVBQUt4QixZQTYwQ3BDSixFQUFvQjd5QixJQUFJMjBCLEVBQU94NkMsZ0JBNTBDcEMsTUFBTyxDQUNMZ3hDLE9BQ0E1VyxNQUFPcWdCLEdBQXVCLElBQUssQ0FBRUQsT0FBUUYsRUFBS3hCLGNBeTBDeEQsSUFBdUIwQixFQXIwQ3JCLElBMEVJRSxFQUNBekIsRUEzRUEwQixFQUFzQkEsS0FBQSxDQUN4QjNKLE9BQ0E1VyxNQUFPcWdCLEdBQXVCLElBQUssQ0FBRS82QyxLQUFNLG1CQUl6Q2s3QyxFQUFnQk4sRUFBS3hCLFlBQWMsTUFDbkNBLEVBQWFzQixFQUNaUSxFQUFjejZDLGNBQ2R5NkMsRUFBYzU2QyxjQUNmKzRDLEVBQWE4QixHQUFrQjdKLEdBRW5DLFFBQWtCOUIsSUFBZG9MLEVBQUtoMUMsS0FBb0IsQ0FDM0IsR0FBeUIsZUFBckJnMUMsRUFBS3RCLFlBQThCLENBRXJDLElBQUs4QixHQUFpQmhDLEdBQ3BCLE9BQU82QixJQUdULElBQUl6N0IsRUFDbUIsaUJBQWRvN0IsRUFBS2gxQyxLQUNSZzFDLEVBQUtoMUMsS0FDTGcxQyxFQUFLaDFDLGdCQUFnQnkxQyxVQUNyQlQsRUFBS2gxQyxnQkFBZ0IwMUMsZ0JBRXJCMzBDLE1BQU1neEMsS0FBS2lELEVBQUtoMUMsS0FBSzIxQyxXQUFXL0YsUUFDOUIsQ0FBQ2dHLEVBQUdDLEtBQUEsSUFBRzEzQyxFQUFNMEIsR0FBTWcyQyxFQUFBLFNBQVFELEVBQU16M0MsRUFBSSxJQUFJMEIsRUFBSyxPQUM5QyxJQUVGeVcsT0FBTzArQixFQUFLaDFDLE1BRWxCLE1BQU8sQ0FDTDByQyxPQUNBb0ssV0FBWSxDQUNWdEMsYUFDQUMsYUFDQUMsWUFBYXNCLEVBQUt0QixZQUNsQkMsY0FBVS9KLEVBQ1ZnSyxVQUFNaEssRUFDTmh3QixRQUdMLENBQU0sR0FBeUIscUJBQXJCbzdCLEVBQUt0QixZQUFvQyxDQUVsRCxJQUFLOEIsR0FBaUJoQyxHQUNwQixPQUFPNkIsSUFHVCxJQUNFLElBQUl6QixFQUNtQixpQkFBZG9CLEVBQUtoMUMsS0FBb0JzaUMsS0FBS3lULE1BQU1mLEVBQUtoMUMsTUFBUWcxQyxFQUFLaDFDLEtBRS9ELE1BQU8sQ0FDTDByQyxPQUNBb0ssV0FBWSxDQUNWdEMsYUFDQUMsYUFDQUMsWUFBYXNCLEVBQUt0QixZQUNsQkMsY0FBVS9KLEVBQ1ZnSyxPQUNBaDZCLFVBQU1nd0IsSUFHVixNQUFPandDLEdBQ1AsT0FBTzA3QyxHQUNSLENBQ0YsQ0FDRixDQVVELEdBUkEzSyxFQUNzQixtQkFBYitLLFNBQ1AsaURBTUVULEVBQUtyQixTQUNQeUIsRUFBZVksR0FBOEJoQixFQUFLckIsVUFDbERBLEVBQVdxQixFQUFLckIsY0FDWCxHQUFJcUIsRUFBS2gxQyxnQkFBZ0J5MUMsU0FDOUJMLEVBQWVZLEdBQThCaEIsRUFBS2gxQyxNQUNsRDJ6QyxFQUFXcUIsRUFBS2gxQyxVQUNYLEdBQUlnMUMsRUFBS2gxQyxnQkFBZ0IwMUMsZ0JBQzlCTixFQUFlSixFQUFLaDFDLEtBQ3BCMnpDLEVBQVdzQyxHQUE4QmIsUUFDcEMsR0FBaUIsTUFBYkosRUFBS2gxQyxLQUNkbzFDLEVBQWUsSUFBSU0sZ0JBQ25CL0IsRUFBVyxJQUFJOEIsY0FFZixJQUNFTCxFQUFlLElBQUlNLGdCQUFnQlYsRUFBS2gxQyxNQUN4QzJ6QyxFQUFXc0MsR0FBOEJiLEdBQ3pDLE1BQU96N0MsR0FDUCxPQUFPMDdDLEdBQ1IsQ0FHSCxJQUFJUyxFQUF5QixDQUMzQnRDLGFBQ0FDLGFBQ0FDLFlBQ0dzQixHQUFRQSxFQUFLdEIsYUFBZ0Isb0NBQ2hDQyxXQUNBQyxVQUFNaEssRUFDTmh3QixVQUFNZ3dCLEdBR1IsR0FBSTRMLEdBQWlCTSxFQUFXdEMsWUFDOUIsTUFBTyxDQUFFOUgsT0FBTW9LLGNBSWpCLElBQUluSyxFQUFhTCxFQUFVSSxHQVMzQixPQUxJcUosR0FBYXBKLEVBQVdqeUIsUUFBVWs3QixHQUFtQmpKLEVBQVdqeUIsU0FDbEUwN0IsRUFBYWMsT0FBTyxRQUFTLElBRS9CdkssRUFBV2p5QixPQUFTLElBQUkwN0IsRUFFakIsQ0FBRTFKLEtBQU1GLEVBQVdHLEdBQWFtSyxhQUN6QyxDQWtCQSxTQUFTSyxHQUNQQyxFQUNBdmlCLEVBQ0E2WixFQUNBb0ksRUFDQXIvQixFQUNBNC9CLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FqSyxFQUNBa0ssR0FFQSxJQUFJQyxFQUFlRCxFQUNmRSxHQUFjRixFQUFvQixJQUNoQ0EsRUFBb0IsR0FBR2hpQixNQUN2QmdpQixFQUFvQixHQUFHL2hDLFVBQ3pCNjBCLEVBQ0FxTixFQUFhYixFQUFRYyxVQUFVcmpCLEVBQU1wZCxVQUNyQzBnQyxFQUFVZixFQUFRYyxVQUFVemdDLEdBRzVCMmdDLEVBQ0ZOLEdBQXVCRSxHQUFjRixFQUFvQixJQUNyREEsRUFBb0IsUUFDcEJsTixFQUNGeU4sRUFBa0JELEVBN0N4QixTQUNFMUosRUFDQTBKLEdBRUEsSUFBSUMsRUFBa0IzSixFQUN0QixHQUFJMEosRUFBWSxDQUNkLElBQUkxdUIsRUFBUWdsQixFQUFRNEosV0FBV3B1QyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBTzhtQyxJQUNoRDF1QixHQUFTLElBQ1gydUIsRUFBa0IzSixFQUFRM3lDLE1BQU0sRUFBRzJ0QixHQUV0QyxDQUNELE9BQU8ydUIsQ0FDVCxDQWtDTUUsQ0FBOEI3SixFQUFTMEosR0FDdkMxSixFQUtBOEosRUFBZVYsRUFDZkEsRUFBb0IsR0FBR1csZ0JBQ3ZCN04sRUFDQThOLEVBQ0ZwQixHQUErQmtCLEdBQWdCQSxHQUFnQixJQUU3REcsRUFBb0JOLEVBQWdCMUgsUUFBTyxDQUFDcnlDLEVBQU9vckIsS0FDckQsSUFBSSxNQUFFMmpCLEdBQVUvdUMsRUFDaEIsR0FBSSt1QyxFQUFNMUUsS0FFUixPQUFPLEVBR1QsR0FBb0IsTUFBaEIwRSxFQUFNdUwsT0FDUixPQUFPLEVBR1QsR0FBSXZCLEVBQ0YsUUFBNEIsbUJBQWpCaEssRUFBTXVMLFNBQXlCdkwsRUFBTXVMLE9BQU81UyxlQUl0QjRFLElBQS9CL1YsRUFBTWdrQixXQUFXeEwsRUFBTS83QixLQUVyQnVqQixFQUFNaWtCLGFBQXFDbE8sSUFBM0IvVixFQUFNaWtCLE9BQU96TCxFQUFNLzdCLE1BS3pDLEdBMEhKLFNBQ0V5bkMsRUFDQUMsRUFDQTE2QyxHQUVBLElBQUkyNkMsR0FFREQsR0FFRDE2QyxFQUFNK3VDLE1BQU0vN0IsS0FBTzBuQyxFQUFhM0wsTUFBTS83QixHQUlwQzRuQyxPQUFzRHRPLElBQXRDbU8sRUFBa0J6NkMsRUFBTSt1QyxNQUFNLzdCLElBR2xELE9BQU8ybkMsR0FBU0MsQ0FDbEIsQ0ExSU1DLENBQVl0a0IsRUFBTWdrQixXQUFZaGtCLEVBQU02WixRQUFRaGxCLEdBQVFwckIsSUFDcERrNUMsRUFBd0I5RyxNQUFNcC9CLEdBQU9BLElBQU9oVCxFQUFNK3VDLE1BQU0vN0IsS0FFeEQsT0FBTyxFQU9ULElBQUk4bkMsRUFBb0J2a0IsRUFBTTZaLFFBQVFobEIsR0FDbEMydkIsRUFBaUIvNkMsRUFFckIsT0FBT2c3QyxHQUF1Qmg3QyxFQUFLNnRDLEVBQUEsQ0FDakM4TCxhQUNBc0IsY0FBZUgsRUFBa0JqSSxPQUNqQ2dILFVBQ0FxQixXQUFZSCxFQUFlbEksUUFDeEIyRixFQUFVLENBQ2JpQixlQUNBMEIsc0JBQXVCakIsRUFDdkJrQix5QkFBeUJoQixJQUdyQm5CLEdBQ0FVLEVBQVc3TCxTQUFXNkwsRUFBV3Y5QixTQUMvQnk5QixFQUFRL0wsU0FBVytMLEVBQVF6OUIsUUFFN0J1OUIsRUFBV3Y5QixTQUFXeTlCLEVBQVF6OUIsUUFDOUJpL0IsR0FBbUJQLEVBQW1CQyxNQUMxQyxJQUlBTyxFQUE4QyxHQW9GbEQsT0FuRkFqQyxFQUFpQmw4QyxTQUFRLENBQUNiLEVBQUd5YyxLQU0zQixHQUNFZ2dDLElBQ0MzSSxFQUFRZ0MsTUFBTXhtQyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBTzFXLEVBQUVpL0MsV0FDdENuQyxFQUFnQm4yQixJQUFJbEssR0FFcEIsT0FHRixJQUFJeWlDLEVBQWlCcE0sRUFBWW1LLEVBQWFqOUMsRUFBRTh4QyxLQUFNa0IsR0FNdEQsSUFBS2tNLEVBU0gsWUFSQUYsRUFBcUJ2d0MsS0FBSyxDQUN4QmdPLE1BQ0F3aUMsUUFBU2ovQyxFQUFFaS9DLFFBQ1huTixLQUFNOXhDLEVBQUU4eEMsS0FDUmdDLFFBQVMsS0FDVHB3QyxNQUFPLEtBQ1B5N0MsV0FBWSxPQVFoQixJQUFJQyxFQUFVbmxCLEVBQU1vbEIsU0FBUzc1QyxJQUFJaVgsR0FDN0I2aUMsRUFBZUMsR0FBZUwsRUFBZ0JsL0MsRUFBRTh4QyxNQUVoRDBOLEdBQW1CLEVBR3JCQSxHQUZFeEMsRUFBaUJyMkIsSUFBSWxLLE9BR2RvZ0MsRUFBc0J2NEMsU0FBU21ZLEtBSXhDMmlDLEdBQ2tCLFNBQWxCQSxFQUFRbmxCLFlBQ1MrVixJQUFqQm9QLEVBQVFqa0MsS0FLV3doQyxFQUlBK0IsR0FBdUJZLEVBQVkvTixFQUFBLENBQ3BEOEwsYUFDQXNCLGNBQWUxa0IsRUFBTTZaLFFBQVE3WixFQUFNNlosUUFBUXAxQyxPQUFTLEdBQUc2M0MsT0FDdkRnSCxVQUNBcUIsV0FBWTlLLEVBQVFBLEVBQVFwMUMsT0FBUyxHQUFHNjNDLFFBQ3JDMkYsRUFBVSxDQUNiaUIsZUFDQTBCLHNCQUF1QmpCLEVBQ3ZCa0IseUJBQXlCaEIsR0FFckJuQixPQUlKNkMsR0FDRlIsRUFBcUJ2d0MsS0FBSyxDQUN4QmdPLE1BQ0F3aUMsUUFBU2ovQyxFQUFFaS9DLFFBQ1huTixLQUFNOXhDLEVBQUU4eEMsS0FDUmdDLFFBQVNvTCxFQUNUeDdDLE1BQU80N0MsRUFDUEgsV0FBWSxJQUFJTSxpQkFFbkIsSUFHSSxDQUFDMUIsRUFBbUJpQixFQUM3QixDQXFCQSxTQUFTRCxHQUNQWCxFQUNBMTZDLEdBRUEsSUFBSWc4QyxFQUFjdEIsRUFBYTNMLE1BQU1YLEtBQ3JDLE9BRUVzTSxFQUFhNU0sV0FBYTl0QyxFQUFNOHRDLFVBR2hCLE1BQWZrTyxHQUNDQSxFQUFZMUssU0FBUyxNQUNyQm9KLEVBQWE3SCxPQUFPLE9BQVM3eUMsRUFBTTZ5QyxPQUFPLElBRWhELENBRUEsU0FBU21JLEdBQ1BpQixFQUNBQyxHQUVBLEdBQUlELEVBQVlsTixNQUFNK00saUJBQWtCLENBQ3RDLElBQUlLLEVBQWNGLEVBQVlsTixNQUFNK00saUJBQWlCSSxHQUNyRCxHQUEyQixrQkFBaEJDLEVBQ1QsT0FBT0EsQ0FFVixDQUVELE9BQU9ELEVBQUlkLHVCQUNiLENBTUFnQixlQUFlQyxHQUNiQyxFQUNBbE8sRUFDQWdDLEVBQ0F6QixFQUNBRyxFQUNBRixFQUNBMk4sRUFDQUMsR0FFQSxJQUFJempDLEVBQU0sQ0FBQ3ExQixLQUFTZ0MsRUFBUXRILEtBQUtsOUIsR0FBTUEsRUFBRW1qQyxNQUFNLzdCLE1BQUtpWSxLQUFLLEtBQ3pELElBQ0UsSUFBSStDLEVBQVV1dUIsRUFBcUJ6NkMsSUFBSWlYLEdBQ2xDaVYsSUFDSEEsRUFBVXN1QixFQUFzQixDQUM5QmxPLE9BQ0FnQyxVQUNBcU0sTUFBT0EsQ0FBQ2xCLEVBQVNyM0MsS0FDVnM0QyxFQUFPRSxTQUNWQyxHQUNFcEIsRUFDQXIzQyxFQUNBeXFDLEVBQ0FHLEVBQ0FGLEVBRUgsSUFHTDJOLEVBQXFCbDhDLElBQUkwWSxFQUFLaVYsSUFHNUJBLEdBdTJCZ0IsaUJBRFE0dUIsRUF0MkJvQjV1QixJQXUyQlQsTUFBUDR1QixHQUFlLFNBQVVBLFNBdDJCakQ1dUIsQ0FFVCxTQUNDdXVCLEVBQXFCcHJDLE9BQU80SCxFQUM3QixDQWkyQkgsSUFBZ0M2akMsQ0FoMkJoQyxDQUVBLFNBQVNELEdBQ1BwQixFQUNBcjNDLEVBQ0FxMUMsRUFDQXpLLEVBQ0FGLEdBRUEsR0FBSTJNLEVBQVMsS0FBQXNCLEVBQ1gsSUFBSTlOLEVBQVFELEVBQVN5TSxHQUNyQm5PLEVBQ0UyQixFQUNvRCxvREFBQXdNLEdBRXRELElBQUl1QixFQUFlcE8sRUFDakJ4cUMsRUFDQTBxQyxFQUNBLENBQUMyTSxFQUFTLFFBQVN2aUMsUUFBcUIsT0FBZDZqQyxFQUFBOU4sRUFBTTdxQyxlQUFRLEVBQWQyNEMsRUFBZ0I3aEQsU0FBVSxNQUNwRDh6QyxHQUVFQyxFQUFNN3FDLFNBQ1I2cUMsRUFBTTdxQyxTQUFTNkcsUUFBUSt4QyxHQUV2Qi9OLEVBQU03cUMsU0FBVzQ0QyxDQUVwQixLQUFNLENBQ0wsSUFBSUEsRUFBZXBPLEVBQ2pCeHFDLEVBQ0EwcUMsRUFDQSxDQUFDLFFBQVM1MUIsT0FBT3VnQyxFQUFZditDLFFBQVUsTUFDdkM4ekMsR0FFRnlLLEVBQVl4dUMsUUFBUSt4QyxFQUNyQixDQUNILENBT0FWLGVBQWVXLEdBQ2JoTyxFQUNBSCxFQUNBRSxHQUVBLElBQUtDLEVBQU0xRSxLQUNULE9BR0YsSUFBSTJTLFFBQWtCak8sRUFBTTFFLE9BSzVCLElBQUswRSxFQUFNMUUsS0FDVCxPQUdGLElBQUk0UyxFQUFnQm5PLEVBQVNDLEVBQU0vN0IsSUFDbkNvNkIsRUFBVTZQLEVBQWUsOEJBVXpCLElBQUlDLEVBQW9DLENBQUMsRUFDekMsSUFBSyxJQUFJQyxLQUFxQkgsRUFBVyxDQUN2QyxJQUdJSSxPQUNtQjlRLElBSHJCMlEsRUFBY0UsSUFNUSxxQkFBdEJBLEVBRUY5UCxHQUNHK1AsRUFDRCxVQUFVSCxFQUFjanFDLEdBQUUsNEJBQTRCbXFDLEVBQXRELHlHQUU4QkEsRUFBaUIsc0JBSTlDQyxHQUNBM08sRUFBbUJ4ckIsSUFBSWs2QixLQUV4QkQsRUFBYUMsR0FDWEgsRUFBVUcsR0FFZixDQUlEdGhELE9BQU84RCxPQUFPczlDLEVBQWVDLEdBSzdCcmhELE9BQU84RCxPQUFPczlDLEVBQWFwUCxFQUt0QixHQUFBZSxFQUFtQnFPLEdBQWMsQ0FDcEM1UyxVQUFNaUMsSUFFVixDQUdBLFNBQVMrUSxHQUNQM0YsR0FFQSxPQUFPOXhCLFFBQVEwM0IsSUFBSTVGLEVBQUt0SCxRQUFRdEgsS0FBS2w5QixHQUFNQSxFQUFFbWEsWUFDL0MsQ0EwUUEsU0FBU3czQixHQUNQQyxFQUNBQyxFQUNBbEMsRUFDQW5MLEVBQ0FkLEVBQ0E0RSxHQUVBLElBQUkvNkIsRUFBV3FrQyxFQUFTRSxRQUFRNTdDLElBQUksWUFNcEMsR0FMQXNyQyxFQUNFajBCLEVBQ0EsK0VBR0d3OUIsR0FBbUI3NEMsS0FBS3FiLEdBQVcsQ0FDdEMsSUFBSXdrQyxFQUFpQnZOLEVBQVEzeUMsTUFDM0IsRUFDQTJ5QyxFQUFRNEosV0FBV3B1QyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBT3VvQyxJQUFXLEdBRXJEcGlDLEVBQVc2OUIsR0FDVCxJQUFJNEcsSUFBSUgsRUFBUWpoQyxLQUNoQm1oQyxFQUNBck8sR0FDQSxFQUNBbjJCLEVBQ0ErNkIsR0FFRnNKLEVBQVNFLFFBQVFyOUMsSUFBSSxXQUFZOFksRUFDbEMsQ0FFRCxPQUFPcWtDLENBQ1QsQ0FFQSxTQUFTSyxHQUNQMWtDLEVBQ0F3Z0MsRUFDQXJLLEdBRUEsR0FBSXFILEdBQW1CNzRDLEtBQUtxYixHQUFXLENBRXJDLElBQUkya0MsRUFBcUIza0MsRUFDckJxRCxFQUFNc2hDLEVBQW1CbE4sV0FBVyxNQUNwQyxJQUFJZ04sSUFBSWpFLEVBQVdvRSxTQUFXRCxHQUM5QixJQUFJRixJQUFJRSxHQUNSRSxFQUEwRCxNQUF6Q3ZPLEVBQWNqekIsRUFBSXN4QixTQUFVd0IsR0FDakQsR0FBSTl5QixFQUFJeWhDLFNBQVd0RSxFQUFXc0UsUUFBVUQsRUFDdEMsT0FBT3hoQyxFQUFJc3hCLFNBQVd0eEIsRUFBSUosT0FBU0ksRUFBSXV4QixJQUUxQyxDQUNELE9BQU81MEIsQ0FDVCxDQUtBLFNBQVMra0MsR0FDUHBGLEVBQ0EzL0IsRUFDQXFqQyxFQUNBaEUsR0FFQSxJQUFJaDhCLEVBQU1zOEIsRUFBUWMsVUFBVTNCLEdBQWtCOStCLElBQVdyVSxXQUNyRHE1QyxFQUFvQixDQUFFM0IsVUFFMUIsR0FBSWhFLEdBQWNOLEdBQWlCTSxFQUFXdEMsWUFBYSxDQUN6RCxJQUFJLFdBQUVBLEVBQVUsWUFBRUUsR0FBZ0JvQyxFQUlsQzJGLEVBQUt2RyxPQUFTMUIsRUFBVzM0QyxjQUVMLHFCQUFoQjY0QyxHQUNGK0gsRUFBS1QsUUFBVSxJQUFJVSxRQUFRLENBQUUsZUFBZ0JoSSxJQUM3QytILEVBQUt6N0MsS0FBT3NpQyxLQUFLQyxVQUFVdVQsRUFBV2xDLE9BQ2IsZUFBaEJGLEVBRVQrSCxFQUFLejdDLEtBQU84MUMsRUFBV2w4QixLQUVQLHNDQUFoQjg1QixHQUNBb0MsRUFBV25DLFNBR1g4SCxFQUFLejdDLEtBQU9nMkMsR0FBOEJGLEVBQVduQyxVQUdyRDhILEVBQUt6N0MsS0FBTzgxQyxFQUFXbkMsUUFFMUIsQ0FFRCxPQUFPLElBQUlnSSxRQUFRN2hDLEVBQUsyaEMsRUFDMUIsQ0FFQSxTQUFTekYsR0FBOEJyQyxHQUNyQyxJQUFJeUIsRUFBZSxJQUFJTSxnQkFFdkIsSUFBSyxJQUFLci9CLEVBQUt4VyxLQUFVOHpDLEVBQVNnQyxVQUVoQ1AsRUFBYWMsT0FBTzcvQixFQUFzQixpQkFBVnhXLEVBQXFCQSxFQUFRQSxFQUFNMUIsTUFHckUsT0FBT2kzQyxDQUNULENBRUEsU0FBU2EsR0FDUGIsR0FFQSxJQUFJekIsRUFBVyxJQUFJOEIsU0FDbkIsSUFBSyxJQUFLcC9CLEVBQUt4VyxLQUFVdTFDLEVBQWFPLFVBQ3BDaEMsRUFBU3VDLE9BQU83L0IsRUFBS3hXLEdBRXZCLE9BQU84ekMsQ0FDVCxDQXFIQSxTQUFTaUksR0FDUC9uQixFQUNBNlosRUFDQW1PLEVBQ0FDLEVBQ0FoRixFQUNBOEIsRUFDQW1ELEVBQ0FDLEdBS0EsSUFBSSxXQUFFbkUsRUFBVSxPQUFFQyxHQWhJcEIsU0FDRXBLLEVBQ0FtTyxFQUNBQyxFQUNBaEYsRUFDQWtGLEVBQ0FDLEdBUUEsSUFFSXhFLEVBRkFJLEVBQXdDLENBQUMsRUFDekNDLEVBQXVDLEtBRXZDb0UsR0FBYSxFQUNiQyxFQUF5QyxDQUFDLEVBQzFDQyxFQUNGdEYsR0FBdUJFLEdBQWNGLEVBQW9CLElBQ3JEQSxFQUFvQixHQUFHaGlCLFdBQ3ZCOFUsRUFxRk4sT0FsRkFrUyxFQUFRcmhELFNBQVEsQ0FBQ3MwQyxFQUFRcm1CLEtBQ3ZCLElBQUlwWSxFQUFLdXJDLEVBQWNuekIsR0FBTzJqQixNQUFNLzdCLEdBS3BDLEdBSkFvNkIsR0FDRzJSLEdBQWlCdE4sR0FDbEIsdURBRUVpSSxHQUFjakksR0FBUyxDQUN6QixJQUFJamEsRUFBUWlhLEVBQU9qYSxNQVduQixRQVBxQjhVLElBQWpCd1MsSUFDRnRuQixFQUFRc25CLEVBQ1JBLE9BQWV4UyxHQUdqQmtPLEVBQVNBLEdBQVUsQ0FBQyxFQUVoQm1FLEVBQ0ZuRSxFQUFPeG5DLEdBQU13a0IsTUFDUixDQUlMLElBQUl3bkIsRUFBZ0JDLEdBQW9CN08sRUFBU3A5QixHQUNYLE1BQWxDd25DLEVBQU93RSxFQUFjalEsTUFBTS83QixNQUM3QnduQyxFQUFPd0UsRUFBY2pRLE1BQU0vN0IsSUFBTXdrQixFQUVwQyxDQUdEK2lCLEVBQVd2bkMsUUFBTXM1QixFQUlac1MsSUFDSEEsR0FBYSxFQUNiekUsRUFBYXpFLEVBQXFCakUsRUFBT2phLE9BQ3JDaWEsRUFBT2phLE1BQU0rZCxPQUNiLEtBRUY5RCxFQUFPaU0sVUFDVG1CLEVBQWM3ckMsR0FBTXkrQixFQUFPaU0sUUFFOUIsTUFDS3dCLEdBQWlCek4sSUFDbkJpTixFQUFnQnIrQyxJQUFJMlMsRUFBSXkrQixFQUFPME4sY0FDL0I1RSxFQUFXdm5DLEdBQU15K0IsRUFBTzBOLGFBQWExbkMsS0FJZCxNQUFyQmc2QixFQUFPMEksWUFDZSxNQUF0QjFJLEVBQU8wSSxZQUNOeUUsSUFFRHpFLEVBQWExSSxFQUFPMEksWUFFbEIxSSxFQUFPaU0sVUFDVG1CLEVBQWM3ckMsR0FBTXkrQixFQUFPaU0sV0FHN0JuRCxFQUFXdm5DLEdBQU15K0IsRUFBT2g2QixLQUdwQmc2QixFQUFPMEksWUFBb0MsTUFBdEIxSSxFQUFPMEksYUFBdUJ5RSxJQUNyRHpFLEVBQWExSSxFQUFPMEksWUFFbEIxSSxFQUFPaU0sVUFDVG1CLEVBQWM3ckMsR0FBTXkrQixFQUFPaU0sU0FHaEMsU0FNa0JwUixJQUFqQndTLEdBQThCdEYsSUFDaENnQixFQUFTLENBQUUsQ0FBQ2hCLEVBQW9CLElBQUtzRixHQUNyQ3ZFLEVBQVdmLEVBQW9CLFNBQU1sTixHQUdoQyxDQUNMaU8sYUFDQUMsU0FDQUwsV0FBWUEsR0FBYyxJQUMxQjBFLGdCQUVKLENBZStCTyxDQUMzQmhQLEVBQ0FtTyxFQUNBQyxFQUNBaEYsRUFDQWtGLEdBQ0EsR0FJRixJQUFLLElBQUl0ekIsRUFBUSxFQUFHQSxFQUFRa3dCLEVBQXFCdGdELE9BQVFvd0IsSUFBUyxDQUNoRSxJQUFJLElBQUVyUyxFQUFHLE1BQUUvWSxFQUFLLFdBQUV5N0MsR0FBZUgsRUFBcUJsd0IsR0FDdERnaUIsT0FDcUJkLElBQW5CbVMsUUFBMERuUyxJQUExQm1TLEVBQWVyekIsR0FDL0MsNkNBRUYsSUFBSXFtQixFQUFTZ04sRUFBZXJ6QixHQUc1QixJQUFJcXdCLElBQWNBLEVBQVdlLE9BQU9FLFFBRzdCLEdBQUloRCxHQUFjakksR0FBUyxDQUNoQyxJQUFJdU4sRUFBZ0JDLEdBQW9CMW9CLEVBQU02WixRQUFjLE1BQUxwd0MsT0FBSyxFQUFMQSxFQUFPK3VDLE1BQU0vN0IsSUFDOUR3bkMsR0FBVUEsRUFBT3dFLEVBQWNqUSxNQUFNLzdCLE1BQ3pDd25DLEVBQU0zTSxFQUFBLEdBQ0QyTSxFQUFNLENBQ1QsQ0FBQ3dFLEVBQWNqUSxNQUFNLzdCLElBQUt5K0IsRUFBT2phLFNBR3JDakIsRUFBTW9sQixTQUFTeHFDLE9BQU80SCxFQUN2QixNQUFNLEdBQUlnbUMsR0FBaUJ0TixHQUcxQnJFLEdBQVUsRUFBTyxnREFDWixHQUFJOFIsR0FBaUJ6TixHQUcxQnJFLEdBQVUsRUFBTyx1Q0FDWixDQUNMLElBQUlpUyxFQUFjQyxHQUFlN04sRUFBT2g2QixNQUN4QzhlLEVBQU1vbEIsU0FBU3Q3QyxJQUFJMFksRUFBS3NtQyxFQUN6QixDQUNGLENBRUQsTUFBTyxDQUFFOUUsYUFBWUMsU0FDdkIsQ0FFQSxTQUFTK0UsR0FDUGhGLEVBQ0FpRixFQUNBcFAsRUFDQW9LLEdBRUEsSUFBSWlGLEVBQWdCNVIsRUFBQSxHQUFRMlIsR0FDNUIsSUFBSyxJQUFJeC9DLEtBQVNvd0MsRUFBUyxDQUN6QixJQUFJcDlCLEVBQUtoVCxFQUFNK3VDLE1BQU0vN0IsR0FlckIsR0FkSXdzQyxFQUFjempELGVBQWVpWCxRQUNMczVCLElBQXRCa1QsRUFBY3hzQyxLQUNoQnlzQyxFQUFpQnpzQyxHQUFNd3NDLEVBQWN4c0MsU0FNWHM1QixJQUFuQmlPLEVBQVd2bkMsSUFBcUJoVCxFQUFNK3VDLE1BQU11TCxTQUdyRG1GLEVBQWlCenNDLEdBQU11bkMsRUFBV3ZuQyxJQUdoQ3duQyxHQUFVQSxFQUFPeitDLGVBQWVpWCxHQUVsQyxLQUVILENBQ0QsT0FBT3lzQyxDQUNULENBRUEsU0FBU0MsR0FDUGxHLEdBRUEsT0FBS0EsRUFHRUUsR0FBY0YsRUFBb0IsSUFDckMsQ0FFRW1HLFdBQVksQ0FBQyxHQUVmLENBQ0VBLFdBQVksQ0FDVixDQUFDbkcsRUFBb0IsSUFBS0EsRUFBb0IsR0FBRy9oQyxPQVRoRCxDQUFDLENBWVosQ0FLQSxTQUFTd25DLEdBQ1A3TyxFQUNBbUwsR0FLQSxPQUhzQkEsRUFDbEJuTCxFQUFRM3lDLE1BQU0sRUFBRzJ5QyxFQUFRNEosV0FBV3B1QyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBT3VvQyxJQUFXLEdBQ3BFLElBQUluTCxJQUVVd1AsVUFBVUMsTUFBTWowQyxJQUFtQyxJQUE3QkEsRUFBRW1qQyxNQUFNOEgsb0JBQzlDekcsRUFBUSxFQUVaLENBRUEsU0FBUzBQLEdBQXVCblIsR0FLOUIsSUFBSUksRUFDZ0IsSUFBbEJKLEVBQU8zekMsT0FDSDJ6QyxFQUFPLEdBQ1BBLEVBQU9rUixNQUFNaDBCLEdBQU1BLEVBQUVULFFBQVVTLEVBQUV1aUIsTUFBbUIsTUFBWHZpQixFQUFFdWlCLFFBQWlCLENBQzFEcDdCLEdBQUksd0JBR1osTUFBTyxDQUNMbzlCLFFBQVMsQ0FDUCxDQUNFeUMsT0FBUSxDQUFDLEVBQ1QvRSxTQUFVLEdBQ1ZnRixhQUFjLEdBQ2QvRCxVQUdKQSxRQUVKLENBRUEsU0FBUzhJLEdBQ1B0QyxFQUFjd0ssR0FhUixJQVpOLFNBQ0VqUyxFQUFRLFFBQ1J5TixFQUFPLE9BQ1AzRCxFQUFNLEtBQ045NkMsRUFBSSxRQUNKcTZCLGNBT0UsQ0FBQyxFQUFDNG9CLEVBRUZ2SyxFQUFhLHVCQUNid0ssRUFBZSxrQ0FvQ25CLE9BbENlLE1BQVh6SyxHQUNGQyxFQUFhLGNBQ0Esb0JBQVQxNEMsRUFDRmtqRCxFQUNFLHdCQUF3QmxTLEVBQXhCLDRDQUNXeU4sRUFBTyxpQ0FBa0Nwa0IsRUFDN0N5Z0IsR0FBVTlKLEdBQVl5TixFQUMvQnlFLEVBQ0UsY0FBY3BJLEVBQU0sZ0JBQWdCOUosRUFBcEMsK0NBQzJDeU4sRUFEM0MsK0NBR2dCLGlCQUFUeitDLEVBQ1RrakQsRUFBZSxzQ0FDRyxpQkFBVGxqRCxJQUNUa2pELEVBQWUscUNBRUcsTUFBWHpLLEdBQ1RDLEVBQWEsWUFDYndLLEVBQXlCLFVBQUF6RSxFQUFnQyx5QkFBQXpOLEVBQVcsS0FDaEQsTUFBWHlILEdBQ1RDLEVBQWEsWUFDYndLLEVBQWUseUJBQXlCbFMsRUFBVyxLQUMvQixNQUFYeUgsSUFDVEMsRUFBYSxxQkFDVG9DLEdBQVU5SixHQUFZeU4sRUFDeEJ5RSxFQUNFLGNBQWNwSSxFQUFPcjZDLGNBQWEsZ0JBQWdCdXdDLEVBQWxELGdEQUM0Q3lOLEVBRDVDLCtDQUdPM0QsSUFDVG9JLEVBQWUsMkJBQTJCcEksRUFBT3I2QyxjQUFnQixNQUk5RCxJQUFJKzNDLEVBQ1RDLEdBQVUsSUFDVkMsRUFDQSxJQUFJMzFDLE1BQU1tZ0QsSUFDVixFQUVKLENBR0EsU0FBU0MsR0FDUHpCLEdBRUEsSUFBSyxJQUFJek8sRUFBSXlPLEVBQVF4akQsT0FBUyxFQUFHKzBDLEdBQUssRUFBR0EsSUFBSyxDQUM1QyxJQUFJMEIsRUFBUytNLEVBQVF6TyxHQUNyQixHQUFJZ1AsR0FBaUJ0TixHQUNuQixNQUFPLENBQUVBLFNBQVEvRCxJQUFLcUMsRUFFekIsQ0FDSCxDQUVBLFNBQVNrSSxHQUFrQjdKLEdBRXpCLE9BQU9GLEVBQVVMLEVBQUMsQ0FBQyxFQURjLGlCQUFUTyxFQUFvQkosRUFBVUksR0FBUUEsRUFDM0IsQ0FBQUwsS0FBTSxLQUMzQyxDQTJDQSxTQUFTbVIsR0FBaUJ6TixHQUN4QixPQUFPQSxFQUFPMzBDLE9BQVMweEMsRUFBVzBSLFFBQ3BDLENBRUEsU0FBU3hHLEdBQWNqSSxHQUNyQixPQUFPQSxFQUFPMzBDLE9BQVMweEMsRUFBV2hYLEtBQ3BDLENBRUEsU0FBU3VuQixHQUFpQnROLEdBQ3hCLE9BQVFBLEdBQVVBLEVBQU8zMEMsUUFBVTB4QyxFQUFXMlIsUUFDaEQsQ0FjQSxTQUFTQyxHQUFXNzlDLEdBQ2xCLE9BQ1csTUFBVEEsR0FDd0IsaUJBQWpCQSxFQUFNZ3pDLFFBQ2UsaUJBQXJCaHpDLEVBQU1pekMsWUFDWSxpQkFBbEJqekMsRUFBTW03QyxjQUNTLElBQWZuN0MsRUFBTUcsSUFFakIsQ0FnQkEsU0FBU3cxQyxHQUNQTixHQUVBLE9BQU9oQyxFQUFxQjN5QixJQUFJMjBCLEVBQU94NkMsY0FDekMsQ0FFQWcvQyxlQUFlaUUsR0FDYkMsRUFDQS9CLEVBQ0FDLEVBQ0ErQixFQUNBOUksRUFDQWdELEdBRUEsSUFBSyxJQUFJcnZCLEVBQVEsRUFBR0EsRUFBUW96QixFQUFReGpELE9BQVFvd0IsSUFBUyxDQUNuRCxJQUFJcW1CLEVBQVMrTSxFQUFRcHpCLEdBQ2pCcHJCLEVBQVF1K0MsRUFBY256QixHQUkxQixJQUFLcHJCLEVBQ0gsU0FHRixJQUFJMDZDLEVBQWU0RixFQUFlVCxNQUMvQmowQyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBT2hULEVBQU8rdUMsTUFBTS83QixLQUVqQ3d0QyxFQUNjLE1BQWhCOUYsSUFDQ1csR0FBbUJYLEVBQWMxNkMsU0FDMkJzc0MsS0FBNURtTyxHQUFxQkEsRUFBa0J6NkMsRUFBTSt1QyxNQUFNLzdCLEtBRXRELEdBQUlrc0MsR0FBaUJ6TixLQUFZZ0csR0FBYStJLEdBQXVCLENBSW5FLElBQUloRSxFQUFTK0QsRUFBUW4xQixHQUNyQmdpQixFQUNFb1AsRUFDQSwwRUFFSWlFLEdBQW9CaFAsRUFBUStLLEVBQVEvRSxHQUFXenhCLE1BQU15ckIsSUFDckRBLElBQ0YrTSxFQUFRcHpCLEdBQVNxbUIsR0FBVStNLEVBQVFwekIsR0FDcEMsR0FFSixDQUNGLENBQ0gsQ0FFQWd4QixlQUFlcUUsR0FDYmhQLEVBQ0ErSyxFQUNBa0UsR0FHQSxRQUhNLElBQU5BLElBQUFBLEdBQVMsVUFFV2pQLEVBQU8wTixhQUFhd0IsWUFBWW5FLEdBQ3BELENBSUEsR0FBSWtFLEVBQ0YsSUFDRSxNQUFPLENBQ0w1akQsS0FBTTB4QyxFQUFXLzJCLEtBQ2pCQSxLQUFNZzZCLEVBQU8wTixhQUFheUIsZUFFNUIsTUFBT3ZrRCxHQUVQLE1BQU8sQ0FDTFMsS0FBTTB4QyxFQUFXaFgsTUFDakJBLE1BQU9uN0IsRUFFVixDQUdILE1BQU8sQ0FDTFMsS0FBTTB4QyxFQUFXLzJCLEtBQ2pCQSxLQUFNZzZCLEVBQU8wTixhQUFhMW5DLEtBbkIzQixDQXFCSCxDQUVBLFNBQVM2L0IsR0FBbUJsN0IsR0FDMUIsT0FBTyxJQUFJZzhCLGdCQUFnQmg4QixHQUFReWtDLE9BQU8sU0FBU3pPLE1BQU1qMkMsR0FBWSxLQUFOQSxHQUNqRSxDQUVBLFNBQVMwL0MsR0FDUHpMLEVBQ0FqM0IsR0FFQSxJQUFJaUQsRUFDa0IsaUJBQWJqRCxFQUF3QjYwQixFQUFVNzBCLEdBQVVpRCxPQUFTakQsRUFBU2lELE9BQ3ZFLEdBQ0VnMEIsRUFBUUEsRUFBUXAxQyxPQUFTLEdBQUcrekMsTUFBTTNqQixPQUNsQ2tzQixHQUFtQmw3QixHQUFVLElBRzdCLE9BQU9nMEIsRUFBUUEsRUFBUXAxQyxPQUFTLEdBSWxDLElBQUltNUMsRUFBY0gsRUFBMkI1RCxHQUM3QyxPQUFPK0QsRUFBWUEsRUFBWW41QyxPQUFTLEVBQzFDLENBRUEsU0FBUzhsRCxHQUNQQyxHQUVBLElBQUksV0FBRTdLLEVBQVUsV0FBRUMsRUFBVSxZQUFFQyxFQUFXLEtBQUU5NUIsRUFBSSxTQUFFKzVCLEVBQVEsS0FBRUMsR0FDekR5SyxFQUNGLEdBQUs3SyxHQUFlQyxHQUFlQyxFQUluQyxPQUFZLE1BQVI5NUIsRUFDSyxDQUNMNDVCLGFBQ0FDLGFBQ0FDLGNBQ0FDLGNBQVUvSixFQUNWZ0ssVUFBTWhLLEVBQ05od0IsUUFFbUIsTUFBWis1QixFQUNGLENBQ0xILGFBQ0FDLGFBQ0FDLGNBQ0FDLFdBQ0FDLFVBQU1oSyxFQUNOaHdCLFVBQU1nd0IsUUFFVUEsSUFBVGdLLEVBQ0YsQ0FDTEosYUFDQUMsYUFDQUMsY0FDQUMsY0FBVS9KLEVBQ1ZnSyxPQUNBaDZCLFVBQU1nd0IsUUFQSCxDQVVULENBRUEsU0FBUzBVLEdBQ1A3bkMsRUFDQXEvQixHQUVBLE9BQUlBLEVBQzRDLENBQzVDamlCLE1BQU8sVUFDUHBkLFdBQ0ErOEIsV0FBWXNDLEVBQVd0QyxXQUN2QkMsV0FBWXFDLEVBQVdyQyxXQUN2QkMsWUFBYW9DLEVBQVdwQyxZQUN4QkMsU0FBVW1DLEVBQVduQyxTQUNyQkMsS0FBTWtDLEVBQVdsQyxLQUNqQmg2QixLQUFNazhCLEVBQVdsOEIsTUFJMkIsQ0FDNUNpYSxNQUFPLFVBQ1BwZCxXQUNBKzhCLGdCQUFZNUosRUFDWjZKLGdCQUFZN0osRUFDWjhKLGlCQUFhOUosRUFDYitKLGNBQVUvSixFQUNWZ0ssVUFBTWhLLEVBQ05od0IsVUFBTWd3QixFQUlaLENBbUJBLFNBQVMyVSxHQUNQekksRUFDQS9nQyxHQUVBLE9BQUkrZ0MsRUFDc0MsQ0FDdENqaUIsTUFBTyxVQUNQMmYsV0FBWXNDLEVBQVd0QyxXQUN2QkMsV0FBWXFDLEVBQVdyQyxXQUN2QkMsWUFBYW9DLEVBQVdwQyxZQUN4QkMsU0FBVW1DLEVBQVduQyxTQUNyQkMsS0FBTWtDLEVBQVdsQyxLQUNqQmg2QixLQUFNazhCLEVBQVdsOEIsS0FDakI3RSxRQUlzQyxDQUN0QzhlLE1BQU8sVUFDUDJmLGdCQUFZNUosRUFDWjZKLGdCQUFZN0osRUFDWjhKLGlCQUFhOUosRUFDYitKLGNBQVUvSixFQUNWZ0ssVUFBTWhLLEVBQ05od0IsVUFBTWd3QixFQUNONzBCLE9BSU4sQ0FtQkEsU0FBUzZuQyxHQUFlN25DLEdBV3RCLE1BVnFDLENBQ25DOGUsTUFBTyxPQUNQMmYsZ0JBQVk1SixFQUNaNkosZ0JBQVk3SixFQUNaOEosaUJBQWE5SixFQUNiK0osY0FBVS9KLEVBQ1ZnSyxVQUFNaEssRUFDTmh3QixVQUFNZ3dCLEVBQ043MEIsT0FHSix3T0FyMEVzQ2paLE9BQU8sWUM1dUd0QyxNQUFNMGlELEdBQ1hDLEVBQUFBLGNBQW9ELE1BS3pDQyxHQUF5QkQsRUFBQUEsY0FFcEMsTUE4Q1dFLEdBQW9CRixFQUFBQSxjQUMvQixNQVlXRyxHQUFrQkgsRUFBQUEsY0FDN0IsTUFhV0ksR0FBZUosRUFBQUEsY0FBd0MsQ0FDbEVLLE9BQVEsS0FDUnBSLFFBQVMsR0FDVHFSLGFBQWEsSUFPRkMsR0FBb0JQLEVBQUFBLGNBQXlCLE1DbkZuRCxTQUFTUSxLQUNkLE9BQTRDLE1BQXJDUixFQUFBQSxXQUFpQkcsR0FDMUIsQ0FZTyxTQUFTTSxLQVFkLE9BTkVELE1BREZFLEdBQVUsR0FPSFYsRUFBQUEsV0FBaUJHLElBQWlCbm9DLFFBQzNDLENBa0RBLFNBQVMyb0MsR0FDUHorQyxHQUVlODlDLEVBQUFBLFdBQWlCRSxJQUFtQlUsUUFLakRaLEVBQUFBLGdCQUFzQjk5QyxFQUUxQixDQVFPLFNBQVMyK0MsS0FDZCxJQUFJLFlBQUVQLEdBQWdCTixFQUFBQSxXQUFpQkksSUFHdkMsT0FBT0UsRUFvM0JULFdBQ0UsSUFBSSxPQUFFUSxHQTNOUixTQUE4QkMsR0FDNUIsSUFBSUMsRUFBTWhCLEVBQUFBLFdBQWlCRCxJQUUzQixPQURVaUIsR0FBVk4sR0FBVSxHQUNITSxDQUNULENBdU5tQkMsQ0FBcUJDLEdBQWVDLG1CQUNqRHR2QyxFQUFLdXZDLEdBQWtCQyxHQUFvQkYsbUJBRTNDRyxFQUFZdEIsRUFBQUEsUUFBYSxHQUM3QlcsSUFBMEIsS0FDeEJXLEVBQVUxMUMsU0FBVSxDQUFJLElBRzFCLElBQUkyMUMsRUFBNkJ2QixFQUFBQSxhQUMvQixTQUFDdlQsRUFBaUJocUMsUUFBd0IsSUFBeEJBLElBQUFBLEVBQTJCLENBQUMsR0FLdkM2K0MsRUFBVTExQyxVQUVHLGlCQUFQNmdDLEVBQ1RxVSxFQUFPUyxTQUFTOVUsR0FFaEJxVSxFQUFPUyxTQUFTOVUsRUFBRUMsR0FBQSxDQUFJcUosWUFBYWxrQyxHQUFPcFAsSUFFOUMsR0FDQSxDQUFDcStDLEVBQVFqdkMsSUFHWCxPQUFPMHZDLENBQ1QsQ0EvNEJ1QkMsR0FHdkIsV0FFSWhCLE1BREZFLEdBQVUsR0FPVixJQUFJZSxFQUFvQnpCLEVBQUFBLFdBQWlCRCxLQUNyQyxTQUFFNVIsRUFBUSxPQUFFdVQsRUFBTSxVQUFFN1gsR0FBY21XLEVBQUFBLFdBQWlCRSxLQUNuRCxRQUFFalIsR0FBWStRLEVBQUFBLFdBQWlCSSxLQUM3QnpULFNBQVV5RyxHQUFxQnFOLEtBRWpDa0IsRUFBcUI5ZCxLQUFLQyxVQUM1QjhkLEVBQW9CM1MsRUFBU3lTLEVBQU8zTyx1QkFHbEN1TyxFQUFZdEIsRUFBQUEsUUFBYSxHQXFEN0IsT0FwREFXLElBQTBCLEtBQ3hCVyxFQUFVMTFDLFNBQVUsQ0FBSSxJQUdPbzBDLEVBQUFBLGFBQy9CLFNBQUN2VCxFQUFpQmhxQyxHQUtoQixRQUx3QyxJQUF4QkEsSUFBQUEsRUFBMkIsQ0FBQyxJQUt2QzYrQyxFQUFVMTFDLFFBQVMsT0FFeEIsR0FBa0IsaUJBQVA2Z0MsRUFFVCxZQURBNUMsRUFBVWdZLEdBQUdwVixHQUlmLElBQUlRLEVBQU9nRyxFQUNUeEcsRUFDQTVJLEtBQUt5VCxNQUFNcUssR0FDWHZPLEVBQ3FCLFNBQXJCM3dDLEVBQVF1ekMsVUFTZSxNQUFyQnlMLEdBQTBDLE1BQWJ0VCxJQUMvQmxCLEVBQUtOLFNBQ2UsTUFBbEJNLEVBQUtOLFNBQ0R3QixFQUNBdUIsRUFBVSxDQUFDdkIsRUFBVWxCLEVBQUtOLGFBRy9CbHFDLEVBQVF6RixRQUFVNnNDLEVBQVU3c0MsUUFBVTZzQyxFQUFVamdDLE1BQ2pEcWpDLEVBQ0F4cUMsRUFBUTJ5QixNQUNSM3lCLEVBRUosR0FDQSxDQUNFMHJDLEVBQ0F0RSxFQUNBOFgsRUFDQXZPLEVBQ0FxTyxHQUtOLENBMUU2Q0ssRUFDN0MsQ0EyRUEsTUFBTUMsR0FBZ0IvQixFQUFBQSxjQUE2QixNQXVGNUMsU0FBU2dDLEdBQ2R4VSxFQUNBVSxFQUNBK1QsRUFDQVAsR0FHRWxCLE1BREZFLEdBQVUsR0FPVixJQUFJLFVBQUU3VyxHQUFjbVcsRUFBQUEsV0FBaUJFLEtBQy9CalIsUUFBU2lULEdBQWtCbEMsRUFBQUEsV0FBaUJJLElBQzlDK0IsRUFBYUQsRUFBY0EsRUFBY3JvRCxPQUFTLEdBQ2xEdW9ELEVBQWVELEVBQWFBLEVBQVd6USxPQUFTLENBQUMsRUFFakQyUSxHQURpQkYsR0FBYUEsRUFBV3hWLFNBQ3BCd1YsRUFBYUEsRUFBV3hRLGFBQWUsS0FDOUN3USxHQUFjQSxFQUFXdlUsTUFxQzNDLElBRUk1MUIsRUFGQXNxQyxFQUFzQjdCLEtBRzFCLEdBQUl2UyxFQUFhLEtBQUFxVSxFQUNmLElBQUlDLEVBQ3FCLGlCQUFoQnRVLEVBQTJCckIsRUFBVXFCLEdBQWVBLEVBR3BDLE1BQXZCbVUsSUFDNEIsT0FERkUsRUFDeEJDLEVBQWtCN1YsZUFBUSxFQUExQjRWLEVBQTRCOVMsV0FBVzRTLEtBRjNDM0IsR0FBVSxHQVNWMW9DLEVBQVd3cUMsQ0FDYixNQUNFeHFDLEVBQVdzcUMsRUFHYixJQUFJM1YsRUFBVzMwQixFQUFTMjBCLFVBQVksSUFFaEM2RSxFQUFvQjdFLEVBQ3hCLEdBQTJCLE1BQXZCMFYsRUFBNEIsQ0FlOUIsSUFBSUksRUFBaUJKLEVBQW1CcmxELFFBQVEsTUFBTyxJQUFJakIsTUFBTSxLQUVqRXkxQyxFQUFvQixJQURMN0UsRUFBUzN2QyxRQUFRLE1BQU8sSUFBSWpCLE1BQU0sS0FDZE8sTUFBTW1tRCxFQUFlNW9ELFFBQVFpd0IsS0FBSyxJQUN2RSxDQUVBLElBQUltbEIsRUFBVWhCLEVBQVlULEVBQVEsQ0FBRWIsU0FBVTZFLElBbUIxQ2tSLEVBb05DLFNBQ0x6VCxFQUNBaVQsRUFDQUQsRUFDQVAsR0FDMkIsSUFBQWlCLEVBQzNCLFFBSjJCLElBQTNCVCxJQUFBQSxFQUE4QixTQUNjLElBQTVDRCxJQUFBQSxFQUErQyxXQUNYLElBQXBDUCxJQUFBQSxFQUF1QyxNQUV4QixNQUFYelMsRUFBaUIsS0FBQTJULEVBQ25CLEdBQW1CLE9BQW5CQSxFQUFJWCxLQUFBVyxFQUFpQnZKLE9BS25CLE9BQU8sS0FGUHBLLEVBQVVnVCxFQUFnQmhULE9BSTlCLENBRUEsSUFBSXlULEVBQWtCelQsRUFHbEJvSyxFQUFTLE9BQUhzSixFQUFHVixRQUFBLEVBQUFVLEVBQWlCdEosT0FDOUIsR0FBYyxNQUFWQSxFQUFnQixDQUNsQixJQUFJd0osRUFBYUgsRUFBZ0I3SixXQUM5QnB1QyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsU0FBK0JzNUIsS0FBbkIsTUFBTmtPLE9BQU0sRUFBTkEsRUFBUzV1QyxFQUFFbWpDLE1BQU0vN0IsT0FHdENneEMsR0FBYyxHQURoQm5DLEdBQVUsR0FNVmdDLEVBQWtCQSxFQUFnQnBtRCxNQUNoQyxFQUNBa1IsS0FBS2dSLElBQUlra0MsRUFBZ0I3b0QsT0FBUWdwRCxFQUFhLEdBRWxELENBSUEsSUFBSUMsR0FBaUIsRUFDakJDLEdBQWlCLEVBQ3JCLEdBQUlkLEdBQW1CUCxHQUFVQSxFQUFPc0Isb0JBQ3RDLElBQUssSUFBSXBVLEVBQUksRUFBR0EsRUFBSThULEVBQWdCN29ELE9BQVErMEMsSUFBSyxDQUMvQyxJQUFJL3ZDLEVBQVE2akQsRUFBZ0I5VCxHQU01QixJQUpJL3ZDLEVBQU0rdUMsTUFBTXFWLGlCQUFtQnBrRCxFQUFNK3VDLE1BQU1zViwwQkFDN0NILEVBQWdCblUsR0FHZC92QyxFQUFNK3VDLE1BQU0vN0IsR0FBSSxDQUNsQixJQUFJLFdBQUV1bkMsRUFBVSxPQUFFQyxHQUFXNEksRUFDekJrQixFQUNGdGtELEVBQU0rdUMsTUFBTXVMLGFBQ21CaE8sSUFBL0JpTyxFQUFXdjZDLEVBQU0rdUMsTUFBTS83QixPQUNyQnduQyxRQUFxQ2xPLElBQTNCa08sRUFBT3g2QyxFQUFNK3VDLE1BQU0vN0IsS0FDakMsR0FBSWhULEVBQU0rdUMsTUFBTTFFLE1BQVFpYSxFQUFrQixDQUl4Q0wsR0FBaUIsRUFFZkosRUFERUssR0FBaUIsRUFDREwsRUFBZ0JwbUQsTUFBTSxFQUFHeW1ELEVBQWdCLEdBRXpDLENBQUNMLEVBQWdCLElBRXJDLEtBQ0YsQ0FDRixDQUNGLENBR0YsT0FBT0EsRUFBZ0JVLGFBQVksQ0FBQy9DLEVBQVF4aEQsRUFBT29yQixLQUVqRCxJQUFJb00sRUFDQWd0QixHQUE4QixFQUM5QkMsRUFBdUMsS0FDdkNKLEVBQWlELEtBMFZ6RCxJQUFxQnRyQyxFQXpWYnFxQyxJQUNGNXJCLEVBQVFnakIsR0FBVXg2QyxFQUFNK3VDLE1BQU0vN0IsR0FBS3duQyxFQUFPeDZDLEVBQU0rdUMsTUFBTS83QixTQUFNczVCLEVBQzVEbVksRUFBZXprRCxFQUFNK3VDLE1BQU0wVixjQUFnQkMsR0FFdkNULElBQ0VDLEVBQWdCLEdBQWUsSUFBVjk0QixHQXFWakJ1NUIsR0FESzVyQyxFQWxWVCxvQkFvVlI0ckMsR0FBYzVyQyxJQUFPLEdBaFZmeXJDLEdBQThCLEVBQzlCSCxFQUF5QixNQUNoQkgsSUFBa0I5NEIsSUFDM0JvNUIsR0FBOEIsRUFDOUJILEVBQXlCcmtELEVBQU0rdUMsTUFBTXNWLHdCQUEwQixRQUtyRSxJQUFJalUsRUFBVWlULEVBQWMzZ0MsT0FBT21oQyxFQUFnQnBtRCxNQUFNLEVBQUcydEIsRUFBUSxJQUNoRXc1QixFQUFjQSxLQUNoQixJQUFJMWdELEVBa0JKLE9BaEJFQSxFQURFc3pCLEVBQ1NpdEIsRUFDRkQsRUFDRUgsRUFDRnJrRCxFQUFNK3VDLE1BQU03RixVQU9WaVksRUFBQUEsY0FBQ25oRCxFQUFNK3VDLE1BQU03RixVQUFTLE1BQ3hCbHBDLEVBQU0rdUMsTUFBTXR1QixRQUNWemdCLEVBQU0rdUMsTUFBTXR1QixRQUVaK2dDLEVBR1hMLEVBQUFBLGNBQUMwRCxHQUFhLENBQ1o3a0QsTUFBT0EsRUFDUDhrRCxhQUFjLENBQ1p0RCxTQUNBcFIsVUFDQXFSLFlBQWdDLE1BQW5CMkIsR0FFZmwvQyxTQUFVQSxHQUNWLEVBTU4sT0FBT2svQyxJQUNKcGpELEVBQU0rdUMsTUFBTWdXLGVBQWlCL2tELEVBQU0rdUMsTUFBTTBWLGNBQTBCLElBQVZyNUIsR0FDMUQrMUIsRUFBQUEsY0FBQzZELEdBQW1CLENBQ2xCN3JDLFNBQVVpcUMsRUFBZ0JqcUMsU0FDMUI4ckMsYUFBYzdCLEVBQWdCNkIsYUFDOUJDLFVBQVdULEVBQ1hqdEIsTUFBT0EsRUFDUHR6QixTQUFVMGdELElBQ1ZFLGFBQWMsQ0FBRXRELE9BQVEsS0FBTXBSLFVBQVNxUixhQUFhLEtBR3REbUQsR0FDRCxHQUNBLEtBQ0wsQ0FyV3dCTyxDQUNwQi9VLEdBQ0VBLEVBQVF0SCxLQUFLOW9DLEdBQ1huRSxPQUFPOEQsT0FBTyxDQUFDLEVBQUdLLEVBQU8sQ0FDdkI2eUMsT0FBUWgzQyxPQUFPOEQsT0FBTyxDQUFDLEVBQUc0akQsRUFBY3ZqRCxFQUFNNnlDLFFBQzlDL0UsU0FBVStDLEVBQVUsQ0FDbEIyUyxFQUVBeFksRUFBVW9hLGVBQ05wYSxFQUFVb2EsZUFBZXBsRCxFQUFNOHRDLFVBQVVBLFNBQ3pDOXRDLEVBQU04dEMsV0FFWmdGLGFBQ3lCLE1BQXZCOXlDLEVBQU04eUMsYUFDRjBRLEVBQ0EzUyxFQUFVLENBQ1IyUyxFQUVBeFksRUFBVW9hLGVBQ05wYSxFQUFVb2EsZUFBZXBsRCxFQUFNOHlDLGNBQWNoRixTQUM3Qzl0QyxFQUFNOHlDLG1CQUl4QnVRLEVBQ0FELEVBQ0FQLEdBTUYsT0FBSXhULEdBQWV3VSxFQUVmMUMsRUFBQUEsY0FBQ0csR0FBZ0J6WCxTQUFRLENBQ3ZCdG5DLE1BQU8sQ0FDTDRXLFNBQVEwMEIsR0FBQSxDQUNOQyxTQUFVLElBQ1YxeEIsT0FBUSxHQUNSMnhCLEtBQU0sR0FDTnhYLE1BQU8sS0FDUHhkLElBQUssV0FDRkksR0FFTGtzQyxlQUFnQm5ZLEVBQWVvWSxNQUdoQ3pCLEdBS0FBLENBQ1QsQ0FFQSxTQUFTMEIsS0FDUCxJQUFJL3RCLEVBeWJDLFdBQWtDLElBQUFndUIsRUFDdkMsSUFBSWh1QixFQUFRMnBCLEVBQUFBLFdBQWlCTyxJQUN6Qm5yQixFQTdHTixTQUE0QjJyQixHQUMxQixJQUFJM3JCLEVBQVE0cUIsRUFBQUEsV0FBaUJDLElBRTdCLE9BRFU3cUIsR0FBVnNyQixHQUFVLEdBQ0h0ckIsQ0FDVCxDQXlHY2t2QixDQUFtQmpELEdBQW9Ca0QsZUFDL0NuSyxFQUFVZ0gsR0FBa0JDLEdBQW9Ca0QsZUFJcEQsWUFBY3BaLElBQVY5VSxFQUNLQSxFQUlGLE9BQVBndUIsRUFBT2p2QixFQUFNaWtCLGFBQU4sRUFBQWdMLEVBQWVqSyxFQUN4QixDQXRjY29LLEdBQ1J4dUIsRUFBVXVlLEVBQXFCbGUsR0FDNUJBLEVBQU0rZCxPQUFVLElBQUEvZCxFQUFNZ2UsV0FDekJoZSxhQUFpQjMzQixNQUNqQjIzQixFQUFNTCxRQUNONk4sS0FBS0MsVUFBVXpOLEdBQ2YxM0IsRUFBUTAzQixhQUFpQjMzQixNQUFRMjNCLEVBQU0xM0IsTUFBUSxLQUUvQzhsRCxFQUFZLENBQUVDLFFBQVMsU0FBVUMsZ0JBRHJCLDBCQXVCaEIsT0FDRTNFLEVBQUFBLGNBQUFBLEVBQUFBLFNBQUEsS0FDRUEsRUFBQUEsY0FBSSwyQ0FDSkEsRUFBQUEsY0FBQSxNQUFJNTRDLE1BQU8sQ0FBRXc5QyxVQUFXLFdBQWE1dUIsR0FDcENyM0IsRUFBUXFoRCxFQUFBQSxjQUFBLE9BQUs1NEMsTUFBT3E5QyxHQUFZOWxELEdBQWUsS0F2QnRDLEtBMkJoQixDQUVBLE1BQU00a0QsR0FBc0J2RCxFQUFBQSxjQUFDb0UsR0FBcUIsTUFnQjNDLE1BQU1QLFdBQTRCN0QsRUFBQUEsVUFJdkN0L0MsV0FBQUEsQ0FBWTBwQixHQUNWeTZCLE1BQU16NkIsR0FDTi91QixLQUFLKzVCLE1BQVEsQ0FDWHBkLFNBQVVvUyxFQUFNcFMsU0FDaEI4ckMsYUFBYzE1QixFQUFNMDVCLGFBQ3BCenRCLE1BQU9qTSxFQUFNaU0sTUFFakIsQ0FFQSwrQkFBT08sQ0FBeUJQLEdBQzlCLE1BQU8sQ0FBRUEsTUFBT0EsRUFDbEIsQ0FFQSwrQkFBT1gsQ0FDTHRMLEVBQ0FnTCxHQVVBLE9BQ0VBLEVBQU1wZCxXQUFhb1MsRUFBTXBTLFVBQ0QsU0FBdkJvZCxFQUFNMHVCLGNBQWtELFNBQXZCMTVCLEVBQU0wNUIsYUFFakMsQ0FDTHp0QixNQUFPak0sRUFBTWlNLE1BQ2JyZSxTQUFVb1MsRUFBTXBTLFNBQ2hCOHJDLGFBQWMxNUIsRUFBTTA1QixjQVFqQixDQUNMenRCLFdBQXVCOFUsSUFBaEIvZ0IsRUFBTWlNLE1BQXNCak0sRUFBTWlNLE1BQVFqQixFQUFNaUIsTUFDdkRyZSxTQUFVb2QsRUFBTXBkLFNBQ2hCOHJDLGFBQWMxNUIsRUFBTTA1QixjQUFnQjF1QixFQUFNMHVCLGFBRTlDLENBRUFqdEIsaUJBQUFBLENBQWtCUixFQUFZeXVCLEdBQzVCMXVCLFFBQVFDLE1BQ04sd0RBQ0FBLEVBQ0F5dUIsRUFFSixDQUVBamxELE1BQUFBLEdBQ0UsWUFBNEJzckMsSUFBckI5dkMsS0FBSys1QixNQUFNaUIsTUFDaEIycEIsRUFBQUEsY0FBQ0ksR0FBYTFYLFNBQVEsQ0FBQ3RuQyxNQUFPL0YsS0FBSyt1QixNQUFNdTVCLGNBQ3ZDM0QsRUFBQUEsY0FBQ08sR0FBa0I3WCxTQUFRLENBQ3pCdG5DLE1BQU8vRixLQUFLKzVCLE1BQU1pQixNQUNsQnR6QixTQUFVMUgsS0FBSyt1QixNQUFNMjVCLGFBSXpCMW9ELEtBQUsrdUIsTUFBTXJuQixRQUVmLEVBU0YsU0FBUzJnRCxHQUFhMVcsR0FBd0QsSUFBdkQsYUFBRTJXLEVBQVksTUFBRTlrRCxFQUFLLFNBQUVrRSxHQUE4QmlxQyxFQUN0RXlVLEVBQW9CekIsRUFBQUEsV0FBaUJELElBYXpDLE9BUkUwQixHQUNBQSxFQUFrQmIsUUFDbEJhLEVBQWtCc0QsZ0JBQ2pCbG1ELEVBQU0rdUMsTUFBTTBWLGNBQWdCemtELEVBQU0rdUMsTUFBTWdXLGlCQUV6Q25DLEVBQWtCc0QsY0FBY0MsMkJBQTZCbm1ELEVBQU0rdUMsTUFBTS83QixJQUl6RW11QyxFQUFBQSxjQUFDSSxHQUFhMVgsU0FBUSxDQUFDdG5DLE1BQU91aUQsR0FDM0I1Z0QsRUFHUCxDQW1KQyxJQUVJbStDLEdBQWMsU0FBZEEsR0FBYyxPQUFkQSxFQUFjLHdCQUFkQSxFQUFjLGdDQUFkQSxFQUFjLGdDQUFkQSxDQUFjLEVBQWRBLElBQWMsSUFNZEcsR0FBbUIsU0FBbkJBLEdBQW1CLE9BQW5CQSxFQUFtQix3QkFBbkJBLEVBQW1CLDhCQUFuQkEsRUFBbUIsOEJBQW5CQSxFQUFtQiw4QkFBbkJBLEVBQW1CLDhCQUFuQkEsRUFBbUIsd0NBQW5CQSxFQUFtQix3QkFBbkJBLEVBQW1CLGdDQUFuQkEsRUFBbUIsZ0NBQW5CQSxFQUFtQix3QkFBbkJBLENBQW1CLEVBQW5CQSxJQUFtQixJQXNDeEIsU0FBU0QsR0FBa0JMLEdBQ3pCLElBQUluVCxFQVJOLFNBQXlCbVQsR0FDdkIsSUFBSW5ULEVBQVFvUyxFQUFBQSxXQUFpQkksSUFFN0IsT0FEVXhTLEdBQVY4UyxHQUFVLEdBQ0g5UyxDQUNULENBSWNxWCxHQUNSQyxFQUFZdFgsRUFBTXFCLFFBQVFyQixFQUFNcUIsUUFBUXAxQyxPQUFTLEdBS3JELE9BSEVxckQsRUFBVXRYLE1BQU0vN0IsSUFEbEI2dUMsR0FBVSxHQUlId0UsRUFBVXRYLE1BQU0vN0IsRUFDekIsQ0E0TkEsTUFBTTJ4QyxHQUF5QyxDQUFDLEVDN3ZCekMsU0FBUzJCLEdBQU8vNkIsR0FDckIsT0R4REssU0FBbUIyQixHQUN4QixJQUFJczBCLEVBQVNMLEVBQUFBLFdBQWlCSSxJQUFjQyxPQUM1QyxPQUFJQSxFQUVBTCxFQUFBQSxjQUFDK0IsR0FBY3JaLFNBQVEsQ0FBQ3RuQyxNQUFPMnFCLEdBQVVzMEIsR0FHdENBLENBQ1QsQ0NnRFMrRSxDQUFVaDdCLEVBQU0yQixRQUN6QixDQThFTyxTQUFTczVCLEdBQU1qTyxHQVFxQixJQVB6Q2pKLFNBQVVtWCxFQUFlLElBQUcsU0FDNUJ2aUQsRUFBVyxLQUNYaVYsU0FBVXV0QyxFQUFZLGVBQ3RCckIsRUFBaUJuWSxFQUFlb1ksSUFBRyxVQUNuQ3RhLEVBQ0ErVyxPQUFRNEUsR0FBYSxFQUFLLE9BQzFCOUQsR0FDWXRLLEVBRVRvSixNQURIRSxHQUFVLEdBUVYsSUFBSXZTLEVBQVdtWCxFQUFhdG9ELFFBQVEsT0FBUSxLQUN4Q3lvRCxFQUFvQnpGLEVBQUFBLFNBQ3RCLEtBQU0sQ0FDSjdSLFdBQ0F0RSxZQUNBK1csT0FBUTRFLEVBQ1I5RCxPQUFNaFYsR0FBQSxDQUNKcUcsc0JBQXNCLEdBQ25CMk8sTUFHUCxDQUFDdlQsRUFBVXVULEVBQVE3WCxFQUFXMmIsSUFHSixpQkFBakJELElBQ1RBLEVBQWUxWSxFQUFVMFksSUFHM0IsSUFBSSxTQUNGNVksRUFBVyxJQUFHLE9BQ2QxeEIsRUFBUyxHQUFFLEtBQ1gyeEIsRUFBTyxHQUFFLE1BQ1R4WCxFQUFRLEtBQUksSUFDWnhkLEVBQU0sV0FDSjJ0QyxFQUVBRyxFQUFrQjFGLEVBQUFBLFNBQWMsS0FDbEMsSUFBSTJGLEVBQW1CclgsRUFBYzNCLEVBQVV3QixHQUUvQyxPQUF3QixNQUFwQndYLEVBQ0ssS0FHRixDQUNMM3RDLFNBQVUsQ0FDUjIwQixTQUFVZ1osRUFDVjFxQyxTQUNBMnhCLE9BQ0F4WCxRQUNBeGQsT0FFRnNzQyxpQkFDRCxHQUNBLENBQUMvVixFQUFVeEIsRUFBVTF4QixFQUFRMnhCLEVBQU14WCxFQUFPeGQsRUFBS3NzQyxJQVNsRCxPQUF1QixNQUFuQndCLEVBQ0ssS0FJUDFGLEVBQUFBLGNBQUNFLEdBQWtCeFgsU0FBUSxDQUFDdG5DLE1BQU9xa0QsR0FDakN6RixFQUFBQSxjQUFDRyxHQUFnQnpYLFNBQVEsQ0FBQzNsQyxTQUFVQSxFQUFVM0IsTUFBT3NrRCxJQUczRCx3T0FsWjRCMUYsRUFBc0IsZ0JBMmN0QixJQUFJdjdCLFNBQVEsU0FFUHU3QixFQUFBQSxVQzlUZSxJQUFJaG1ELElBQUksQ0FDdEQsb0NBQ0Esc0JBQ0EsZUNhRixJQUNFTSxPQUFPc3JELHFCQUhULEdBSUMsQ0FBQyxNQUFPMXFELEdBQ1AsQ0FtRUYsU0FBUzJxRCxHQUNQeE0sR0FFQSxJQUFLQSxFQUFRLE9BQU8sS0FDcEIsSUFBSW5DLEVBQVV4OEMsT0FBT3c4QyxRQUFRbUMsR0FDekJ5TSxFQUE2QyxDQUFDLEVBQ2xELElBQUssSUFBS2x1QyxFQUFLNmpDLEtBQVF2RSxFQUdyQixHQUFJdUUsR0FBc0IsdUJBQWZBLEVBQUlzSyxPQUNiRCxFQUFXbHVDLEdBQU8sSUFBSW91QyxFQUNwQnZLLEVBQUlySCxPQUNKcUgsRUFBSXBILFdBQ0pvSCxFQUFJbmxDLE1BQ2EsSUFBakJtbEMsRUFBSW5ILGVBRUQsR0FBSW1ILEdBQXNCLFVBQWZBLEVBQUlzSyxPQUFvQixDQUV4QyxHQUFJdEssRUFBSXdLLFVBQVcsQ0FDakIsSUFBSUMsRUFBbUI1ckQsT0FBT21oRCxFQUFJd0ssV0FDbEMsR0FBZ0MsbUJBQXJCQyxFQUNULElBRUUsSUFBSTd2QixFQUFRLElBQUk2dkIsRUFBaUJ6SyxFQUFJemxCLFNBR3JDSyxFQUFNMTNCLE1BQVEsR0FDZG1uRCxFQUFXbHVDLEdBQU95ZSxFQUNsQixNQUFPbjdCLEdBQ1AsQ0FHTCxDQUVELEdBQXVCLE1BQW5CNHFELEVBQVdsdUMsR0FBYyxDQUMzQixJQUFJeWUsRUFBUSxJQUFJMzNCLE1BQU0rOEMsRUFBSXpsQixTQUcxQkssRUFBTTEzQixNQUFRLEdBQ2RtbkQsRUFBV2x1QyxHQUFPeWUsQ0FDbkIsQ0FDRixNQUNDeXZCLEVBQVdsdUMsR0FBTzZqQyxFQUd0QixPQUFPcUssQ0FDVCxDQW1CQSxNQUFNSyxHQUF3Qm5HLEVBQUFBLGNBQWlELENBQzdFb0csaUJBQWlCLElBV2JDLEdBQWtCckcsRUFBQUEsY0FBMkMsSUFBSXJ3QyxLQW1DakUyMkMsR0FBc0J0RyxFQUFzQixnQkFFNUN1RyxHQUFnQkMsRUFBbUIsVUFZekMsU0FBU0MsR0FBY3ZrRCxHQUNqQnFrRCxHQUNGQSxHQUFjcmtELEdBRWRBLEdBRUosQ0FoQmtCODlDLEVBQVksTUF5QjlCLE1BQU0wRyxHQU9KaG1ELFdBQUFBLEdBTkEsS0FBTTB6QyxPQUF3QyxVQU81Qy80QyxLQUFLc3JELFFBQVUsSUFBSWxpQyxTQUFRLENBQUNHLEVBQVNnaUMsS0FDbkN2ckQsS0FBS3VwQixRQUFXeGpCLElBQ00sWUFBaEIvRixLQUFLKzRDLFNBQ1AvNEMsS0FBSys0QyxPQUFTLFdBQ2R4dkIsRUFBUXhqQixHQUNULEVBRUgvRixLQUFLdXJELE9BQVVDLElBQ08sWUFBaEJ4ckQsS0FBSys0QyxTQUNQLzRDLEtBQUsrNEMsT0FBUyxXQUNkd1MsRUFBT0MsR0FDUixDQUNGLEdBRUwsRUFNSSxTQUFVQyxHQUFjOVosR0FJUixJQUpTLGdCQUM3QitaLEVBQWUsT0FDZmpHLEVBQU0sT0FDTlksR0FDb0IxVSxHQUNmNVgsRUFBTzR4QixHQUFnQmhILEVBQUFBLFNBQWVjLEVBQU8xckIsUUFDN0M2eEIsRUFBY0MsR0FBbUJsSCxFQUFBQSxZQUNqQ21ILEVBQVdDLEdBQWdCcEgsRUFBQUEsU0FBNEMsQ0FDMUVvRyxpQkFBaUIsS0FFZGlCLEVBQVdDLEdBQWdCdEgsRUFBQUEsWUFDM0J2dUMsRUFBWTgxQyxHQUFpQnZILEVBQUFBLFlBQzdCd0gsRUFBY0MsR0FBbUJ6SCxFQUFBQSxXQUtsQzBILEVBQWMxSCxFQUFBQSxPQUErQixJQUFJcndDLE1BQ2pELG1CQUFFZzRDLEdBQXVCakcsR0FBVSxDQUFDLEVBRXBDa0csRUFBdUI1SCxFQUFBQSxhQUN4Qjk5QyxJQUNLeWxELEVBekVWLFNBQTZCemxELEdBQ3ZCb2tELEdBQ0ZBLEdBQW9CcGtELEdBRXBCQSxHQUVKLENBb0VRMmxELENBQW9CM2xELEdBRXBCQSxHQUNELEdBRUgsQ0FBQ3lsRCxJQUdDemdCLEVBQVc4WSxFQUFBQSxhQUNiLENBQ0U4SCxFQUFxQkMsS0FNbkIsSUFMRixnQkFDRTlQLEVBQ0ErUCxtQkFBb0IxaEIsRUFDcEIyaEIsNEJBQTZCQyxHQUM5QkgsRUFFRDlQLEVBQWdCajhDLFNBQVM0YixHQUFROHZDLEVBQVk5N0MsUUFBUW9FLE9BQU80SCxLQUM1RGt3QyxFQUFTdE4sU0FBU3grQyxTQUFRLENBQUN1K0MsRUFBUzNpQyxVQUNidXpCLElBQWpCb1AsRUFBUWprQyxNQUNWb3hDLEVBQVk5N0MsUUFBUTFNLElBQUkwWSxFQUFLMmlDLEVBQVFqa0MsS0FDdEMsSUFHSCxJQUFJNnhDLEVBQ2UsTUFBakJySCxFQUFPeG1ELFFBQ21CLE1BQTFCd21ELEVBQU94bUQsT0FBT0MsVUFDd0MsbUJBQS9DdW1ELEVBQU94bUQsT0FBT0MsU0FBUzZ0RCxvQkFJaEMsR0FBS0YsSUFBc0JDLEVBQTNCLENBVUEsR0FBSTdoQixFQUFXLENBRWJtZ0IsSUFBYyxLQUVSaDFDLElBQ0Y0MUMsR0FBYUEsRUFBVXppQyxVQUN2Qm5ULEVBQVc0MkMsa0JBRWJqQixFQUFhLENBQ1hoQixpQkFBaUIsRUFDakI5ZixXQUFXLEVBQ1hnaUIsZ0JBQWlCSixFQUFtQkksZ0JBQ3BDQyxhQUFjTCxFQUFtQkssY0FDakMsSUFJSixJQUFJL2xDLEVBQUlzK0IsRUFBT3htRCxPQUFRQyxTQUFTNnRELHFCQUFvQixLQUNsRDNCLElBQWMsSUFBTU8sRUFBYWMsSUFBVSxJQWM3QyxPQVZBdGxDLEVBQUVnbUMsU0FBU0MsU0FBUSxLQUNqQmhDLElBQWMsS0FDWmEsT0FBYW5jLEdBQ2JvYyxPQUFjcGMsR0FDZCtiLE9BQWdCL2IsR0FDaEJpYyxFQUFhLENBQUVoQixpQkFBaUIsR0FBUSxHQUN4QyxTQUdKSyxJQUFjLElBQU1jLEVBQWMva0MsSUFFbkMsQ0FHRy9RLEdBR0Y0MUMsR0FBYUEsRUFBVXppQyxVQUN2Qm5ULEVBQVc0MkMsaUJBQ1haLEVBQWdCLENBQ2RyeUIsTUFBTzB5QixFQUNQUSxnQkFBaUJKLEVBQW1CSSxnQkFDcENDLGFBQWNMLEVBQW1CSyxpQkFJbkNyQixFQUFnQlksR0FDaEJWLEVBQWEsQ0FDWGhCLGlCQUFpQixFQUNqQjlmLFdBQVcsRUFDWGdpQixnQkFBaUJKLEVBQW1CSSxnQkFDcENDLGFBQWNMLEVBQW1CSyxlQXhEcEMsTUFOS2ppQixFQUNGbWdCLElBQWMsSUFBTU8sRUFBYWMsS0FFakNGLEdBQXFCLElBQU1aLEVBQWFjLElBNkQzQyxHQUVILENBQUNoSCxFQUFPeG1ELE9BQVFtWCxFQUFZNDFDLEVBQVdLLEVBQWFFLElBS3RENUgsRUFBQUEsaUJBQXNCLElBQU1jLEVBQU80SCxVQUFVeGhCLElBQVcsQ0FBQzRaLEVBQVE1WixJQUlqRThZLEVBQUFBLFdBQWdCLEtBQ1ZtSCxFQUFVZixrQkFBb0JlLEVBQVU3Z0IsV0FDMUNnaEIsRUFBYSxJQUFJWixHQUNsQixHQUNBLENBQUNTLElBS0puSCxFQUFBQSxXQUFnQixLQUNkLEdBQUlxSCxHQUFhSixHQUFnQm5HLEVBQU94bUQsT0FBUSxDQUM5QyxJQUFJd3RELEVBQVdiLEVBQ1gwQixFQUFnQnRCLEVBQVVWLFFBQzFCbDFDLEVBQWFxdkMsRUFBT3htRCxPQUFPQyxTQUFTNnRELHFCQUFvQm5OLFVBQzFEMk0sR0FBcUIsSUFBTVosRUFBYWMsV0FDbENhLENBQWEsSUFFckJsM0MsRUFBVysyQyxTQUFTQyxTQUFRLEtBQzFCbkIsT0FBYW5jLEdBQ2JvYyxPQUFjcGMsR0FDZCtiLE9BQWdCL2IsR0FDaEJpYyxFQUFhLENBQUVoQixpQkFBaUIsR0FBUSxJQUUxQ21CLEVBQWM5MUMsRUFDZixJQUNBLENBQUNtMkMsRUFBc0JYLEVBQWNJLEVBQVd2RyxFQUFPeG1ELFNBSTFEMGxELEVBQUFBLFdBQWdCLEtBRVpxSCxHQUNBSixHQUNBN3hCLEVBQU1wZCxTQUFTSixNQUFRcXZDLEVBQWFqdkMsU0FBU0osS0FFN0N5dkMsRUFBVXppQyxTQUNYLEdBQ0EsQ0FBQ3lpQyxFQUFXNTFDLEVBQVkyakIsRUFBTXBkLFNBQVVpdkMsSUFJM0NqSCxFQUFBQSxXQUFnQixNQUNUbUgsRUFBVWYsaUJBQW1Cb0IsSUFDaENOLEVBQWdCTSxFQUFhcHlCLE9BQzdCZ3lCLEVBQWEsQ0FDWGhCLGlCQUFpQixFQUNqQjlmLFdBQVcsRUFDWGdpQixnQkFBaUJkLEVBQWFjLGdCQUM5QkMsYUFBY2YsRUFBYWUsZUFFN0JkLE9BQWdCdGMsR0FDakIsR0FDQSxDQUFDZ2MsRUFBVWYsZ0JBQWlCb0IsSUFFL0J4SCxFQUFBQSxXQUFnQixLQUtiLEdBR0EsSUFFSCxJQUFJblcsRUFBWW1XLEVBQUFBLFNBQWMsS0FDckIsQ0FDTDRJLFdBQVk5SCxFQUFPOEgsV0FDbkIzRSxlQUFnQm5ELEVBQU9tRCxlQUN2QnBDLEdBQUt0L0IsR0FBTXUrQixFQUFPUyxTQUFTaC9CLEdBQzNCM1ksS0FBTUEsQ0FBQzZpQyxFQUFJclgsRUFBT21oQixJQUNoQnVLLEVBQU9TLFNBQVM5VSxFQUFJLENBQ2xCclgsUUFDQXl6QixtQkFBb0IsTUFBQXRTLE9BQUEsRUFBQUEsRUFBTXNTLHFCQUU5QjdyRCxRQUFTQSxDQUFDeXZDLEVBQUlyWCxFQUFPbWhCLElBQ25CdUssRUFBT1MsU0FBUzlVLEVBQUksQ0FDbEJ6dkMsU0FBUyxFQUNUbzRCLFFBQ0F5ekIsbUJBQW9CLE1BQUF0UyxPQUFBLEVBQUFBLEVBQU1zUyx3QkFHL0IsQ0FBQy9ILElBRUEzUyxFQUFXMlMsRUFBTzNTLFVBQVksSUFFOUJzVCxFQUFvQnpCLEVBQUFBLFNBQ3RCLEtBQU0sQ0FDSmMsU0FDQWpYLFlBQ0ErVyxRQUFRLEVBQ1J6UyxjQUVGLENBQUMyUyxFQUFRalgsRUFBV3NFLElBU3RCLE9BQ0U2UixFQUFBQSxjQUFBQSxFQUFBQSxTQUFBLEtBQ0VBLEVBQUFBLGNBQUM4SSxHQUFrQnBnQixTQUFTLENBQUF0bkMsTUFBT3FnRCxHQUNqQ3pCLEVBQUFBLGNBQUMrSSxHQUF1QnJnQixTQUFTLENBQUF0bkMsTUFBT2cwQixHQUN0QzRxQixFQUFBQSxjQUFDcUcsR0FBZ0IzZCxTQUFRLENBQUN0bkMsTUFBT3NtRCxFQUFZOTdDLFNBQzNDbzBDLEVBQUFBLGNBQUNtRyxHQUFzQnpkLFNBQVMsQ0FBQXRuQyxNQUFPK2xELEdBQ3JDbkgsRUFBQUEsY0FBQ3FGLEdBQU0sQ0FDTGxYLFNBQVVBLEVBQ1ZuMkIsU0FBVW9kLEVBQU1wZCxTQUNoQmtzQyxlQUFnQjl1QixFQUFNNHpCLGNBQ3RCbmYsVUFBV0EsRUFDWDZYLE9BQVEsQ0FDTjNPLHFCQUFzQitOLEVBQU9ZLE9BQU8zTyx1QkFHckMzZCxFQUFNNnpCLGFBQWVuSSxFQUFPWSxPQUFPc0Isb0JBQ2xDaEQsRUFBQUEsY0FBQ2tKLEdBQVUsQ0FDVDFiLE9BQVFzVCxFQUFPdFQsT0FDZmtVLE9BQVFaLEVBQU9ZLE9BQ2Z0c0IsTUFBT0EsSUFHVDJ4QixPQU9YLEtBR1AsQ0FFQSxTQUFTbUMsR0FBVUMsR0FRbEIsSUFSbUIsT0FDbEIzYixFQUFNLE9BQ05rVSxFQUFNLE1BQ050c0IsR0FLRCt6QixFQUNDLE9BQU9DLEdBQWM1YixPQUFRckMsRUFBVy9WLEVBQU9zc0IsRUFDakQsQ0FtbEJBLElBQUtSLEdBUUFHLEdDajFDVSxTQUFTai9CLEdBQUtpbkMsRUFBSUMsR0FDL0IsT0FBTyxXQUNMLE9BQU9ELEVBQUc3K0MsTUFBTTgrQyxFQUFTMXZELFVBQzNCLENBQ0YsQ0QwNUJvQixvQkFBWFUsYUFDb0IsSUFBcEJBLE9BQU9DLFVBQ1BELE9BQU9DLFNBQVNDLGNBeWF6QixTQUFLMG1ELEdBQ0hBLEVBQUEsNENBQ0FBLEVBQUEsc0JBQ0FBLEVBQUEsb0NBQ0FBLEVBQUEsd0JBQ0FBLEVBQUEsK0NBQ0QsQ0FORCxDQUFLQSxLQUFBQSxHQU1KLEtBRUQsU0FBS0csR0FDSEEsRUFBQSx3QkFDQUEsRUFBQSwwQkFDQUEsRUFBQSwyQ0FDRCxDQUpELENBQUtBLEtBQUFBLEdBSUosS0VqMUNELE1BQU8xOUMsU0FBUUEsSUFBSWpKLE9BQU9DLFdBQ3BCLGVBQUMwd0MsSUFBa0Izd0MsT0FFbkI2dUQsSUFBVWxuQixHQUdiM25DLE9BQU9rM0IsT0FBTyxNQUhRNDNCLElBQ3JCLE1BQU1DLEVBQU05bEQsR0FBU2pILEtBQUs4c0QsR0FDMUIsT0FBT25uQixHQUFNb25CLEtBQVNwbkIsR0FBTW9uQixHQUFPQSxFQUFJbnRELE1BQU0sR0FBSSxHQUFHTCxjQUFjLEdBRnZELElBQUNvbUMsR0FLaEIsTUFBTXFuQixHQUFjL3RELElBQ2xCQSxFQUFPQSxFQUFLTSxjQUNKdXRELEdBQVVELEdBQU9DLEtBQVc3dEQsR0FHaENndUQsR0FBYWh1RCxHQUFRNnRELFVBQWdCQSxJQUFVN3RELEdBUy9DLFFBQUM0RyxJQUFXRCxNQVNac25ELEdBQWNELEdBQVcsYUFxQnpCRSxHQUFnQkgsR0FBVyxlQTJCM0JJLEdBQVdILEdBQVcsVUFRdEJJLEdBQWFKLEdBQVcsWUFTeEJLLEdBQVdMLEdBQVcsVUFTdEJNLEdBQVlULEdBQW9CLE9BQVZBLEdBQW1DLGlCQUFWQSxFQWlCL0NVLEdBQWlCek8sSUFDckIsR0FBb0IsV0FBaEI4TixHQUFPOU4sR0FDVCxPQUFPLEVBR1QsTUFBTTlnRCxFQUFZMHdDLEdBQWVvUSxHQUNqQyxRQUFzQixPQUFkOWdELEdBQXNCQSxJQUFjRCxPQUFPQyxXQUFrRCxPQUFyQ0QsT0FBTzJ3QyxlQUFlMXdDLElBQTBCMEMsT0FBT3l1QyxlQUFlMlAsR0FBVXArQyxPQUFPZSxZQUFZcTlDLEVBQUksRUFVbkswTyxHQUFTVCxHQUFXLFFBU3BCVSxHQUFTVixHQUFXLFFBU3BCVyxHQUFTWCxHQUFXLFFBU3BCWSxHQUFhWixHQUFXLFlBc0N4QmEsR0FBb0JiLEdBQVcsb0JBRTlCYyxHQUFrQkMsR0FBV3hMLEdBQVl5TCxJQUFhLENBQUMsaUJBQWtCLFVBQVcsV0FBWSxXQUFXL2lCLElBQUkraEIsSUEyQnRILFNBQVMxdEQsR0FBUXN2QyxFQUFLK2QsR0FBSSxXQUFDc0IsR0FBYSxHQUFTLENBQUMsR0FFaEQsR0FBSXJmLFFBQ0YsT0FHRixJQUFJc0QsRUFDQXZ2QyxFQVFKLEdBTG1CLGlCQUFSaXNDLElBRVRBLEVBQU0sQ0FBQ0EsSUFHTC9vQyxHQUFRK29DLEdBRVYsSUFBS3NELEVBQUksRUFBR3Z2QyxFQUFJaXNDLEVBQUl6eEMsT0FBUSswQyxFQUFJdnZDLEVBQUd1dkMsSUFDakN5YSxFQUFHM3NELEtBQUssS0FBTTR1QyxFQUFJc0QsR0FBSUEsRUFBR3RELE9BRXRCLENBRUwsTUFBTS9qQyxFQUFPb2pELEVBQWFqd0QsT0FBT2d4QyxvQkFBb0JKLEdBQU81d0MsT0FBTzZNLEtBQUsrakMsR0FDbEVzZixFQUFNcmpELEVBQUsxTixPQUNqQixJQUFJK2QsRUFFSixJQUFLZzNCLEVBQUksRUFBR0EsRUFBSWdjLEVBQUtoYyxJQUNuQmgzQixFQUFNclEsRUFBS3FuQyxHQUNYeWEsRUFBRzNzRCxLQUFLLEtBQU00dUMsRUFBSTF6QixHQUFNQSxFQUFLMHpCLEVBRWpDLENBQ0YsQ0FFQSxTQUFTdWYsR0FBUXZmLEVBQUsxekIsR0FDcEJBLEVBQU1BLEVBQUkzYixjQUNWLE1BQU1zTCxFQUFPN00sT0FBTzZNLEtBQUsrakMsR0FDekIsSUFDSXdmLEVBREFsYyxFQUFJcm5DLEVBQUsxTixPQUViLEtBQU8rMEMsS0FBTSxHQUVYLEdBREFrYyxFQUFPdmpELEVBQUtxbkMsR0FDUmgzQixJQUFRa3pDLEVBQUs3dUQsY0FDZixPQUFPNnVELEVBR1gsT0FBTyxJQUNULENBRUEsTUFBTUMsR0FFc0Isb0JBQWZDLFdBQW1DQSxXQUN2QixvQkFBVEMsS0FBdUJBLEtBQTBCLG9CQUFYM3dELE9BQXlCQSxPQUFTNHdELE9BR2xGQyxHQUFvQnAvQixJQUFhNjlCLEdBQVk3OUIsSUFBWUEsSUFBWWcvQixHQWtMckVLLElBQWdCQyxHQUtHLG9CQUFmQyxZQUE4QmpnQixHQUFlaWdCLFlBSDlDOUIsR0FDRTZCLElBQWM3QixhQUFpQjZCLElBSHJCLElBQUNBLEdBZXRCLE1BaUNNRSxHQUFhN0IsR0FBVyxtQkFXeEI5dUQsR0FBaUIsR0FBR0Esb0JBQW9CLENBQUMwd0MsRUFBS08sSUFBU2p4QyxFQUFlOEIsS0FBSzR1QyxFQUFLTyxHQUEvRCxDQUFzRW54QyxPQUFPQyxXQVM5RjZ3RCxHQUFXOUIsR0FBVyxVQUV0QitCLEdBQW9CQSxDQUFDbmdCLEVBQUtvZ0IsS0FDOUIsTUFBTUMsRUFBY2p4RCxPQUFPa3hELDBCQUEwQnRnQixHQUMvQ3VnQixFQUFxQixDQUFDLEVBRTVCN3ZELEdBQVEydkQsR0FBYSxDQUFDRyxFQUFZcHNELEtBQ2hDLElBQUlxc0QsR0FDMkMsS0FBMUNBLEVBQU1MLEVBQVFJLEVBQVlwc0QsRUFBTTRyQyxNQUNuQ3VnQixFQUFtQm5zRCxHQUFRcXNELEdBQU9ELEVBQ3BDLElBR0ZweEQsT0FBT3N4RCxpQkFBaUIxZ0IsRUFBS3VnQixFQUFtQixFQXNENUNJLEdBQVEsNkJBRVJDLEdBQVEsYUFFUkMsR0FBVyxDQUNmRCxTQUNBRCxTQUNBRyxZQUFhSCxHQUFRQSxHQUFNN3ZELGNBQWdCOHZELElBdUR2Q0csR0FBWTNDLEdBQVcsaUJBSzdCLElBQ0VubkQsV0FDQXNuRCxpQkFDQXlDLFNBcG5CRixTQUFrQjdRLEdBQ2hCLE9BQWUsT0FBUkEsSUFBaUJtTyxHQUFZbk8sSUFBNEIsT0FBcEJBLEVBQUkvNkMsY0FBeUJrcEQsR0FBWW5PLEVBQUkvNkMsY0FDcEZxcEQsR0FBV3RPLEVBQUkvNkMsWUFBWTRyRCxXQUFhN1EsRUFBSS82QyxZQUFZNHJELFNBQVM3USxFQUN4RSxFQWtuQkU4USxXQXRla0IvQyxJQUNsQixJQUFJZ0QsRUFDSixPQUFPaEQsSUFDZ0IsbUJBQWJ4UyxVQUEyQndTLGFBQWlCeFMsVUFDbEQrUyxHQUFXUCxFQUFNL1IsVUFDWSxjQUExQitVLEVBQU9qRCxHQUFPQyxLQUVMLFdBQVRnRCxHQUFxQnpDLEdBQVdQLEVBQU03bEQsV0FBa0Msc0JBQXJCNmxELEVBQU03bEQsWUFHL0QsRUE2ZEQ4b0Qsa0JBaG1CRixTQUEyQmhSLEdBQ3pCLElBQUluTCxFQU1KLE9BSkVBLEVBRDBCLG9CQUFoQm9jLGFBQWlDQSxZQUFZQyxPQUM5Q0QsWUFBWUMsT0FBT2xSLEdBRWxCQSxHQUFTQSxFQUFJbVIsUUFBWS9DLEdBQWNwTyxFQUFJbVIsUUFFaER0YyxDQUNULEVBeWxCRXdaLFlBQ0FFLFlBQ0E2QyxVQWhqQmdCckQsSUFBbUIsSUFBVkEsSUFBNEIsSUFBVkEsRUFpakIzQ1MsWUFDQUMsaUJBQ0FNLG9CQUNBQyxhQUNBeEwsV0FBVSxHQUNWeUwsYUFDQWQsZUFDQU8sVUFDQUMsVUFDQUMsVUFDQW1CLFlBQ0F6QixjQUNBK0MsU0FoZ0JnQnJSLEdBQVF3TyxHQUFTeE8sSUFBUXNPLEdBQVd0TyxFQUFJc1IsTUFpZ0J4RHhDLHFCQUNBYSxnQkFDQWQsY0FDQXR1RCxXQUNBZ3hELE1BbFlGLFNBQVNBLElBQ1AsTUFBTSxTQUFDQyxHQUFZOUIsR0FBaUI5dkQsT0FBU0EsTUFBUSxDQUFDLEVBQ2hEaTFDLEVBQVMsQ0FBQyxFQUNWNGMsRUFBY0EsQ0FBQ3pSLEVBQUs3akMsS0FDeEIsTUFBTXUxQyxFQUFZRixHQUFZcEMsR0FBUXZhLEVBQVExNEIsSUFBUUEsRUFDbERzeUMsR0FBYzVaLEVBQU82YyxLQUFlakQsR0FBY3pPLEdBQ3BEbkwsRUFBTzZjLEdBQWFILEVBQU0xYyxFQUFPNmMsR0FBWTFSLEdBQ3BDeU8sR0FBY3pPLEdBQ3ZCbkwsRUFBTzZjLEdBQWFILEVBQU0sQ0FBQyxFQUFHdlIsR0FDckJsNUMsR0FBUWs1QyxHQUNqQm5MLEVBQU82YyxHQUFhMVIsRUFBSW4vQyxRQUV4QmcwQyxFQUFPNmMsR0FBYTFSLENBQ3RCLEVBR0YsSUFBSyxJQUFJN00sRUFBSSxFQUFHdnZDLEVBQUl6RixVQUFVQyxPQUFRKzBDLEVBQUl2dkMsRUFBR3V2QyxJQUMzQ2gxQyxVQUFVZzFDLElBQU01eUMsR0FBUXBDLFVBQVVnMUMsR0FBSXNlLEdBRXhDLE9BQU81YyxDQUNULEVBK1dFM3hCLE9BbldhQSxDQUFDbGxCLEVBQUdDLEVBQUc0dkQsR0FBVXFCLGNBQWEsQ0FBQyxLQUM1QzN1RCxHQUFRdEMsR0FBRyxDQUFDK2hELEVBQUs3akMsS0FDWDB4QyxHQUFXUyxHQUFXdE8sR0FDeEJoaUQsRUFBRW1lLEdBQU93SyxHQUFLcTVCLEVBQUs2TixHQUVuQjd2RCxFQUFFbWUsR0FBTzZqQyxDQUNYLEdBQ0MsQ0FBQ2tQLGVBQ0dseEQsR0E0VlBtRixLQS9kWTZxRCxHQUFRQSxFQUFJN3FELEtBQ3hCNnFELEVBQUk3cUQsT0FBUzZxRCxFQUFJenNELFFBQVEscUNBQXNDLElBK2QvRG93RCxTQW5WZ0JDLElBQ2MsUUFBMUJBLEVBQVFDLFdBQVcsS0FDckJELEVBQVVBLEVBQVEvd0QsTUFBTSxJQUVuQit3RCxHQWdWUEUsU0FwVWVBLENBQUM3c0QsRUFBYThzRCxFQUFrQnBqQyxFQUFPdWhDLEtBQ3REanJELEVBQVkvRixVQUFZRCxPQUFPazNCLE9BQU80N0IsRUFBaUI3eUQsVUFBV2d4RCxHQUNsRWpyRCxFQUFZL0YsVUFBVStGLFlBQWNBLEVBQ3BDaEcsT0FBT3VFLGVBQWV5QixFQUFhLFFBQVMsQ0FDMUNVLE1BQU9vc0QsRUFBaUI3eUQsWUFFMUJ5dkIsR0FBUzF2QixPQUFPOEQsT0FBT2tDLEVBQVkvRixVQUFXeXZCLEVBQU0sRUErVHBEcWpDLGFBblRtQkEsQ0FBQ0MsRUFBV0MsRUFBU3pjLEVBQVEwYyxLQUNoRCxJQUFJeGpDLEVBQ0F3a0IsRUFDQS9DLEVBQ0osTUFBTWdpQixFQUFTLENBQUMsRUFJaEIsR0FGQUYsRUFBVUEsR0FBVyxDQUFDLEVBRUwsTUFBYkQsRUFBbUIsT0FBT0MsRUFFOUIsRUFBRyxDQUdELElBRkF2akMsRUFBUTF2QixPQUFPZ3hDLG9CQUFvQmdpQixHQUNuQzllLEVBQUl4a0IsRUFBTXZ3QixPQUNIKzBDLEtBQU0sR0FDWC9DLEVBQU96aEIsRUFBTXdrQixHQUNQZ2YsSUFBY0EsRUFBVy9oQixFQUFNNmhCLEVBQVdDLElBQWNFLEVBQU9oaUIsS0FDbkU4aEIsRUFBUTloQixHQUFRNmhCLEVBQVU3aEIsR0FDMUJnaUIsRUFBT2hpQixJQUFRLEdBR25CNmhCLEdBQXVCLElBQVh4YyxHQUFvQjdGLEdBQWVxaUIsRUFDakQsT0FBU0EsS0FBZXhjLEdBQVVBLEVBQU93YyxFQUFXQyxLQUFhRCxJQUFjaHpELE9BQU9DLFdBRXRGLE9BQU9nekQsQ0FBTyxFQTZSZHBFLFVBQ0FHLGNBQ0F2WixTQW5SZUEsQ0FBQ3NaLEVBQUtxRSxFQUFjQyxLQUNuQ3RFLEVBQU01eEMsT0FBTzR4QyxTQUNJdGUsSUFBYjRpQixHQUEwQkEsRUFBV3RFLEVBQUk1dkQsVUFDM0NrMEQsRUFBV3RFLEVBQUk1dkQsUUFFakJrMEQsR0FBWUQsRUFBYWowRCxPQUN6QixNQUFNbTBELEVBQVl2RSxFQUFJcGlELFFBQVF5bUQsRUFBY0MsR0FDNUMsT0FBc0IsSUFBZkMsR0FBb0JBLElBQWNELENBQVEsRUE2UWpEbG1CLFFBbFFlMmhCLElBQ2YsSUFBS0EsRUFBTyxPQUFPLEtBQ25CLEdBQUlqbkQsR0FBUWluRCxHQUFRLE9BQU9BLEVBQzNCLElBQUk1YSxFQUFJNGEsRUFBTTN2RCxPQUNkLElBQUttd0QsR0FBU3BiLEdBQUksT0FBTyxLQUN6QixNQUFNcWYsRUFBTSxJQUFJM3JELE1BQU1zc0MsR0FDdEIsS0FBT0EsS0FBTSxHQUNYcWYsRUFBSXJmLEdBQUs0YSxFQUFNNWEsR0FFakIsT0FBT3FmLENBQUcsRUEwUFZDLGFBL05tQkEsQ0FBQzVpQixFQUFLK2QsS0FDekIsTUFFTWpyRCxHQUZZa3RDLEdBQU9BLEVBQUlqdUMsT0FBT2UsV0FFVDFCLEtBQUs0dUMsR0FFaEMsSUFBSWdGLEVBRUosTUFBUUEsRUFBU2x5QyxFQUFTd3NCLFVBQVkwbEIsRUFBT3psQixNQUFNLENBQ2pELE1BQU1zakMsRUFBTzdkLEVBQU9sdkMsTUFDcEJpb0QsRUFBRzNzRCxLQUFLNHVDLEVBQUs2aUIsRUFBSyxHQUFJQSxFQUFLLEdBQzdCLEdBc05BQyxTQTNNZUEsQ0FBQ0MsRUFBUTVFLEtBQ3hCLElBQUl4YSxFQUNKLE1BQU1nZixFQUFNLEdBRVosS0FBd0MsUUFBaENoZixFQUFVb2YsRUFBT0MsS0FBSzdFLEtBQzVCd0UsRUFBSXJrRCxLQUFLcWxDLEdBR1gsT0FBT2dmLENBQUcsRUFvTVYxQyxjQUNBM3dELGVBQWMsR0FDZDJ6RCxXQUFZM3pELEdBQ1o2d0QscUJBQ0ErQyxjQTNKcUJsakIsSUFDckJtZ0IsR0FBa0JuZ0IsR0FBSyxDQUFDd2dCLEVBQVlwc0QsS0FFbEMsR0FBSXFxRCxHQUFXemUsS0FBNkQsSUFBckQsQ0FBQyxZQUFhLFNBQVUsVUFBVWprQyxRQUFRM0gsR0FDL0QsT0FBTyxFQUdULE1BQU0wQixFQUFRa3FDLEVBQUk1ckMsR0FFYnFxRCxHQUFXM29ELEtBRWhCMHFELEVBQVdqckQsWUFBYSxFQUVwQixhQUFjaXJELEVBQ2hCQSxFQUFXMkMsVUFBVyxFQUluQjNDLEVBQVc1c0QsTUFDZDRzRCxFQUFXNXNELElBQU0sS0FDZixNQUFNUixNQUFNLHFDQUF3Q2dCLEVBQU8sSUFBSyxHQUVwRSxHQUNBLEVBcUlGZ3ZELFlBbElrQkEsQ0FBQ0MsRUFBZUMsS0FDbEMsTUFBTXRqQixFQUFNLENBQUMsRUFFUHVqQixFQUFVWixJQUNkQSxFQUFJanlELFNBQVFvRixJQUNWa3FDLEVBQUlscUMsSUFBUyxDQUFJLEdBQ2pCLEVBS0osT0FGQW1CLEdBQVFvc0QsR0FBaUJFLEVBQU9GLEdBQWlCRSxFQUFPaDNDLE9BQU84MkMsR0FBZTV5RCxNQUFNNnlELElBRTdFdGpCLENBQUcsRUF3SFZ3akIsWUFwTWtCckYsR0FDWEEsRUFBSXh0RCxjQUFjZSxRQUFRLHlCQUMvQixTQUFrQnlOLEVBQUdza0QsRUFBSUMsR0FDdkIsT0FBT0QsRUFBRzN5RCxjQUFnQjR5RCxDQUM1QixJQWlNRkMsS0F0SFdBLE9BdUhYQyxlQXJIcUJBLENBQUM5dEQsRUFBT00sSUFDYixNQUFUTixHQUFpQit0RCxPQUFPQyxTQUFTaHVELEdBQVNBLEdBQVNBLEVBQVFNLEVBcUhsRW1wRCxXQUNBSyxPQUFRSCxHQUNSSSxvQkFDQWdCLFlBQ0FrRCxlQTVHcUJBLENBQUNsMEIsRUFBTyxHQUFJbTBCLEVBQVduRCxHQUFTQyxlQUNyRCxJQUFJM0MsRUFBTSxHQUNWLE1BQU0sT0FBQzV2RCxHQUFVeTFELEVBQ2pCLEtBQU9uMEIsS0FDTHN1QixHQUFPNkYsRUFBUzloRCxLQUFLMFUsU0FBV3JvQixFQUFPLEdBR3pDLE9BQU80dkQsQ0FBRyxFQXNHVjhGLG9CQTVGRixTQUE2Qi9GLEdBQzNCLFNBQVVBLEdBQVNPLEdBQVdQLEVBQU0vUixTQUF5QyxhQUE5QitSLEVBQU1uc0QsT0FBT3l1QyxjQUErQjBkLEVBQU1uc0QsT0FBT2UsVUFDMUcsRUEyRkVveEQsYUF6Rm9CbGtCLElBQ3BCLE1BQU0zc0MsRUFBUSxJQUFJMkQsTUFBTSxJQUVsQm10RCxFQUFRQSxDQUFDam5ELEVBQVFvbUMsS0FFckIsR0FBSXFiLEdBQVN6aEQsR0FBUyxDQUNwQixHQUFJN0osRUFBTTBJLFFBQVFtQixJQUFXLEVBQzNCLE9BR0YsS0FBSyxXQUFZQSxHQUFTLENBQ3hCN0osRUFBTWl3QyxHQUFLcG1DLEVBQ1gsTUFBTVEsRUFBU3pHLEdBQVFpRyxHQUFVLEdBQUssQ0FBQyxFQVN2QyxPQVBBeE0sR0FBUXdNLEdBQVEsQ0FBQ3BILEVBQU93VyxLQUN0QixNQUFNODNDLEVBQWVELEVBQU1ydUQsRUFBT3d0QyxFQUFJLElBQ3JDZ2IsR0FBWThGLEtBQWtCMW1ELEVBQU80TyxHQUFPODNDLEVBQWEsSUFHNUQvd0QsRUFBTWl3QyxRQUFLekQsRUFFSm5pQyxDQUNULENBQ0YsQ0FFQSxPQUFPUixDQUFNLEVBR2YsT0FBT2luRCxFQUFNbmtCLEVBQUssRUFBRSxFQThEcEIrZ0IsYUFDQXNELFdBMURrQm5HLEdBQ2xCQSxJQUFVUyxHQUFTVCxJQUFVTyxHQUFXUCxLQUFXTyxHQUFXUCxFQUFNM2tDLE9BQVNrbEMsR0FBV1AsRUFBTTFrQyxRQzlvQmhHLFNBQVM4cUMsR0FBVzU1QixFQUFTamUsRUFBTTgzQyxFQUFRdlQsRUFBU0QsR0FDbEQzOUMsTUFBTWhDLEtBQUtyQixNQUVQcUQsTUFBTW94RCxrQkFDUnB4RCxNQUFNb3hELGtCQUFrQnowRCxLQUFNQSxLQUFLcUYsYUFFbkNyRixLQUFLc0QsT0FBUyxJQUFJRCxPQUFTQyxNQUc3QnRELEtBQUsyNkIsUUFBVUEsRUFDZjM2QixLQUFLcUUsS0FBTyxhQUNacVksSUFBUzFjLEtBQUswYyxLQUFPQSxHQUNyQjgzQyxJQUFXeDBELEtBQUt3MEQsT0FBU0EsR0FDekJ2VCxJQUFZamhELEtBQUtpaEQsUUFBVUEsR0FDM0JELElBQWFoaEQsS0FBS2doRCxTQUFXQSxFQUMvQixDQUVBMFQsR0FBTXhDLFNBQVNxQyxHQUFZbHhELE1BQU8sQ0FDaENzeEQsT0FBUSxXQUNOLE1BQU8sQ0FFTGg2QixRQUFTMzZCLEtBQUsyNkIsUUFDZHQyQixLQUFNckUsS0FBS3FFLEtBRVh1d0QsWUFBYTUwRCxLQUFLNDBELFlBQ2xCbjFDLE9BQVF6ZixLQUFLeWYsT0FFYm8xQyxTQUFVNzBELEtBQUs2MEQsU0FDZkMsV0FBWTkwRCxLQUFLODBELFdBQ2pCQyxhQUFjLzBELEtBQUsrMEQsYUFDbkJ6eEQsTUFBT3RELEtBQUtzRCxNQUVaa3hELE9BQVFFLEdBQU1QLGFBQWFuMEQsS0FBS3cwRCxRQUNoQzkzQyxLQUFNMWMsS0FBSzBjLEtBQ1hxOEIsT0FBUS80QyxLQUFLZ2hELFVBQVloaEQsS0FBS2doRCxTQUFTakksT0FBUy80QyxLQUFLZ2hELFNBQVNqSSxPQUFTLEtBRTNFLElBR0YsTUFBTXo1QyxHQUFZaTFELEdBQVdqMUQsVUFDdkJneEQsR0FBYyxDQUFDLEVBRXJCLENBQ0UsdUJBQ0EsaUJBQ0EsZUFDQSxZQUNBLGNBQ0EsNEJBQ0EsaUJBQ0EsbUJBQ0Esa0JBQ0EsZUFDQSxrQkFDQSxtQkFFQTN2RCxTQUFRK2IsSUFDUjR6QyxHQUFZNXpDLEdBQVEsQ0FBQzNXLE1BQU8yVyxFQUFLLElBR25DcmQsT0FBT3N4RCxpQkFBaUI0RCxHQUFZakUsSUFDcENqeEQsT0FBT3VFLGVBQWV0RSxHQUFXLGVBQWdCLENBQUN5RyxPQUFPLElBR3pEd3VELEdBQVd0YyxLQUFPLENBQUNqZCxFQUFPdGUsRUFBTTgzQyxFQUFRdlQsRUFBU0QsRUFBVWdVLEtBQ3pELE1BQU1DLEVBQWE1MUQsT0FBT2szQixPQUFPajNCLElBZ0JqQyxPQWRBbzFELEdBQU10QyxhQUFhcDNCLEVBQU9pNkIsR0FBWSxTQUFnQmhsQixHQUNwRCxPQUFPQSxJQUFRNXNDLE1BQU0vRCxTQUN2QixJQUFHa3hDLEdBQ2UsaUJBQVRBLElBR1QrakIsR0FBV2x6RCxLQUFLNHpELEVBQVlqNkIsRUFBTUwsUUFBU2plLEVBQU04M0MsRUFBUXZULEVBQVNELEdBRWxFaVUsRUFBV0MsTUFBUWw2QixFQUVuQmk2QixFQUFXNXdELEtBQU8yMkIsRUFBTTMyQixLQUV4QjJ3RCxHQUFlMzFELE9BQU84RCxPQUFPOHhELEVBQVlELEdBRWxDQyxDQUFVLEVBR25CLFlDckZBLFNBQVNFLEdBQVloSCxHQUNuQixPQUFPdUcsR0FBTTdGLGNBQWNWLElBQVV1RyxHQUFNeHRELFFBQVFpbkQsRUFDckQsQ0FTQSxTQUFTaUgsR0FBZTc0QyxHQUN0QixPQUFPbTRDLEdBQU01ZixTQUFTdjRCLEVBQUssTUFBUUEsRUFBSXRiLE1BQU0sR0FBSSxHQUFLc2IsQ0FDeEQsQ0FXQSxTQUFTODRDLEdBQVV6akIsRUFBTXIxQixFQUFLKzRDLEdBQzVCLE9BQUsxakIsRUFDRUEsRUFBSzFyQixPQUFPM0osR0FBSyt2QixLQUFJLFNBQWNpcEIsRUFBT2hpQixHQUcvQyxPQURBZ2lCLEVBQVFILEdBQWVHLElBQ2ZELEdBQVEvaEIsRUFBSSxJQUFNZ2lCLEVBQVEsSUFBTUEsQ0FDMUMsSUFBRzltQyxLQUFLNm1DLEVBQU8sSUFBTSxJQUxILzRDLENBTXBCLENBYUEsTUFBTWk1QyxHQUFhZCxHQUFNdEMsYUFBYXNDLEdBQU8sQ0FBQyxFQUFHLE1BQU0sU0FBZ0Jsa0IsR0FDckUsTUFBTyxXQUFXbHZDLEtBQUtrdkMsRUFDekIsSUE4SkEsR0FySUEsU0FBb0JQLEVBQUs0SixFQUFVenlDLEdBQ2pDLElBQUtzdEQsR0FBTTlGLFNBQVMzZSxHQUNsQixNQUFNLElBQUl3bEIsVUFBVSw0QkFJdEI1YixFQUFXQSxHQUFZLElBQXlCOEIsU0FZaEQsTUFBTStaLEdBVE50dUQsRUFBVXN0RCxHQUFNdEMsYUFBYWhyRCxFQUFTLENBQ3BDc3VELFlBQVksRUFDWkosTUFBTSxFQUNOSyxTQUFTLElBQ1IsR0FBTyxTQUFpQkMsRUFBUXpvRCxHQUVqQyxPQUFRdW5ELEdBQU1uRyxZQUFZcGhELEVBQU95b0QsR0FDbkMsS0FFMkJGLFdBRXJCRyxFQUFVenVELEVBQVF5dUQsU0FBV0MsRUFDN0JSLEVBQU9sdUQsRUFBUWt1RCxLQUNmSyxFQUFVdnVELEVBQVF1dUQsUUFFbEJJLEdBRFEzdUQsRUFBUTR1RCxNQUF3QixvQkFBVEEsTUFBd0JBLE9BQ3BDdEIsR0FBTVIsb0JBQW9CcmEsR0FFbkQsSUFBSzZhLEdBQU1oRyxXQUFXbUgsR0FDcEIsTUFBTSxJQUFJSixVQUFVLDhCQUd0QixTQUFTUSxFQUFhbHdELEdBQ3BCLEdBQWMsT0FBVkEsRUFBZ0IsTUFBTyxHQUUzQixHQUFJMnVELEdBQU01RixPQUFPL29ELEdBQ2YsT0FBT0EsRUFBTW13RCxjQUdmLElBQUtILEdBQVdyQixHQUFNMUYsT0FBT2pwRCxHQUMzQixNQUFNLElBQUl3dUQsR0FBVyxnREFHdkIsT0FBSUcsR0FBTWxHLGNBQWN6b0QsSUFBVTJ1RCxHQUFNM0UsYUFBYWhxRCxHQUM1Q2d3RCxHQUEyQixtQkFBVEMsS0FBc0IsSUFBSUEsS0FBSyxDQUFDandELElBQVVvd0QsT0FBT2xlLEtBQUtseUMsR0FHMUVBLENBQ1QsQ0FZQSxTQUFTK3ZELEVBQWUvdkQsRUFBT3dXLEVBQUtxMUIsR0FDbEMsSUFBSWdoQixFQUFNN3NELEVBRVYsR0FBSUEsSUFBVTZyQyxHQUF5QixpQkFBVjdyQyxFQUMzQixHQUFJMnVELEdBQU01ZixTQUFTdjRCLEVBQUssTUFFdEJBLEVBQU1tNUMsRUFBYW41QyxFQUFNQSxFQUFJdGIsTUFBTSxHQUFJLEdBRXZDOEUsRUFBUXlpQyxLQUFLQyxVQUFVMWlDLFFBQ2xCLEdBQ0oydUQsR0FBTXh0RCxRQUFRbkIsSUFuR3ZCLFNBQXFCNnNELEdBQ25CLE9BQU84QixHQUFNeHRELFFBQVEwckQsS0FBU0EsRUFBSWhkLEtBQUt1ZixHQUN6QyxDQWlHaUNpQixDQUFZcndELEtBQ25DMnVELEdBQU16RixXQUFXbHBELElBQVUydUQsR0FBTTVmLFNBQVN2NEIsRUFBSyxTQUFXcTJDLEVBQU04QixHQUFNbG9CLFFBQVF6bUMsSUFZaEYsT0FUQXdXLEVBQU02NEMsR0FBZTc0QyxHQUVyQnEyQyxFQUFJanlELFNBQVEsU0FBY3dtQyxFQUFJdlksSUFDMUI4bEMsR0FBTW5HLFlBQVlwbkIsSUFBYyxPQUFQQSxHQUFnQjBTLEVBQVN1QyxRQUV0QyxJQUFadVosRUFBbUJOLEdBQVUsQ0FBQzk0QyxHQUFNcVMsRUFBTzBtQyxHQUFxQixPQUFaSyxFQUFtQnA1QyxFQUFNQSxFQUFNLEtBQ25GMDVDLEVBQWE5dUIsR0FFakIsS0FDTyxFQUlYLFFBQUlndUIsR0FBWXB2RCxLQUloQjh6QyxFQUFTdUMsT0FBT2laLEdBQVV6akIsRUFBTXIxQixFQUFLKzRDLEdBQU9XLEVBQWFsd0QsS0FFbEQsRUFDVCxDQUVBLE1BQU16QyxFQUFRLEdBRVIreUQsRUFBaUJoM0QsT0FBTzhELE9BQU9xeUQsR0FBWSxDQUMvQ00saUJBQ0FHLGVBQ0FkLGlCQXlCRixJQUFLVCxHQUFNOUYsU0FBUzNlLEdBQ2xCLE1BQU0sSUFBSXdsQixVQUFVLDBCQUt0QixPQTVCQSxTQUFTYSxFQUFNdndELEVBQU82ckMsR0FDcEIsSUFBSThpQixHQUFNbkcsWUFBWXhvRCxHQUF0QixDQUVBLElBQThCLElBQTFCekMsRUFBTTBJLFFBQVFqRyxHQUNoQixNQUFNMUMsTUFBTSxrQ0FBb0N1dUMsRUFBS25qQixLQUFLLE1BRzVEbnJCLEVBQU1pTCxLQUFLeEksR0FFWDJ1RCxHQUFNL3pELFFBQVFvRixHQUFPLFNBQWNvaEMsRUFBSTVxQixJQUt0QixPQUpFbTRDLEdBQU1uRyxZQUFZcG5CLElBQWMsT0FBUEEsSUFBZ0IwdUIsRUFBUXgwRCxLQUNoRXc0QyxFQUFVMVMsRUFBSXV0QixHQUFNakcsU0FBU2x5QyxHQUFPQSxFQUFJaFosT0FBU2daLEVBQUtxMUIsRUFBTXlrQixLQUk1REMsRUFBTW52QixFQUFJeUssRUFBT0EsRUFBSzFyQixPQUFPM0osR0FBTyxDQUFDQSxHQUV6QyxJQUVBalosRUFBTTJxQyxLQWxCOEIsQ0FtQnRDLENBTUFxb0IsQ0FBTXJtQixHQUVDNEosQ0FDVCxFQzVNQSxTQUFTMGMsR0FBT25JLEdBQ2QsTUFBTW9JLEVBQVUsQ0FDZCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLE1BQU8sSUFDUCxNQUFPLE1BRVQsT0FBTy8zRCxtQkFBbUIydkQsR0FBS3pzRCxRQUFRLG9CQUFvQixTQUFrQjZCLEdBQzNFLE9BQU9nekQsRUFBUWh6RCxFQUNqQixHQUNGLENBVUEsU0FBU2l6RCxHQUFxQnBnQixFQUFRanZDLEdBQ3BDcEgsS0FBSzAyRCxPQUFTLEdBRWRyZ0IsR0FBVXNnQixHQUFXdGdCLEVBQVFyMkMsS0FBTW9ILEVBQ3JDLENBRUEsTUFBTTlILEdBQVltM0QsR0FBcUJuM0QsVUFFdkNBLEdBQVU4OEMsT0FBUyxTQUFnQi8zQyxFQUFNMEIsR0FDdkMvRixLQUFLMDJELE9BQU9ub0QsS0FBSyxDQUFDbEssRUFBTTBCLEdBQzFCLEVBRUF6RyxHQUFVZ0osU0FBVyxTQUFrQnN1RCxHQUNyQyxNQUFNQyxFQUFVRCxFQUFVLFNBQVM3d0QsR0FDakMsT0FBTzZ3RCxFQUFRdjFELEtBQUtyQixLQUFNK0YsRUFBT3d3RCxHQUNuQyxFQUFJQSxHQUVKLE9BQU92MkQsS0FBSzAyRCxPQUFPcHFCLEtBQUksU0FBY3dtQixHQUNuQyxPQUFPK0QsRUFBUS9ELEVBQUssSUFBTSxJQUFNK0QsRUFBUS9ELEVBQUssR0FDL0MsR0FBRyxJQUFJcmtDLEtBQUssSUFDZCxFQUVBLFlDNUNBLFNBQVM4bkMsR0FBT25XLEdBQ2QsT0FBTzNoRCxtQkFBbUIyaEQsR0FDeEJ6K0MsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxJQUNyQixDQVdlLFNBQVNtMUQsR0FBUzkyQyxFQUFLcTJCLEVBQVFqdkMsR0FFNUMsSUFBS2l2QyxFQUNILE9BQU9yMkIsRUFHVCxNQUFNNjJDLEVBQVV6dkQsR0FBV0EsRUFBUW12RCxRQUFVQSxHQUV2Q1EsRUFBYzN2RCxHQUFXQSxFQUFRNHZELFVBRXZDLElBQUlDLEVBVUosR0FQRUEsRUFERUYsRUFDaUJBLEVBQVkxZ0IsRUFBUWp2QyxHQUVwQnN0RCxHQUFNeEYsa0JBQWtCN1ksR0FDekNBLEVBQU8vdEMsV0FDUCxJQUFJbXVELEdBQXFCcGdCLEVBQVFqdkMsR0FBU2tCLFNBQVN1dUQsR0FHbkRJLEVBQWtCLENBQ3BCLE1BQU1DLEVBQWdCbDNDLEVBQUloVSxRQUFRLE1BRVgsSUFBbkJrckQsSUFDRmwzQyxFQUFNQSxFQUFJL2UsTUFBTSxFQUFHaTJELElBRXJCbDNDLEtBQThCLElBQXRCQSxFQUFJaFUsUUFBUSxLQUFjLElBQU0sS0FBT2lyRCxDQUNqRCxDQUVBLE9BQU9qM0MsQ0FDVCxDQ1FBLFNBbEVBLE1BQ0UzYSxXQUFBQSxHQUNFckYsS0FBS20zRCxTQUFXLEVBQ2xCLENBVUFDLEdBQUFBLENBQUlDLEVBQVdDLEVBQVVsd0QsR0FPdkIsT0FOQXBILEtBQUttM0QsU0FBUzVvRCxLQUFLLENBQ2pCOG9ELFlBQ0FDLFdBQ0FDLGNBQWFud0QsR0FBVUEsRUFBUW13RCxZQUMvQkMsUUFBU3B3RCxFQUFVQSxFQUFRb3dELFFBQVUsT0FFaEN4M0QsS0FBS20zRCxTQUFTMzRELE9BQVMsQ0FDaEMsQ0FTQWk1RCxLQUFBQSxDQUFNamhELEdBQ0F4VyxLQUFLbTNELFNBQVMzZ0QsS0FDaEJ4VyxLQUFLbTNELFNBQVMzZ0QsR0FBTSxLQUV4QixDQU9Ba2hELEtBQUFBLEdBQ00xM0QsS0FBS20zRCxXQUNQbjNELEtBQUttM0QsU0FBVyxHQUVwQixDQVlBeDJELE9BQUFBLENBQVFxdEQsR0FDTjBHLEdBQU0vekQsUUFBUVgsS0FBS20zRCxVQUFVLFNBQXdCbHpELEdBQ3pDLE9BQU5BLEdBQ0YrcEQsRUFBRy9wRCxFQUVQLEdBQ0YsR0NqRUYsSUFDRTB6RCxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQkMscUJBQXFCLEdDRHZCLElBQ0VDLFdBQVcsRUFDWEMsUUFBUyxDQUNQbmMsZ0JDSnNDLG9CQUFwQkEsZ0JBQWtDQSxnQkFBa0I2YSxHREt0RTlhLFNFTitCLG9CQUFiQSxTQUEyQkEsU0FBVyxLRk94RHFhLEtHUDJCLG9CQUFUQSxLQUF1QkEsS0FBTyxNSFNsRGdDLFVBQVcsQ0FBQyxPQUFRLFFBQVMsT0FBUSxPQUFRLE1BQU8sU0lYaERDLEdBQWtDLG9CQUFYaDVELFFBQThDLG9CQUFiQyxTQW1CeERnNUQsSUFDSEMsR0FFdUIsb0JBQWQzcEIsV0FBNkJBLFVBQVUycEIsUUFEeENGLElBQWlCLENBQUMsY0FBZSxlQUFnQixNQUFNanNELFFBQVFtc0QsSUFBVyxHQUZ2RCxJQUMzQkEsR0FhSCxNQUFNQyxHQUUyQixvQkFBdEJDLG1CQUVQekksZ0JBQWdCeUksbUJBQ2MsbUJBQXZCekksS0FBSzBJLGNBSVY3VyxHQUFTd1csSUFBaUJoNUQsT0FBTzBkLFNBQVM2RixNQUFRLG1CQ3ZDeEQsT0FDS2t5QyxLQUNBNkQsSUN5RkwsR0E5Q0EsU0FBd0IxZSxHQUN0QixTQUFTMmUsRUFBVTVtQixFQUFNN3JDLEVBQU80SCxFQUFRaWhCLEdBQ3RDLElBQUl2cUIsRUFBT3V0QyxFQUFLaGpCLEtBRWhCLEdBQWEsY0FBVHZxQixFQUFzQixPQUFPLEVBRWpDLE1BQU1vMEQsRUFBZTNFLE9BQU9DLFVBQVUxdkQsR0FDaENxMEQsRUFBUzlwQyxHQUFTZ2pCLEVBQUtwekMsT0FHN0IsT0FGQTZGLEdBQVFBLEdBQVFxd0QsR0FBTXh0RCxRQUFReUcsR0FBVUEsRUFBT25QLE9BQVM2RixFQUVwRHEwRCxHQUNFaEUsR0FBTXhCLFdBQVd2bEQsRUFBUXRKLEdBQzNCc0osRUFBT3RKLEdBQVEsQ0FBQ3NKLEVBQU90SixHQUFPMEIsR0FFOUI0SCxFQUFPdEosR0FBUTBCLEdBR1QweUQsSUFHTDlxRCxFQUFPdEosSUFBVXF3RCxHQUFNOUYsU0FBU2poRCxFQUFPdEosTUFDMUNzSixFQUFPdEosR0FBUSxJQUdGbTBELEVBQVU1bUIsRUFBTTdyQyxFQUFPNEgsRUFBT3RKLEdBQU91cUIsSUFFdEM4bEMsR0FBTXh0RCxRQUFReUcsRUFBT3RKLE1BQ2pDc0osRUFBT3RKLEdBL0NiLFNBQXVCdXVELEdBQ3JCLE1BQU0zaUIsRUFBTSxDQUFDLEVBQ1AvakMsRUFBTzdNLE9BQU82TSxLQUFLMG1ELEdBQ3pCLElBQUlyZixFQUNKLE1BQU1nYyxFQUFNcmpELEVBQUsxTixPQUNqQixJQUFJK2QsRUFDSixJQUFLZzNCLEVBQUksRUFBR0EsRUFBSWdjLEVBQUtoYyxJQUNuQmgzQixFQUFNclEsRUFBS3FuQyxHQUNYdEQsRUFBSTF6QixHQUFPcTJDLEVBQUlyMkMsR0FFakIsT0FBTzB6QixDQUNULENBb0NxQjBvQixDQUFjaHJELEVBQU90SixNQUc5Qm8wRCxFQUNWLENBRUEsR0FBSS9ELEdBQU14RCxXQUFXclgsSUFBYTZhLEdBQU1oRyxXQUFXN1UsRUFBU2dDLFNBQVUsQ0FDcEUsTUFBTTVMLEVBQU0sQ0FBQyxFQU1iLE9BSkF5a0IsR0FBTTdCLGFBQWFoWixHQUFVLENBQUN4MUMsRUFBTTBCLEtBQ2xDeXlELEVBMUVOLFNBQXVCbjBELEdBS3JCLE9BQU9xd0QsR0FBTTNCLFNBQVMsZ0JBQWlCMXVELEdBQU1pb0MsS0FBSTlvQyxHQUMzQixPQUFiQSxFQUFNLEdBQWMsR0FBS0EsRUFBTSxJQUFNQSxFQUFNLElBRXRELENBa0VnQm8xRCxDQUFjdjBELEdBQU8wQixFQUFPa3FDLEVBQUssRUFBRSxJQUd4Q0EsQ0FDVCxDQUVBLE9BQU8sSUFDVCxFQ3pETTRvQixHQUFXLENBRWZDLGFBQWNDLEdBRWRDLFFBQVMsQ0FBQyxNQUFPLE9BQVEsU0FFekJDLGlCQUFrQixDQUFDLFNBQTBCaCtDLEVBQU1pbUMsR0FDakQsTUFBTWdZLEVBQWNoWSxFQUFRaVksa0JBQW9CLEdBQzFDQyxFQUFxQkYsRUFBWWx0RCxRQUFRLHFCQUF1QixFQUNoRXF0RCxFQUFrQjNFLEdBQU05RixTQUFTM3pDLEdBUXZDLEdBTklvK0MsR0FBbUIzRSxHQUFNeEUsV0FBV2oxQyxLQUN0Q0EsRUFBTyxJQUFJMGdDLFNBQVMxZ0MsSUFHSHk1QyxHQUFNeEQsV0FBV2oyQyxHQUdsQyxPQUFPbStDLEVBQXFCNXdCLEtBQUtDLFVBQVU2d0IsR0FBZXIrQyxJQUFTQSxFQUdyRSxHQUFJeTVDLEdBQU1sRyxjQUFjdnpDLElBQ3RCeTVDLEdBQU16RCxTQUFTaDJDLElBQ2Z5NUMsR0FBTWpELFNBQVN4MkMsSUFDZnk1QyxHQUFNM0YsT0FBTzl6QyxJQUNieTVDLEdBQU0xRixPQUFPL3pDLElBQ2J5NUMsR0FBTXZGLGlCQUFpQmwwQyxHQUV2QixPQUFPQSxFQUVULEdBQUl5NUMsR0FBTXRELGtCQUFrQm4yQyxHQUMxQixPQUFPQSxFQUFLczJDLE9BRWQsR0FBSW1ELEdBQU14RixrQkFBa0JqMEMsR0FFMUIsT0FEQWltQyxFQUFRcVksZUFBZSxtREFBbUQsR0FDbkV0K0MsRUFBSzNTLFdBR2QsSUFBSTJtRCxFQUVKLEdBQUlvSyxFQUFpQixDQUNuQixHQUFJSCxFQUFZbHRELFFBQVEsc0NBQXdDLEVBQzlELE9DdkVPLFNBQTBCaVAsRUFBTTdULEdBQzdDLE9BQU91dkQsR0FBVzE3QyxFQUFNLElBQUlzOUMsR0FBU1IsUUFBUW5jLGdCQUFtQnY4QyxPQUFPOEQsT0FBTyxDQUM1RTB5RCxRQUFTLFNBQVM5dkQsRUFBT3dXLEVBQUtxMUIsRUFBTTRuQixHQUNsQyxPQUFJakIsR0FBU2tCLFFBQVUvRSxHQUFNekQsU0FBU2xyRCxJQUNwQy9GLEtBQUtvOEMsT0FBTzcvQixFQUFLeFcsRUFBTXVDLFNBQVMsWUFDekIsR0FHRmt4RCxFQUFRMUQsZUFBZTNtRCxNQUFNblAsS0FBTXpCLFVBQzVDLEdBQ0M2SSxHQUNMLENENERlc3lELENBQWlCeitDLEVBQU1qYixLQUFLMjVELGdCQUFnQnJ4RCxXQUdyRCxJQUFLMm1ELEVBQWF5RixHQUFNekYsV0FBV2gwQyxLQUFVaStDLEVBQVlsdEQsUUFBUSx3QkFBMEIsRUFBRyxDQUM1RixNQUFNNHRELEVBQVk1NUQsS0FBSzY1RCxLQUFPNzVELEtBQUs2NUQsSUFBSWxlLFNBRXZDLE9BQU9nYixHQUNMMUgsRUFBYSxDQUFDLFVBQVdoMEMsR0FBUUEsRUFDakMyK0MsR0FBYSxJQUFJQSxFQUNqQjU1RCxLQUFLMjVELGVBRVQsQ0FDRixDQUVBLE9BQUlOLEdBQW1CRCxHQUNyQmxZLEVBQVFxWSxlQUFlLG9CQUFvQixHQXhFakQsU0FBeUJPLEVBQVVDLEVBQVFuRCxHQUN6QyxHQUFJbEMsR0FBTWpHLFNBQVNxTCxHQUNqQixJQUVFLE9BREEsRUFBV3R4QixLQUFLeVQsT0FBTzZkLEdBQ2hCcEYsR0FBTW54RCxLQUFLdTJELEVBQ3BCLENBQUUsTUFBT2o2RCxHQUNQLEdBQWUsZ0JBQVhBLEVBQUV3RSxLQUNKLE1BQU14RSxDQUVWLENBR0YsT0FBTyxFQUFZMm9DLEtBQUtDLFdBQVdxeEIsRUFDckMsQ0E0RGFFLENBQWdCLytDLElBR2xCQSxDQUNULEdBRUFnL0Msa0JBQW1CLENBQUMsU0FBMkJoL0MsR0FDN0MsTUFBTTY5QyxFQUFlOTRELEtBQUs4NEQsY0FBZ0JELEdBQVNDLGFBQzdDbEIsRUFBb0JrQixHQUFnQkEsRUFBYWxCLGtCQUNqRHNDLEVBQXNDLFNBQXRCbDZELEtBQUttNkQsYUFFM0IsR0FBSXpGLEdBQU05USxXQUFXM29DLElBQVN5NUMsR0FBTXZGLGlCQUFpQmwwQyxHQUNuRCxPQUFPQSxFQUdULEdBQUlBLEdBQVF5NUMsR0FBTWpHLFNBQVN4ekMsS0FBVzI4QyxJQUFzQjUzRCxLQUFLbTZELGNBQWlCRCxHQUFnQixDQUNoRyxNQUNNRSxJQURvQnRCLEdBQWdCQSxFQUFhbkIsb0JBQ1B1QyxFQUVoRCxJQUNFLE9BQU8xeEIsS0FBS3lULE1BQU1oaEMsRUFDcEIsQ0FBRSxNQUFPcGIsR0FDUCxHQUFJdTZELEVBQW1CLENBQ3JCLEdBQWUsZ0JBQVh2NkQsRUFBRXdFLEtBQ0osTUFBTWt3RCxHQUFXdGMsS0FBS3A0QyxFQUFHMDBELEdBQVc4RixpQkFBa0JyNkQsS0FBTSxLQUFNQSxLQUFLZ2hELFVBRXpFLE1BQU1uaEQsQ0FDUixDQUNGLENBQ0YsQ0FFQSxPQUFPb2IsQ0FDVCxHQU1BcS9DLFFBQVMsRUFFVEMsZUFBZ0IsYUFDaEJDLGVBQWdCLGVBRWhCQyxrQkFBbUIsRUFDbkJDLGVBQWdCLEVBRWhCYixJQUFLLENBQ0hsZSxTQUFVNGMsR0FBU1IsUUFBUXBjLFNBQzNCcWEsS0FBTXVDLEdBQVNSLFFBQVEvQixNQUd6QjJFLGVBQWdCLFNBQXdCNWhCLEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxHQUNuQyxFQUVBbUksUUFBUyxDQUNQMFosT0FBUSxDQUNOLE9BQVUsb0NBQ1Ysb0JBQWdCOXFCLEtBS3RCNGtCLEdBQU0vekQsUUFBUSxDQUFDLFNBQVUsTUFBTyxPQUFRLE9BQVEsTUFBTyxVQUFXeTZDLElBQ2hFeWQsR0FBUzNYLFFBQVE5RixHQUFVLENBQUMsQ0FBQyxJQUcvQixZRTFKTXlmLEdBQW9CbkcsR0FBTXJCLFlBQVksQ0FDMUMsTUFBTyxnQkFBaUIsaUJBQWtCLGVBQWdCLE9BQzFELFVBQVcsT0FBUSxPQUFRLG9CQUFxQixzQkFDaEQsZ0JBQWlCLFdBQVksZUFBZ0Isc0JBQzdDLFVBQVcsY0FBZSxlQ0x0QnlILEdBQWE5NEQsT0FBTyxhQUUxQixTQUFTKzRELEdBQWdCQyxHQUN2QixPQUFPQSxHQUFVeCtDLE9BQU93K0MsR0FBUXozRCxPQUFPM0MsYUFDekMsQ0FFQSxTQUFTcTZELEdBQWVsMUQsR0FDdEIsT0FBYyxJQUFWQSxHQUE0QixNQUFUQSxFQUNkQSxFQUdGMnVELEdBQU14dEQsUUFBUW5CLEdBQVNBLEVBQU11bUMsSUFBSTJ1QixJQUFrQnorQyxPQUFPelcsRUFDbkUsQ0FnQkEsU0FBU20xRCxHQUFpQnhxQyxFQUFTM3FCLEVBQU9pMUQsRUFBUW5sQixFQUFRc2xCLEdBQ3hELE9BQUl6RyxHQUFNaEcsV0FBVzdZLEdBQ1pBLEVBQU94MEMsS0FBS3JCLEtBQU0rRixFQUFPaTFELElBRzlCRyxJQUNGcDFELEVBQVFpMUQsR0FHTHRHLEdBQU1qRyxTQUFTMW9ELEdBRWhCMnVELEdBQU1qRyxTQUFTNVksSUFDaUIsSUFBM0I5dkMsRUFBTWlHLFFBQVE2cEMsR0FHbkI2ZSxHQUFNdkUsU0FBU3RhLEdBQ1ZBLEVBQU92MEMsS0FBS3lFLFFBRHJCLE9BTkEsRUFTRixDQXNCQSxNQUFNcTFELEdBQ0ovMUQsV0FBQUEsQ0FBWTY3QyxHQUNWQSxHQUFXbGhELEtBQUs2RCxJQUFJcTlDLEVBQ3RCLENBRUFyOUMsR0FBQUEsQ0FBSW0zRCxFQUFRSyxFQUFnQkMsR0FDMUIsTUFBTTFMLEVBQU81dkQsS0FFYixTQUFTdTdELEVBQVVDLEVBQVFDLEVBQVNDLEdBQ2xDLE1BQU1DLEVBQVVaLEdBQWdCVSxHQUVoQyxJQUFLRSxFQUNILE1BQU0sSUFBSXQ0RCxNQUFNLDBDQUdsQixNQUFNa1osRUFBTW00QyxHQUFNbEYsUUFBUUksRUFBTStMLEtBRTVCcC9DLFFBQXFCdXpCLElBQWQ4ZixFQUFLcnpDLEtBQW1DLElBQWJtL0MsUUFBbUM1ckIsSUFBYjRyQixJQUF3QyxJQUFkOUwsRUFBS3J6QyxNQUN6RnF6QyxFQUFLcnpDLEdBQU9rL0MsR0FBV1IsR0FBZU8sR0FFMUMsQ0FFQSxNQUFNSSxFQUFhQSxDQUFDMWEsRUFBU3dhLElBQzNCaEgsR0FBTS96RCxRQUFRdWdELEdBQVMsQ0FBQ3NhLEVBQVFDLElBQVlGLEVBQVVDLEVBQVFDLEVBQVNDLEtBRXpFLEdBQUloSCxHQUFNN0YsY0FBY21NLElBQVdBLGFBQWtCaDdELEtBQUtxRixZQUN4RHUyRCxFQUFXWixFQUFRSyxRQUNkLEdBQUczRyxHQUFNakcsU0FBU3VNLEtBQVlBLEVBQVNBLEVBQU96M0QsVUFyRXRCLGlDQUFpQ2pDLEtBcUVtQjA1RCxFQXJFVnozRCxRQXNFdkVxNEQsRUQxRU4sQ0FBZUMsSUFDYixNQUFNQyxFQUFTLENBQUMsRUFDaEIsSUFBSXYvQyxFQUNBNmpDLEVBQ0E3TSxFQXNCSixPQXBCQXNvQixHQUFjQSxFQUFXbjdELE1BQU0sTUFBTUMsU0FBUSxTQUFnQm83RCxHQUMzRHhvQixFQUFJd29CLEVBQUsvdkQsUUFBUSxLQUNqQnVRLEVBQU13L0MsRUFBSzN2RCxVQUFVLEVBQUdtbkMsR0FBR2h3QyxPQUFPM0MsY0FDbEN3L0MsRUFBTTJiLEVBQUszdkQsVUFBVW1uQyxFQUFJLEdBQUdod0MsUUFFdkJnWixHQUFRdS9DLEVBQU92L0MsSUFBUXMrQyxHQUFrQnQrQyxLQUlsQyxlQUFSQSxFQUNFdS9DLEVBQU92L0MsR0FDVHUvQyxFQUFPdi9DLEdBQUtoTyxLQUFLNnhDLEdBRWpCMGIsRUFBT3YvQyxHQUFPLENBQUM2akMsR0FHakIwYixFQUFPdi9DLEdBQU91L0MsRUFBT3YvQyxHQUFPdS9DLEVBQU92L0MsR0FBTyxLQUFPNmpDLEVBQU1BLEVBRTNELElBRU8wYixDQUNSLEVDK0NnQkUsQ0FBYWhCLEdBQVNLLFFBQzVCLEdBQUkzRyxHQUFNckYsVUFBVTJMLEdBQ3pCLElBQUssTUFBT3orQyxFQUFLeFcsS0FBVWkxRCxFQUFPbmYsVUFDaEMwZixFQUFVeDFELEVBQU93VyxFQUFLKytDLFFBR2QsTUFBVk4sR0FBa0JPLEVBQVVGLEVBQWdCTCxFQUFRTSxHQUd0RCxPQUFPdDdELElBQ1QsQ0FFQXNGLEdBQUFBLENBQUkwMUQsRUFBUWpCLEdBR1YsR0FGQWlCLEVBQVNELEdBQWdCQyxHQUViLENBQ1YsTUFBTXorQyxFQUFNbTRDLEdBQU1sRixRQUFReHZELEtBQU1nN0QsR0FFaEMsR0FBSXorQyxFQUFLLENBQ1AsTUFBTXhXLEVBQVEvRixLQUFLdWMsR0FFbkIsSUFBS3c5QyxFQUNILE9BQU9oMEQsRUFHVCxJQUFlLElBQVhnMEQsRUFDRixPQTVHVixTQUFxQjNMLEdBQ25CLE1BQU02TixFQUFTNThELE9BQU9rM0IsT0FBTyxNQUN2QjJsQyxFQUFXLG1DQUNqQixJQUFJMTRELEVBRUosS0FBUUEsRUFBUTA0RCxFQUFTakosS0FBSzdFLElBQzVCNk4sRUFBT3o0RCxFQUFNLElBQU1BLEVBQU0sR0FHM0IsT0FBT3k0RCxDQUNULENBa0dpQkUsQ0FBWXAyRCxHQUdyQixHQUFJMnVELEdBQU1oRyxXQUFXcUwsR0FDbkIsT0FBT0EsRUFBTzE0RCxLQUFLckIsS0FBTStGLEVBQU93VyxHQUdsQyxHQUFJbTRDLEdBQU12RSxTQUFTNEosR0FDakIsT0FBT0EsRUFBTzlHLEtBQUtsdEQsR0FHckIsTUFBTSxJQUFJMHZELFVBQVUseUNBQ3RCLENBQ0YsQ0FDRixDQUVBaHZDLEdBQUFBLENBQUl1MEMsRUFBUXZrQixHQUdWLEdBRkF1a0IsRUFBU0QsR0FBZ0JDLEdBRWIsQ0FDVixNQUFNeitDLEVBQU1tNEMsR0FBTWxGLFFBQVF4dkQsS0FBTWc3RCxHQUVoQyxTQUFVeitDLFFBQXFCdXpCLElBQWQ5dkMsS0FBS3VjLElBQXdCazZCLElBQVd5a0IsR0FBaUJsN0QsRUFBTUEsS0FBS3VjLEdBQU1BLEVBQUtrNkIsR0FDbEcsQ0FFQSxPQUFPLENBQ1QsQ0FFQTloQyxPQUFPcW1ELEVBQVF2a0IsR0FDYixNQUFNbVosRUFBTzV2RCxLQUNiLElBQUlvOEQsR0FBVSxFQUVkLFNBQVNDLEVBQWFaLEdBR3BCLEdBRkFBLEVBQVVWLEdBQWdCVSxHQUViLENBQ1gsTUFBTWwvQyxFQUFNbTRDLEdBQU1sRixRQUFRSSxFQUFNNkwsSUFFNUJsL0MsR0FBU2s2QixJQUFXeWtCLEdBQWlCdEwsRUFBTUEsRUFBS3J6QyxHQUFNQSxFQUFLazZCLFlBQ3REbVosRUFBS3J6QyxHQUVaNi9DLEdBQVUsRUFFZCxDQUNGLENBUUEsT0FOSTFILEdBQU14dEQsUUFBUTh6RCxHQUNoQkEsRUFBT3I2RCxRQUFRMDdELEdBRWZBLEVBQWFyQixHQUdSb0IsQ0FDVCxDQUVBMUUsS0FBQUEsQ0FBTWpoQixHQUNKLE1BQU12cUMsRUFBTzdNLE9BQU82TSxLQUFLbE0sTUFDekIsSUFBSXV6QyxFQUFJcm5DLEVBQUsxTixPQUNUNDlELEdBQVUsRUFFZCxLQUFPN29CLEtBQUssQ0FDVixNQUFNaDNCLEVBQU1yUSxFQUFLcW5DLEdBQ2JrRCxJQUFXeWtCLEdBQWlCbDdELEVBQU1BLEtBQUt1YyxHQUFNQSxFQUFLazZCLEdBQVMsWUFDdER6MkMsS0FBS3VjLEdBQ1o2L0MsR0FBVSxFQUVkLENBRUEsT0FBT0EsQ0FDVCxDQUVBRSxTQUFBQSxDQUFVQyxHQUNSLE1BQU0zTSxFQUFPNXZELEtBQ1BraEQsRUFBVSxDQUFDLEVBc0JqQixPQXBCQXdULEdBQU0vekQsUUFBUVgsTUFBTSxDQUFDK0YsRUFBT2kxRCxLQUMxQixNQUFNeitDLEVBQU1tNEMsR0FBTWxGLFFBQVF0TyxFQUFTOFosR0FFbkMsR0FBSXorQyxFQUdGLE9BRkFxekMsRUFBS3J6QyxHQUFPMCtDLEdBQWVsMUQsZUFDcEI2cEQsRUFBS29MLEdBSWQsTUFBTXdCLEVBQWFELEVBOUp6QixTQUFzQnZCLEdBQ3BCLE9BQU9BLEVBQU96M0QsT0FDWDNDLGNBQWNlLFFBQVEsbUJBQW1CLENBQUM0bEIsRUFBR1ksRUFBTWltQyxJQUMzQ2ptQyxFQUFLcG5CLGNBQWdCcXRELEdBRWxDLENBeUprQ3FPLENBQWF6QixHQUFVeCtDLE9BQU93K0MsR0FBUXozRCxPQUU5RGk1RCxJQUFleEIsVUFDVnBMLEVBQUtvTCxHQUdkcEwsRUFBSzRNLEdBQWN2QixHQUFlbDFELEdBRWxDbTdDLEVBQVFzYixJQUFjLENBQUksSUFHckJ4OEQsSUFDVCxDQUVBa21CLE1BQUFBLElBQVV3MkMsR0FDUixPQUFPMThELEtBQUtxRixZQUFZNmdCLE9BQU9sbUIsUUFBUzA4RCxFQUMxQyxDQUVBL0gsTUFBQUEsQ0FBT2dJLEdBQ0wsTUFBTTFzQixFQUFNNXdDLE9BQU9rM0IsT0FBTyxNQU0xQixPQUpBbStCLEdBQU0vekQsUUFBUVgsTUFBTSxDQUFDK0YsRUFBT2kxRCxLQUNqQixNQUFUajFELElBQTJCLElBQVZBLElBQW9Ca3FDLEVBQUkrcUIsR0FBVTJCLEdBQWFqSSxHQUFNeHRELFFBQVFuQixHQUFTQSxFQUFNMG9CLEtBQUssTUFBUTFvQixFQUFNLElBRzNHa3FDLENBQ1QsQ0FFQSxDQUFDanVDLE9BQU9lLFlBQ04sT0FBTzFELE9BQU93OEMsUUFBUTc3QyxLQUFLMjBELFVBQVUzeUQsT0FBT2UsV0FDOUMsQ0FFQXVGLFFBQUFBLEdBQ0UsT0FBT2pKLE9BQU93OEMsUUFBUTc3QyxLQUFLMjBELFVBQVVyb0IsS0FBSSxFQUFFMHVCLEVBQVFqMUQsS0FBV2kxRCxFQUFTLEtBQU9qMUQsSUFBTzBvQixLQUFLLEtBQzVGLENBRUEsSUFBS3pzQixPQUFPeXVDLGVBQ1YsTUFBTyxjQUNULENBRUEsV0FBT3dILENBQUtrVyxHQUNWLE9BQU9BLGFBQWlCbnVELEtBQU9tdUQsRUFBUSxJQUFJbnVELEtBQUttdUQsRUFDbEQsQ0FFQSxhQUFPam9DLENBQU95dUIsS0FBVStuQixHQUN0QixNQUFNRSxFQUFXLElBQUk1OEQsS0FBSzIwQyxHQUkxQixPQUZBK25CLEVBQVEvN0QsU0FBU2dOLEdBQVdpdkQsRUFBUy80RCxJQUFJOEosS0FFbENpdkQsQ0FDVCxDQUVBLGVBQU9DLENBQVM3QixHQUNkLE1BSU04QixHQUpZOThELEtBQUs4NkQsSUFBZTk2RCxLQUFLODZELElBQWMsQ0FDdkRnQyxVQUFXLENBQUMsSUFHY0EsVUFDdEJ4OUQsRUFBWVUsS0FBS1YsVUFFdkIsU0FBU3k5RCxFQUFldEIsR0FDdEIsTUFBTUUsRUFBVVosR0FBZ0JVLEdBRTNCcUIsRUFBVW5CLEtBdE5yQixTQUF3QjFyQixFQUFLK3FCLEdBQzNCLE1BQU1nQyxFQUFldEksR0FBTWpCLFlBQVksSUFBTXVILEdBRTdDLENBQUMsTUFBTyxNQUFPLE9BQU9yNkQsU0FBUXM4RCxJQUM1QjU5RCxPQUFPdUUsZUFBZXFzQyxFQUFLZ3RCLEVBQWFELEVBQWMsQ0FDcERqM0QsTUFBTyxTQUFTbTNELEVBQU1DLEVBQU1DLEdBQzFCLE9BQU9wOUQsS0FBS2k5RCxHQUFZNTdELEtBQUtyQixLQUFNZzdELEVBQVFrQyxFQUFNQyxFQUFNQyxFQUN6RCxFQUNBNzNELGNBQWMsR0FDZCxHQUVOLENBNE1RODNELENBQWUvOUQsRUFBV204RCxHQUMxQnFCLEVBQVVuQixJQUFXLEVBRXpCLENBSUEsT0FGQWpILEdBQU14dEQsUUFBUTh6RCxHQUFVQSxFQUFPcjZELFFBQVFvOEQsR0FBa0JBLEVBQWUvQixHQUVqRWg3RCxJQUNULEVBR0ZvN0QsR0FBYXlCLFNBQVMsQ0FBQyxlQUFnQixpQkFBa0IsU0FBVSxrQkFBbUIsYUFBYyxrQkFHcEduSSxHQUFNdEUsa0JBQWtCZ0wsR0FBYTk3RCxXQUFXLEVBQUV5RyxTQUFRd1csS0FDeEQsSUFBSStnRCxFQUFTL2dELEVBQUksR0FBR3hiLGNBQWdCd2IsRUFBSXRiLE1BQU0sR0FDOUMsTUFBTyxDQUNMcUUsSUFBS0EsSUFBTVMsRUFDWGxDLEdBQUFBLENBQUkwNUQsR0FDRnY5RCxLQUFLczlELEdBQVVDLENBQ2pCLEVBQ0QsSUFHSDdJLEdBQU12QixjQUFjaUksSUFFcEIsWUMvUmUsU0FBU29DLEdBQWNDLEVBQUt6YyxHQUN6QyxNQUFNd1QsRUFBU3gwRCxNQUFRNjRELEdBQ2pCbm9DLEVBQVVzd0IsR0FBWXdULEVBQ3RCdFQsRUFBVWthLEdBQWFuakIsS0FBS3ZuQixFQUFRd3dCLFNBQzFDLElBQUlqbUMsRUFBT3lWLEVBQVF6VixLQVFuQixPQU5BeTVDLEdBQU0vekQsUUFBUTg4RCxHQUFLLFNBQW1CelAsR0FDcEMveUMsRUFBTyt5QyxFQUFHM3NELEtBQUttekQsRUFBUXY1QyxFQUFNaW1DLEVBQVFvYixZQUFhdGIsRUFBV0EsRUFBU2pJLFlBQVNqSixFQUNqRixJQUVBb1IsRUFBUW9iLFlBRURyaEQsQ0FDVCxDQ3pCZSxTQUFTeWlELEdBQVMzM0QsR0FDL0IsU0FBVUEsSUFBU0EsRUFBTTQzRCxXQUMzQixDQ1VBLFNBQVNDLEdBQWNqakMsRUFBUzY1QixFQUFRdlQsR0FFdENzVCxHQUFXbHpELEtBQUtyQixLQUFpQixNQUFYMjZCLEVBQWtCLFdBQWFBLEVBQVM0NUIsR0FBV3NKLGFBQWNySixFQUFRdlQsR0FDL0ZqaEQsS0FBS3FFLEtBQU8sZUFDZCxDQUVBcXdELEdBQU14QyxTQUFTMEwsR0FBZXJKLEdBQVksQ0FDeENvSixZQUFZLElBR2QsWUNYZSxTQUFTRyxHQUFPdjBDLEVBQVNnaUMsRUFBUXZLLEdBQzlDLE1BQU0yWixFQUFpQjNaLEVBQVN3VCxPQUFPbUcsZUFDbEMzWixFQUFTakksUUFBVzRoQixJQUFrQkEsRUFBZTNaLEVBQVNqSSxRQUdqRXdTLEVBQU8sSUFBSWdKLEdBQ1QsbUNBQXFDdlQsRUFBU2pJLE9BQzlDLENBQUN3YixHQUFXd0osZ0JBQWlCeEosR0FBVzhGLGtCQUFrQmxvRCxLQUFLZzlCLE1BQU02UixFQUFTakksT0FBUyxLQUFPLEdBQzlGaUksRUFBU3dULE9BQ1R4VCxFQUFTQyxRQUNURCxJQVBGejNCLEVBQVF5M0IsRUFVWixDQzRCQSxNQ25EQSxJQUFnQjE2QixFQUFVMDNDLEVBQWtCQyxFQUFPLEtBQ2pELElBQUlDLEVBQWdCLEVBQ3BCLE1BQU1DLEVER1IsU0FBcUJDLEVBQWNqN0MsR0FDakNpN0MsRUFBZUEsR0FBZ0IsR0FDL0IsTUFBTUMsRUFBUSxJQUFJcDNELE1BQU1tM0QsR0FDbEJFLEVBQWEsSUFBSXIzRCxNQUFNbTNELEdBQzdCLElBRUlHLEVBRkFDLEVBQU8sRUFDUHQvQixFQUFPLEVBS1gsT0FGQS9iLE9BQWMyc0IsSUFBUjNzQixFQUFvQkEsRUFBTSxJQUV6QixTQUFjczdDLEdBQ25CLE1BQU0vbEQsRUFBTUQsS0FBS0MsTUFFWGdtRCxFQUFZSixFQUFXcC9CLEdBRXhCcS9CLElBQ0hBLEVBQWdCN2xELEdBR2xCMmxELEVBQU1HLEdBQVFDLEVBQ2RILEVBQVdFLEdBQVE5bEQsRUFFbkIsSUFBSTY2QixFQUFJclUsRUFDSnkvQixFQUFhLEVBRWpCLEtBQU9wckIsSUFBTWlyQixHQUNYRyxHQUFjTixFQUFNOXFCLEtBQ3BCQSxHQUFRNnFCLEVBU1YsR0FOQUksR0FBUUEsRUFBTyxHQUFLSixFQUVoQkksSUFBU3QvQixJQUNYQSxHQUFRQSxFQUFPLEdBQUtrL0IsR0FHbEIxbEQsRUFBTTZsRCxFQUFnQnA3QyxFQUN4QixPQUdGLE1BQU15N0MsRUFBU0YsR0FBYWhtRCxFQUFNZ21ELEVBRWxDLE9BQU9FLEVBQVN6c0QsS0FBSzBzRCxNQUFtQixJQUFiRixFQUFvQkMsUUFBVTl1QixDQUMzRCxDQUNGLENDL0N1Qmd2QixDQUFZLEdBQUksS0FFckMsT0NDRixTQUFrQjlRLEVBQUlpUSxHQUNwQixJQUFJYyxFQUFZLEVBQ2hCLE1BQU1DLEVBQVksSUFBT2YsRUFDekIsSUFBSWdCLEVBQVEsS0FDWixPQUFPLFdBQ0wsTUFBTUMsR0FBaUIsSUFBVGwvRCxLQUVSMFksRUFBTUQsS0FBS0MsTUFDakIsR0FBSXdtRCxHQUFTeG1ELEVBQU1xbUQsRUFBWUMsRUFNN0IsT0FMSUMsSUFDRi8xQyxhQUFhKzFDLEdBQ2JBLEVBQVEsTUFFVkYsRUFBWXJtRCxFQUNMczFDLEVBQUc3K0MsTUFBTSxLQUFNNVEsV0FFbkIwZ0UsSUFDSEEsRUFBUWoyQyxZQUFXLEtBQ2pCaTJDLEVBQVEsS0FDUkYsRUFBWXRtRCxLQUFLQyxNQUNWczFDLEVBQUc3K0MsTUFBTSxLQUFNNVEsYUFDckJ5Z0UsR0FBYXRtRCxFQUFNcW1ELElBRTFCLENBQ0YsQ0R6QlNJLEVBQVN0L0QsSUFDZCxNQUFNdS9ELEVBQVN2L0QsRUFBRXUvRCxPQUNYQyxFQUFReC9ELEVBQUV5L0QsaUJBQW1Cei9ELEVBQUV3L0QsV0FBUXZ2QixFQUN2Q3l2QixFQUFnQkgsRUFBU2xCLEVBQ3pCc0IsRUFBT3JCLEVBQWFvQixHQUcxQnJCLEVBQWdCa0IsRUFFaEIsTUFBTW5rRCxFQUFPLENBQ1hta0QsU0FDQUMsUUFDQUksU0FBVUosRUFBU0QsRUFBU0MsT0FBU3Z2QixFQUNyQ3V1QixNQUFPa0IsRUFDUEMsS0FBTUEsUUFBYzF2QixFQUNwQjR2QixVQUFXRixHQUFRSCxHQVZMRCxHQUFVQyxHQVVlQSxFQUFRRCxHQUFVSSxPQUFPMXZCLEVBQ2hFenZCLE1BQU94Z0IsRUFDUHkvRCxpQkFBMkIsTUFBVEQsR0FHcEJwa0QsRUFBSytpRCxFQUFtQixXQUFhLFdBQVksRUFFakQxM0MsRUFBU3JMLEVBQUssR0FDYmdqRCxFQUNKLEVFMUJELEdBQWUxRixHQUFTTCxzQkFJckIsV0FDQyxNQUFNeUgsRUFBTyxrQkFBa0JyK0QsS0FBS2t0QyxVQUFVb3hCLFdBQ3hDQyxFQUFpQjNnRSxTQUFTQyxjQUFjLEtBQzlDLElBQUkyZ0UsRUFRSixTQUFTQyxFQUFXLy9DLEdBQ2xCLElBQUl3QyxFQUFPeEMsRUFXWCxPQVRJMi9DLElBRUZFLEVBQWVwK0QsYUFBYSxPQUFRK2dCLEdBQ3BDQSxFQUFPcTlDLEVBQWVyOUMsTUFHeEJxOUMsRUFBZXArRCxhQUFhLE9BQVErZ0IsR0FHN0IsQ0FDTEEsS0FBTXE5QyxFQUFlcjlDLEtBQ3JCKytCLFNBQVVzZSxFQUFldGUsU0FBV3NlLEVBQWV0ZSxTQUFTNS9DLFFBQVEsS0FBTSxJQUFNLEdBQ2hGcStELEtBQU1ILEVBQWVHLEtBQ3JCcGdELE9BQVFpZ0QsRUFBZWpnRCxPQUFTaWdELEVBQWVqZ0QsT0FBT2plLFFBQVEsTUFBTyxJQUFNLEdBQzNFNHZDLEtBQU1zdUIsRUFBZXR1QixLQUFPc3VCLEVBQWV0dUIsS0FBSzV2QyxRQUFRLEtBQU0sSUFBTSxHQUNwRXMrRCxTQUFVSixFQUFlSSxTQUN6QkMsS0FBTUwsRUFBZUssS0FDckI1dUIsU0FBaUQsTUFBdEN1dUIsRUFBZXZ1QixTQUFTbmxDLE9BQU8sR0FDeEMwekQsRUFBZXZ1QixTQUNmLElBQU11dUIsRUFBZXZ1QixTQUUzQixDQVVBLE9BUkF3dUIsRUFBWUMsRUFBVzlnRSxPQUFPMGQsU0FBUzZGLE1BUWhDLFNBQXlCMjlDLEdBQzlCLE1BQU1yRSxFQUFVcEgsR0FBTWpHLFNBQVMwUixHQUFlSixFQUFXSSxHQUFjQSxFQUN2RSxPQUFRckUsRUFBT3ZhLFdBQWF1ZSxFQUFVdmUsVUFDbEN1YSxFQUFPa0UsT0FBU0YsRUFBVUUsSUFDaEMsQ0FDRixDQWxEQyxHQXNEUSxXQUNMLE9BQU8sQ0FDVCxFQzlESixHQUFlekgsR0FBU0wsc0JBR3RCLENBQ0VrSSxLQUFBQSxDQUFNLzdELEVBQU0wQixFQUFPczZELEVBQVN6dUIsRUFBTTB1QixFQUFRQyxHQUN4QyxNQUFNQyxFQUFTLENBQUNuOEQsRUFBTyxJQUFNNUYsbUJBQW1Cc0gsSUFFaEQydUQsR0FBTS9GLFNBQVMwUixJQUFZRyxFQUFPanlELEtBQUssV0FBYSxJQUFJa0ssS0FBSzRuRCxHQUFTSSxlQUV0RS9MLEdBQU1qRyxTQUFTN2MsSUFBUzR1QixFQUFPanlELEtBQUssUUFBVXFqQyxHQUU5QzhpQixHQUFNakcsU0FBUzZSLElBQVdFLEVBQU9qeUQsS0FBSyxVQUFZK3hELElBRXZDLElBQVhDLEdBQW1CQyxFQUFPanlELEtBQUssVUFFL0JyUCxTQUFTc2hFLE9BQVNBLEVBQU8veEMsS0FBSyxLQUNoQyxFQUVBaXlDLElBQUFBLENBQUtyOEQsR0FDSCxNQUFNYixFQUFRdEUsU0FBU3NoRSxPQUFPaDlELE1BQU0sSUFBSXN6QyxPQUFPLGFBQWV6eUMsRUFBTyxjQUNyRSxPQUFRYixFQUFRMHpDLG1CQUFtQjF6QyxFQUFNLElBQU0sSUFDakQsRUFFQW05RCxNQUFBQSxDQUFPdDhELEdBQ0xyRSxLQUFLb2dFLE1BQU0vN0QsRUFBTSxHQUFJb1UsS0FBS0MsTUFBUSxNQUNwQyxHQU1GLENBQ0UwbkQsS0FBQUEsR0FBUyxFQUNUTSxLQUFJQSxJQUNLLEtBRVRDLE1BQUFBLEdBQVUsR0N4QkMsU0FBU0MsR0FBY0MsRUFBU0MsR0FDN0MsT0FBSUQsSUNIRyw4QkFBOEJ2L0QsS0RHUHcvRCxHRU5qQixTQUFxQkQsRUFBU0UsR0FDM0MsT0FBT0EsRUFDSEYsRUFBUWwvRCxRQUFRLFNBQVUsSUFBTSxJQUFNby9ELEVBQVlwL0QsUUFBUSxPQUFRLElBQ2xFay9ELENBQ04sQ0ZHV0csQ0FBWUgsRUFBU0MsR0FFdkJBLENBQ1QsQ0dmQSxNQUFNRyxHQUFtQjlTLEdBQVVBLGFBQWlCaU4sR0FBZSxJQUFLak4sR0FBVUEsRUFXbkUsU0FBUytTLEdBQVlDLEVBQVNDLEdBRTNDQSxFQUFVQSxHQUFXLENBQUMsRUFDdEIsTUFBTTVNLEVBQVMsQ0FBQyxFQUVoQixTQUFTNk0sRUFBZTF6RCxFQUFRUixFQUFReWtELEdBQ3RDLE9BQUk4QyxHQUFNN0YsY0FBY2xoRCxJQUFXK21ELEdBQU03RixjQUFjMWhELEdBQzlDdW5ELEdBQU0vQyxNQUFNdHdELEtBQUssQ0FBQ3V3RCxZQUFXamtELEVBQVFSLEdBQ25DdW5ELEdBQU03RixjQUFjMWhELEdBQ3RCdW5ELEdBQU0vQyxNQUFNLENBQUMsRUFBR3hrRCxHQUNkdW5ELEdBQU14dEQsUUFBUWlHLEdBQ2hCQSxFQUFPbE0sUUFFVGtNLENBQ1QsQ0FHQSxTQUFTbTBELEVBQW9CbGpFLEVBQUdDLEVBQUd1ekQsR0FDakMsT0FBSzhDLEdBQU1uRyxZQUFZbHdELEdBRVhxMkQsR0FBTW5HLFlBQVlud0QsUUFBdkIsRUFDRWlqRSxPQUFldnhCLEVBQVcxeEMsRUFBR3d6RCxHQUY3QnlQLEVBQWVqakUsRUFBR0MsRUFBR3V6RCxFQUloQyxDQUdBLFNBQVMyUCxFQUFpQm5qRSxFQUFHQyxHQUMzQixJQUFLcTJELEdBQU1uRyxZQUFZbHdELEdBQ3JCLE9BQU9nakUsT0FBZXZ4QixFQUFXenhDLEVBRXJDLENBR0EsU0FBU21qRSxFQUFpQnBqRSxFQUFHQyxHQUMzQixPQUFLcTJELEdBQU1uRyxZQUFZbHdELEdBRVhxMkQsR0FBTW5HLFlBQVlud0QsUUFBdkIsRUFDRWlqRSxPQUFldnhCLEVBQVcxeEMsR0FGMUJpakUsT0FBZXZ4QixFQUFXenhDLEVBSXJDLENBR0EsU0FBU29qRSxFQUFnQnJqRSxFQUFHQyxFQUFHbXlDLEdBQzdCLE9BQUlBLEtBQVE0d0IsRUFDSEMsRUFBZWpqRSxFQUFHQyxHQUNoQm15QyxLQUFRMndCLEVBQ1ZFLE9BQWV2eEIsRUFBVzF4QyxRQUQ1QixDQUdULENBRUEsTUFBTXNqRSxFQUFXLENBQ2YxaEQsSUFBS3VoRCxFQUNMbm1CLE9BQVFtbUIsRUFDUnRtRCxLQUFNc21ELEVBQ05WLFFBQVNXLEVBQ1R2SSxpQkFBa0J1SSxFQUNsQnZILGtCQUFtQnVILEVBQ25CRyxpQkFBa0JILEVBQ2xCbEgsUUFBU2tILEVBQ1RJLGVBQWdCSixFQUNoQkssZ0JBQWlCTCxFQUNqQk0sY0FBZU4sRUFDZnhJLFFBQVN3SSxFQUNUckgsYUFBY3FILEVBQ2RqSCxlQUFnQmlILEVBQ2hCaEgsZUFBZ0JnSCxFQUNoQk8saUJBQWtCUCxFQUNsQlEsbUJBQW9CUixFQUNwQlMsV0FBWVQsRUFDWi9HLGlCQUFrQitHLEVBQ2xCOUcsY0FBZThHLEVBQ2ZVLGVBQWdCVixFQUNoQlcsVUFBV1gsRUFDWFksVUFBV1osRUFDWGEsV0FBWWIsRUFDWmMsWUFBYWQsRUFDYmUsV0FBWWYsRUFDWmdCLGlCQUFrQmhCLEVBQ2xCN0csZUFBZ0I4RyxFQUNoQnZnQixRQUFTQSxDQUFDOWlELEVBQUdDLElBQU1pakUsRUFBb0JMLEdBQWdCN2lFLEdBQUk2aUUsR0FBZ0I1aUUsSUFBSSxJQVNqRixPQU5BcTJELEdBQU0vekQsUUFBUXRCLE9BQU82TSxLQUFLN00sT0FBTzhELE9BQU8sQ0FBQyxFQUFHZytELEVBQVNDLEtBQVcsU0FBNEI1d0IsR0FDMUYsTUFBTW1oQixFQUFRK1AsRUFBU2x4QixJQUFTOHdCLEVBQzFCbUIsRUFBYzlRLEVBQU13UCxFQUFRM3dCLEdBQU80d0IsRUFBUTV3QixHQUFPQSxHQUN2RGtrQixHQUFNbkcsWUFBWWtVLElBQWdCOVEsSUFBVThQLElBQXFCak4sRUFBT2hrQixHQUFRaXlCLEVBQ25GLElBRU9qTyxDQUNULENDaEdBLFNBQWdCQSxJQUNkLE1BQU1rTyxFQUFZeEIsR0FBWSxDQUFDLEVBQUcxTSxHQUVsQyxJQWFJMEUsR0FiQSxLQUFDaitDLEVBQUksY0FBRTZtRCxFQUFhLGVBQUV0SCxFQUFjLGVBQUVELEVBQWMsUUFBRXJaLEVBQU8sS0FBRXloQixHQUFRRCxFQWUzRSxHQWJBQSxFQUFVeGhCLFFBQVVBLEVBQVVrYSxHQUFhbmpCLEtBQUtpSixHQUVoRHdoQixFQUFVMWlELElBQU04MkMsR0FBUzhKLEdBQWM4QixFQUFVN0IsUUFBUzZCLEVBQVUxaUQsS0FBTXcwQyxFQUFPbmUsT0FBUW1lLEVBQU9tTixrQkFHNUZnQixHQUNGemhCLEVBQVFyOUMsSUFBSSxnQkFBaUIsU0FDM0IrK0QsTUFBTUQsRUFBS0UsVUFBWSxJQUFNLEtBQU9GLEVBQUtqakQsU0FBV29qRCxTQUFTcmtFLG1CQUFtQmtrRSxFQUFLampELFdBQWEsTUFNbEdnMUMsR0FBTXhELFdBQVdqMkMsR0FDbkIsR0FBSXM5QyxHQUFTTCx1QkFBeUJLLEdBQVNILCtCQUM3Q2xYLEVBQVFxWSxvQkFBZXpwQixRQUNsQixJQUFpRCxLQUE1Q29wQixFQUFjaFksRUFBUWlZLGtCQUE2QixDQUU3RCxNQUFPNzRELEtBQVMyN0QsR0FBVS9DLEVBQWNBLEVBQVl4NEQsTUFBTSxLQUFLNHJDLEtBQUlpcEIsR0FBU0EsRUFBTWh5RCxTQUFRc3lDLE9BQU95RSxTQUFXLEdBQzVHNEcsRUFBUXFZLGVBQWUsQ0FBQ2o1RCxHQUFRLHlCQUEwQjI3RCxHQUFReHRDLEtBQUssTUFDekUsQ0FPRixHQUFJOHBDLEdBQVNMLHdCQUNYNEosR0FBaUJwTixHQUFNaEcsV0FBV29ULEtBQW1CQSxFQUFnQkEsRUFBY1ksSUFFL0VaLElBQW9DLElBQWxCQSxHQUEyQmlCLEdBQWdCTCxFQUFVMWlELE1BQU8sQ0FFaEYsTUFBTWdqRCxFQUFZeEksR0FBa0JELEdBQWtCMEksR0FBUXZDLEtBQUtuRyxHQUUvRHlJLEdBQ0Y5aEIsRUFBUXI5QyxJQUFJMjJELEVBQWdCd0ksRUFFaEMsQ0FHRixPQUFPTixDQUNSLEVDMUNELEdBRndELG9CQUFuQlEsZ0JBRUcsU0FBVTFPLEdBQ2hELE9BQU8sSUFBSXByQyxTQUFRLFNBQTRCRyxFQUFTZ2lDLEdBQ3RELE1BQU00WCxFQUFVQyxHQUFjNU8sR0FDOUIsSUFBSTZPLEVBQWNGLEVBQVFsb0QsS0FDMUIsTUFBTXFvRCxFQUFpQmxJLEdBQWFuakIsS0FBS2tyQixFQUFRamlCLFNBQVNvYixZQUMxRCxJQUNJaUgsR0FEQSxhQUFDcEosR0FBZ0JnSixFQUVyQixTQUFTM3pDLElBQ0gyekMsRUFBUWIsYUFDVmEsRUFBUWIsWUFBWWtCLFlBQVlELEdBRzlCSixFQUFRbmpCLFFBQ1ZtakIsRUFBUW5qQixPQUFPL3dDLG9CQUFvQixRQUFTczBELEVBRWhELENBRUEsSUFBSXRpQixFQUFVLElBQUlpaUIsZUFPbEIsU0FBU08sSUFDUCxJQUFLeGlCLEVBQ0gsT0FHRixNQUFNeWlCLEVBQWtCdEksR0FBYW5qQixLQUNuQywwQkFBMkJnSixHQUFXQSxFQUFRMGlCLHlCQWFoRDdGLElBQU8sU0FBa0IvM0QsR0FDdkJ3akIsRUFBUXhqQixHQUNSeXBCLEdBQ0YsSUFBRyxTQUFpQm1jLEdBQ2xCNGYsRUFBTzVmLEdBQ1BuYyxHQUNGLEdBZmlCLENBQ2Z2VSxLQUhvQmsvQyxHQUFpQyxTQUFqQkEsR0FBNEMsU0FBakJBLEVBQ3hDbFosRUFBUUQsU0FBL0JDLEVBQVEyaUIsYUFHUjdxQixPQUFRa0ksRUFBUWxJLE9BQ2hCQyxXQUFZaUksRUFBUWpJLFdBQ3BCa0ksUUFBU3dpQixFQUNUbFAsU0FDQXZULFlBWUZBLEVBQVUsSUFDWixDQWxDQUEsRUFBUTRpQixLQUFLVixFQUFRL25CLE9BQU9yNkMsY0FBZW9pRSxFQUFRbmpELEtBQUssR0FHeERpaEMsRUFBUXFaLFFBQVU2SSxFQUFRN0ksUUFpQ3RCLGNBQWVyWixFQUVqQkEsRUFBUXdpQixVQUFZQSxFQUdwQnhpQixFQUFRNmlCLG1CQUFxQixXQUN0QjdpQixHQUFrQyxJQUF2QkEsRUFBUThpQixhQVFELElBQW5COWlCLEVBQVFsSSxRQUFrQmtJLEVBQVEraUIsYUFBd0QsSUFBekMvaUIsRUFBUStpQixZQUFZaDRELFFBQVEsV0FLakZnZCxXQUFXeTZDLEVBQ2IsRUFJRnhpQixFQUFRZ2pCLFFBQVUsV0FDWGhqQixJQUlMc0ssRUFBTyxJQUFJZ0osR0FBVyxrQkFBbUJBLEdBQVcyUCxhQUFjZixFQUFTbGlCLElBRzNFQSxFQUFVLEtBQ1osRUFHQUEsRUFBUWtqQixRQUFVLFdBR2hCNVksRUFBTyxJQUFJZ0osR0FBVyxnQkFBaUJBLEdBQVc2UCxZQUFhakIsRUFBU2xpQixJQUd4RUEsRUFBVSxJQUNaLEVBR0FBLEVBQVFvakIsVUFBWSxXQUNsQixJQUFJQyxFQUFzQm5CLEVBQVE3SSxRQUFVLGNBQWdCNkksRUFBUTdJLFFBQVUsY0FBZ0IsbUJBQzlGLE1BQU14QixFQUFlcUssRUFBUXJLLGNBQWdCQyxHQUN6Q29LLEVBQVFtQixzQkFDVkEsRUFBc0JuQixFQUFRbUIscUJBRWhDL1ksRUFBTyxJQUFJZ0osR0FDVCtQLEVBQ0F4TCxFQUFhakIsb0JBQXNCdEQsR0FBV2dRLFVBQVloUSxHQUFXMlAsYUFDckVmLEVBQ0FsaUIsSUFHRkEsRUFBVSxJQUNaLE9BR2dCblIsSUFBaEJ1ekIsR0FBNkJDLEVBQWUvSixlQUFlLE1BR3ZELHFCQUFzQnRZLEdBQ3hCeVQsR0FBTS96RCxRQUFRMmlFLEVBQWUzTyxVQUFVLFNBQTBCdlUsRUFBSzdqQyxHQUNwRTBrQyxFQUFRdWpCLGlCQUFpQmpvRCxFQUFLNmpDLEVBQ2hDLElBSUdzVSxHQUFNbkcsWUFBWTRVLEVBQVF0QixtQkFDN0I1Z0IsRUFBUTRnQixrQkFBb0JzQixFQUFRdEIsaUJBSWxDMUgsR0FBaUMsU0FBakJBLElBQ2xCbFosRUFBUWtaLGFBQWVnSixFQUFRaEosY0FJUyxtQkFBL0JnSixFQUFRbkIsb0JBQ2pCL2dCLEVBQVFqeUMsaUJBQWlCLFdBQVl5MUQsR0FBcUJ0QixFQUFRbkIsb0JBQW9CLElBSWhELG1CQUE3Qm1CLEVBQVFwQixrQkFBbUM5Z0IsRUFBUXlqQixRQUM1RHpqQixFQUFReWpCLE9BQU8xMUQsaUJBQWlCLFdBQVl5MUQsR0FBcUJ0QixFQUFRcEIsb0JBR3ZFb0IsRUFBUWIsYUFBZWEsRUFBUW5qQixVQUdqQ3VqQixFQUFhb0IsSUFDTjFqQixJQUdMc0ssR0FBUW9aLEdBQVVBLEVBQU9ya0UsS0FBTyxJQUFJczlELEdBQWMsS0FBTXBKLEVBQVF2VCxHQUFXMGpCLEdBQzNFMWpCLEVBQVEyakIsUUFDUjNqQixFQUFVLEtBQUksRUFHaEJraUIsRUFBUWIsYUFBZWEsRUFBUWIsWUFBWWpWLFVBQVVrVyxHQUNqREosRUFBUW5qQixTQUNWbWpCLEVBQVFuakIsT0FBT0UsUUFBVXFqQixJQUFlSixFQUFRbmpCLE9BQU9oeEMsaUJBQWlCLFFBQVN1MEQsS0FJckYsTUFBTWhpQixFQ2hMSyxTQUF1QnZoQyxHQUNwQyxNQUFNeGMsRUFBUSw0QkFBNEJ5dkQsS0FBS2p6QyxHQUMvQyxPQUFPeGMsR0FBU0EsRUFBTSxJQUFNLEVBQzlCLENENktxQnFoRSxDQUFjMUIsRUFBUW5qRCxLQUVuQ3VoQyxJQUFzRCxJQUExQ2dYLEdBQVNQLFVBQVVoc0QsUUFBUXUxQyxHQUN6Q2dLLEVBQU8sSUFBSWdKLEdBQVcsd0JBQTBCaFQsRUFBVyxJQUFLZ1QsR0FBV3dKLGdCQUFpQnZKLElBTTlGdlQsRUFBUTZqQixLQUFLekIsR0FBZSxLQUM5QixHQUNGLEVFaEpBLEdBMUN1QjBCLENBQUNoaEIsRUFBU3VXLEtBQy9CLElBRUlwYSxFQUZBakIsRUFBYSxJQUFJTSxnQkFJckIsTUFBTTBrQixFQUFVLFNBQVVVLEdBQ3hCLElBQUt6a0IsRUFBUyxDQUNaQSxHQUFVLEVBQ1ZzakIsSUFDQSxNQUFNNzNCLEVBQU1nNUIsYUFBa0J0aEUsTUFBUXNoRSxFQUFTM2tFLEtBQUt3ckQsT0FDcER2TSxFQUFXMmxCLE1BQU1qNUIsYUFBZTRvQixHQUFhNW9CLEVBQU0sSUFBSWl5QixHQUFjanlCLGFBQWV0b0MsTUFBUXNvQyxFQUFJaFIsUUFBVWdSLEdBQzVHLENBQ0YsRUFFQSxJQUFJc3pCLEVBQVEzRSxHQUFXdHhDLFlBQVcsS0FDaENpN0MsRUFBUSxJQUFJMVAsR0FBVyxXQUFXK0YsbUJBQTBCL0YsR0FBV2dRLFdBQVcsR0FDakZqSyxHQUVILE1BQU1rSixFQUFjQSxLQUNkemYsSUFDRmtiLEdBQVMvMUMsYUFBYSsxQyxHQUN0QkEsRUFBUSxLQUNSbGIsRUFBUXBqRCxTQUFRcS9DLElBQ2RBLElBQ0NBLEVBQU8vd0Msb0JBQXNCK3dDLEVBQU8vd0Msb0JBQW9CLFFBQVNnMUQsR0FBV2prQixFQUFPd2pCLFlBQVlTLEdBQVMsSUFFM0dsZ0IsRUFBVSxLQUNaLEVBR0ZBLEVBQVFwakQsU0FBU3EvQyxHQUFXQSxHQUFVQSxFQUFPaHhDLGtCQUFvQmd4QyxFQUFPaHhDLGlCQUFpQixRQUFTaTFELEtBRWxHLE1BQU0sT0FBQ2prQixHQUFVZixFQUlqQixPQUZBZSxFQUFPd2pCLFlBQWNBLEVBRWQsQ0FBQ3hqQixFQUFRLEtBQ2RpZixHQUFTLzFDLGFBQWErMUMsR0FDdEJBLEVBQVEsSUFBSSxFQUNaLEVDeENTK0YsR0FBYyxVQUFXQyxFQUFPQyxHQUMzQyxJQUFJM1YsRUFBTTBWLEVBQU1FLFdBRWhCLElBQUtELEdBQWEzVixFQUFNMlYsRUFFdEIsa0JBRE1ELEdBSVIsSUFDSWppRCxFQURBb2lELEVBQU0sRUFHVixLQUFPQSxFQUFNN1YsR0FDWHZzQyxFQUFNb2lELEVBQU1GLFFBQ05ELEVBQU1oa0UsTUFBTW1rRSxFQUFLcGlELEdBQ3ZCb2lELEVBQU1waUQsQ0FFVixFQVFhcWlELEdBQWNBLENBQUNDLEVBQVFKLEVBQVdLLEVBQVlDLEVBQVVqUCxLQUNuRSxNQUFNeHpELEVBUGlCNjhDLGdCQUFpQjZsQixFQUFVUCxFQUFXM08sR0FDN0QsVUFBVyxNQUFNME8sS0FBU1EsUUFDakJULEdBQVkzVCxZQUFZQyxPQUFPMlQsR0FBU0EsUUFBZTFPLEVBQU8vNUMsT0FBT3lvRCxJQUFVQyxFQUUxRixDQUdtQlEsQ0FBVUosRUFBUUosRUFBVzNPLEdBRTlDLElBQUk4SCxFQUFRLEVBRVosT0FBTyxJQUFJc0gsZUFBZSxDQUN4QnJsRSxLQUFNLFFBRU4sVUFBTXNsRSxDQUFLM21CLEdBQ1QsTUFBTSxLQUFDenZCLEVBQUksTUFBRXpwQixTQUFlaEQsRUFBU3dzQixPQUVyQyxHQUFJQyxFQUdGLE9BRkF5dkIsRUFBVzRtQixhQUNYTCxJQUlGLElBQUlqVyxFQUFNeHBELEVBQU1vL0QsV0FDaEJJLEdBQWNBLEVBQVdsSCxHQUFTOU8sR0FDbEN0USxFQUFXNm1CLFFBQVEsSUFBSTdWLFdBQVdscUQsR0FDcEMsRUFDQTQrRCxPQUFPblosSUFDTGdhLEVBQVNoYSxHQUNGem9ELEVBQVMrTSxXQUVqQixDQUNEaTJELGNBQWUsR0FDZixFQzNDRUMsR0FBeUJBLENBQUMzRyxFQUFPclIsS0FDckMsTUFBTXNSLEVBQTRCLE1BQVRELEVBQ3pCLE9BQVFELEdBQVdwMkMsWUFBVyxJQUFNZ2xDLEVBQUcsQ0FDckNzUixtQkFDQUQsUUFDQUQsWUFDQyxFQUdDNkcsR0FBb0MsbUJBQVZDLE9BQTJDLG1CQUFacmtCLFNBQThDLG1CQUFic2tCLFNBQzFGQyxHQUE0QkgsSUFBOEMsbUJBQW5CTixlQUd2RFUsR0FBYUosS0FBNEMsbUJBQWhCSyxhQUN6QzFQLEdBQTBDLElBQUkwUCxZQUFqQ2xZLEdBQVF3SSxHQUFRTCxPQUFPbkksSUFDdEN4TyxTQUFlLElBQUlxUSxpQkFBaUIsSUFBSWtXLFNBQVMvWCxHQUFLbVksZ0JBRHRELElBQUUzUCxHQUlOLE1BQU00UCxHQUF3QkosSUFBNkIsTUFDekQsSUFBSUssR0FBaUIsRUFFckIsTUFBTUMsRUFBaUIsSUFBSTdrQixRQUFRMFcsR0FBUzlXLE9BQVEsQ0FDbER2N0MsS0FBTSxJQUFJeS9ELGVBQ1Z2cUIsT0FBUSxPQUNSLFVBQUl1ckIsR0FFRixPQURBRixHQUFpQixFQUNWLE1BQ1QsSUFDQ3ZsQixRQUFRejZCLElBQUksZ0JBRWYsT0FBT2dnRCxJQUFtQkMsQ0FDM0IsRUFiMEQsR0FpQnJERSxHQUF5QlIsTUFBK0IsTUFDNUQsSUFDRSxPQUFPMVIsR0FBTXZGLGlCQUFpQixJQUFJZ1gsU0FBUyxJQUFJamdFLEtBQ2pELENBQUUsTUFBTXlsQyxHQUNOLENBRUgsRUFONkQsR0FReERrN0IsR0FBWSxDQUNoQnZCLE9BQVFzQixJQUEwQixDQUFFRSxHQUFRQSxFQUFJNWdFLE9BRzdCLElBQUU0Z0UsR0FBdkJiLEtBQXVCYSxHQU9wQixJQUFJWCxTQU5MLENBQUMsT0FBUSxjQUFlLE9BQVEsV0FBWSxVQUFVeGxFLFNBQVFMLEtBQzNEdW1FLEdBQVV2bUUsS0FBVXVtRSxHQUFVdm1FLEdBQVFvMEQsR0FBTWhHLFdBQVdvWSxHQUFJeG1FLElBQVV3bUUsR0FBUUEsRUFBSXhtRSxLQUNoRixDQUFDczJDLEVBQUc0ZCxLQUNGLE1BQU0sSUFBSUQsR0FBVyxrQkFBa0JqMEQsc0JBQTBCaTBELEdBQVd3UyxnQkFBaUJ2UyxFQUFPLEVBQ3BHLEtBSVIsTUFnQ0EsR0FBZXlSLElBQW9CLE9BQUNybUIsSUFDbEMsSUFBSSxJQUNGNS9CLEVBQUcsT0FDSG83QixFQUFNLEtBQ05uZ0MsRUFBSSxPQUNKK2tDLEVBQU0sWUFDTnNpQixFQUFXLFFBQ1hoSSxFQUFPLG1CQUNQMEgsRUFBa0IsaUJBQ2xCRCxFQUFnQixhQUNoQjVILEVBQVksUUFDWmpaLEVBQU8sZ0JBQ1AyZ0IsRUFBa0IsY0FBYSxhQUMvQm1GLEdBQ0U1RCxHQUFjNU8sR0FFbEIyRixFQUFlQSxHQUFnQkEsRUFBZSxJQUFJdjVELGNBQWdCLE9BRWxFLElBR0l1c0QsRUFBVWxNLEdBSFRnbUIsRUFBZ0JDLEdBQWdCbG5CLEdBQVVzaUIsR0FBZWhJLEVBQzVEeUssR0FBZSxDQUFDL2tCLEVBQVFzaUIsR0FBY2hJLEdBQVcsR0FJbkQsTUFBTWtMLEVBQVdBLE1BQ2RyWSxHQUFZbmtDLFlBQVcsS0FDdEJpK0MsR0FBa0JBLEVBQWV6RCxhQUFhLElBR2hEclcsR0FBVyxDQUFJLEVBR2pCLElBQUlnYSxFQUVKLElBQ0UsR0FDRXBGLEdBQW9CeUUsSUFBb0MsUUFBWHByQixHQUErQixTQUFYQSxHQUNHLEtBQW5FK3JCLE9BMUNtQnZuQixPQUFPc0IsRUFBU2g3QyxLQUN4QyxNQUFNMUgsRUFBU2syRCxHQUFNYixlQUFlM1MsRUFBUWttQixvQkFFNUMsT0FBaUIsTUFBVjVvRSxFQTdCYW9oRCxVQUNSLE1BQVIxNUMsRUFDSyxFQUdOd3VELEdBQU0xRixPQUFPOW9ELEdBQ1BBLEVBQUs0NUIsS0FHWDQwQixHQUFNUixvQkFBb0JodUQsVUFDYixJQUFJMjdDLFFBQVEzN0MsR0FBTXFnRSxlQUFlcEIsV0FHOUN6USxHQUFNdEQsa0JBQWtCbHJELEdBQ2xCQSxFQUFLaS9ELFlBR1h6USxHQUFNeEYsa0JBQWtCaHBELEtBQ3pCQSxHQUFjLElBR2J3dUQsR0FBTWpHLFNBQVN2b0QsVUFDRm1nRSxHQUFXbmdFLElBQU9pL0QsZ0JBRGxDLEdBUXdCa0MsQ0FBY25oRSxHQUFRMUgsQ0FBTSxFQXVDbEI4b0UsQ0FBa0JwbUIsRUFBU2ptQyxJQUN6RCxDQUNBLElBTUlzc0QsRUFOQUMsRUFBVyxJQUFJM2xCLFFBQVE3aEMsRUFBSyxDQUM5Qm83QixPQUFRLE9BQ1JsMUMsS0FBTStVLEVBQ04wckQsT0FBUSxTQUtOalMsR0FBTXhELFdBQVdqMkMsS0FBVXNzRCxFQUFvQkMsRUFBU3RtQixRQUFRNTdDLElBQUksa0JBQ3RFNDdDLEVBQVFxWSxlQUFlZ08sR0FHckJDLEVBQVN0aEUsT0FDWCtVLEVBQU9vcUQsR0FBWW1DLEVBQVN0aEUsS0ExR1QsTUEwR21DOC9ELEdBQ3BEbUIsRUFDQTFDLEdBQXFCMUMsSUFDcEIsS0FBTXNFLElBRWIsQ0FFSzNSLEdBQU1qRyxTQUFTb1QsS0FDbEJBLEVBQWtCQSxFQUFrQixPQUFTLFFBRy9DNWdCLEVBQVUsSUFBSVksUUFBUTdoQyxFQUFLLElBQ3RCZ25ELEVBQ0hobkIsT0FBUWluQixFQUNSN3JCLE9BQVFBLEVBQU9yNkMsY0FDZm1nRCxRQUFTQSxFQUFRb2IsWUFBWTNILFNBQzdCenVELEtBQU0rVSxFQUNOMHJELE9BQVEsT0FDUjlFLG9CQUdGLElBQUk3Z0IsUUFBaUJrbEIsTUFBTWpsQixHQUUzQixNQUFNd21CLEVBQW1CYixLQUE0QyxXQUFqQnpNLEdBQThDLGFBQWpCQSxHQUVqRixHQUFJeU0sS0FBMkI1RSxHQUFzQnlGLEdBQW1CLENBQ3RFLE1BQU1yZ0UsRUFBVSxDQUFDLEVBRWpCLENBQUMsU0FBVSxhQUFjLFdBQVd6RyxTQUFRNnZDLElBQzFDcHBDLEVBQVFvcEMsR0FBUXdRLEVBQVN4USxFQUFLLElBR2hDLE1BQU1rM0IsRUFBd0JoVCxHQUFNYixlQUFlN1MsRUFBU0UsUUFBUTU3QyxJQUFJLG1CQUV4RTA3QyxFQUFXLElBQUltbEIsU0FDYmQsR0FBWXJrQixFQUFTOTZDLEtBN0lGLE1BNkk0Qjg3RCxHQUFzQmdFLEdBQ25FMEIsRUFDQWpELEdBQXFCekMsR0FBb0IsSUFDeEN5RixHQUFvQmpDLEVBQVVhLElBQ2pDai9ELEVBRUosQ0FFQSt5RCxFQUFlQSxHQUFnQixPQUUvQixJQUFJd04sUUFBcUJkLEdBQVVuUyxHQUFNbEYsUUFBUXFYLEdBQVcxTSxJQUFpQixRQUFRblosRUFBVXdULEdBTS9GLE9BSkNpVCxHQUFvQmpDLElBRXJCMEIsR0FBZUEsVUFFRixJQUFJOTlDLFNBQVEsQ0FBQ0csRUFBU2dpQyxLQUNqQ3VTLEdBQU92MEMsRUFBU2dpQyxFQUFRLENBQ3RCdHdDLEtBQU0wc0QsRUFDTnptQixRQUFTa2EsR0FBYW5qQixLQUFLK0ksRUFBU0UsU0FDcENuSSxPQUFRaUksRUFBU2pJLE9BQ2pCQyxXQUFZZ0ksRUFBU2hJLFdBQ3JCd2IsU0FDQXZULFdBQ0EsR0FFTixDQUFFLE1BQU90VixHQUdQLEdBRkE2NUIsSUFFSTc1QixHQUFvQixjQUFiQSxFQUFJdG5DLE1BQXdCLFNBQVMvQyxLQUFLcXFDLEVBQUloUixTQUN2RCxNQUFNdDdCLE9BQU84RCxPQUNYLElBQUlveEQsR0FBVyxnQkFBaUJBLEdBQVc2UCxZQUFhNVAsRUFBUXZULEdBQ2hFLENBQ0VpVSxNQUFPdnBCLEVBQUl1cEIsT0FBU3ZwQixJQUsxQixNQUFNNG9CLEdBQVd0YyxLQUFLdE0sRUFBS0EsR0FBT0EsRUFBSWp2QixLQUFNODNDLEVBQVF2VCxFQUN0RCxDQUNELEdDMU5LMm1CLEdBQWdCLENBQ3BCQyxLQ05GLEtET0VDLElBQUtDLEdBQ0w3QixNQUFPOEIsSUFHVHRULEdBQU0vekQsUUFBUWluRSxJQUFlLENBQUM1WixFQUFJam9ELEtBQ2hDLEdBQUlpb0QsRUFBSSxDQUNOLElBQ0UzdUQsT0FBT3VFLGVBQWVvcUQsRUFBSSxPQUFRLENBQUNqb0QsU0FDckMsQ0FBRSxNQUFPbEcsR0FDUCxDQUVGUixPQUFPdUUsZUFBZW9xRCxFQUFJLGNBQWUsQ0FBQ2pvRCxTQUM1QyxLQUdGLE1BQU1raUUsR0FBZ0J6YyxHQUFXLEtBQUtBLElBRWhDMGMsR0FBb0JsUCxHQUFZdEUsR0FBTWhHLFdBQVdzSyxJQUF3QixPQUFaQSxJQUFnQyxJQUFaQSxFQUV2RixHQUNlbVAsSUFDWEEsRUFBV3pULEdBQU14dEQsUUFBUWloRSxHQUFZQSxFQUFXLENBQUNBLEdBRWpELE1BQU0sT0FBQzNwRSxHQUFVMnBFLEVBQ2pCLElBQUlDLEVBQ0FwUCxFQUVKLE1BQU1xUCxFQUFrQixDQUFDLEVBRXpCLElBQUssSUFBSTkwQixFQUFJLEVBQUdBLEVBQUkvMEMsRUFBUSswQyxJQUFLLENBRS9CLElBQUkvOEIsRUFJSixHQUxBNHhELEVBQWdCRCxFQUFTNTBCLEdBR3pCeWxCLEVBQVVvUCxHQUVMRixHQUFpQkUsS0FDcEJwUCxFQUFVNE8sSUFBZXB4RCxFQUFLZ0csT0FBTzRyRCxJQUFnQnhuRSxvQkFFckNrdkMsSUFBWmtwQixHQUNGLE1BQU0sSUFBSXpFLEdBQVcsb0JBQW9CLzlDLE1BSTdDLEdBQUl3aUQsRUFDRixNQUdGcVAsRUFBZ0I3eEQsR0FBTSxJQUFNKzhCLEdBQUt5bEIsQ0FDbkMsQ0FFQSxJQUFLQSxFQUFTLENBRVosTUFBTXNQLEVBQVVqcEUsT0FBT3c4QyxRQUFRd3NCLEdBQzVCLzdCLEtBQUksRUFBRTkxQixFQUFJdWpCLEtBQVcsV0FBV3ZqQixPQUNwQixJQUFWdWpCLEVBQWtCLHNDQUF3QyxtQ0FHL0QsSUFBSTJiLEVBQUlsM0MsRUFDTDhwRSxFQUFROXBFLE9BQVMsRUFBSSxZQUFjOHBFLEVBQVFoOEIsSUFBSTI3QixJQUFjeDVDLEtBQUssTUFBUSxJQUFNdzVDLEdBQWFLLEVBQVEsSUFDdEcsMEJBRUYsTUFBTSxJQUFJL1QsR0FDUix3REFBMEQ3ZSxFQUMxRCxrQkFFSixDQUVBLE9BQU9zakIsQ0FBTyxFRTNEbEIsU0FBU3VQLEdBQTZCL1QsR0FLcEMsR0FKSUEsRUFBTzhOLGFBQ1Q5TixFQUFPOE4sWUFBWWtHLG1CQUdqQmhVLEVBQU94VSxRQUFVd1UsRUFBT3hVLE9BQU9FLFFBQ2pDLE1BQU0sSUFBSTBkLEdBQWMsS0FBTXBKLEVBRWxDLENBU2UsU0FBU2lVLEdBQWdCalUsR0FpQnRDLE9BaEJBK1QsR0FBNkIvVCxHQUU3QkEsRUFBT3RULFFBQVVrYSxHQUFhbmpCLEtBQUt1YyxFQUFPdFQsU0FHMUNzVCxFQUFPdjVDLEtBQU91aUQsR0FBY244RCxLQUMxQm16RCxFQUNBQSxFQUFPeUUsbUJBR2dELElBQXJELENBQUMsT0FBUSxNQUFPLFNBQVNqdEQsUUFBUXdvRCxFQUFPcFosU0FDMUNvWixFQUFPdFQsUUFBUXFZLGVBQWUscUNBQXFDLEdBR3JENE8sR0FBb0IzVCxFQUFPd0UsU0FBV0gsR0FBU0csUUFFeERBLENBQVF4RSxHQUFRaHJDLE1BQUssU0FBNkJ3M0IsR0FZdkQsT0FYQXVuQixHQUE2Qi9ULEdBRzdCeFQsRUFBUy9sQyxLQUFPdWlELEdBQWNuOEQsS0FDNUJtekQsRUFDQUEsRUFBT3lGLGtCQUNQalosR0FHRkEsRUFBU0UsUUFBVWthLEdBQWFuakIsS0FBSytJLEVBQVNFLFNBRXZDRixDQUNULElBQUcsU0FBNEJ3SyxHQWU3QixPQWRLa1MsR0FBU2xTLEtBQ1orYyxHQUE2Qi9ULEdBR3pCaEosR0FBVUEsRUFBT3hLLFdBQ25Cd0ssRUFBT3hLLFNBQVMvbEMsS0FBT3VpRCxHQUFjbjhELEtBQ25DbXpELEVBQ0FBLEVBQU95RixrQkFDUHpPLEVBQU94SyxVQUVUd0ssRUFBT3hLLFNBQVNFLFFBQVVrYSxHQUFhbmpCLEtBQUt1VCxFQUFPeEssU0FBU0UsV0FJekQ5M0IsUUFBUW1pQyxPQUFPQyxFQUN4QixHQUNGLENDaEZPLE1DS0RrZCxHQUFhLENBQUMsRUFHcEIsQ0FBQyxTQUFVLFVBQVcsU0FBVSxXQUFZLFNBQVUsVUFBVS9uRSxTQUFRLENBQUNMLEVBQU1pekMsS0FDN0VtMUIsR0FBV3BvRSxHQUFRLFNBQW1CNnRELEdBQ3BDLGNBQWNBLElBQVU3dEQsR0FBUSxLQUFPaXpDLEVBQUksRUFBSSxLQUFPLEtBQU9qekMsQ0FDL0QsQ0FBQyxJQUdILE1BQU1xb0UsR0FBcUIsQ0FBQyxFQVc1QkQsR0FBVzVQLGFBQWUsU0FBc0I4UCxFQUFXMy9CLEVBQVN0TyxHQUNsRSxTQUFTa3VDLEVBQWNDLEVBQUtDLEdBQzFCLE1BQU8sdUNBQW9ERCxFQUFNLElBQU9DLEdBQVFwdUMsRUFBVSxLQUFPQSxFQUFVLEdBQzdHLENBR0EsTUFBTyxDQUFDNTBCLEVBQU8raUUsRUFBSzV0QixLQUNsQixJQUFrQixJQUFkMHRCLEVBQ0YsTUFBTSxJQUFJclUsR0FDUnNVLEVBQWNDLEVBQUsscUJBQXVCNy9CLEVBQVUsT0FBU0EsRUFBVSxLQUN2RXNyQixHQUFXeVUsZ0JBZWYsT0FYSS8vQixJQUFZMC9CLEdBQW1CRyxLQUNqQ0gsR0FBbUJHLElBQU8sRUFFMUIvdEMsUUFBUWdXLEtBQ044M0IsRUFDRUMsRUFDQSwrQkFBaUM3L0IsRUFBVSw4Q0FLMUMyL0IsR0FBWUEsRUFBVTdpRSxFQUFPK2lFLEVBQUs1dEIsRUFBWSxDQUV6RCxFQW1DQSxVQUNFK3RCLGNBeEJGLFNBQXVCN2hFLEVBQVM4aEUsRUFBUUMsR0FDdEMsR0FBdUIsaUJBQVovaEUsRUFDVCxNQUFNLElBQUltdEQsR0FBVyw0QkFBNkJBLEdBQVc2VSxzQkFFL0QsTUFBTWw5RCxFQUFPN00sT0FBTzZNLEtBQUs5RSxHQUN6QixJQUFJbXNDLEVBQUlybkMsRUFBSzFOLE9BQ2IsS0FBTyswQyxLQUFNLEdBQUcsQ0FDZCxNQUFNdTFCLEVBQU01OEQsRUFBS3FuQyxHQUNYcTFCLEVBQVlNLEVBQU9KLEdBQ3pCLEdBQUlGLEVBQUosQ0FDRSxNQUFNN2lFLEVBQVFxQixFQUFRMGhFLEdBQ2hCN3pCLE9BQW1CbkYsSUFBVi9wQyxHQUF1QjZpRSxFQUFVN2lFLEVBQU8raUUsRUFBSzFoRSxHQUM1RCxJQUFlLElBQVg2dEMsRUFDRixNQUFNLElBQUlzZixHQUFXLFVBQVl1VSxFQUFNLFlBQWM3ekIsRUFBUXNmLEdBQVc2VSxxQkFHNUUsTUFDQSxJQUFxQixJQUFqQkQsRUFDRixNQUFNLElBQUk1VSxHQUFXLGtCQUFvQnVVLEVBQUt2VSxHQUFXOFUsZUFFN0QsQ0FDRixFQUlFWCxlQzlFSUEsR0FBYUUsR0FBVUYsV0FTN0IsTUFBTVksR0FDSmprRSxXQUFBQSxDQUFZa2tFLEdBQ1Z2cEUsS0FBSzY0RCxTQUFXMFEsRUFDaEJ2cEUsS0FBS3dwRSxhQUFlLENBQ2xCdm9CLFFBQVMsSUFBSXdvQixHQUNiem9CLFNBQVUsSUFBSXlvQixHQUVsQixDQVVBLGFBQU14b0IsQ0FBUXlvQixFQUFhbFYsR0FDekIsSUFDRSxhQUFheDBELEtBQUt3bkUsU0FBU2tDLEVBQWFsVixFQUMxQyxDQUFFLE1BQU83b0IsR0FDUCxHQUFJQSxhQUFldG9DLE1BQU8sQ0FDeEIsSUFBSXNtRSxFQUVKdG1FLE1BQU1veEQsa0JBQW9CcHhELE1BQU1veEQsa0JBQWtCa1YsRUFBUSxDQUFDLEdBQU1BLEVBQVEsSUFBSXRtRSxNQUc3RSxNQUFNQyxFQUFRcW1FLEVBQU1ybUUsTUFBUXFtRSxFQUFNcm1FLE1BQU0zQixRQUFRLFFBQVMsSUFBTSxHQUMvRCxJQUNPZ3FDLEVBQUlyb0MsTUFHRUEsSUFBVWtaLE9BQU9tdkIsRUFBSXJvQyxPQUFPd3hDLFNBQVN4eEMsRUFBTTNCLFFBQVEsWUFBYSxPQUN6RWdxQyxFQUFJcm9DLE9BQVMsS0FBT0EsR0FIcEJxb0MsRUFBSXJvQyxNQUFRQSxDQUtoQixDQUFFLE1BQU96RCxHQUNQLENBRUosQ0FFQSxNQUFNOHJDLENBQ1IsQ0FDRixDQUVBNjdCLFFBQUFBLENBQVNrQyxFQUFhbFYsR0FHTyxpQkFBaEJrVixHQUNUbFYsRUFBU0EsR0FBVSxDQUFDLEdBQ2J4MEMsSUFBTTBwRCxFQUVibFYsRUFBU2tWLEdBQWUsQ0FBQyxFQUczQmxWLEVBQVMwTSxHQUFZbGhFLEtBQUs2NEQsU0FBVXJFLEdBRXBDLE1BQU0sYUFBQ3NFLEVBQVksaUJBQUU2SSxFQUFnQixRQUFFemdCLEdBQVdzVCxPQUU3QjFrQixJQUFqQmdwQixHQUNGOFAsR0FBVUssY0FBY25RLEVBQWMsQ0FDcENuQixrQkFBbUIrUSxHQUFXNVAsYUFBYTRQLEdBQVdrQixTQUN0RGhTLGtCQUFtQjhRLEdBQVc1UCxhQUFhNFAsR0FBV2tCLFNBQ3REL1Isb0JBQXFCNlEsR0FBVzVQLGFBQWE0UCxHQUFXa0IsV0FDdkQsR0FHbUIsTUFBcEJqSSxJQUNFak4sR0FBTWhHLFdBQVdpVCxHQUNuQm5OLEVBQU9tTixpQkFBbUIsQ0FDeEIzSyxVQUFXMkssR0FHYmlILEdBQVVLLGNBQWN0SCxFQUFrQixDQUN4Q3BMLE9BQVFtUyxHQUFXbUIsU0FDbkI3UyxVQUFXMFIsR0FBV21CLFdBQ3JCLElBS1ByVixFQUFPcFosUUFBVW9aLEVBQU9wWixRQUFVcDdDLEtBQUs2NEQsU0FBU3pkLFFBQVUsT0FBT3g2QyxjQUdqRSxJQUFJa3BFLEVBQWlCNW9CLEdBQVd3VCxHQUFNL0MsTUFDcEN6USxFQUFRMFosT0FDUjFaLEVBQVFzVCxFQUFPcFosU0FHakI4RixHQUFXd1QsR0FBTS96RCxRQUNmLENBQUMsU0FBVSxNQUFPLE9BQVEsT0FBUSxNQUFPLFFBQVMsV0FDakR5NkMsV0FDUThGLEVBQVE5RixFQUFPLElBSTFCb1osRUFBT3RULFFBQVVrYSxHQUFhbDFDLE9BQU80akQsRUFBZ0I1b0IsR0FHckQsTUFBTTZvQixFQUEwQixHQUNoQyxJQUFJQyxHQUFpQyxFQUNyQ2hxRSxLQUFLd3BFLGFBQWF2b0IsUUFBUXRnRCxTQUFRLFNBQW9Dc3BFLEdBQ2pDLG1CQUF4QkEsRUFBWXpTLFVBQTBELElBQWhDeVMsRUFBWXpTLFFBQVFoRCxLQUlyRXdWLEVBQWlDQSxHQUFrQ0MsRUFBWTFTLFlBRS9Fd1MsRUFBd0IxaEQsUUFBUTRoRCxFQUFZNVMsVUFBVzRTLEVBQVkzUyxVQUNyRSxJQUVBLE1BQU00UyxFQUEyQixHQUtqQyxJQUFJNWUsRUFKSnRyRCxLQUFLd3BFLGFBQWF4b0IsU0FBU3JnRCxTQUFRLFNBQWtDc3BFLEdBQ25FQyxFQUF5QjM3RCxLQUFLMDdELEVBQVk1UyxVQUFXNFMsRUFBWTNTLFNBQ25FLElBR0EsSUFDSS9ILEVBREFoYyxFQUFJLEVBR1IsSUFBS3kyQixFQUFnQyxDQUNuQyxNQUFNRyxFQUFRLENBQUMxQixHQUFnQjFoRCxLQUFLL21CLFdBQU84dkMsR0FPM0MsSUFOQXE2QixFQUFNOWhELFFBQVFsWixNQUFNZzdELEVBQU9KLEdBQzNCSSxFQUFNNTdELEtBQUtZLE1BQU1nN0QsRUFBT0QsR0FDeEIzYSxFQUFNNGEsRUFBTTNyRSxPQUVaOHNELEVBQVVsaUMsUUFBUUcsUUFBUWlyQyxHQUVuQmpoQixFQUFJZ2MsR0FDVGpFLEVBQVVBLEVBQVE5aEMsS0FBSzJnRCxFQUFNNTJCLEtBQU00MkIsRUFBTTUyQixNQUczQyxPQUFPK1gsQ0FDVCxDQUVBaUUsRUFBTXdhLEVBQXdCdnJFLE9BRTlCLElBQUlra0UsRUFBWWxPLEVBSWhCLElBRkFqaEIsRUFBSSxFQUVHQSxFQUFJZ2MsR0FBSyxDQUNkLE1BQU02YSxFQUFjTCxFQUF3QngyQixLQUN0QzgyQixFQUFhTixFQUF3QngyQixLQUMzQyxJQUNFbXZCLEVBQVkwSCxFQUFZMUgsRUFDMUIsQ0FBRSxNQUFPMW5DLEdBQ1BxdkMsRUFBV2hwRSxLQUFLckIsS0FBTWc3QixHQUN0QixLQUNGLENBQ0YsQ0FFQSxJQUNFc3dCLEVBQVVtZCxHQUFnQnBuRSxLQUFLckIsS0FBTTBpRSxFQUN2QyxDQUFFLE1BQU8xbkMsR0FDUCxPQUFPNVIsUUFBUW1pQyxPQUFPdndCLEVBQ3hCLENBS0EsSUFIQXVZLEVBQUksRUFDSmdjLEVBQU0yYSxFQUF5QjFyRSxPQUV4QiswQyxFQUFJZ2MsR0FDVGpFLEVBQVVBLEVBQVE5aEMsS0FBSzBnRCxFQUF5QjMyQixLQUFNMjJCLEVBQXlCMzJCLE1BR2pGLE9BQU8rWCxDQUNULENBRUFnZixNQUFBQSxDQUFPOVYsR0FHTCxPQUFPc0MsR0FEVThKLElBRGpCcE0sRUFBUzBNLEdBQVlsaEUsS0FBSzY0RCxTQUFVckUsSUFDRXFNLFFBQVNyTSxFQUFPeDBDLEtBQzVCdzBDLEVBQU9uZSxPQUFRbWUsRUFBT21OLGlCQUNsRCxFQUlGak4sR0FBTS96RCxRQUFRLENBQUMsU0FBVSxNQUFPLE9BQVEsWUFBWSxTQUE2Qnk2QyxHQUUvRWt1QixHQUFNaHFFLFVBQVU4N0MsR0FBVSxTQUFTcDdCLEVBQUt3MEMsR0FDdEMsT0FBT3gwRCxLQUFLaWhELFFBQVFpZ0IsR0FBWTFNLEdBQVUsQ0FBQyxFQUFHLENBQzVDcFosU0FDQXA3QixNQUNBL0UsTUFBT3U1QyxHQUFVLENBQUMsR0FBR3Y1QyxPQUV6QixDQUNGLElBRUF5NUMsR0FBTS96RCxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0J5NkMsR0FHckUsU0FBU212QixFQUFtQkMsR0FDMUIsT0FBTyxTQUFvQnhxRCxFQUFLL0UsRUFBTXU1QyxHQUNwQyxPQUFPeDBELEtBQUtpaEQsUUFBUWlnQixHQUFZMU0sR0FBVSxDQUFDLEVBQUcsQ0FDNUNwWixTQUNBOEYsUUFBU3NwQixFQUFTLENBQ2hCLGVBQWdCLHVCQUNkLENBQUMsRUFDTHhxRCxNQUNBL0UsU0FFSixDQUNGLENBRUFxdUQsR0FBTWhxRSxVQUFVODdDLEdBQVVtdkIsSUFFMUJqQixHQUFNaHFFLFVBQVU4N0MsRUFBUyxRQUFVbXZCLEdBQW1CLEVBQ3hELElBRUEsWUN4TkEsTUFBTUUsR0FDSnBsRSxXQUFBQSxDQUFZcWxFLEdBQ1YsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJalYsVUFBVSxnQ0FHdEIsSUFBSWtWLEVBRUozcUUsS0FBS3NyRCxRQUFVLElBQUlsaUMsU0FBUSxTQUF5QkcsR0FDbERvaEQsRUFBaUJwaEQsQ0FDbkIsSUFFQSxNQUFNZ3NDLEVBQVF2MUQsS0FHZEEsS0FBS3NyRCxRQUFROWhDLE1BQUttN0MsSUFDaEIsSUFBS3BQLEVBQU1xVixXQUFZLE9BRXZCLElBQUlyM0IsRUFBSWdpQixFQUFNcVYsV0FBV3BzRSxPQUV6QixLQUFPKzBDLEtBQU0sR0FDWGdpQixFQUFNcVYsV0FBV3IzQixHQUFHb3hCLEdBRXRCcFAsRUFBTXFWLFdBQWEsSUFBSSxJQUl6QjVxRSxLQUFLc3JELFFBQVE5aEMsS0FBT3FoRCxJQUNsQixJQUFJQyxFQUVKLE1BQU14ZixFQUFVLElBQUlsaUMsU0FBUUcsSUFDMUJnc0MsRUFBTWxJLFVBQVU5akMsR0FDaEJ1aEQsRUFBV3ZoRCxDQUFPLElBQ2pCQyxLQUFLcWhELEdBTVIsT0FKQXZmLEVBQVFxWixPQUFTLFdBQ2ZwUCxFQUFNaU8sWUFBWXNILEVBQ3BCLEVBRU94ZixDQUFPLEVBR2hCb2YsR0FBUyxTQUFnQi92QyxFQUFTNjVCLEVBQVF2VCxHQUNwQ3NVLEVBQU0vSixTQUtWK0osRUFBTS9KLE9BQVMsSUFBSW9TLEdBQWNqakMsRUFBUzY1QixFQUFRdlQsR0FDbEQwcEIsRUFBZXBWLEVBQU0vSixRQUN2QixHQUNGLENBS0FnZCxnQkFBQUEsR0FDRSxHQUFJeG9FLEtBQUt3ckQsT0FDUCxNQUFNeHJELEtBQUt3ckQsTUFFZixDQU1BNkIsU0FBQUEsQ0FBVS9tQyxHQUNKdG1CLEtBQUt3ckQsT0FDUGxsQyxFQUFTdG1CLEtBQUt3ckQsUUFJWnhyRCxLQUFLNHFFLFdBQ1A1cUUsS0FBSzRxRSxXQUFXcjhELEtBQUsrWCxHQUVyQnRtQixLQUFLNHFFLFdBQWEsQ0FBQ3RrRCxFQUV2QixDQU1BazlDLFdBQUFBLENBQVlsOUMsR0FDVixJQUFLdG1CLEtBQUs0cUUsV0FDUixPQUVGLE1BQU1oOEMsRUFBUTV1QixLQUFLNHFFLFdBQVc1K0QsUUFBUXNhLElBQ3ZCLElBQVhzSSxHQUNGNXVCLEtBQUs0cUUsV0FBV3RpQyxPQUFPMVosRUFBTyxFQUVsQyxDQU1BLGFBQU96aEIsR0FDTCxJQUFJdzNELEVBSUosTUFBTyxDQUNMcFAsTUFKWSxJQUFJa1YsSUFBWSxTQUFrQm5zRSxHQUM5Q3FtRSxFQUFTcm1FLENBQ1gsSUFHRXFtRSxTQUVKLEVBR0YsWUN4SE1vRyxHQUFpQixDQUNyQkMsU0FBVSxJQUNWQyxtQkFBb0IsSUFDcEJDLFdBQVksSUFDWkMsV0FBWSxJQUNaN2xDLEdBQUksSUFDSjhsQyxRQUFTLElBQ1RDLFNBQVUsSUFDVkMsNEJBQTZCLElBQzdCQyxVQUFXLElBQ1hDLGFBQWMsSUFDZEMsZUFBZ0IsSUFDaEJDLFlBQWEsSUFDYkMsZ0JBQWlCLElBQ2pCQyxPQUFRLElBQ1JDLGdCQUFpQixJQUNqQkMsaUJBQWtCLElBQ2xCQyxNQUFPLElBQ1BDLFNBQVUsSUFDVkMsWUFBYSxJQUNiQyxTQUFVLElBQ1ZDLE9BQVEsSUFDUkMsa0JBQW1CLElBQ25CQyxrQkFBbUIsSUFDbkJDLFdBQVksSUFDWkMsYUFBYyxJQUNkQyxnQkFBaUIsSUFDakJDLFVBQVcsSUFDWEMsU0FBVSxJQUNWQyxpQkFBa0IsSUFDbEJDLGNBQWUsSUFDZkMsNEJBQTZCLElBQzdCQyxlQUFnQixJQUNoQkMsU0FBVSxJQUNWQyxLQUFNLElBQ05DLGVBQWdCLElBQ2hCQyxtQkFBb0IsSUFDcEJDLGdCQUFpQixJQUNqQkMsV0FBWSxJQUNaQyxxQkFBc0IsSUFDdEJDLG9CQUFxQixJQUNyQkMsa0JBQW1CLElBQ25CQyxVQUFXLElBQ1hDLG1CQUFvQixJQUNwQkMsb0JBQXFCLElBQ3JCQyxPQUFRLElBQ1JDLGlCQUFrQixJQUNsQkMsU0FBVSxJQUNWQyxnQkFBaUIsSUFDakJDLHFCQUFzQixJQUN0QkMsZ0JBQWlCLElBQ2pCQyw0QkFBNkIsSUFDN0JDLDJCQUE0QixJQUM1QkMsb0JBQXFCLElBQ3JCQyxlQUFnQixJQUNoQkMsV0FBWSxJQUNaQyxtQkFBb0IsSUFDcEJDLGVBQWdCLElBQ2hCQyx3QkFBeUIsSUFDekJDLHNCQUF1QixJQUN2QkMsb0JBQXFCLElBQ3JCQyxhQUFjLElBQ2RDLFlBQWEsSUFDYkMsOEJBQStCLEtBR2pDeHZFLE9BQU93OEMsUUFBUWt2QixJQUFnQnBxRSxTQUFRLEVBQUU0YixFQUFLeFcsTUFDNUNnbEUsR0FBZWhsRSxHQUFTd1csQ0FBRyxJQUc3QixZQ3hCTXV5RCxHQW5CTixTQUFTQyxFQUFlQyxHQUN0QixNQUFNdCtDLEVBQVUsSUFBSTQ0QyxHQUFNMEYsR0FDcEIzb0QsRUFBV1UsR0FBS3VpRCxHQUFNaHFFLFVBQVUyaEQsUUFBU3Z3QixHQWEvQyxPQVZBZ2tDLEdBQU1weEMsT0FBTytDLEVBQVVpakQsR0FBTWhxRSxVQUFXb3hCLEVBQVMsQ0FBQzQrQixZQUFZLElBRzlEb0YsR0FBTXB4QyxPQUFPK0MsRUFBVXFLLEVBQVMsS0FBTSxDQUFDNCtCLFlBQVksSUFHbkRqcEMsRUFBU2tRLE9BQVMsU0FBZ0JnekMsR0FDaEMsT0FBT3dGLEVBQWU3TixHQUFZOE4sRUFBZXpGLEdBQ25ELEVBRU9sakQsQ0FDVCxDQUdjMG9ELENBQWVsVyxJQUc3QmlXLEdBQU14RixNQUFRQSxHQUdkd0YsR0FBTWxSLGNBQWdCQSxHQUN0QmtSLEdBQU1yRSxZQUFjQSxHQUNwQnFFLEdBQU1wUixTQUFXQSxHQUNqQm9SLEdBQU1HLFFMdkRpQixRS3dEdkJILEdBQU1uWSxXQUFhQSxHQUduQm1ZLEdBQU12YSxXQUFhQSxHQUduQnVhLEdBQU1JLE9BQVNKLEdBQU1sUixjQUdyQmtSLEdBQU1odUIsSUFBTSxTQUFhcXVCLEdBQ3ZCLE9BQU8vbEQsUUFBUTAzQixJQUFJcXVCLEVBQ3JCLEVBRUFMLEdBQU1NLE9DOUNTLFNBQWdCcjlDLEdBQzdCLE9BQU8sU0FBYzZnQyxHQUNuQixPQUFPN2dDLEVBQVM1aUIsTUFBTSxLQUFNeWpELEVBQzlCLENBQ0YsRUQ2Q0FrYyxHQUFNTyxhRTdEUyxTQUFzQnY5QyxHQUNuQyxPQUFPNGlDLEdBQU05RixTQUFTOThCLEtBQXNDLElBQXpCQSxFQUFRdTlDLFlBQzdDLEVGOERBUCxHQUFNNU4sWUFBY0EsR0FFcEI0TixHQUFNMVQsYUFBZUEsR0FFckIwVCxHQUFNUSxXQUFhbmhCLEdBQVNtTCxHQUFlNUUsR0FBTXhFLFdBQVcvQixHQUFTLElBQUl4UyxTQUFTd1MsR0FBU0EsR0FFM0YyZ0IsR0FBTVMsV0FBYXBILEdBRW5CMkcsR0FBTS9ELGVBQWlCQSxHQUV2QitELEdBQU0xaUMsUUFBVTBpQyxHR2xGaEIsSUFBTWpILEdIcUZOLEdHckZtQnR4QyxPQUFPLENBQ3RCc3FDLFFBQVMsOGhDQUliZ0gsR0FBSzJCLGFBQWF2b0IsUUFBUW1XLEtBQUksU0FBVTVDLEdBRXBDLE9BQU9BLENBQ1gsSUFBRyxTQUFVeDVCLEdBRVQsT0FBTzVSLFFBQVFtaUMsT0FBT3Z3QixFQUMxQixJQUdBNnNDLEdBQUsyQixhQUFheG9CLFNBQVNvVyxLQUFJLFNBQVVwVyxHQUdyQyxPQUFPQSxDQUNYLElBQUcsU0FBVWhtQixHQUdULE9BQU81UixRQUFRbWlDLE9BQU92d0IsRUFDMUIsSUNxQkEsU0F6Q2MsV0FDVixJQUE0Q3cwQyxFQUFBQyxJQUFaajNDLEVBQUFBLEVBQUFBLFVBQVMsSUFBRyxHQUFyQ2szQyxFQUFRRixFQUFBLEdBQUVHLEVBQVdILEVBQUEsR0FDZ0JJLEVBQUFILElBQVpqM0MsRUFBQUEsRUFBQUEsVUFBUyxJQUFHLEdBQXJDOVksRUFBUWt3RCxFQUFBLEdBQUVDLEVBQVdELEVBQUEsR0FDdEIxcEIsRUFBV1YsS0F5QmpCLE9BQ0liLEVBQUFBLGNBQUFBLEVBQUFBLFNBQUEsS0FDSUEsRUFBQUEsY0FBQSxXQUFLLFFBQ0xBLEVBQUFBLGNBQUEsYUFBTyxRQUNQQSxFQUFBQSxjQUFBLFNBQU9ya0QsS0FBSyxPQUFPeUYsTUFBTzJwRSxFQUFVSSxTQVpyQixTQUFDenZELEdBQ3BCc3ZELEVBQVl0dkQsRUFBTTFTLE9BQU81SCxNQUM3QixJQVdRNCtDLEVBQUFBLGNBQUEsV0FDQUEsRUFBQUEsY0FBQSxhQUFPLE9BQ1BBLEVBQUFBLGNBQUEsU0FBT3JrRCxLQUFLLFdBQVd5RixNQUFPMlosRUFBVW93RCxTQVh6QixTQUFDenZELEdBQ3BCd3ZELEVBQVl4dkQsRUFBTTFTLE9BQU81SCxNQUM3QixJQVVRNCtDLEVBQUFBLGNBQUEsV0FDQUEsRUFBQUEsY0FBQSxVQUFRL2tCLFFBaENGLFdBRVY3RSxRQUFReG9CLElBQUksU0FDWnMxRCxHQUFLa0ksS0FBSyxlQUFnQixDQUN0QkwsU0FBQUEsRUFDQU0sSUFBS3R3RCxJQUNOOEosTUFBSyxTQUFVdzNCLEdBQ2RqbUIsUUFBUXhvQixJQUFJeXVDLEdBRVprRixFQUFTLFlBQ2IsSUFBRSxPQUFPLFNBQVVsckIsR0FDZkQsUUFBUXhvQixJQUFJeW9CLEVBQ2hCLEdBQ0osR0FtQmdDLE1BR3BDLEVDckNBLEdBTmlCLFdBQ2IsT0FDSTJwQixFQUFBQSxjQUFBLFdBQUssV0FFYixFQ09BLEdBVlksV0FDUixPQUNJQSxFQUFBQSxjQUFBLFdBR0lBLEVBQUFBLGNBQUNtRixHQUFNLE1BR25CLEVDSEEsSXREa1FFM1gsR1A4RkEvcUMsRzZEL1VGLFV0RGlQRStxQyxHc0RsUWlDLENBQy9CLENBQ0lQLEtBQU0sSUFDTjN0QixRQUFTMGdDLEVBQUFBLGNBQUNzckIsR0FBRyxNQUNidm9FLFNBQVUsQ0FDTixDQUNJa3FDLEtBQU0sR0FDTjN0QixRQUFTMGdDLEVBQUFBLGNBQUN1ckIsR0FBSyxPQUVuQixDQUNJdCtCLEtBQU0sV0FDTjN0QixRQUFTMGdDLEVBQUFBLGNBQUN3ckIsR0FBUSxVM0RrdUI1QixTQUF1Qnh1QixHQUMzQixNQUFNeXVCLEVBQWV6dUIsRUFBSzFpRCxPQUN0QjBpRCxFQUFLMWlELE9BQ2Esb0JBQVhBLE9BQ1BBLFlBQ0E2d0MsRUFDRWdvQixPQUNvQixJQUFqQnNZLFFBQzBCLElBQTFCQSxFQUFhbHhFLGVBQzJCLElBQXhDa3hFLEVBQWFseEUsU0FBU0MsY0FDekJreEUsR0FBWXZZLEVBT2xCLElBQUkxbEIsRUFDSixHQU5BeEIsRUFDRStRLEVBQUt4UCxPQUFPM3pDLE9BQVMsRUFDckIsNkRBSUVtakQsRUFBS3ZQLG1CQUNQQSxFQUFxQnVQLEVBQUt2UCx3QkFDckIsR0FBSXVQLEVBQUsydUIsb0JBQXFCLENBRW5DLElBQUlBLEVBQXNCM3VCLEVBQUsydUIsb0JBQy9CbCtCLEVBQXNCRyxJQUFLLENBQ3pCOEgsaUJBQWtCaTJCLEVBQW9CLzlCLElBRXpDLE1BQ0NILEVBQXFCZ0ksR0FJdkIsSUFRSW0yQixFQTZEQTNpQixFQW9EQW5JLEVBekhBblQsRUFBMEIsQ0FBQyxFQUUzQmsrQixFQUFhdCtCLEVBQ2Z5UCxFQUFLeFAsT0FDTEMsT0FDQXRDLEVBQ0F3QyxHQUdFUSxFQUFXNk8sRUFBSzdPLFVBQVksSUFDNUIyOUIsRUFBbUI5dUIsRUFBSyt1Qix1QkFBeUI3dkIsR0FDakRmLEVBQXdCNkIsRUFBS2d2QiwyQkFHN0J0cUIsRUFBTWhWLEVBQUEsQ0FDUnUvQixtQkFBbUIsRUFDbkJDLHdCQUF3QixFQUN4QmxwQixxQkFBcUIsRUFDckJtcEIsb0JBQW9CLEVBQ3BCcDVCLHNCQUFzQixFQUN0QnE1QixzQ0FBc0MsR0FDbkNwdkIsRUFBSzBFLFFBR04ycUIsRUFBdUMsS0FFdkNDLEVBQWMsSUFBSXR5RSxJQUVsQnV5RSxFQUFzRCxLQUV0REMsRUFBa0UsS0FFbEVDLEVBQXNELEtBT3REQyxFQUE4QyxNQUF0QjF2QixFQUFLMnZCLGNBRTdCQyxFQUFpQjMrQixFQUFZNDlCLEVBQVk3dUIsRUFBS3JGLFFBQVEzL0IsU0FBVW0yQixHQUNoRTArQixFQUFrQyxLQUV0QyxHQUFzQixNQUFsQkQsSUFBMkJ6eEIsRUFBdUIsQ0FHcEQsSUFBSTlrQixFQUFRcWdCLEdBQXVCLElBQUssQ0FDdEMvSixTQUFVcVEsRUFBS3JGLFFBQVEzL0IsU0FBUzIwQixZQUU5QixRQUFFc0MsRUFBTyxNQUFFckIsR0FBVStRLEdBQXVCa3RCLEdBQ2hEZSxFQUFpQjM5QixFQUNqQjQ5QixFQUFnQixDQUFFLENBQUNqL0IsRUFBTS83QixJQUFLd2tCLEVBQy9CLENBaUJELEdBWkl1MkMsR0FBa0J6eEIsR0FDTDJ4QixHQUNiRixFQUNBZixFQUNBN3VCLEVBQUtyRixRQUFRMy9CLFNBQVMyMEIsVUFFWG9nQyxTQUNYSCxFQUFpQixNQUtoQkEsRUFJRSxHQUFJQSxFQUFlMzdCLE1BQU14bUMsR0FBTUEsRUFBRW1qQyxNQUFNMUUsT0FHNUMrZixHQUFjLE9BQ1QsR0FBSzJqQixFQUFlMzdCLE1BQU14bUMsR0FBTUEsRUFBRW1qQyxNQUFNdUwsU0FHeEMsR0FBSXVJLEVBQU9zQixvQkFBcUIsQ0FJckMsSUFBSTVKLEVBQWE0RCxFQUFLMnZCLGNBQWdCM3ZCLEVBQUsydkIsY0FBY3Z6QixXQUFhLEtBQ2xFQyxFQUFTMkQsRUFBSzJ2QixjQUFnQjN2QixFQUFLMnZCLGNBQWN0ekIsT0FBUyxLQUMxRDJ6QixFQUFzQnZpRSxJQUVuQkEsRUFBRW1qQyxNQUFNdUwsU0FLZSxtQkFBbkIxdUMsRUFBRW1qQyxNQUFNdUwsU0FDWSxJQUEzQjF1QyxFQUFFbWpDLE1BQU11TCxPQUFPNVMsV0FNZDZTLFFBQXlDak8sSUFBM0JpTyxFQUFXM3VDLEVBQUVtakMsTUFBTS83QixLQUNqQ3duQyxRQUFpQ2xPLElBQXZCa08sRUFBTzV1QyxFQUFFbWpDLE1BQU0vN0IsS0FLOUIsR0FBSXduQyxFQUFRLENBQ1YsSUFBSTlNLEVBQU1xZ0MsRUFBZS96QixXQUN0QnB1QyxRQUE4QjBnQyxJQUF4QmtPLEVBQVE1dUMsRUFBRW1qQyxNQUFNLzdCLE1BRXpCbzNDLEVBQWMyakIsRUFBZXR3RSxNQUFNLEVBQUdpd0MsRUFBTSxHQUFHb0MsTUFBTXErQixFQUN0RCxNQUNDL2pCLEVBQWMyakIsRUFBZWorQixNQUFNcStCLEVBRXRDLE1BR0MvakIsRUFBb0MsTUFBdEJqTSxFQUFLMnZCLG1CQXRDbkIxakIsR0FBYyxPQVJkQSxHQUFjLEVBQ2QyakIsRUFBaUIsR0FpRG5CLElBMEJJSyxFQTFCQTczQyxFQUFxQixDQUN2QjR6QixjQUFlaE0sRUFBS3JGLFFBQVFybkIsT0FDNUJ0WSxTQUFVZ2xDLEVBQUtyRixRQUFRMy9CLFNBQ3ZCaTNCLFFBQVMyOUIsRUFDVDNqQixjQUNBckosV0FBWTlLLEdBRVpvNEIsc0JBQTZDLE1BQXRCbHdCLEVBQUsydkIsZUFBZ0MsS0FDNUQ5akIsb0JBQW9CLEVBQ3BCL0UsYUFBYyxPQUNkMUssV0FBYTRELEVBQUsydkIsZUFBaUIzdkIsRUFBSzJ2QixjQUFjdnpCLFlBQWUsQ0FBQyxFQUN0RW9GLFdBQWF4QixFQUFLMnZCLGVBQWlCM3ZCLEVBQUsydkIsY0FBY251QixZQUFlLEtBQ3JFbkYsT0FBUzJELEVBQUsydkIsZUFBaUIzdkIsRUFBSzJ2QixjQUFjdHpCLFFBQVd3ekIsRUFDN0RyeUIsU0FBVSxJQUFJN3FDLElBQ2R3OUQsU0FBVSxJQUFJeDlELEtBS1p5OUQsRUFBK0JyaEMsRUFBY29ZLElBSTdDa3BCLEdBQTRCLEVBTTVCQyxHQUErQixFQUcvQkMsRUFBbUQsSUFBSTU5RCxJQU12RDY5RCxFQUFtRCxLQUluREMsR0FBOEIsRUFNOUIzMUIsR0FBeUIsRUFJekJDLEVBQW9DLEdBSXBDQyxFQUFrQyxHQUdsQzAxQixFQUFtQixJQUFJLzlELElBR3ZCZytELEVBQXFCLEVBS3JCQyxHQUEyQixFQUczQkMsRUFBaUIsSUFBSWwrRCxJQUdyQndvQyxFQUFtQixJQUFJbitDLElBR3ZCaytDLEVBQW1CLElBQUl2b0MsSUFHdkJtK0QsRUFBaUIsSUFBSW4rRCxJQUlyQnNvQyxFQUFrQixJQUFJaitDLElBTXRCdWpELEdBQWtCLElBQUk1dEMsSUFJdEJvK0QsR0FBbUIsSUFBSXArRCxJQUl2QnErRCxHQUFxQixJQUFJcitELElBT3pCcytELElBQTBCLEVBK0c5QixTQUFTQyxHQUNQcG1CLEVBQ0F2UixRQUFBLElBQUFBLElBQUFBLEVBR0ksQ0FBQyxHQUVMbmhCLEVBQUtzWCxFQUFBLEdBQ0F0WCxFQUNBMHlCLEdBS0wsSUFBSXFtQixFQUE4QixHQUM5QkMsRUFBZ0MsR0FFaEMxc0IsRUFBT3VxQixtQkFDVDcyQyxFQUFNb2xCLFNBQVN4K0MsU0FBUSxDQUFDdStDLEVBQVMzaUMsS0FDVCxTQUFsQjJpQyxFQUFRbmxCLFFBQ042aUIsRUFBZ0JuMkIsSUFBSWxLLEdBRXRCdzJELEVBQW9CeGtFLEtBQUtnTyxHQUl6QnUyRCxFQUFrQnZrRSxLQUFLZ08sR0FFMUIsSUFPTCxJQUFJMDBELEdBQWF0d0UsU0FBU3F5RSxHQUN4QkEsRUFBV2o1QyxFQUFPLENBQ2hCNmlCLGdCQUFpQm0yQixFQUNqQm5tQiw0QkFBNkIxUixFQUFLMlIsbUJBQ2xDRixvQkFBdUMsSUFBbkJ6UixFQUFLalEsY0FLekJvYixFQUFPdXFCLG9CQUNUa0MsRUFBa0JueUUsU0FBUzRiLEdBQVF3ZCxFQUFNb2xCLFNBQVN4cUMsT0FBTzRILEtBQ3pEdzJELEVBQW9CcHlFLFNBQVM0YixHQUFRMDJELEdBQWMxMkQsS0FFdkQsQ0FPQSxTQUFTMjJELEdBQ1B2MkQsRUFDQTh2QyxFQUEwRTBtQixHQUMvQixJQUFBQyxFQUFBQyxFQUFBLElBY3ZDbHdCLEdBZEosVUFBRWxZLFFBQVMsSUFBQWtvQyxFQUE4QixDQUFDLEVBQUNBLEVBT3ZDRyxFQUNrQixNQUFwQnY1QyxFQUFNb3BCLFlBQ3lCLE1BQS9CcHBCLEVBQU13cUIsV0FBVzdLLFlBQ2pCZ0MsR0FBaUIzaEIsRUFBTXdxQixXQUFXN0ssYUFDUCxZQUEzQjNmLEVBQU13cUIsV0FBV3hxQixRQUNlLEtBQWxCLE9BQWRxNUMsRUFBQXoyRCxFQUFTb2QsWUFBSyxFQUFkcTVDLEVBQWdCRyxhQUtkcHdCLEVBRkFzSixFQUFTdEosV0FDUDlqRCxPQUFPNk0sS0FBS3VnRCxFQUFTdEosWUFBWTNrRCxPQUFTLEVBQy9CaXVELEVBQVN0SixXQUdULEtBRU5td0IsRUFFSXY1QyxFQUFNb3BCLFdBR04sS0FJZixJQUFJcEYsRUFBYTBPLEVBQVMxTyxXQUN0QmdGLEdBQ0VocEIsRUFBTWdrQixXQUNOME8sRUFBUzFPLFdBQ1QwTyxFQUFTN1ksU0FBVyxHQUNwQjZZLEVBQVN6TyxRQUVYamtCLEVBQU1na0IsV0FJTit6QixFQUFXLzNDLEVBQU0rM0MsU0FDakJBLEVBQVNoeUMsS0FBTyxJQUNsQmd5QyxFQUFXLElBQUl4OUQsSUFBSXc5RCxHQUNuQkEsRUFBU254RSxTQUFRLENBQUNpMkMsRUFBRzF5QyxJQUFNNHRFLEVBQVNqdUUsSUFBSUssRUFBRzgxQyxPQUs3QyxJQXNCSTZTLEVBdEJBVyxHQUM0QixJQUE5QndrQixHQUNnQyxNQUEvQmo0QyxFQUFNd3FCLFdBQVc3SyxZQUNoQmdDLEdBQWlCM2hCLEVBQU13cUIsV0FBVzdLLGNBQ0YsS0FBaEMsT0FBQTI1QixFQUFBMTJELEVBQVNvZCxZQUFULEVBQUFzNUMsRUFBZ0JFLGFBcUJwQixHQWxCSWhELElBQ0ZDLEVBQWFELEVBQ2JBLE9BQXFCemdDLEdBR25Cc2lDLEdBRU9MLElBQWtCcmhDLEVBQWNvWSxNQUVoQ2lwQixJQUFrQnJoQyxFQUFjOGlDLEtBQ3pDN3hCLEVBQUtyRixRQUFRL3RDLEtBQUtvTyxFQUFVQSxFQUFTb2QsT0FDNUJnNEMsSUFBa0JyaEMsRUFBYytpQyxTQUN6Qzl4QixFQUFLckYsUUFBUTM2QyxRQUFRZ2IsRUFBVUEsRUFBU29kLFFBTXRDZzRDLElBQWtCcmhDLEVBQWNvWSxJQUFLLENBRXZDLElBQUk0cUIsRUFBYXhCLEVBQXVCNXNFLElBQUl5MEIsRUFBTXBkLFNBQVMyMEIsVUFDdkRvaUMsR0FBY0EsRUFBV2p0RCxJQUFJOUosRUFBUzIwQixVQUN4Q3ViLEVBQXFCLENBQ25CSSxnQkFBaUJsekIsRUFBTXBkLFNBQ3ZCdXdDLGFBQWN2d0MsR0FFUHUxRCxFQUF1QnpyRCxJQUFJOUosRUFBUzIwQixZQUc3Q3ViLEVBQXFCLENBQ25CSSxnQkFBaUJ0d0MsRUFDakJ1d0MsYUFBY256QixFQUFNcGQsZ0JBR25CLEdBQUlzMUQsRUFBOEIsQ0FFdkMsSUFBSTBCLEVBQVV6QixFQUF1QjVzRSxJQUFJeTBCLEVBQU1wZCxTQUFTMjBCLFVBQ3BEcWlDLEVBQ0ZBLEVBQVE1MEUsSUFBSTRkLEVBQVMyMEIsV0FFckJxaUMsRUFBVSxJQUFJaDFFLElBQVksQ0FBQ2dlLEVBQVMyMEIsV0FDcEM0Z0MsRUFBdUJydUUsSUFBSWsyQixFQUFNcGQsU0FBUzIwQixTQUFVcWlDLElBRXREOW1CLEVBQXFCLENBQ25CSSxnQkFBaUJsekIsRUFBTXBkLFNBQ3ZCdXdDLGFBQWN2d0MsRUFFakIsQ0FFRGsyRCxHQUFXeGhDLEVBQUMsQ0FBRCxFQUVKb2IsRUFBVSxDQUNidEosYUFDQXBGLGFBQ0E0UCxjQUFlb2tCLEVBQ2ZwMUQsV0FDQWl4QyxhQUFhLEVBQ2JySixXQUFZOUssR0FDWmdQLGFBQWMsT0FDZG9wQixzQkFBdUIrQixHQUNyQmozRCxFQUNBOHZDLEVBQVM3WSxTQUFXN1osRUFBTTZaLFNBRTVCNFoscUJBQ0Fza0IsYUFFRixDQUNFamxCLHFCQUNBNWhCLFdBQXlCLElBQWRBLElBS2Y4bUMsRUFBZ0JyaEMsRUFBY29ZLElBQzlCa3BCLEdBQTRCLEVBQzVCQyxHQUErQixFQUMvQkcsR0FBOEIsRUFDOUIzMUIsR0FBeUIsRUFDekJDLEVBQTBCLEdBQzFCQyxFQUF3QixFQUMxQixDQW9KQWlELGVBQWVpMEIsR0FDYmxtQixFQUNBaHhDLEVBQ0F1K0IsR0FnQkEwMkIsR0FBK0JBLEVBQTRCaE4sUUFDM0RnTixFQUE4QixLQUM5QkcsRUFBZ0Jwa0IsRUFDaEJ5a0IsR0FDb0QsS0FBakRsM0IsR0FBUUEsRUFBSzQ0QixnQ0E4bURsQixTQUNFbjNELEVBQ0FpM0IsR0FFQSxHQUFJczlCLEdBQXdCRSxFQUFtQixDQUM3QyxJQUFJNzBELEVBQU13M0QsR0FBYXAzRCxFQUFVaTNCLEdBQ2pDczlCLEVBQXFCMzBELEdBQU82MEQsR0FDN0IsQ0FDSCxDQWxuREU0QyxDQUFtQmo2QyxFQUFNcGQsU0FBVW9kLEVBQU02WixTQUN6Q28rQixHQUFrRSxLQUFyQzkyQixHQUFRQSxFQUFLc1Msb0JBRTFDeWtCLEdBQXVFLEtBQXZDLzJCLEdBQVFBLEVBQUsrNEIsc0JBRTdDLElBQUlsM0IsRUFBY3d6QixHQUFzQkMsRUFDcEMwRCxFQUFvQmg1QixHQUFRQSxFQUFLaTVCLG1CQUNqQ3ZnQyxFQUFVaEIsRUFBWW1LLEVBQWFwZ0MsRUFBVW0yQixHQUM3QzdILEdBQXlDLEtBQTVCaVEsR0FBUUEsRUFBS2pRLFdBRTFCbXBDLEVBQVczQyxHQUFjNzlCLEVBQVNtSixFQUFhcGdDLEVBQVMyMEIsVUFNNUQsR0FMSThpQyxFQUFTMUMsUUFBVTBDLEVBQVN4Z0MsVUFDOUJBLEVBQVV3Z0MsRUFBU3hnQyxVQUloQkEsRUFBUyxDQUNaLElBQUksTUFBRTVZLEVBQUssZ0JBQUVxNUMsRUFBZSxNQUFFOWhDLEdBQVUraEMsR0FDdEMzM0QsRUFBUzIwQixVQWFYLFlBWEE0aEMsR0FDRXYyRCxFQUNBLENBQ0VpM0IsUUFBU3lnQyxFQUNUdDJCLFdBQVksQ0FBQyxFQUNiQyxPQUFRLENBQ04sQ0FBQ3pMLEVBQU0vN0IsSUFBS3drQixJQUdoQixDQUFFaVEsYUFHTCxDQVFELEdBQ0VsUixFQUFNNnpCLGNBQ0xuUixJQTR5SG1CcitDLEVBM3lISDI3QixFQUFNcGQsU0EyeUhVdGUsRUEzeUhBc2UsRUE0eUhqQ3ZlLEVBQUVrekMsV0FBYWp6QyxFQUFFaXpDLFVBQVlsekMsRUFBRXdoQixTQUFXdmhCLEVBQUV1aEIsU0FJakMsS0FBWHhoQixFQUFFbXpDLEtBRWMsS0FBWGx6QyxFQUFFa3pDLEtBQ0FuekMsRUFBRW16QyxPQUFTbHpDLEVBQUVrekMsTUFHRixLQUFYbHpDLEVBQUVrekMsVUFyekhQMkosR0FBUUEsRUFBS2MsWUFBY04sR0FBaUJSLEVBQUtjLFdBQVd0QyxhQUc5RCxZQURBdzVCLEdBQW1CdjJELEVBQVUsQ0FBRWkzQixXQUFXLENBQUUzSSxjQXd5SGxELElBQTBCN3NDLEVBQWFDLEVBbnlIbkN1ekUsRUFBOEIsSUFBSXJ5QixnQkFDbEMsSUFNSXZDLEVBTkFpRSxFQUFVUyxHQUNaQyxFQUFLckYsUUFDTDMvQixFQUNBaTFELEVBQTRCNXhCLE9BQzVCOUUsR0FBUUEsRUFBS2MsWUFJZixHQUFJZCxHQUFRQSxFQUFLb0gsYUFLZnRGLEVBQXNCLENBQ3BCeUYsR0FBb0I3TyxHQUFTckIsTUFBTS83QixHQUNuQyxDQUFFbFcsS0FBTTB4QyxFQUFXaFgsTUFBT0EsTUFBT2tnQixFQUFLb0gsb0JBRW5DLEdBQ0xwSCxHQUNBQSxFQUFLYyxZQUNMTixHQUFpQlIsRUFBS2MsV0FBV3RDLFlBQ2pDLENBRUEsSUFBSXVELFFBeUZSMkMsZUFDRXFCLEVBQ0F0a0MsRUFDQXEvQixFQUNBcEksRUFDQTJnQyxFQUNBcjVCLFFBQUEsSUFBQUEsSUFBQUEsRUFBbUQsQ0FBQyxHQUVwRHM1QixLQUdBLElBOENJdi9CLEVBOUNBc1AsRUE4NkhSLFNBQ0U1bkMsRUFDQXEvQixHQVlBLE1BVmlELENBQy9DamlCLE1BQU8sYUFDUHBkLFdBQ0ErOEIsV0FBWXNDLEVBQVd0QyxXQUN2QkMsV0FBWXFDLEVBQVdyQyxXQUN2QkMsWUFBYW9DLEVBQVdwQyxZQUN4QkMsU0FBVW1DLEVBQVduQyxTQUNyQkMsS0FBTWtDLEVBQVdsQyxLQUNqQmg2QixLQUFNazhCLEVBQVdsOEIsS0FHckIsQ0E3N0hxQjIwRCxDQUF3QjkzRCxFQUFVcS9CLEdBR25ELEdBRkE2MkIsR0FBWSxDQUFFdHVCLGNBQWMsQ0FBRXRaLFdBQThCLElBQW5CaVEsRUFBS2pRLFlBRTFDc3BDLEVBQVksQ0FDZCxJQUFJRyxRQUF1QkMsR0FDekIvZ0MsRUFDQWozQixFQUFTMjBCLFNBQ1QyUCxFQUFRakIsUUFFVixHQUE0QixZQUF4QjAwQixFQUFlcDBFLEtBQ2pCLE1BQU8sQ0FBRXMwRSxnQkFBZ0IsR0FDcEIsR0FBNEIsVUFBeEJGLEVBQWVwMEUsS0FBa0IsQ0FDMUMsSUFBSSxNQUFFMDZCLEVBQUssZ0JBQUVxNUMsRUFBZSxNQUFFOWhDLEdBQVVzaUMsR0FDdENsNEQsRUFBUzIwQixTQUNUb2pDLEdBRUYsTUFBTyxDQUNMOWdDLFFBQVN5Z0MsRUFDVHIzQixvQkFBcUIsQ0FDbkJ6SyxFQUFNLzdCLEdBQ04sQ0FDRWxXLEtBQU0weEMsRUFBV2hYLE1BQ2pCQSxVQUlQLENBQU0sSUFBSzA1QyxFQUFlOWdDLFFBQVMsQ0FDbEMsSUFBSSxnQkFBRXlnQyxFQUFlLE1BQUVyNUMsRUFBSyxNQUFFdVgsR0FBVStoQyxHQUN0QzMzRCxFQUFTMjBCLFVBRVgsTUFBTyxDQUNMc0MsUUFBU3lnQyxFQUNUcjNCLG9CQUFxQixDQUNuQnpLLEVBQU0vN0IsR0FDTixDQUNFbFcsS0FBTTB4QyxFQUFXaFgsTUFDakJBLFVBSVAsQ0FDQzRZLEVBQVU4Z0MsRUFBZTlnQyxPQUU1QixDQUlELElBQUlraEMsRUFBY3oxQixHQUFlekwsRUFBU2ozQixHQUUxQyxHQUFLbTRELEVBQVl2aUMsTUFBTXRkLFFBQVc2L0MsRUFBWXZpQyxNQUFNMUUsTUFrQmxELEdBRkFvSCxTQU5vQjgvQixHQUNsQixTQUNBOXpCLEVBQ0EsQ0FBQzZ6QixHQUNEbGhDLElBRWUsR0FFYnFOLEVBQVFqQixPQUFPRSxRQUNqQixNQUFPLENBQUUwMEIsZ0JBQWdCLFFBbEIzQjMvQixFQUFTLENBQ1AzMEMsS0FBTTB4QyxFQUFXaFgsTUFDakJBLE1BQU9xZ0IsR0FBdUIsSUFBSyxDQUNqQ0QsT0FBUTZGLEVBQVE3RixPQUNoQjlKLFNBQVUzMEIsRUFBUzIwQixTQUNuQnlOLFFBQVMrMUIsRUFBWXZpQyxNQUFNLzdCLE1BaUJqQyxHQUFJK3JDLEdBQWlCdE4sR0FBUyxDQUM1QixJQUFJdHpDLEVBa0JKLE9BaEJFQSxFQURFdTVDLEdBQXdCLE1BQWhCQSxFQUFLdjVDLFFBQ0x1NUMsRUFBS3Y1QyxRQUtBMC9DLEdBQ2JwTSxFQUFPK0wsU0FBU0UsUUFBUTU3QyxJQUFJLFlBQzVCLElBQUk4N0MsSUFBSUgsRUFBUWpoQyxLQUNoQjh5QixLQUVxQi9ZLEVBQU1wZCxTQUFTMjBCLFNBQVd2WCxFQUFNcGQsU0FBU2lELGFBRTVEbzFELEdBQXdCL3pCLEVBQVNoTSxFQUFRLENBQzdDK0csYUFDQXI2QyxZQUVLLENBQUVpekUsZ0JBQWdCLEVBQzFCLENBRUQsR0FBSWx5QixHQUFpQnpOLEdBQ25CLE1BQU1vRyxHQUF1QixJQUFLLENBQUUvNkMsS0FBTSxpQkFHNUMsR0FBSTQ4QyxHQUFjakksR0FBUyxDQUd6QixJQUFJdU4sRUFBZ0JDLEdBQW9CN08sRUFBU2toQyxFQUFZdmlDLE1BQU0vN0IsSUFXbkUsT0FKK0IsS0FBMUIwa0MsR0FBUUEsRUFBS3Y1QyxXQUNoQm93RSxFQUFnQnJoQyxFQUFjOGlDLE1BR3pCLENBQ0w1L0IsVUFDQW9KLG9CQUFxQixDQUFDd0YsRUFBY2pRLE1BQU0vN0IsR0FBSXkrQixHQUVqRCxDQUVELE1BQU8sQ0FDTHJCLFVBQ0FvSixvQkFBcUIsQ0FBQzgzQixFQUFZdmlDLE1BQU0vN0IsR0FBSXkrQixHQUVoRCxDQTlONkJnZ0MsQ0FDdkJoMEIsRUFDQXRrQyxFQUNBdStCLEVBQUtjLFdBQ0xwSSxFQUNBd2dDLEVBQVMxQyxPQUNULENBQUUvdkUsUUFBU3U1QyxFQUFLdjVDLFFBQVNzcEMsY0FHM0IsR0FBSWdTLEVBQWEyM0IsZUFDZixPQUtGLEdBQUkzM0IsRUFBYUQsb0JBQXFCLENBQ3BDLElBQUsrQixFQUFTOUosR0FBVWdJLEVBQWFELG9CQUNyQyxHQUNFRSxHQUFjakksSUFDZGlFLEVBQXFCakUsRUFBT2phLFFBQ0osTUFBeEJpYSxFQUFPamEsTUFBTStkLE9BV2IsT0FUQTY0QixFQUE4QixVQUU5QnNCLEdBQW1CdjJELEVBQVUsQ0FDM0JpM0IsUUFBU3FKLEVBQWFySixRQUN0Qm1LLFdBQVksQ0FBQyxFQUNiQyxPQUFRLENBQ04sQ0FBQ2UsR0FBVTlKLEVBQU9qYSxRQUt6QixDQUVENFksRUFBVXFKLEVBQWFySixTQUFXQSxFQUNsQ29KLEVBQXNCQyxFQUFhRCxvQkFDbkNrM0IsRUFBb0IxdkIsR0FBcUI3bkMsRUFBVXUrQixFQUFLYyxZQUN4RC9RLEdBQVksRUFFWm1wQyxFQUFTMUMsUUFBUyxFQUdsQnp3QixFQUFVUyxHQUNSQyxFQUFLckYsUUFDTDJFLEVBQVFqaEMsSUFDUmloQyxFQUFRakIsT0FFWCxDQUdELElBQUksZUFDRjQwQixFQUNBaGhDLFFBQVNzaEMsRUFBYyxXQUN2Qm4zQixFQUFVLE9BQ1ZDLFNBMktKNEIsZUFDRXFCLEVBQ0F0a0MsRUFDQWkzQixFQUNBMmdDLEVBQ0FKLEVBQ0FuNEIsRUFDQW01QixFQUNBeHpFLEVBQ0F5ekUsRUFDQW5xQyxFQUNBK1IsR0FHQSxJQUFJazNCLEVBQ0ZDLEdBQXNCM3ZCLEdBQXFCN25DLEVBQVVxL0IsR0FJbkRxNUIsRUFDRnI1QixHQUNBbTVCLEdBQ0E3d0IsR0FBNEI0dkIsR0FRMUJvQixJQUNEbEQsR0FDQy9yQixFQUFPc0IscUJBQXdCeXRCLEdBT25DLEdBQUliLEVBQVksQ0FDZCxHQUFJZSxFQUE2QixDQUMvQixJQUFJbnlCLEVBQWFveUIsR0FBcUJ2NEIsR0FDdEM2MUIsR0FBV3hoQyxFQUFDLENBRVJrVCxXQUFZMnZCLFFBQ09wa0MsSUFBZnFULEVBQTJCLENBQUVBLGNBQWUsQ0FBQyxHQUVuRCxDQUNFbFksYUFHTCxDQUVELElBQUl5cEMsUUFBdUJDLEdBQ3pCL2dDLEVBQ0FqM0IsRUFBUzIwQixTQUNUMlAsRUFBUWpCLFFBR1YsR0FBNEIsWUFBeEIwMEIsRUFBZXAwRSxLQUNqQixNQUFPLENBQUVzMEUsZ0JBQWdCLEdBQ3BCLEdBQTRCLFVBQXhCRixFQUFlcDBFLEtBQWtCLENBQzFDLElBQUksTUFBRTA2QixFQUFLLGdCQUFFcTVDLEVBQWUsTUFBRTloQyxHQUFVc2lDLEdBQ3RDbDRELEVBQVMyMEIsU0FDVG9qQyxHQUVGLE1BQU8sQ0FDTDlnQyxRQUFTeWdDLEVBQ1R0MkIsV0FBWSxDQUFDLEVBQ2JDLE9BQVEsQ0FDTixDQUFDekwsRUFBTS83QixJQUFLd2tCLEdBR2pCLENBQU0sSUFBSzA1QyxFQUFlOWdDLFFBQVMsQ0FDbEMsSUFBSSxNQUFFNVksRUFBSyxnQkFBRXE1QyxFQUFlLE1BQUU5aEMsR0FBVStoQyxHQUN0QzMzRCxFQUFTMjBCLFVBRVgsTUFBTyxDQUNMc0MsUUFBU3lnQyxFQUNUdDJCLFdBQVksQ0FBQyxFQUNiQyxPQUFRLENBQ04sQ0FBQ3pMLEVBQU0vN0IsSUFBS3drQixHQUdqQixDQUNDNFksRUFBVThnQyxFQUFlOWdDLE9BRTVCLENBRUQsSUFBSW1KLEVBQWN3ekIsR0FBc0JDLEdBQ25DenVCLEVBQWVqRCxHQUF3QnpDLEdBQzFDc0YsRUFBS3JGLFFBQ0x2aUIsRUFDQTZaLEVBQ0F5aEMsRUFDQTE0RCxFQUNBMHBDLEVBQU9zQixzQkFBNEMsSUFBckJ5dEIsRUFDOUIvdUIsRUFBTzBxQixxQ0FDUHQwQixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBakssRUFDQWtLLEdBZUYsR0FUQXc0QixJQUNHejJCLEtBQ0duTCxHQUFXQSxFQUFRZ0MsTUFBTXhtQyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBT3VvQyxNQUMvQ2dELEdBQWlCQSxFQUFjbk0sTUFBTXhtQyxHQUFNQSxFQUFFbWpDLE1BQU0vN0IsS0FBT3VvQyxNQUcvRHd6QixJQUE0QkQsRUFHQyxJQUF6QnZ3QixFQUFjdmpELFFBQWdELElBQWhDc2dELEVBQXFCdGdELE9BQWMsQ0FDbkUsSUFBSWkzRSxFQUFrQkMsS0FnQnRCLE9BZkF4QyxHQUNFdjJELEVBQVEwMEIsRUFBQSxDQUVOdUMsVUFDQW1LLFdBQVksQ0FBQyxFQUViQyxPQUNFaEIsR0FBdUJFLEdBQWNGLEVBQW9CLElBQ3JELENBQUUsQ0FBQ0EsRUFBb0IsSUFBS0EsRUFBb0IsR0FBR2hpQixPQUNuRCxNQUNIa29CLEdBQXVCbEcsR0FDdEJ5NEIsRUFBa0IsQ0FBRXQyQixTQUFVLElBQUk3cUMsSUFBSXlsQixFQUFNb2xCLFdBQWMsQ0FBQyxHQUVqRSxDQUFFbFUsY0FFRyxDQUFFMnBDLGdCQUFnQixFQUMxQixDQUVELEdBQUlVLEVBQTZCLENBQy9CLElBQUlLLEVBQWdDLENBQUMsRUFDckMsSUFBS3BCLEVBQVksQ0FFZm9CLEVBQVFweEIsV0FBYTJ2QixFQUNyQixJQUFJL3dCLEVBQWFveUIsR0FBcUJ2NEIsUUFDbkJsTixJQUFmcVQsSUFDRnd5QixFQUFReHlCLFdBQWFBLEVBRXhCLENBQ0dyRSxFQUFxQnRnRCxPQUFTLElBQ2hDbTNFLEVBQVF4MkIsU0FxSWQsU0FDRUwsR0FVQSxPQVJBQSxFQUFxQm4rQyxTQUFTaW1CLElBQzVCLElBQUlzNEIsRUFBVW5sQixFQUFNb2xCLFNBQVM3NUMsSUFBSXNoQixFQUFHckssS0FDaENxNUQsRUFBc0JueEIsUUFDeEIzVSxFQUNBb1AsRUFBVUEsRUFBUWprQyxVQUFPNjBCLEdBRTNCL1YsRUFBTW9sQixTQUFTdDdDLElBQUkraUIsRUFBR3JLLElBQUtxNUQsRUFBb0IsSUFFMUMsSUFBSXRoRSxJQUFJeWxCLEVBQU1vbEIsU0FDdkIsQ0FqSnlCMDJCLENBQStCLzJCLElBRXBEK3pCLEdBQVk4QyxFQUFTLENBQUUxcUMsYUFDeEIsQ0FFRDZULEVBQXFCbitDLFNBQVNpbUIsSUFDeEJ5ckQsRUFBaUI1ckQsSUFBSUcsRUFBR3JLLE1BQzFCdTVELEdBQWFsdkQsRUFBR3JLLEtBRWRxSyxFQUFHcTRCLFlBSUxvekIsRUFBaUJ4dUUsSUFBSStpQixFQUFHckssSUFBS3FLLEVBQUdxNEIsV0FDakMsSUFJSCxJQUFJODJCLEVBQWlDQSxJQUNuQ2ozQixFQUFxQm4rQyxTQUFTYixHQUFNZzJFLEdBQWFoMkUsRUFBRXljLE9BQ2pEcTFELEdBQ0ZBLEVBQTRCNXhCLE9BQU9oeEMsaUJBQ2pDLFFBQ0ErbUUsR0FJSixJQUFJLGNBQUVDLEVBQWEsZUFBRS96QixTQUNiZzBCLEdBQ0psOEMsRUFBTTZaLFFBQ05BLEVBQ0FtTyxFQUNBakQsRUFDQW1DLEdBR0osR0FBSUEsRUFBUWpCLE9BQU9FLFFBQ2pCLE1BQU8sQ0FBRTAwQixnQkFBZ0IsR0FNdkJoRCxHQUNGQSxFQUE0QjV4QixPQUFPL3dDLG9CQUNqQyxRQUNBOG1FLEdBR0pqM0IsRUFBcUJuK0MsU0FBU2ltQixHQUFPeXJELEVBQWlCMTlELE9BQU9pUyxFQUFHckssT0FHaEUsSUFBSW9uQyxFQUFXRixHQUFhLElBQUl1eUIsS0FBa0IvekIsSUFDbEQsR0FBSTBCLEVBQVUsQ0FDWixHQUFJQSxFQUFTelMsS0FBTzZRLEVBQWN2akQsT0FBUSxDQUl4QyxJQUFJMDNFLEVBQ0ZwM0IsRUFBcUI2RSxFQUFTelMsSUFBTTZRLEVBQWN2akQsUUFBUStkLElBQzVEdWdDLEVBQWlCLzlDLElBQUltM0UsRUFDdEIsQ0FJRCxhQUhNbEIsR0FBd0IvekIsRUFBUzBDLEVBQVMxTyxPQUFRLENBQ3REdHpDLFlBRUssQ0FBRWl6RSxnQkFBZ0IsRUFDMUIsQ0FHRCxJQUFJLFdBQUU3MkIsRUFBVSxPQUFFQyxHQUFXOEQsR0FDM0IvbkIsRUFDQTZaLEVBQ0FtTyxFQUNBaTBCLEVBQ0FoNUIsRUFDQThCLEVBQ0FtRCxFQUNBQyxJQUlGQSxHQUFnQnZoRCxTQUFRLENBQUNnaUQsRUFBYzVELEtBQ3JDNEQsRUFBYTBLLFdBQVduTixLQUlsQkEsR0FBV3lDLEVBQWFuekIsT0FDMUIweUIsR0FBZ0J2dEMsT0FBT29xQyxFQUN4QixHQUNELElBSUFzSCxFQUFPc0IscUJBQXVCeXRCLEdBQW9CcjdDLEVBQU1pa0IsUUFDMUQzK0MsT0FBT3c4QyxRQUFROWhCLEVBQU1pa0IsUUFDbEJuSSxRQUFPNlcsSUFBQSxJQUFFbDJDLEdBQUdrMkMsRUFBQSxPQUFNM0ssRUFBY25NLE1BQU14bUMsR0FBTUEsRUFBRW1qQyxNQUFNLzdCLEtBQU9BLEdBQUcsSUFDOUQ3VixTQUFRbXRELElBQXFCLElBQW5CL08sRUFBUy9qQixHQUFNOHlCLEVBQ3hCOVAsRUFBUzMrQyxPQUFPOEQsT0FBTzY2QyxHQUFVLENBQUMsRUFBRyxDQUFFLENBQUNlLEdBQVUvakIsR0FBUSxJQUloRSxJQUFJeTZDLEVBQWtCQyxLQUNsQlMsRUFBcUJDLEdBQXFCN0QsR0FDMUM4RCxFQUNGWixHQUFtQlUsR0FBc0JyM0IsRUFBcUJ0Z0QsT0FBUyxFQUV6RSxPQUFBNnlDLEVBQUEsQ0FDRXVDLFVBQ0FtSyxhQUNBQyxVQUNJcTRCLEVBQXVCLENBQUVsM0IsU0FBVSxJQUFJN3FDLElBQUl5bEIsRUFBTW9sQixXQUFjLENBQUMsRUFFeEUsQ0FsYlltM0IsQ0FDUnIxQixFQUNBdGtDLEVBQ0FpM0IsRUFDQXdnQyxFQUFTMUMsT0FDVHdDLEVBQ0FoNUIsR0FBUUEsRUFBS2MsV0FDYmQsR0FBUUEsRUFBS2k2QixrQkFDYmo2QixHQUFRQSxFQUFLdjVDLFFBQ2J1NUMsSUFBa0MsSUFBMUJBLEVBQUtrNkIsaUJBQ2JucUMsRUFDQStSLEdBR0U0M0IsSUFPSmhELEVBQThCLEtBRTlCc0IsR0FBbUJ2MkQsRUFBUTAwQixFQUFBLENBQ3pCdUMsUUFBU3NoQyxHQUFrQnRoQyxHQUN4QnNQLEdBQXVCbEcsR0FBb0IsQ0FDOUNlLGFBQ0FDLFlBRUosQ0F1WkEsU0FBU3UzQixHQUNQdjRCLEdBRUEsT0FBSUEsSUFBd0JFLEdBQWNGLEVBQW9CLElBSXJELENBQ0wsQ0FBQ0EsRUFBb0IsSUFBS0EsRUFBb0IsR0FBRy9oQyxNQUUxQzhlLEVBQU1vcEIsV0FDOEIsSUFBekM5akQsT0FBTzZNLEtBQUs2dEIsRUFBTW9wQixZQUFZM2tELE9BQ3pCLEtBRUF1N0IsRUFBTW9wQixnQkFKVixDQU9ULENBaWlCQXZELGVBQWVvMUIsR0FDYi96QixFQUNBMEMsRUFBd0I0eUIsR0FTbEIsSUFSTixXQUNFdjZCLEVBQVUsa0JBQ1ZtNUIsRUFBaUIsUUFDakJ4ekUsY0FLRSxDQUFDLEVBQUM0MEUsRUFFRjV5QixFQUFTM0MsU0FBU0UsUUFBUXo2QixJQUFJLHdCQUNoQ2cyQixHQUF5QixHQUczQixJQUFJOS9CLEVBQVdnbkMsRUFBUzNDLFNBQVNFLFFBQVE1N0MsSUFBSSxZQUM3Q3NyQyxFQUFVajBCLEVBQVUsdURBQ3BCQSxFQUFXMGtDLEdBQ1Qxa0MsRUFDQSxJQUFJeWtDLElBQUlILEVBQVFqaEMsS0FDaEI4eUIsR0FFRixJQUFJMGpDLEVBQW1CcmxDLEVBQWVwWCxFQUFNcGQsU0FBVUEsRUFBVSxDQUM5RDQyRCxhQUFhLElBR2YsR0FBSXpiLEVBQVcsQ0FDYixJQUFJMmUsR0FBbUIsRUFFdkIsR0FBSTl5QixFQUFTM0MsU0FBU0UsUUFBUXo2QixJQUFJLDJCQUVoQ2d3RCxHQUFtQixPQUNkLEdBQUl0OEIsR0FBbUI3NEMsS0FBS3FiLEdBQVcsQ0FDNUMsTUFBTXFELEVBQU0yaEMsRUFBS3JGLFFBQVFjLFVBQVV6Z0MsR0FDbkM4NUQsRUFFRXoyRCxFQUFJeWhDLFNBQVcydUIsRUFBYXp6RCxTQUFTOGtDLFFBRUksTUFBekN4TyxFQUFjanpCLEVBQUlzeEIsU0FBVXdCLEVBQy9CLENBRUQsR0FBSTJqQyxFQU1GLFlBTEk5MEUsRUFDRnl1RSxFQUFhenpELFNBQVNoYixRQUFRZ2IsR0FFOUJ5ekQsRUFBYXp6RCxTQUFTeFosT0FBT3daLEdBSWxDLENBSURpMUQsRUFBOEIsS0FFOUIsSUFBSThFLEdBQ1UsSUFBWi8wRSxFQUFtQit1QyxFQUFjK2lDLFFBQVUvaUMsRUFBYzhpQyxNQUl2RCxXQUFFOTVCLEVBQVUsV0FBRUMsRUFBVSxZQUFFQyxHQUFnQjdmLEVBQU13cUIsWUFFakR2SSxJQUNBbTVCLEdBQ0R6N0IsR0FDQUMsR0FDQUMsSUFFQW9DLEVBQWFzSSxHQUE0QnZxQixFQUFNd3FCLGFBTWpELElBQUk4d0IsRUFBbUJyNUIsR0FBY201QixFQUNyQyxHQUNFMzdCLEdBQWtDL3lCLElBQUlrOUIsRUFBUzNDLFNBQVNqSSxTQUN4RHM4QixHQUNBMzVCLEdBQWlCMjVCLEVBQWlCMzdCLGtCQUU1Qm02QixHQUFnQjZDLEVBQXVCRixFQUFrQixDQUM3RHg2QixXQUFVM0ssRUFBQSxHQUNMZ2tDLEVBQWdCLENBQ25CMTdCLFdBQVloOUIsSUFHZDZ3QyxtQkFBb0J3a0IsUUFFakIsQ0FHTCxJQUFJbUMsRUFBcUIzdkIsR0FDdkJneUIsRUFDQXg2QixTQUVJNjNCLEdBQWdCNkMsRUFBdUJGLEVBQWtCLENBQzdEckMscUJBRUFnQixvQkFFQTNuQixtQkFBb0J3a0IsR0FFdkIsQ0FDSCxDQUlBcHlCLGVBQWVtMUIsR0FDYnowRSxFQUNBMmdELEVBQ0FjLEVBQ0FuTyxHQUVBLElBQ0UsSUFBSW9PLFFBdzZEVnBDLGVBQ0U2d0IsRUFDQW53RSxFQUNBMmdELEVBQ0FjLEVBQ0FuTyxFQUNBdEIsRUFDQUYsRUFDQXVrQyxHQUVBLElBQUlDLEVBQWlCNzBCLEVBQWNqTSxRQUNqQyxDQUFDZ0csRUFBSzFzQyxJQUFNMHNDLEVBQUkvOEMsSUFBSXFRLEVBQUVtakMsTUFBTS83QixLQUM1QixJQUFJN1gsS0FFRms0RSxFQUFnQixJQUFJbDRFLElBS3BCcWpELFFBQWdCeXVCLEVBQWlCLENBQ25DNzhCLFFBQVNBLEVBQVF0SCxLQUFLOW9DLElBQ3BCLElBQUlzekUsRUFBYUYsRUFBZW53RCxJQUFJampCLEVBQU0rdUMsTUFBTS83QixJQW9CaEQsT0FBQTY2QixFQUFBLEdBQ0s3dEMsRUFBSyxDQUNSc3pFLGFBQ0F2dEQsUUFsQjJDd3RELElBQzNDRixFQUFjOTNFLElBQUl5RSxFQUFNK3VDLE1BQU0vN0IsSUFDdkJzZ0UsRUF3Q2ZsM0IsZUFDRXQvQyxFQUNBMmdELEVBQ0F6OUMsRUFDQTh1QyxFQUNBRixFQUNBMmtDLEVBQ0FydEIsR0FFQSxJQUFJelUsRUFDQStoQyxFQUVBQyxFQUNGQyxJQUdBLElBQUkzckIsRUFHQTRyQixFQUFlLElBQUkvdEQsU0FBdUIsQ0FBQ3d0QixFQUFHdm5CLElBQU9rOEIsRUFBU2w4QixJQUNsRTJuRCxFQUFXQSxJQUFNenJCLElBQ2pCdEssRUFBUWpCLE9BQU9oeEMsaUJBQWlCLFFBQVNnb0UsR0FFekMsSUFtQklJLEVBbkJBQyxFQUFpQjF4QixHQUNJLG1CQUFadXhCLEVBQ0Y5dEQsUUFBUW1pQyxPQUNiLElBQUlsb0QsTUFDRixvRUFDTS9DLEVBQUksZUFBZWtELEVBQU0rdUMsTUFBTS83QixHQUFFLE1BSXRDMGdFLEVBQ0wsQ0FDRWoyQixVQUNBNUssT0FBUTd5QyxFQUFNNnlDLE9BQ2QzbEIsUUFBU2c1QixXQUVDNVosSUFBUjZWLEVBQW9CLENBQUNBLEdBQU8sSUFrQnBDLE9BWkV5eEIsRUFERUwsRUFDZUEsR0FBaUJweEIsR0FBaUIweEIsRUFBYzF4QixLQUVoRCxXQUNmLElBRUUsTUFBTyxDQUFFcmxELEtBQU0sT0FBUTIwQyxhQURQb2lDLEtBRWhCLE1BQU94M0UsR0FDUCxNQUFPLENBQUVTLEtBQU0sUUFBUzIwQyxPQUFRcDFDLEVBQ2pDLENBQ0YsRUFQZ0IsR0FVWnVwQixRQUFRa3VELEtBQUssQ0FBQ0YsRUFBZ0JELEdBQWMsRUFHckQsSUFDRSxJQUFJRCxFQUFVMXpFLEVBQU0rdUMsTUFBTWp5QyxHQUUxQixHQUFJa0QsRUFBTSt1QyxNQUFNMUUsS0FDZCxHQUFJcXBDLEVBQVMsQ0FFWCxJQUFJSyxHQUNDeHhFLFNBQWVxakIsUUFBUTAzQixJQUFJLENBSTlCbTJCLEVBQVdDLEdBQVN6dEQsT0FBTzVwQixJQUN6QjAzRSxFQUFlMTNFLENBQUMsSUFFbEIwZ0QsR0FBb0IvOEMsRUFBTSt1QyxNQUFPSCxFQUFvQkUsS0FFdkQsUUFBcUJ4QyxJQUFqQnluQyxFQUNGLE1BQU1BLEVBRVJ0aUMsRUFBU2x2QyxDQUNWLEtBQU0sQ0FLTCxTQUhNdzZDLEdBQW9CLzhDLEVBQU0rdUMsTUFBT0gsRUFBb0JFLEdBRTNENGtDLEVBQVUxekUsRUFBTSt1QyxNQUFNanlDLElBQ2xCNDJFLEVBS0csSUFBYSxXQUFUNTJFLEVBQW1CLENBQzVCLElBQUkwZixFQUFNLElBQUlvaEMsSUFBSUgsRUFBUWpoQyxLQUN0QnN4QixFQUFXdHhCLEVBQUlzeEIsU0FBV3R4QixFQUFJSixPQUNsQyxNQUFNeTdCLEdBQXVCLElBQUssQ0FDaENELE9BQVE2RixFQUFRN0YsT0FDaEI5SixXQUNBeU4sUUFBU3Y3QyxFQUFNK3VDLE1BQU0vN0IsSUFFeEIsQ0FHQyxNQUFPLENBQUVsVyxLQUFNMHhDLEVBQVcvMkIsS0FBTWc2QixZQUFRbkYsRUFDekMsQ0FiQ21GLFFBQWVnaUMsRUFBV0MsRUFjN0IsS0FDSSxLQUFLQSxFQUFTLENBQ25CLElBQUlsM0QsRUFBTSxJQUFJb2hDLElBQUlILEVBQVFqaEMsS0FFMUIsTUFBTXE3QixHQUF1QixJQUFLLENBQ2hDL0osU0FGYXR4QixFQUFJc3hCLFNBQVd0eEIsRUFBSUosUUFJbkMsQ0FDQ3ExQixRQUFlZ2lDLEVBQVdDLEVBQzNCLENBRUR0bUMsT0FDb0JkLElBQWxCbUYsRUFBT0EsT0FDUCxnQkFBd0IsV0FBVDMwQyxFQUFvQixZQUFjLFlBQWpELGVBQ01rRCxFQUFNK3VDLE1BQU0vN0IsR0FBOEMsNENBQUFsVyxFQURoRSxnREFJRixNQUFPVCxHQUlQLE1BQU8sQ0FBRVMsS0FBTTB4QyxFQUFXaFgsTUFBT2lhLE9BQVFwMUMsRUFDMUMsU0FDS20zRSxHQUNGLzFCLEVBQVFqQixPQUFPL3dDLG9CQUFvQixRQUFTK25FLEVBRS9DLENBRUQsT0FBTy9oQyxDQUNULENBMUtZdWlDLENBQ0VsM0UsRUFDQTJnRCxFQUNBejlDLEVBQ0E4dUMsRUFDQUYsRUFDQTJrQyxFQUNBSixHQUVGdnRELFFBQVFHLFFBQVEsQ0FBRWpwQixLQUFNMHhDLEVBQVcvMkIsS0FBTWc2QixZQUFRbkYsTUFNOUMsSUFHWG1SLFVBQ0E1SyxPQUFRekMsRUFBUSxHQUFHeUMsT0FDbkIzbEIsUUFBU2ltRCxJQWVYLE9BVkEvaUMsRUFBUWp6QyxTQUFTeU8sR0FDZndoQyxFQUNFaW1DLEVBQWNwd0QsSUFBSXJYLEVBQUVtakMsTUFBTS83QixJQUMxQixrREFBb0RwSCxFQUFFbWpDLE1BQU0vN0IsR0FBNUQsMEhBT0d3ckMsRUFBUW5NLFFBQU8sQ0FBQ2UsRUFBR3JELElBQU1xakMsRUFBZW53RCxJQUFJbXRCLEVBQVFMLEdBQUdoQixNQUFNLzdCLEtBQ3RFLENBeitEMEJpaEUsQ0FDbEJoSCxFQUNBbndFLEVBQ0EyZ0QsRUFDQWMsRUFDQW5PLEVBQ0F0QixFQUNBRixHQUdGLGFBQWFocEIsUUFBUTAzQixJQUNuQmtCLEVBQVExVixLQUFJLENBQUMySSxFQUFRMUIsS0FDbkIsR0FncEZWLFNBQWlDMEIsR0FDL0IsT0FDRTJPLEdBQVczTyxFQUFPQSxTQUFXc0UsRUFBb0I5eUIsSUFBSXd1QixFQUFPQSxPQUFPOEQsT0FFdkUsQ0FwcEZjMitCLENBQXdCemlDLEdBQVMsQ0FDbkMsSUFBSStMLEVBQVcvTCxFQUFPQSxPQUN0QixNQUFPLENBQ0wzMEMsS0FBTTB4QyxFQUFXMlIsU0FDakIzQyxTQUFVRCxHQUNSQyxFQUNBQyxFQUNBYyxFQUFjeE8sR0FBR2hCLE1BQU0vN0IsR0FDdkJvOUIsRUFDQWQsRUFDQXVULEVBQU8zTyxzQkFHWixDQUVELE9Bc2xFVmtJLGVBQ0UrM0IsR0FFQSxJQUFJLE9BQUUxaUMsRUFBTSxLQUFFMzBDLEVBQUksT0FBRXk0QyxHQUFXNCtCLEVBRS9CLEdBQUkvekIsR0FBVzNPLEdBQVMsQ0FDdEIsSUFBSWg2QixFQUVKLElBQ0UsSUFBSWkrQyxFQUFjamtCLEVBQU9pTSxRQUFRNTdDLElBQUksZ0JBS2pDMlYsRUFGQWkrQyxHQUFlLHdCQUF3QjUzRCxLQUFLNDNELEdBQzNCLE1BQWZqa0IsRUFBTy91QyxLQUNGLFdBRU0rdUMsRUFBTzZFLGFBR1Q3RSxFQUFPbjFCLE9BRXRCLE1BQU9qZ0IsR0FDUCxNQUFPLENBQUVTLEtBQU0weEMsRUFBV2hYLE1BQU9BLE1BQU9uN0IsRUFDekMsQ0FFRCxPQUFJUyxJQUFTMHhDLEVBQVdoWCxNQUNmLENBQ0wxNkIsS0FBTTB4QyxFQUFXaFgsTUFDakJBLE1BQU8sSUFBSThkLEVBQWtCN0QsRUFBTzhELE9BQVE5RCxFQUFPK0QsV0FBWS85QixHQUMvRDBpQyxXQUFZMUksRUFBTzhELE9BQ25CbUksUUFBU2pNLEVBQU9pTSxTQUliLENBQ0w1Z0QsS0FBTTB4QyxFQUFXLzJCLEtBQ2pCQSxPQUNBMGlDLFdBQVkxSSxFQUFPOEQsT0FDbkJtSSxRQUFTak0sRUFBT2lNLFFBRW5CLENBRUQsT0FBSTVnRCxJQUFTMHhDLEVBQVdoWCxNQUNmLENBQ0wxNkIsS0FBTTB4QyxFQUFXaFgsTUFDakJBLE1BQU9pYSxFQUNQMEksV0FBWXpFLEVBQXFCakUsR0FBVUEsRUFBTzhELE9BQVNBLEdBK2dCM0QsU0FBeUJoekMsR0FDN0IsSUFBSTI5QyxFQUF5QjM5QyxFQUM3QixPQUNFMjlDLEdBQ29CLGlCQUFiQSxHQUNrQixpQkFBbEJBLEVBQVN6b0MsTUFDYyxtQkFBdkJ5b0MsRUFBUzJKLFdBQ1csbUJBQXBCM0osRUFBU2loQixRQUNnQixtQkFBekJqaEIsRUFBU1MsV0FFcEIsQ0FyaEJNeXpCLENBQWUzaUMsR0FDVixDQUNMMzBDLEtBQU0weEMsRUFBVzBSLFNBQ2pCZixhQUFjMU4sRUFDZDBJLFdBQXVCLE9BQWJrNkIsRUFBRTVpQyxFQUFPME0sV0FBSSxFQUFYazJCLEVBQWE5K0IsT0FDekJtSSxTQUFTLE9BQUE0MkIsRUFBQTdpQyxFQUFPME0sV0FBUCxFQUFBbTJCLEVBQWE1MkIsVUFBVyxJQUFJVSxRQUFRM00sRUFBTzBNLEtBQUtULFVBSXRELENBQUU1Z0QsS0FBTTB4QyxFQUFXLzJCLEtBQU1BLEtBQU1nNkIsRUFBUTBJLFdBQVk1RSxHQVQ5QixJQUFBOCtCLEVBQUFDLENBVTlCLENBbHBFaUJDLENBQWlDOWlDLEVBQU8sS0FHbkQsTUFBT3AxQyxHQUdQLE9BQU9raUQsRUFBY3pWLEtBQUksS0FBTSxDQUM3QmhzQyxLQUFNMHhDLEVBQVdoWCxNQUNqQkEsTUFBT243QixLQUVWLENBQ0gsQ0FFQSsvQyxlQUFlcTJCLEdBQ2JueUIsRUFDQWxRLEVBQ0FtTyxFQUNBaTJCLEVBQ0EvMkIsR0FFQSxJQUFLKzBCLEtBQWtCL3pCLFNBQXdCNzRCLFFBQVEwM0IsSUFBSSxDQUN6RGlCLEVBQWN2akQsT0FDVnUyRSxHQUFpQixTQUFVOXpCLEVBQVNjLEVBQWVuTyxHQUNuRCxNQUNEb2tDLEVBQWUxckMsS0FBS3hzQyxHQUNqQkEsRUFBRTh6QyxTQUFXOXpDLEVBQUUwRCxPQUFTMUQsRUFBRW0vQyxXQU1yQjgxQixHQUNMLFNBTm1CcnpCLEdBQ25CQyxFQUFLckYsUUFDTHg4QyxFQUFFOHhDLEtBQ0Y5eEMsRUFBRW0vQyxXQUFXZSxRQUtiLENBQUNsZ0QsRUFBRTBELE9BQ0gxRCxFQUFFOHpDLFNBQ0ZwcUIsTUFBTTZGLEdBQU1BLEVBQUUsS0FFVGpHLFFBQVFHLFFBQW9CLENBQ2pDanBCLEtBQU0weEMsRUFBV2hYLE1BQ2pCQSxNQUFPcWdCLEdBQXVCLElBQUssQ0FDakMvSixTQUFVeHhDLEVBQUU4eEMsYUF5QnRCLGFBbEJNeG9CLFFBQVEwM0IsSUFBSSxDQUNoQitDLEdBQ0VDLEVBQ0EvQixFQUNBaTBCLEVBQ0FBLEVBQWMxcEMsS0FBSSxJQUFNMlUsRUFBUWpCLFVBQ2hDLEVBQ0FqbUIsRUFBTWdrQixZQUVSOEYsR0FDRUMsRUFDQWswQixFQUFlMXJDLEtBQUt4c0MsR0FBTUEsRUFBRTBELFFBQzVCeStDLEVBQ0ErMUIsRUFBZTFyQyxLQUFLeHNDLEdBQU9BLEVBQUVtL0MsV0FBYW4vQyxFQUFFbS9DLFdBQVdlLE9BQVMsUUFDaEUsS0FJRyxDQUNMZzJCLGdCQUNBL3pCLGlCQUVKLENBRUEsU0FBU3V5QixLQUVQLzNCLEdBQXlCLEVBSXpCQyxFQUF3Qm51QyxRQUFRaW5FLE1BR2hDMzRCLEVBQWlCbDhDLFNBQVEsQ0FBQ2kyQyxFQUFHcjZCLEtBQ3ZCODFELEVBQWlCNXJELElBQUlsSyxLQUN2Qm9nQyxFQUFzQnB1QyxLQUFLZ08sR0FDM0J1NUQsR0FBYXY1RCxHQUNkLEdBRUwsQ0FFQSxTQUFTMDdELEdBQ1AxN0QsRUFDQTJpQyxFQUNBaEUsUUFBQSxJQUFBQSxJQUFBQSxFQUFnQyxDQUFDLEdBRWpDbmhCLEVBQU1vbEIsU0FBU3Q3QyxJQUFJMFksRUFBSzJpQyxHQUN4QjJ6QixHQUNFLENBQUUxekIsU0FBVSxJQUFJN3FDLElBQUl5bEIsRUFBTW9sQixXQUMxQixDQUFFbFUsV0FBd0MsS0FBNUJpUSxHQUFRQSxFQUFLalEsWUFFL0IsQ0FFQSxTQUFTaXRDLEdBQ1AzN0QsRUFDQXdpQyxFQUNBL2pCLEVBQ0FrZ0IsUUFBQSxJQUFBQSxJQUFBQSxFQUFnQyxDQUFDLEdBRWpDLElBQUlzSCxFQUFnQkMsR0FBb0Ixb0IsRUFBTTZaLFFBQVNtTCxHQUN2RGswQixHQUFjMTJELEdBQ2RzMkQsR0FDRSxDQUNFNzBCLE9BQVEsQ0FDTixDQUFDd0UsRUFBY2pRLE1BQU0vN0IsSUFBS3drQixHQUU1Qm1rQixTQUFVLElBQUk3cUMsSUFBSXlsQixFQUFNb2xCLFdBRTFCLENBQUVsVSxXQUF3QyxLQUE1QmlRLEdBQVFBLEVBQUtqUSxZQUUvQixDQUVBLFNBQVNrdEMsR0FBd0I1N0QsR0FTL0IsT0FSSThwQyxFQUFPdXFCLG9CQUNUNkIsRUFBZTV1RSxJQUFJMFksR0FBTWsyRCxFQUFlbnRFLElBQUlpWCxJQUFRLEdBQUssR0FHckRxZ0MsRUFBZ0JuMkIsSUFBSWxLLElBQ3RCcWdDLEVBQWdCam9DLE9BQU80SCxJQUdwQndkLEVBQU1vbEIsU0FBUzc1QyxJQUFJaVgsSUFBUXc5QixFQUNwQyxDQUVBLFNBQVNrNUIsR0FBYzEyRCxHQUNyQixJQUFJMmlDLEVBQVVubEIsRUFBTW9sQixTQUFTNzVDLElBQUlpWCxJQUsvQjgxRCxFQUFpQjVyRCxJQUFJbEssSUFDbkIyaUMsR0FBNkIsWUFBbEJBLEVBQVFubEIsT0FBdUJ5NEMsRUFBZS9yRCxJQUFJbEssSUFFL0R1NUQsR0FBYXY1RCxHQUVmc2dDLEVBQWlCbG9DLE9BQU80SCxHQUN4QmkyRCxFQUFlNzlELE9BQU80SCxHQUN0QnVnQyxFQUFpQm5vQyxPQUFPNEgsR0FDeEJxZ0MsRUFBZ0Jqb0MsT0FBTzRILEdBQ3ZCd2QsRUFBTW9sQixTQUFTeHFDLE9BQU80SCxFQUN4QixDQWlCQSxTQUFTdTVELEdBQWF2NUQsR0FDcEIsSUFBSTBpQyxFQUFhb3pCLEVBQWlCL3NFLElBQUlpWCxHQUN0Q3EwQixFQUFVcU8sRUFBMEMsOEJBQUExaUMsR0FDcEQwaUMsRUFBVzJsQixRQUNYeU4sRUFBaUIxOUQsT0FBTzRILEVBQzFCLENBRUEsU0FBUzY3RCxHQUFpQmxzRSxHQUN4QixJQUFLLElBQUlxUSxLQUFPclEsRUFBTSxDQUNwQixJQUNJMjJDLEVBQWNDLEdBREpxMUIsR0FBVzU3RCxHQUNnQnRCLE1BQ3pDOGUsRUFBTW9sQixTQUFTdDdDLElBQUkwWSxFQUFLc21DLEVBQ3pCLENBQ0gsQ0FFQSxTQUFTNnlCLEtBQ1AsSUFBSTJDLEVBQVcsR0FDWDVDLEdBQWtCLEVBQ3RCLElBQUssSUFBSWw1RCxLQUFPdWdDLEVBQWtCLENBQ2hDLElBQUlvQyxFQUFVbmxCLEVBQU1vbEIsU0FBUzc1QyxJQUFJaVgsR0FDakNxMEIsRUFBVXNPLEVBQThCLHFCQUFBM2lDLEdBQ2xCLFlBQWxCMmlDLEVBQVFubEIsUUFDVitpQixFQUFpQm5vQyxPQUFPNEgsR0FDeEI4N0QsRUFBUzlwRSxLQUFLZ08sR0FDZGs1RCxHQUFrQixFQUVyQixDQUVELE9BREEyQyxHQUFpQkMsR0FDVjVDLENBQ1QsQ0FFQSxTQUFTVyxHQUFxQmtDLEdBQzVCLElBQUlDLEVBQWEsR0FDakIsSUFBSyxJQUFLaDhELEVBQUsvRixLQUFPZzhELEVBQ3BCLEdBQUloOEQsRUFBSzhoRSxFQUFVLENBQ2pCLElBQUlwNUIsRUFBVW5sQixFQUFNb2xCLFNBQVM3NUMsSUFBSWlYLEdBQ2pDcTBCLEVBQVVzTyxFQUE4QixxQkFBQTNpQyxHQUNsQixZQUFsQjJpQyxFQUFRbmxCLFFBQ1YrN0MsR0FBYXY1RCxHQUNiaTJELEVBQWU3OUQsT0FBTzRILEdBQ3RCZzhELEVBQVdocUUsS0FBS2dPLEdBRW5CLENBR0gsT0FEQTY3RCxHQUFpQkcsR0FDVkEsRUFBVy81RSxPQUFTLENBQzdCLENBWUEsU0FBU2c2RSxHQUFjajhELEdBQ3JCd2QsRUFBTSszQyxTQUFTbjlELE9BQU80SCxHQUN0Qm0yRCxHQUFpQi85RCxPQUFPNEgsRUFDMUIsQ0FHQSxTQUFTazhELEdBQWNsOEQsRUFBYW04RCxHQUNsQyxJQUFJQyxFQUFVNStDLEVBQU0rM0MsU0FBU3hzRSxJQUFJaVgsSUFBUXk5QixHQUl6Q3BKLEVBQ3FCLGNBQWxCK25DLEVBQVE1K0MsT0FBOEMsWUFBckIyK0MsRUFBVzMrQyxPQUN4QixZQUFsQjQrQyxFQUFRNStDLE9BQTRDLFlBQXJCMitDLEVBQVczK0MsT0FDeEIsWUFBbEI0K0MsRUFBUTUrQyxPQUE0QyxlQUFyQjIrQyxFQUFXMytDLE9BQ3hCLFlBQWxCNCtDLEVBQVE1K0MsT0FBNEMsY0FBckIyK0MsRUFBVzMrQyxPQUN4QixlQUFsQjQrQyxFQUFRNStDLE9BQStDLGNBQXJCMitDLEVBQVczK0MsTUFBc0IscUNBQ2pDNCtDLEVBQVE1K0MsTUFBSyxPQUFPMitDLEVBQVczK0MsT0FHdEUsSUFBSSszQyxFQUFXLElBQUl4OUQsSUFBSXlsQixFQUFNKzNDLFVBQzdCQSxFQUFTanVFLElBQUkwWSxFQUFLbThELEdBQ2xCN0YsR0FBWSxDQUFFZixZQUNoQixDQUVBLFNBQVM4RyxHQUFxQkMsR0FRN0IsSUFSOEIsZ0JBQzdCNXJCLEVBQWUsYUFDZkMsRUFBWSxjQUNaUyxHQUtEa3JCLEVBQ0MsR0FBOEIsSUFBMUJuRyxHQUFpQjV5QyxLQUNuQixPQUtFNHlDLEdBQWlCNXlDLEtBQU8sR0FDMUIrUSxHQUFRLEVBQU8sZ0RBR2pCLElBQUlnTCxFQUFVNTBDLE1BQU1neEMsS0FBS3k2QixHQUFpQjcyQixZQUNyQ2k5QixFQUFZQyxHQUFtQmw5QixFQUFRQSxFQUFRcjlDLE9BQVMsR0FDekRtNkUsRUFBVTUrQyxFQUFNKzNDLFNBQVN4c0UsSUFBSXd6RSxHQUVqQyxPQUFJSCxHQUE2QixlQUFsQkEsRUFBUTUrQyxXQUF2QixFQVFJZy9DLEVBQWdCLENBQUU5ckIsa0JBQWlCQyxlQUFjUyxrQkFDNUNtckIsT0FEVCxDQUdGLENBRUEsU0FBU3hFLEdBQXNCaGpDLEdBQzdCLElBQUl0VyxFQUFRcWdCLEdBQXVCLElBQUssQ0FBRS9KLGFBQ3RDeUwsRUFBY3d6QixHQUFzQkMsR0FDcEMsUUFBRTU4QixFQUFPLE1BQUVyQixHQUFVK1EsR0FBdUJ2RyxHQUtoRCxPQUZBeTRCLEtBRU8sQ0FBRW5CLGdCQUFpQnpnQyxFQUFTckIsUUFBT3ZYLFFBQzVDLENBRUEsU0FBUzY1QyxHQUNQdmpDLEVBQ0FvakMsR0FFQSxJQUFJOWdDLEVBQVU4Z0MsRUFBZXNFLGVBQ3pCem1DLEVBQVFxQixFQUFRQSxFQUFRcDFDLE9BQVMsR0FBRyt6QyxNQVV4QyxNQUFPLENBQUU4aEMsZ0JBQWlCemdDLEVBQVNyQixRQUFPdlgsTUFUOUJxZ0IsR0FBdUIsSUFBSyxDQUN0Qy82QyxLQUFNLGtCQUNOeStDLFFBQVN4TSxFQUFNLzdCLEdBQ2Y4NkIsV0FDQTNXLFFBQzBCLE1BQXhCKzVDLEVBQWUxNUMsT0FBaUIsWUFBYTA1QyxFQUFlMTVDLE1BQ3hEMDVDLEVBQWUxNUMsTUFDZnhlLE9BQU9rNEQsRUFBZTE1QyxTQUdoQyxDQUVBLFNBQVN3NkMsR0FDUHlELEdBRUEsSUFBSUMsRUFBOEIsR0FXbEMsT0FWQWgzQixHQUFnQnZoRCxTQUFRLENBQUN3NEUsRUFBS3A2QixLQUN2Qms2QixJQUFhQSxFQUFVbDZCLEtBSTFCbzZCLEVBQUl4VSxTQUNKdVUsRUFBa0IzcUUsS0FBS3d3QyxHQUN2Qm1ELEdBQWdCdnRDLE9BQU9vcUMsR0FDeEIsSUFFSW02QixDQUNULENBK0JBLFNBQVNuRixHQUFhcDNELEVBQW9CaTNCLEdBQ3hDLE9BQUl1OUIsR0FDUUEsRUFDUngwRCxFQUNBaTNCLEVBQVF0SCxLQUFLbDlCLEdEcmdGTCxTQUNkNUwsRUFDQXU2QyxHQUVBLElBQUksTUFBRXhMLEVBQUssU0FBRWpCLEVBQVEsT0FBRStFLEdBQVc3eUMsRUFDbEMsTUFBTyxDQUNMZ1QsR0FBSSs3QixFQUFNLzdCLEdBQ1Y4NkIsV0FDQStFLFNBQ0FwN0IsS0FBTThpQyxFQUFXeEwsRUFBTS83QixJQUN2QjRpRSxPQUFRN21DLEVBQU02bUMsT0FFbEIsQ0N5L0UyQkMsQ0FBMkJqcUUsRUFBRzJxQixFQUFNZ2tCLGdCQUlwRHBoQyxFQUFTSixHQUNsQixDQVlBLFNBQVNxM0QsR0FDUGozRCxFQUNBaTNCLEdBRUEsR0FBSXM5QixFQUFzQixDQUN4QixJQUFJMzBELEVBQU13M0QsR0FBYXAzRCxFQUFVaTNCLEdBQzdCdGtCLEVBQUk0aEQsRUFBcUIzMEQsR0FDN0IsR0FBaUIsaUJBQU4rUyxFQUNULE9BQU9BLENBRVYsQ0FDRCxPQUFPLElBQ1QsQ0FFQSxTQUFTbWlELEdBQ1A3OUIsRUFDQW1KLEVBQ0F6TCxHQUVBLEdBQUl3TyxFQUF1QixDQUN6QixJQUFLbE0sRUFRSCxNQUFPLENBQUU4OUIsUUFBUSxFQUFNOTlCLFFBUE5iLEVBQ2ZnSyxFQUNBekwsRUFDQXdCLEdBQ0EsSUFHNEMsSUFDekMsQ0FDTCxJQUFJd21DLEVBQVkxbEMsRUFBUUEsRUFBUXAxQyxPQUFTLEdBQUcrekMsTUFDNUMsR0FDRSttQyxFQUFVMW5DLE9BQ1UsTUFBbkIwbkMsRUFBVTFuQyxNQUFnQjBuQyxFQUFVMW5DLEtBQUtrRCxTQUFTLE9BV25ELE1BQU8sQ0FBRTQ4QixRQUFRLEVBQU05OUIsUUFORmIsRUFDbkJnSyxFQUNBekwsRUFDQXdCLEdBQ0EsR0FJTCxDQUNGLENBRUQsTUFBTyxDQUFFNCtCLFFBQVEsRUFBTzk5QixRQUFTLEtBQ25DLENBaUJBZ00sZUFBZSswQixHQUNiL2dDLEVBQ0F0QyxFQUNBME8sR0FFQSxJQUFJZzVCLEVBQWtEcGxDLEVBQ2xEckIsRUFDRnltQyxFQUFleDZFLE9BQVMsRUFDcEJ3NkUsRUFBZUEsRUFBZXg2RSxPQUFTLEdBQUcrekMsTUFDMUMsS0FDTixPQUFhLENBQ1gsSUFBSWduQyxFQUFpQyxNQUF0QmhKLEVBQ1h4ekIsRUFBY3d6QixHQUFzQkMsRUFDeEMsVUFDUTN3QixHQUNKQyxFQUNBeE8sRUFDQTBuQyxFQUNBajhCLEVBQ0F6SyxFQUNBRixFQUNBdWdDLEdBQ0EzeUIsR0FFRixNQUFPbmdELEdBQ1AsTUFBTyxDQUFFUyxLQUFNLFFBQVMwNkIsTUFBT243QixFQUFHbTVFLGlCQUNuQyxTQU9LTyxJQUNGL0ksRUFBYSxJQUFJQSxHQUVwQixDQUVELEdBQUl4d0IsRUFBT0UsUUFDVCxNQUFPLENBQUU1L0MsS0FBTSxXQUdqQixJQUFJazVFLEVBQWE1bUMsRUFBWW1LLEVBQWF6TCxFQUFVd0IsR0FDaEQybUMsR0FBZSxFQUNuQixHQUFJRCxFQUFZLENBQ2QsSUFBSUYsRUFBWUUsRUFBV0EsRUFBV2g3RSxPQUFTLEdBQUcrekMsTUFFbEQsR0FBSSttQyxFQUFVMXFELE1BRVosTUFBTyxDQUFFdHVCLEtBQU0sVUFBV3N6QyxRQUFTNGxDLEdBR3JDLEdBQUlGLEVBQVUxbkMsTUFBUTBuQyxFQUFVMW5DLEtBQUtwekMsT0FBUyxFQUFHLENBQy9DLEdBQXVCLE1BQW5CODZFLEVBQVUxbkMsS0FPWixNQUFPLENBQUV0eEMsS0FBTSxVQUFXc3pDLFFBQVM0bEMsR0FIbkNDLEdBQWUsQ0FLbEIsQ0FDRixDQUVELElBQUlDLEVBQW9CM21DLEVBQ3RCZ0ssRUFDQXpMLEVBQ0F3QixHQUNBLEdBTUYsSUFDRzRtQyxHQUNEVixFQUFlMXNDLEtBQUtsOUIsR0FBTUEsRUFBRW1qQyxNQUFNLzdCLEtBQUlpWSxLQUFLLE9BQ3pDaXJELEVBQWtCcHRDLEtBQUtsOUIsR0FBTUEsRUFBRW1qQyxNQUFNLzdCLEtBQUlpWSxLQUFLLEtBRWhELE1BQU8sQ0FBRW51QixLQUFNLFVBQVdzekMsUUFBUzZsQyxFQUFlRCxFQUFhLE1BS2pFLEdBRkFSLEVBQWlCVSxFQUNqQm5uQyxFQUFReW1DLEVBQWVBLEVBQWV4NkUsT0FBUyxHQUFHK3pDLE1BQy9CLE1BQWZBLEVBQU1YLEtBRVIsTUFBTyxDQUFFdHhDLEtBQU0sVUFBV3N6QyxRQUFTb2xDLEVBRXRDLENBQ0gsQ0E0RUEsT0F2Q0F2ekIsRUFBUyxDQUNQLFlBQUkzUyxHQUNGLE9BQU9BLEdBRVQsVUFBSXVULEdBQ0YsT0FBT0EsR0FFVCxTQUFJdHNCLEdBQ0YsT0FBT0EsR0FFVCxVQUFJb1ksR0FDRixPQUFPcStCLEdBRVQsVUFBSXZ4RSxHQUNGLE9BQU9teEUsR0FFVHVKLFdBbHlFRixXQTRERSxHQXpEQTNJLEVBQWtCcnZCLEVBQUtyRixRQUFRczlCLFFBQzdCam9DLElBQStDLElBQTVDMWMsT0FBUTA0QixFQUFhLFNBQUVoeEMsRUFBUSxNQUFFazlELEdBQU9sb0MsRUFHekMsR0FBSWloQyxHQUVGLFlBREFBLElBQTBCLEdBSTVCL2hDLEVBQzRCLElBQTFCNmhDLEdBQWlCNXlDLE1BQXVCLE1BQVQrNUMsRUFDL0IsOFlBUUYsSUFBSWYsRUFBYUYsR0FBc0IsQ0FDckMzckIsZ0JBQWlCbHpCLEVBQU1wZCxTQUN2QnV3QyxhQUFjdndDLEVBQ2RneEMsa0JBR0YsT0FBSW1yQixHQUF1QixNQUFUZSxHQUVoQmpILElBQTBCLEVBQzFCanhCLEVBQUtyRixRQUFRa0ssSUFBWSxFQUFUcXpCLFFBR2hCcEIsR0FBY0ssRUFBWSxDQUN4Qi8rQyxNQUFPLFVBQ1BwZCxXQUNBczlCLE9BQUFBLEdBQ0V3K0IsR0FBY0ssRUFBYSxDQUN6Qi8rQyxNQUFPLGFBQ1BrZ0IsYUFBU25LLEVBQ1RvSyxXQUFPcEssRUFDUG56QixhQUdGZ2xDLEVBQUtyRixRQUFRa0ssR0FBR3F6QixJQUVsQjMvQixLQUFBQSxHQUNFLElBQUk0M0IsRUFBVyxJQUFJeDlELElBQUl5bEIsRUFBTSszQyxVQUM3QkEsRUFBU2p1RSxJQUFJaTFFLEVBQWE5K0IsSUFDMUI2NEIsR0FBWSxDQUFFZixZQUNoQixLQUtHK0IsR0FBZ0JsbUIsRUFBZWh4QyxFQUFTLElBSS9DbTdDLEVBQVcsRUE0a0puQixTQUNFZ2lCLEVBQ0FqOUMsR0FFQSxJQUNFLElBQUlrOUMsRUFBbUJELEVBQVFFLGVBQWVDLFFBQzVDMS9CLElBRUYsR0FBSXcvQixFQUFrQixDQUNwQixJQUFJamdDLEVBQU90UixLQUFLeVQsTUFBTTg5QixHQUN0QixJQUFLLElBQUs3MUUsRUFBR3ZFLEtBQU1OLE9BQU93OEMsUUFBUS9CLEdBQVEsQ0FBQyxHQUNyQ242QyxHQUFLc0gsTUFBTUMsUUFBUXZILElBQ3JCazlCLEVBQVloNUIsSUFBSUssRUFBRyxJQUFJdkYsSUFBSWdCLEdBQUssSUFHckMsRUFDRCxNQUFPRSxHQUNQLENBRUosQ0E1bEpNcTZFLENBQTBCOUosRUFBYzhCLEdBQ3hDLElBQUlpSSxFQUEwQkEsSUE2bEpwQyxTQUNFTCxFQUNBajlDLEdBRUEsR0FBSUEsRUFBWWlELEtBQU8sRUFBRyxDQUN4QixJQUFJZ2EsRUFBaUMsQ0FBQyxFQUN0QyxJQUFLLElBQUs1MUMsRUFBR3ZFLEtBQU1rOUIsRUFDakJpZCxFQUFLNTFDLEdBQUssSUFBSXZFLEdBRWhCLElBQ0VtNkUsRUFBUUUsZUFBZUksUUFDckI3L0IsR0FDQS9SLEtBQUtDLFVBQVVxUixJQUVqQixNQUFPOWUsR0FDUDZWLEdBQ0UsRUFDOEQsOERBQUE3VixFQUFLLEtBRXRFLENBQ0YsQ0FDSCxDQWpuSlFxL0MsQ0FBMEJqSyxFQUFjOEIsR0FDMUM5QixFQUFhcGhFLGlCQUFpQixXQUFZbXJFLEdBQzFDaEksRUFBOEJBLElBQzVCL0IsRUFBYW5oRSxvQkFBb0IsV0FBWWtyRSxFQUNoRCxDQWFELE9BTktwZ0QsRUFBTTZ6QixhQUNUaW1CLEdBQWdCbmpDLEVBQWNvWSxJQUFLL3VCLEVBQU1wZCxTQUFVLENBQ2pEeTRELGtCQUFrQixJQUlmM3ZCLENBQ1QsRUFndEVFNEgsVUEvckVGLFNBQW1CVyxHQUVqQixPQURBaWpCLEVBQVlseUUsSUFBSWl2RCxHQUNULElBQU1pakIsRUFBWXQ4RCxPQUFPcTVDLEVBQ2xDLEVBNnJFRXNzQix3QkFwUUYsU0FDRUMsRUFDQUMsRUFDQUMsR0FTQSxHQVBBdkosRUFBdUJxSixFQUN2Qm5KLEVBQW9Cb0osRUFDcEJySixFQUEwQnNKLEdBQVUsTUFLL0JwSixHQUF5QnQzQyxFQUFNd3FCLGFBQWU5SyxHQUFpQixDQUNsRTQzQixHQUF3QixFQUN4QixJQUFJL2hELEVBQUlza0QsR0FBdUI3NUMsRUFBTXBkLFNBQVVvZCxFQUFNNlosU0FDNUMsTUFBTHRrQixHQUNGdWpELEdBQVksQ0FBRWhCLHNCQUF1QnZpRCxHQUV4QyxDQUVELE1BQU8sS0FDTDRoRCxFQUF1QixLQUN2QkUsRUFBb0IsS0FDcEJELEVBQTBCLElBQUksQ0FFbEMsRUE0T0VqckIsU0FwL0RGdEcsZUFBZXNHLEVBQ2I5VSxFQUNBOEosR0FFQSxHQUFrQixpQkFBUDlKLEVBRVQsWUFEQXVRLEVBQUtyRixRQUFRa0ssR0FBR3BWLEdBSWxCLElBQUlzcEMsRUFBaUJsZ0MsR0FDbkJ6Z0IsRUFBTXBkLFNBQ05vZCxFQUFNNlosUUFDTmQsRUFDQXVULEVBQU95cUIsbUJBQ1AxL0IsRUFDQWlWLEVBQU8zTyxxQkFDUCxNQUFBd0QsT0FBQSxFQUFBQSxFQUFNUixZQUNGLE1BQUpRLE9BQUksRUFBSkEsRUFBTVAsV0FFSixLQUFFL0ksRUFBSSxXQUFFb0ssRUFBVSxNQUFFaGhCLEdBQVUrZixHQUNoQ3NMLEVBQU93cUIsd0JBQ1AsRUFDQTZKLEVBQ0F4L0IsR0FHRStSLEVBQWtCbHpCLEVBQU1wZCxTQUN4QnV3QyxFQUFlL2IsRUFBZXBYLEVBQU1wZCxTQUFVaTFCLEVBQU1zSixHQUFRQSxFQUFLbmhCLE9BT3JFbXpCLEVBQVk3YixFQUNQLEdBQUE2YixFQUNBdkwsRUFBS3JGLFFBQVFzTSxlQUFlc0UsSUFHakMsSUFBSXl0QixFQUFjei9CLEdBQXdCLE1BQWhCQSxFQUFLdjVDLFFBQWtCdTVDLEVBQUt2NUMsYUFBVW11QyxFQUU1RDZkLEVBQWdCamQsRUFBYzhpQyxNQUVkLElBQWhCbUgsRUFDRmh0QixFQUFnQmpkLEVBQWMraUMsU0FDTCxJQUFoQmtILEdBR0ssTUFBZDMrQixHQUNBTixHQUFpQk0sRUFBV3RDLGFBQzVCc0MsRUFBV3JDLGFBQWU1ZixFQUFNcGQsU0FBUzIwQixTQUFXdlgsRUFBTXBkLFNBQVNpRCxTQU1uRSt0QyxFQUFnQmpkLEVBQWMraUMsU0FHaEMsSUFBSWptQixFQUNGdFMsR0FBUSx1QkFBd0JBLEdBQ0EsSUFBNUJBLEVBQUtzUyx3QkFDTDFkLEVBRUY3RSxHQUFrRCxLQUFyQ2lRLEdBQVFBLEVBQUt5UixvQkFFMUJtc0IsRUFBYUYsR0FBc0IsQ0FDckMzckIsa0JBQ0FDLGVBQ0FTLGtCQUdGLElBQUltckIsRUF3QkosYUFBYWpGLEdBQWdCbG1CLEVBQWVULEVBQWMsQ0FDeERsUixhQUdBc0csYUFBY3RuQixFQUNkd3lCLHFCQUNBN3JELFFBQVN1NUMsR0FBUUEsRUFBS3Y1QyxRQUN0QnN5RSxxQkFBc0IvNEIsR0FBUUEsRUFBSzAvQix3QkFDbkMzdkMsY0E5QkF3dEMsR0FBY0ssRUFBWSxDQUN4Qi8rQyxNQUFPLFVBQ1BwZCxTQUFVdXdDLEVBQ1ZqVCxPQUFBQSxHQUNFdytCLEdBQWNLLEVBQWEsQ0FDekIvK0MsTUFBTyxhQUNQa2dCLGFBQVNuSyxFQUNUb0ssV0FBT3BLLEVBQ1BuekIsU0FBVXV3QyxJQUdaaEgsRUFBUzlVLEVBQUk4SixJQUVmaEIsS0FBQUEsR0FDRSxJQUFJNDNCLEVBQVcsSUFBSXg5RCxJQUFJeWxCLEVBQU0rM0MsVUFDN0JBLEVBQVNqdUUsSUFBSWkxRSxFQUFhOStCLElBQzFCNjRCLEdBQVksQ0FBRWYsWUFDaEIsR0FlTixFQTI0REU1TCxNQWp2Q0YsU0FDRTNwRCxFQUNBd2lDLEVBQ0F2OEIsRUFDQTA0QixHQUVBLEdBQUltMUIsRUFDRixNQUFNLElBQUlodEUsTUFDUixvTUFNQWd2RSxFQUFpQjVyRCxJQUFJbEssSUFBTXU1RCxHQUFhdjVELEdBQzVDLElBQUkwdUIsR0FBa0QsS0FBckNpUSxHQUFRQSxFQUFLeVIsb0JBRTFCNVAsRUFBY3d6QixHQUFzQkMsRUFDcENrSyxFQUFpQmxnQyxHQUNuQnpnQixFQUFNcGQsU0FDTm9kLEVBQU02WixRQUNOZCxFQUNBdVQsRUFBT3lxQixtQkFDUHR1RCxFQUNBNmpDLEVBQU8zTyxxQkFDUHFILEVBQ0ksTUFBSjdELE9BQUksRUFBSkEsRUFBTVAsVUFFSi9HLEVBQVVoQixFQUFZbUssRUFBYTI5QixFQUFnQjVuQyxHQUVuRHNoQyxFQUFXM0MsR0FBYzc5QixFQUFTbUosRUFBYTI5QixHQUtuRCxHQUpJdEcsRUFBUzFDLFFBQVUwQyxFQUFTeGdDLFVBQzlCQSxFQUFVd2dDLEVBQVN4Z0MsVUFHaEJBLEVBT0gsWUFOQXNrQyxHQUNFMzdELEVBQ0F3aUMsRUFDQTFELEdBQXVCLElBQUssQ0FBRS9KLFNBQVVvcEMsSUFDeEMsQ0FBRXp2QyxjQUtOLElBQUksS0FBRTJHLEVBQUksV0FBRW9LLEVBQVUsTUFBRWhoQixHQUFVK2YsR0FDaENzTCxFQUFPd3FCLHdCQUNQLEVBQ0E2SixFQUNBeC9CLEdBR0YsR0FBSWxnQixFQUVGLFlBREFrOUMsR0FBZ0IzN0QsRUFBS3dpQyxFQUFTL2pCLEVBQU8sQ0FBRWlRLGNBSXpDLElBQUl6bkMsRUFBUTY3QyxHQUFlekwsRUFBU2hDLEdBRXBDb2dDLEdBQWtFLEtBQXJDOTJCLEdBQVFBLEVBQUtzUyxvQkFFdEN4UixHQUFjTixHQUFpQk0sRUFBV3RDLFlBK0JoRGtHLGVBQ0VyakMsRUFDQXdpQyxFQUNBbk4sRUFDQXB1QyxFQUNBcTNFLEVBQ0F0RyxFQUNBdHBDLEVBQ0ErUSxHQUtBLFNBQVM4K0IsRUFBd0IxckUsR0FDL0IsSUFBS0EsRUFBRW1qQyxNQUFNdGQsU0FBVzdsQixFQUFFbWpDLE1BQU0xRSxLQUFNLENBQ3BDLElBQUk3UyxFQUFRcWdCLEdBQXVCLElBQUssQ0FDdENELE9BQVFZLEVBQVd0QyxXQUNuQnBJLFNBQVVNLEVBQ1ZtTixRQUFTQSxJQUdYLE9BREFtNUIsR0FBZ0IzN0QsRUFBS3dpQyxFQUFTL2pCLEVBQU8sQ0FBRWlRLGVBQ2hDLENBQ1IsQ0FDRCxPQUFPLENBQ1QsQ0FFQSxHQWhCQXVwQyxLQUNBMzNCLEVBQWlCbG9DLE9BQU80SCxJQWVuQmc0RCxHQUFjdUcsRUFBd0J0M0UsR0FDekMsT0FJRixJQUFJdTNFLEVBQWtCaGhELEVBQU1vbEIsU0FBUzc1QyxJQUFJaVgsR0FDekMwN0QsR0FBbUIxN0QsRUF3N0d2QixTQUNFeS9CLEVBQ0ErK0IsR0FZQSxNQVYyQyxDQUN6Q2hoRCxNQUFPLGFBQ1AyZixXQUFZc0MsRUFBV3RDLFdBQ3ZCQyxXQUFZcUMsRUFBV3JDLFdBQ3ZCQyxZQUFhb0MsRUFBV3BDLFlBQ3hCQyxTQUFVbUMsRUFBV25DLFNBQ3JCQyxLQUFNa0MsRUFBV2xDLEtBQ2pCaDZCLEtBQU1rOEIsRUFBV2w4QixLQUNqQjdFLEtBQU04L0QsRUFBa0JBLEVBQWdCOS9ELFVBQU82MEIsRUFHbkQsQ0F2OEc0QmtyQyxDQUFxQmgvQixFQUFZKytCLEdBQWtCLENBQ3pFOXZDLGNBR0YsSUFBSWd3QyxFQUFrQixJQUFJMTdCLGdCQUN0QjI3QixFQUFleDVCLEdBQ2pCQyxFQUFLckYsUUFDTDFLLEVBQ0FxcEMsRUFBZ0JqN0IsT0FDaEJoRSxHQUdGLEdBQUl1NEIsRUFBWSxDQUNkLElBQUlHLFFBQXVCQyxHQUN6QmtHLEVBQ0FqcEMsRUFDQXNwQyxFQUFhbDdCLFFBR2YsR0FBNEIsWUFBeEIwMEIsRUFBZXAwRSxLQUNqQixPQUNLLEdBQTRCLFVBQXhCbzBFLEVBQWVwMEUsS0FBa0IsQ0FDMUMsSUFBSSxNQUFFMDZCLEdBQVU2NUMsR0FBeUJqakMsRUFBTThpQyxHQUUvQyxZQURBd0QsR0FBZ0IzN0QsRUFBS3dpQyxFQUFTL2pCLEVBQU8sQ0FBRWlRLGFBRXhDLENBQU0sSUFBS3lwQyxFQUFlOWdDLFFBT3pCLFlBTkFza0MsR0FDRTM3RCxFQUNBd2lDLEVBQ0ExRCxHQUF1QixJQUFLLENBQUUvSixTQUFVTSxJQUN4QyxDQUFFM0csY0FPSixHQUFJNnZDLEVBRkp0M0UsRUFBUTY3QyxHQURSdzdCLEVBQWlCbkcsRUFBZTlnQyxRQUNPaEMsSUFHckMsTUFHTCxDQUdEeWdDLEVBQWlCeHVFLElBQUkwWSxFQUFLMCtELEdBRTFCLElBQUlFLEVBQW9CN0ksRUFPcEJyMUIsU0FOc0I4M0IsR0FDeEIsU0FDQW1HLEVBQ0EsQ0FBQzEzRSxHQUNEcTNFLElBRStCLEdBRWpDLEdBQUlLLEVBQWFsN0IsT0FBT0UsUUFNdEIsWUFISW15QixFQUFpQi9zRSxJQUFJaVgsS0FBUzArRCxHQUNoQzVJLEVBQWlCMTlELE9BQU80SCxJQVE1QixHQUFJOHBDLEVBQU91cUIsbUJBQXFCaDBCLEVBQWdCbjJCLElBQUlsSyxJQUNsRCxHQUFJZ21DLEdBQWlCdEYsSUFBaUJDLEdBQWNELEdBRWxELFlBREFnN0IsR0FBbUIxN0QsRUFBS3VtQyxRQUFlaFQsUUFJcEMsQ0FDTCxHQUFJeVMsR0FBaUJ0RixHQUVuQixPQURBbzFCLEVBQWlCMTlELE9BQU80SCxHQUNwQmcyRCxFQUEwQjRJLE9BSzVCbEQsR0FBbUIxN0QsRUFBS3VtQyxRQUFlaFQsS0FHdkNnTixFQUFpQi85QyxJQUFJd2QsR0FDckIwN0QsR0FBbUIxN0QsRUFBS2tvQyxHQUFrQnpJLElBQ25DZzVCLEdBQXdCa0csRUFBY2orQixFQUFjLENBQ3pEazRCLGtCQUFtQm41QixLQU16QixHQUFJa0IsR0FBY0QsR0FFaEIsWUFEQWk3QixHQUFnQjM3RCxFQUFLd2lDLEVBQVM5QixFQUFhamlCLE1BRzlDLENBRUQsR0FBSTBuQixHQUFpQnpGLEdBQ25CLE1BQU01QixHQUF1QixJQUFLLENBQUUvNkMsS0FBTSxpQkFLNUMsSUFBSTRzRCxFQUFlbnpCLEVBQU13cUIsV0FBVzVuQyxVQUFZb2QsRUFBTXBkLFNBQ2xEeStELEVBQXNCMTVCLEdBQ3hCQyxFQUFLckYsUUFDTDRRLEVBQ0ErdEIsRUFBZ0JqN0IsUUFFZGpELEVBQWN3ekIsR0FBc0JDLEVBQ3BDNThCLEVBQ3lCLFNBQTNCN1osRUFBTXdxQixXQUFXeHFCLE1BQ2I2WSxFQUFZbUssRUFBYWhqQixFQUFNd3FCLFdBQVc1bkMsU0FBVW0yQixHQUNwRC9ZLEVBQU02WixRQUVaaEQsRUFBVWdELEVBQVMsZ0RBRW5CLElBQUl5bkMsSUFBVy9JLEVBQ2ZFLEVBQWUzdUUsSUFBSTBZLEVBQUs4K0QsR0FFeEIsSUFBSUMsRUFBYzcyQixHQUFrQnpJLEVBQVlpQixFQUFhaGlDLE1BQzdEOGUsRUFBTW9sQixTQUFTdDdDLElBQUkwWSxFQUFLKytELEdBRXhCLElBQUt2NUIsRUFBZWpELEdBQXdCekMsR0FDMUNzRixFQUFLckYsUUFDTHZpQixFQUNBNlosRUFDQW9JLEVBQ0FrUixHQUNBLEVBQ0E3RyxFQUFPMHFCLHFDQUNQdDBCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FqSyxFQUNBLENBQUN0dkMsRUFBTSt1QyxNQUFNLzdCLEdBQUl5bUMsSUFNbkI2QixFQUNHakosUUFBUWp2QixHQUFPQSxFQUFHckssTUFBUUEsSUFDMUI1YixTQUFTaW1CLElBQ1IsSUFBSTIwRCxFQUFXMzBELEVBQUdySyxJQUNkdytELEVBQWtCaGhELEVBQU1vbEIsU0FBUzc1QyxJQUFJaTJFLEdBQ3JDM0YsRUFBc0JueEIsUUFDeEIzVSxFQUNBaXJDLEVBQWtCQSxFQUFnQjkvRCxVQUFPNjBCLEdBRTNDL1YsRUFBTW9sQixTQUFTdDdDLElBQUkwM0UsRUFBVTNGLEdBQ3pCdkQsRUFBaUI1ckQsSUFBSTgwRCxJQUN2QnpGLEdBQWF5RixHQUVYMzBELEVBQUdxNEIsWUFDTG96QixFQUFpQnh1RSxJQUFJMDNFLEVBQVUzMEQsRUFBR3E0QixXQUNuQyxJQUdMNHpCLEdBQVksQ0FBRTF6QixTQUFVLElBQUk3cUMsSUFBSXlsQixFQUFNb2xCLFlBRXRDLElBQUk0MkIsRUFBaUNBLElBQ25DajNCLEVBQXFCbitDLFNBQVNpbUIsR0FBT2t2RCxHQUFhbHZELEVBQUdySyxPQUV2RDArRCxFQUFnQmo3QixPQUFPaHhDLGlCQUNyQixRQUNBK21FLEdBR0YsSUFBSSxjQUFFQyxFQUFhLGVBQUUvekIsU0FDYmcwQixHQUNKbDhDLEVBQU02WixRQUNOQSxFQUNBbU8sRUFDQWpELEVBQ0FzOEIsR0FHSixHQUFJSCxFQUFnQmo3QixPQUFPRSxRQUN6QixPQUdGKzZCLEVBQWdCajdCLE9BQU8vd0Msb0JBQ3JCLFFBQ0E4bUUsR0FHRnZELEVBQWU3OUQsT0FBTzRILEdBQ3RCODFELEVBQWlCMTlELE9BQU80SCxHQUN4QnVpQyxFQUFxQm4rQyxTQUFTMHVCLEdBQU1nakQsRUFBaUIxOUQsT0FBTzBhLEVBQUU5UyxPQUU5RCxJQUFJb25DLEVBQVdGLEdBQWEsSUFBSXV5QixLQUFrQi96QixJQUNsRCxHQUFJMEIsRUFBVSxDQUNaLEdBQUlBLEVBQVN6UyxLQUFPNlEsRUFBY3ZqRCxPQUFRLENBSXhDLElBQUkwM0UsRUFDRnAzQixFQUFxQjZFLEVBQVN6UyxJQUFNNlEsRUFBY3ZqRCxRQUFRK2QsSUFDNUR1Z0MsRUFBaUIvOUMsSUFBSW0zRSxFQUN0QixDQUNELE9BQU9sQixHQUF3Qm9HLEVBQXFCejNCLEVBQVMxTyxPQUM5RCxDQUdELElBQUksV0FBRThJLEVBQVUsT0FBRUMsR0FBVzhELEdBQzNCL25CLEVBQ0FBLEVBQU02WixRQUNObU8sRUFDQWkwQixPQUNBbG1DLEVBQ0FnUCxFQUNBbUQsRUFDQUMsSUFLRixHQUFJbm9CLEVBQU1vbEIsU0FBUzE0QixJQUFJbEssR0FBTSxDQUMzQixJQUFJc21DLEVBQWNDLEdBQWU3RixFQUFhaGlDLE1BQzlDOGUsRUFBTW9sQixTQUFTdDdDLElBQUkwWSxFQUFLc21DLEVBQ3pCLENBRUR1ekIsR0FBcUJpRixHQU1RLFlBQTNCdGhELEVBQU13cUIsV0FBV3hxQixPQUNqQnNoRCxFQUFTOUksR0FFVDNoQyxFQUFVbWhDLEVBQWUsMkJBQ3pCSCxHQUErQkEsRUFBNEJoTixRQUUzRHNPLEdBQW1CbjVDLEVBQU13cUIsV0FBVzVuQyxTQUFVLENBQzVDaTNCLFVBQ0FtSyxhQUNBQyxTQUNBbUIsU0FBVSxJQUFJN3FDLElBQUl5bEIsRUFBTW9sQixjQU0xQjB6QixHQUFZLENBQ1Y3MEIsU0FDQUQsV0FBWWdGLEdBQ1ZocEIsRUFBTWdrQixXQUNOQSxFQUNBbkssRUFDQW9LLEdBRUZtQixTQUFVLElBQUk3cUMsSUFBSXlsQixFQUFNb2xCLFlBRTFCMUMsR0FBeUIsRUFFN0IsQ0FyVUkrK0IsQ0FDRWovRCxFQUNBd2lDLEVBQ0FuTixFQUNBcHVDLEVBQ0Fvd0MsRUFDQXdnQyxFQUFTMUMsT0FDVHptQyxFQUNBK1EsSUFPSmEsRUFBaUJoNUMsSUFBSTBZLEVBQUssQ0FBRXdpQyxVQUFTbk4sU0F5VHZDZ08sZUFDRXJqQyxFQUNBd2lDLEVBQ0FuTixFQUNBcHVDLEVBQ0Fvd0MsRUFDQTJnQyxFQUNBdHBDLEVBQ0ErUSxHQUVBLElBQUkrK0IsRUFBa0JoaEQsRUFBTW9sQixTQUFTNzVDLElBQUlpWCxHQUN6QzA3RCxHQUNFMTdELEVBQ0Frb0MsR0FDRXpJLEVBQ0ErK0IsRUFBa0JBLEVBQWdCOS9ELFVBQU82MEIsR0FFM0MsQ0FBRTdFLGNBR0osSUFBSWd3QyxFQUFrQixJQUFJMTdCLGdCQUN0QjI3QixFQUFleDVCLEdBQ2pCQyxFQUFLckYsUUFDTDFLLEVBQ0FxcEMsRUFBZ0JqN0IsUUFHbEIsR0FBSXUwQixFQUFZLENBQ2QsSUFBSUcsUUFBdUJDLEdBQ3pCL2dDLEVBQ0FoQyxFQUNBc3BDLEVBQWFsN0IsUUFHZixHQUE0QixZQUF4QjAwQixFQUFlcDBFLEtBQ2pCLE9BQ0ssR0FBNEIsVUFBeEJvMEUsRUFBZXAwRSxLQUFrQixDQUMxQyxJQUFJLE1BQUUwNkIsR0FBVTY1QyxHQUF5QmpqQyxFQUFNOGlDLEdBRS9DLFlBREF3RCxHQUFnQjM3RCxFQUFLd2lDLEVBQVMvakIsRUFBTyxDQUFFaVEsYUFFeEMsQ0FBTSxJQUFLeXBDLEVBQWU5Z0MsUUFPekIsWUFOQXNrQyxHQUNFMzdELEVBQ0F3aUMsRUFDQTFELEdBQXVCLElBQUssQ0FBRS9KLFNBQVVNLElBQ3hDLENBQUUzRyxjQUtKem5DLEVBQVE2N0MsR0FEUnpMLEVBQVU4Z0MsRUFBZTlnQyxRQUNPaEMsRUFFbkMsQ0FHRHlnQyxFQUFpQnh1RSxJQUFJMFksRUFBSzArRCxHQUUxQixJQUFJRSxFQUFvQjdJLEVBT3BCcjlCLFNBTmdCOC9CLEdBQ2xCLFNBQ0FtRyxFQUNBLENBQUMxM0UsR0FDRG93QyxJQUVtQixHQWtCckIsR0FaSThPLEdBQWlCek4sS0FDbkJBLFFBQ1NnUCxHQUFvQmhQLEVBQVFpbUMsRUFBYWw3QixRQUFRLElBQ3hEL0ssR0FLQW85QixFQUFpQi9zRSxJQUFJaVgsS0FBUzArRCxHQUNoQzVJLEVBQWlCMTlELE9BQU80SCxJQUd0QjIrRCxFQUFhbDdCLE9BQU9FLFFBQXhCLENBTUEsSUFBSXRELEVBQWdCbjJCLElBQUlsSyxHQU14QixPQUFJZ21DLEdBQWlCdE4sR0FDZnM5QixFQUEwQjRJLE9BRzVCbEQsR0FBbUIxN0QsRUFBS3VtQyxRQUFlaFQsS0FHdkNnTixFQUFpQi85QyxJQUFJd2QsY0FDZnk0RCxHQUF3QmtHLEVBQWNqbUMsU0FNNUNpSSxHQUFjakksR0FDaEJpakMsR0FBZ0IzN0QsRUFBS3dpQyxFQUFTOUosRUFBT2phLFFBSXZDNFYsR0FBVzhSLEdBQWlCek4sR0FBUyxtQ0FHckNnakMsR0FBbUIxN0QsRUFBS3VtQyxHQUFlN04sRUFBT2g2QixTQTNCNUNnOUQsR0FBbUIxN0QsRUFBS3VtQyxRQUFlaFQsR0FMeEMsQ0FpQ0gsQ0E3YUUyckMsQ0FDRWwvRCxFQUNBd2lDLEVBQ0FuTixFQUNBcHVDLEVBQ0Fvd0MsRUFDQXdnQyxFQUFTMUMsT0FDVHptQyxFQUNBK1EsR0FFSixFQTBwQ0UwL0IsV0F2NERGLFdBQ0VsSCxLQUNBM0IsR0FBWSxDQUFFcHFCLGFBQWMsWUFJRyxlQUEzQjF1QixFQUFNd3FCLFdBQVd4cUIsUUFPVSxTQUEzQkEsRUFBTXdxQixXQUFXeHFCLE1BVXJCODVDLEdBQ0U5QixHQUFpQmg0QyxFQUFNNHpCLGNBQ3ZCNXpCLEVBQU13cUIsV0FBVzVuQyxTQUNqQixDQUFFdzNELG1CQUFvQnA2QyxFQUFNd3FCLGFBWjVCc3ZCLEdBQWdCOTVDLEVBQU00ekIsY0FBZTV6QixFQUFNcGQsU0FBVSxDQUNuRG0zRCxnQ0FBZ0MsSUFhdEMsRUE4MkRFdm1CLFdBQWFuYyxHQUFXdVEsRUFBS3JGLFFBQVFpUixXQUFXbmMsR0FDaER3WCxlQUFpQnhYLEdBQVd1USxFQUFLckYsUUFBUXNNLGVBQWV4WCxHQUN4RCttQyxjQUNBbEYsY0FuY0YsU0FBcUMxMkQsR0FDbkMsR0FBSThwQyxFQUFPdXFCLGtCQUFtQixDQUM1QixJQUFJcmtDLEdBQVNrbUMsRUFBZW50RSxJQUFJaVgsSUFBUSxHQUFLLEVBQ3pDZ3dCLEdBQVMsR0FDWGttQyxFQUFlOTlELE9BQU80SCxHQUN0QnFnQyxFQUFnQjc5QyxJQUFJd2QsSUFFcEJrMkQsRUFBZTV1RSxJQUFJMFksRUFBS2d3QixFQUUzQixNQUNDMG1DLEdBQWMxMkQsR0FFaEJzMkQsR0FBWSxDQUFFMXpCLFNBQVUsSUFBSTdxQyxJQUFJeWxCLEVBQU1vbEIsV0FDeEMsRUF1YkV3OEIsUUF4dEVGLFdBQ00zSyxHQUNGQSxJQUVFbUIsR0FDRkEsSUFFRmxCLEVBQVl2WixRQUNaa2EsR0FBK0JBLEVBQTRCaE4sUUFDM0Q3cUMsRUFBTW9sQixTQUFTeCtDLFNBQVEsQ0FBQ2kyQyxFQUFHcjZCLElBQVEwMkQsR0FBYzEyRCxLQUNqRHdkLEVBQU0rM0MsU0FBU254RSxTQUFRLENBQUNpMkMsRUFBR3I2QixJQUFRaThELEdBQWNqOEQsSUFDbkQsRUE4c0VFcS9ELFdBdFlGLFNBQW9Cci9ELEVBQWF5eEMsR0FDL0IsSUFBSTJxQixFQUFtQjUrQyxFQUFNKzNDLFNBQVN4c0UsSUFBSWlYLElBQVF5OUIsR0FNbEQsT0FKSTA0QixHQUFpQnB0RSxJQUFJaVgsS0FBU3l4QyxHQUNoQzBrQixHQUFpQjd1RSxJQUFJMFksRUFBS3l4QyxHQUdyQjJxQixDQUNULEVBK1hFSCxpQkFDQXFELFlBeERGLFNBQ0U5OEIsRUFDQXIzQyxHQUVBLElBQUk2eEUsRUFBaUMsTUFBdEJoSixFQUVmcHdCLEdBQ0VwQixFQUNBcjNDLEVBSGdCNm9FLEdBQXNCQyxFQUt0Q2wrQixFQUNBRixHQVFFbW5DLElBQ0YvSSxFQUFhLElBQUlBLEdBQ2pCcUMsR0FBWSxDQUFDLEdBRWpCLEVBa0NFaUosMEJBQTJCekosRUFDM0IwSix5QkFBMEI3NUIsR0FHMUI4NUIsbUJBdkVGLFNBQTRCQyxHQUMxQjNwQyxFQUFXLENBQUMsRUFDWmkrQixFQUFxQnIrQixFQUNuQitwQyxFQUNBN3BDLE9BQ0F0QyxFQUNBd0MsRUFFSixHQWtFT21ULENBQ1QsQ0t4aUdTeTJCLENBQWEsQ0FDbEJwcEMsY0FBVSxFQUNWdVQsT0FBTWhWLEdBQUEsUUFDRCxFQUFZLENBQ2Z5L0Isb0JBQW9CLElBRXRCeDBCLFNQcUZGbDFDLEdPckZnQyxDQUFFbkksWUFBUSxRUHFGMUMsSUFBQW1JLEtBQUFBLEdBQWlDLENBQUMsR0FrUHBDLFNBQ0UrMEUsRUFDQTV1QixFQUNBNnVCLEVBQ0FoMUUsUUFBQSxJQUFBQSxJQUFBQSxFQUE2QixDQUFDLEdBRTlCLElBQUksT0FBRW5JLEVBQVNDLFNBQVNra0IsWUFBWSxTQUFFaTVELEdBQVcsR0FBVWoxRSxFQUN2RGsxRSxFQUFnQnI5RSxFQUFPcTlDLFFBQ3ZCcm5CLEVBQVN5YixFQUFPb1ksSUFDaEJ4aUMsRUFBNEIsS0FFNUJzSSxFQUFRMnRELElBU1osU0FBU0EsSUFFUCxPQURZRCxFQUFjdmlELE9BQVMsQ0FBRW1YLElBQUssT0FDN0JBLEdBQ2YsQ0FFQSxTQUFTc3JDLElBQ1B2bkQsRUFBU3liLEVBQU9vWSxJQUNoQixJQUFJMnpCLEVBQVlGLElBQ1oxQyxFQUFxQixNQUFiNEMsRUFBb0IsS0FBT0EsRUFBWTd0RCxFQUNuREEsRUFBUTZ0RCxFQUNKbjJELEdBQ0ZBLEVBQVMsQ0FBRTJPLFNBQVF0WSxTQUFVMi9CLEVBQVEzL0IsU0FBVWs5RCxTQUVuRCxDQStDQSxTQUFTejhCLEVBQVVoTSxHQUlqQixJQUFJNWtDLEVBQ3lCLFNBQTNCdk4sRUFBTzBkLFNBQVM4a0MsT0FDWnhpRCxFQUFPMGQsU0FBUzhrQyxPQUNoQnhpRCxFQUFPMGQsU0FBUzZGLEtBRWxCQSxFQUFxQixpQkFBUDR1QixFQUFrQkEsRUFBS00sRUFBV04sR0FTcEQsT0FMQTV1QixFQUFPQSxFQUFLN2dCLFFBQVEsS0FBTSxPQUMxQml2QyxFQUNFcGtDLEVBQ3NFLHNFQUFBZ1csR0FFakUsSUFBSTQrQixJQUFJNStCLEVBQU1oVyxFQUN2QixDQXBGYSxNQUFUb2lCLElBQ0ZBLEVBQVEsRUFDUjB0RCxFQUFjSSxhQUFZcnJDLEVBQU0sR0FBQWlyQyxFQUFjdmlELE1BQU8sQ0FBQW1YLElBQUt0aUIsSUFBUyxLQW9GckUsSUFBSTB0QixFQUFtQixDQUNyQixVQUFJcm5CLEdBQ0YsT0FBT0EsR0FFVCxZQUFJdFksR0FDRixPQUFPdy9ELEVBQVlsOUUsRUFBUXE5RSxJQUU3QjFDLE1BQUFBLENBQU81ckIsR0FDTCxHQUFJMW5DLEVBQ0YsTUFBTSxJQUFJampCLE1BQU0sOENBS2xCLE9BSEFwRSxFQUFPK1AsaUJBQWlCMmhDLEVBQW1CNnJDLEdBQzNDbDJELEVBQVcwbkMsRUFFSixLQUNML3VELEVBQU9nUSxvQkFBb0IwaEMsRUFBbUI2ckMsR0FDOUNsMkQsRUFBVyxJQUFJLEdBR25CaW5DLFdBQVduYyxHQUNGbWMsRUFBV3R1RCxFQUFRbXlDLEdBRTVCZ00sWUFDQXdMLGNBQUFBLENBQWV4WCxHQUViLElBQUlweEIsRUFBTW85QixFQUFVaE0sR0FDcEIsTUFBTyxDQUNMRSxTQUFVdHhCLEVBQUlzeEIsU0FDZDF4QixPQUFRSSxFQUFJSixPQUNaMnhCLEtBQU12eEIsRUFBSXV4QixPQUdkaGpDLEtBbEdGLFNBQWM2aUMsRUFBUXJYLEdBQ3BCOUUsRUFBU3liLEVBQU84aUMsS0FDaEIsSUFBSTcyRCxFQUFXdzBCLEVBQWVtTCxFQUFRMy9CLFNBQVV5MEIsRUFBSXJYLEdBQ2hEcWlELEdBQWtCQSxFQUFpQnovRCxFQUFVeTBCLEdBRWpEeGlCLEVBQVEydEQsSUFBYSxFQUNyQixJQUFJSSxFQUFlM3JDLEVBQWdCcjBCLEVBQVVpUyxHQUN6QzVPLEVBQU1zOEIsRUFBUWlSLFdBQVc1d0MsR0FHN0IsSUFDRTIvRCxFQUFjTSxVQUFVRCxFQUFjLEdBQUkzOEQsR0FDMUMsTUFBT2diLEdBS1AsR0FBSUEsYUFBaUI2aEQsY0FBK0IsbUJBQWY3aEQsRUFBTTMyQixLQUN6QyxNQUFNMjJCLEVBSVIvN0IsRUFBTzBkLFNBQVN4WixPQUFPNmMsRUFDeEIsQ0FFR3E4RCxHQUFZLzFELEdBQ2RBLEVBQVMsQ0FBRTJPLFNBQVF0WSxTQUFVMi9CLEVBQVEzL0IsU0FBVWs5RCxNQUFPLEdBRTFELEVBdUVFbDRFLFFBckVGLFNBQWlCeXZDLEVBQVFyWCxHQUN2QjlFLEVBQVN5YixFQUFPK2lDLFFBQ2hCLElBQUk5MkQsRUFBV3cwQixFQUFlbUwsRUFBUTMvQixTQUFVeTBCLEVBQUlyWCxHQUNoRHFpRCxHQUFrQkEsRUFBaUJ6L0QsRUFBVXkwQixHQUVqRHhpQixFQUFRMnRELElBQ1IsSUFBSUksRUFBZTNyQyxFQUFnQnIwQixFQUFVaVMsR0FDekM1TyxFQUFNczhCLEVBQVFpUixXQUFXNXdDLEdBQzdCMi9ELEVBQWNJLGFBQWFDLEVBQWMsR0FBSTM4RCxHQUV6Q3E4RCxHQUFZLzFELEdBQ2RBLEVBQVMsQ0FBRTJPLFNBQVF0WSxTQUFVMi9CLEVBQVEzL0IsU0FBVWs5RCxNQUFPLEdBRTFELEVBeURFcnpCLEdBQUd0L0IsR0FDTW8xRCxFQUFjOTFCLEdBQUd0L0IsSUFJNUIsT0FBT28xQixDQUNULENBM1dTd2dDLEVBbEJQLFNBQ0U3OUUsRUFDQXE5RSxHQUVBLElBQUksU0FBRWhyQyxFQUFRLE9BQUUxeEIsRUFBTSxLQUFFMnhCLEdBQVN0eUMsRUFBTzBkLFNBQ3hDLE9BQU93MEIsRUFDTCxHQUNBLENBQUVHLFdBQVUxeEIsU0FBUTJ4QixRQUVuQitxQyxFQUFjdmlELE9BQVN1aUQsRUFBY3ZpRCxNQUFNa1gsS0FBUSxLQUNuRHFyQyxFQUFjdmlELE9BQVN1aUQsRUFBY3ZpRCxNQUFNeGQsS0FBUSxVQUV4RCxJQUVBLFNBQTJCdGQsRUFBZ0JteUMsR0FDekMsTUFBcUIsaUJBQVBBLEVBQWtCQSxFQUFLTSxFQUFXTixFQUNsRCxHQUtFLEtBQ0FocUMsS081R0FrcUUsY0E2QkosV0FBMkIsSUFBQXdJLEVBQ3pCLElBQUkvL0MsRUFBUSxPQUFIKy9DLEVBQUc3NkUsYUFBQSxFQUFBNjZFLEVBQVFpRCw0QkFPcEIsT0FOSWhqRCxHQUFTQSxFQUFNaWtCLFNBQ2pCamtCLEVBQUtzWCxHQUFBLEdBQ0F0WCxFQUFLLENBQ1Jpa0IsT0FBUXdNLEdBQWtCendCLEVBQU1pa0IsV0FHN0Jqa0IsQ0FDVCxDQXRDMENpakQsR0FDdEM3cUMsNkJ1RDVDSixTQUE0QkksR0FDMUIsSUFBSW9qQyxFQUFnRSxDQUdsRXQ3QixpQkFBeUMsTUFBdkI5SCxFQUFNZ1csZUFBK0MsTUFBdEJoVyxFQUFNMFYsY0FtRHpELE9BaERJMVYsRUFBTTdGLFdBVVJydEMsT0FBTzhELE9BQU93eUUsRUFBUyxDQUNyQjF4RCxRQUFTMGdDLEVBQUFBLGNBQW9CcFMsRUFBTTdGLFdBQ25DQSxlQUFXb0QsSUFJWHlDLEVBQU1xVixpQkFVUnZvRCxPQUFPOEQsT0FBT3d5RSxFQUFTLENBQ3JCOXRCLHVCQUF3QmxELEVBQUFBLGNBQW9CcFMsRUFBTXFWLGlCQUNsREEscUJBQWlCOVgsSUFJakJ5QyxFQUFNZ1csZUFVUmxwRCxPQUFPOEQsT0FBT3d5RSxFQUFTLENBQ3JCMXRCLGFBQWN0RCxFQUFBQSxjQUFvQnBTLEVBQU1nVyxlQUN4Q0EsbUJBQWV6WSxJQUlaNmxDLENBQ1QsRXZEVklqRiwyQkFBdUIsRUFDdkJDLGdDQUE0QixFQUM1QjF4RSxZQUFRLElBQ1AwNkUsY3dEOVFhejZFLFNBQVMrOUUsZUFBZSxTQUcxQ255QyxFQUFBQSxFQUFBQSxHQUFXNXJDLFNBQVMrOUUsZUFBZSxTQUFTejRFLE9BQ3hDbWdELEVBQUFBLGNBQUNBLEVBQUFBLFdBQWdCLEtBQ2JBLEVBQUFBLGNBQUM4RyxHQUFjLENBQUNoRyxPQUFRQSIsInNvdXJjZXMiOlsid2VicGFjazovL215cmVhY3RhcHAvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL215cmVhY3RhcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL215cmVhY3RhcHAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL2hpc3RvcnkudHMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uLi91dGlscy50cyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL3JvdXRlci50cyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL2xpYi9jb250ZXh0LnRzIiwid2VicGFjazovL215cmVhY3RhcHAvLi4vbGliL2hvb2tzLnRzeCIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL2xpYi9jb21wb25lbnRzLnRzeCIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL2RvbS50cyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4uL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9mZXRjaC5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vc3JjL3V0aWxzL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL3NyYy9wYWdlcy9Mb2dpbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9teXJlYWN0YXBwLy4vc3JjL3BhZ2VzL0ZpbGVMaXN0L2luZGV4LmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9zcmMvQXBwLmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi9zcmMvcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovL215cmVhY3RhcHAvLi4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbXlyZWFjdGFwcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uIExnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gTWcoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gTmcoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIE9nKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVBnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9UWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmTmcoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1MZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9UmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9TGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1TZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9UWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9UmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1MZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9U2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPVRnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO01nKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7TWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7TWcoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmTmcoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPUxnKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1UZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9UmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9TGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9U2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7TWcoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD1RZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBVZz1PZyghMCksVmc9T2coITEpLFdnPVVmKG51bGwpLFhnPW51bGwsWWc9bnVsbCxaZz1udWxsO2Z1bmN0aW9uICRnKCl7Wmc9WWc9WGc9bnVsbH1mdW5jdGlvbiBhaChhKXt2YXIgYj1XZy5jdXJyZW50O0UoV2cpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIGJoKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBjaChhLGIpe1hnPWE7Wmc9WWc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihkaD0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24gZWgoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFpnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PVlnKXtpZihudWxsPT09WGcpdGhyb3cgRXJyb3IocCgzMDgpKTtZZz1hO1hnLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBZZz1ZZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIGZoPW51bGw7ZnVuY3Rpb24gZ2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gaGgoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsZ2goYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIGloKGEsZCl9ZnVuY3Rpb24gaWgoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciBqaD0hMTtmdW5jdGlvbiBraChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gbGgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gbWgoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBuaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gaWgoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLGdoKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBpaChhLGMpfWZ1bmN0aW9uIG9oKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBwaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTtqaD0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjpqaD0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7cmh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIHRoPXt9LHVoPVVmKHRoKSx2aD1VZih0aCksd2g9VWYodGgpO2Z1bmN0aW9uIHhoKGEpe2lmKGE9PT10aCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24geWgoYSxiKXtHKHdoLGIpO0codmgsYSk7Ryh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKHVoKTtHKHVoLGIpfWZ1bmN0aW9uIHpoKCl7RSh1aCk7RSh2aCk7RSh3aCl9ZnVuY3Rpb24gQWgoYSl7eGgod2guY3VycmVudCk7dmFyIGI9eGgodWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyh2aCxhKSxHKHVoLGMpKX1mdW5jdGlvbiBCaChhKXt2aC5jdXJyZW50PT09YSYmKEUodWgpLEUodmgpKX12YXIgTD1VZigwKTtcbmZ1bmN0aW9uIENoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBEaD1bXTtcbmZ1bmN0aW9uIEVoKCl7Zm9yKHZhciBhPTA7YTxEaC5sZW5ndGg7YSsrKURoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7RGgubGVuZ3RoPTB9dmFyIEZoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsR2g9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSGg9MCxNPW51bGwsTj1udWxsLE89bnVsbCxJaD0hMSxKaD0hMSxLaD0wLExoPTA7ZnVuY3Rpb24gUCgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIE1oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBOaChhLGIsYyxkLGUsZil7SGg9ZjtNPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtGaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP09oOlBoO2E9YyhkLGUpO2lmKEpoKXtmPTA7ZG97Smg9ITE7S2g9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tz1OPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO0ZoLmN1cnJlbnQ9UWg7YT1jKGQsZSl9d2hpbGUoSmgpfUZoLmN1cnJlbnQ9Umg7Yj1udWxsIT09TiYmbnVsbCE9PU4ubmV4dDtIaD0wO089Tj1NPW51bGw7SWg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKCl7dmFyIGE9MCE9PUtoO0toPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YTtyZXR1cm4gT31mdW5jdGlvbiBVaCgpe2lmKG51bGw9PT1OKXt2YXIgYT1NLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1OLm5leHQ7dmFyIGI9bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlOk8ubmV4dDtpZihudWxsIT09YilPPWIsTj1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtOPWE7YT17bWVtb2l6ZWRTdGF0ZTpOLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk4uYmFzZVN0YXRlLGJhc2VRdWV1ZTpOLmJhc2VRdWV1ZSxxdWV1ZTpOLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hfXJldHVybiBPfVxuZnVuY3Rpb24gVmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBXaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU4sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKEhoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7TS5sYW5lc3w9bTtyaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxNLmxhbmVzfD1mLHJofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gWGgoYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gWWgoKXt9XG5mdW5jdGlvbiBaaChhLGIpe3ZhciBjPU0sZD1VaCgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsZGg9ITApO2Q9ZC5xdWV1ZTskaChhaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1PJiZPLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBkaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBjaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2VpKGIpJiZmaShhKX1mdW5jdGlvbiBhaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtlaShiKSYmZmkoYSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1paChhLDEpO251bGwhPT1iJiZnaShiLGEsMSwtMSl9XG5mdW5jdGlvbiBoaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9aWkuYmluZChudWxsLE0sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBqaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24ga2koYSxiLGMsZCl7dmFyIGU9VGgoKTtNLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Til7dmFyIGc9Ti5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fU0uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4ga2koODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gbGkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbmkoYSxiKXtyZXR1cm4gbGkoNCwyLGEsYil9ZnVuY3Rpb24gb2koYSxiKXtyZXR1cm4gbGkoNCw0LGEsYil9XG5mdW5jdGlvbiBwaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHFpKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gbGkoNCw0LHBpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHJpKCl7fWZ1bmN0aW9uIHNpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gdWkoYSxiLGMpe2lmKDA9PT0oSGgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLGRoPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE0ubGFuZXN8PWMscmh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIHZpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLEdoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gd2koKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24geGkoYSxiLGMpe3ZhciBkPXlpKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsYyk7ZWxzZSBpZihjPWhoKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1SKCk7Z2koYyxhLGQsZSk7QmkoYyxiLGQpfX1cbmZ1bmN0aW9uIGlpKGEsYixjKXt2YXIgZD15aShhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxnaChiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPWhoKGEsYixlLGQpO251bGwhPT1jJiYoZT1SKCksZ2koYyxhLGQsZSksQmkoYyxiLGQpKX19XG5mdW5jdGlvbiB6aShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU18fG51bGwhPT1iJiZiPT09TX1mdW5jdGlvbiBBaShhLGIpe0poPUloPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gQmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBSaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6UCx1c2VDb250ZXh0OlAsdXNlRWZmZWN0OlAsdXNlSW1wZXJhdGl2ZUhhbmRsZTpQLHVzZUluc2VydGlvbkVmZmVjdDpQLHVzZUxheW91dEVmZmVjdDpQLHVzZU1lbW86UCx1c2VSZWR1Y2VyOlAsdXNlUmVmOlAsdXNlU3RhdGU6UCx1c2VEZWJ1Z1ZhbHVlOlAsdXNlRGVmZXJyZWRWYWx1ZTpQLHVzZVRyYW5zaXRpb246UCx1c2VNdXRhYmxlU291cmNlOlAsdXNlU3luY0V4dGVybmFsU3RvcmU6UCx1c2VJZDpQLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sT2g9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7VGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6bWksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGtpKDQxOTQzMDgsXG40LHBpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9eGkuYmluZChudWxsLE0sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuVGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6aGksdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBUaCgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWhpKCExKSxiPWFbMF07YT12aS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1NLGU9VGgoKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO21pKGFpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1RLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6V2gsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFdoKFZoKX0sXG51c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gdWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1XaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxRaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpYaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gbnVsbD09PVxuTj9iLm1lbW9pemVkU3RhdGU9YTp1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVhoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIENpKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifWZ1bmN0aW9uIERpKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBFaT17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPVIoKSxkPVxueWkoYSksZT1taChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9bmgoYSxlLGQpO251bGwhPT1iJiYoZ2koYixhLGQsYyksb2goYixhLGQpKX19O2Z1bmN0aW9uIEZpKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9ZWgoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUVpO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gSGkoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gSWkoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz17fTtraChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PWVoKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKERpKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHFoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfWZ1bmN0aW9uIEppKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fWZ1bmN0aW9uIExpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBNaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtPaXx8KE9pPSEwLFBpPWQpO0xpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUWkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Umk/Umk9bmV3IFNldChbdGhpc10pOlJpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE1pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VGkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVWkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmkoYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1taCgtMSwxKSxiLnRhZz0yLG5oKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBXaT11YS5SZWFjdEN1cnJlbnRPd25lcixkaD0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1ZnKGIsbnVsbCxjLGQpOlVnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2NoKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1SZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1QZyhmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKGRoPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihkaD0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKX1yZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhlaixmaiksZmp8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhlaixmaiksZmp8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGVqLGZqKTtmanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZWosZmopLGZqfD1kO1hpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGdqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtjaChiLGUpO2M9TmgoYSxiLGMsZCxmLGUpO2Q9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7Y2goYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpaWooYSxiKSxHaShiLGMsZCksSWkoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9ZWgobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJkhpKGIsZyxkLGwpO2poPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihEaShiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9amh8fEZpKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2xoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6Q2koYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9ZWgoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJkhpKGIsZyxkLGspO2poPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihEaShiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9amh8fEZpKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBqaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUsZil7Z2ooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1VZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVVnKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGxqKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG1qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbmooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gb2ooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TC5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKEwsZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXBqKGcsZCwwLG51bGwpLGE9VGcoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooYyksYi5tZW1vaXplZFN0YXRlPW1qLGEpOnFqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHJqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD1QZyhlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPVBnKGgsZik6KGY9VGcoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9uaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9UGcoZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcWooYSxiKXtiPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7VWcoYixhLmNoaWxkLG51bGwsYyk7YT1xaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1LaShFcnJvcihwKDQyMikpKSxzaihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9VGcoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZVZyhiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooZyk7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiBzaihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUtpKGYsZCx2b2lkIDApO3JldHVybiBzaihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKGRofHxoKXtkPVE7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxpaChhLGUpLGdpKGQsYSxlLC0xKSl9dGooKTtkPUtpKEVycm9yKHAoNDIxKSkpO3JldHVybiBzaihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj11ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cWooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHZqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7YmgoYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHdqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB4aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1hpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnZqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpdmooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKEwsZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUNoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7d2ooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1DaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9d2ooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6d2ooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gWmkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3JofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1QZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9UGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHlqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpraihiKTtJZygpO2JyZWFrO2Nhc2UgNTpBaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OnloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTCxMLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIG9qKGEsYixjKTtHKEwsTC5jdXJyZW50JjEpO2E9WmkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKEwsTC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB4aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhMLEwuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGRqKGEsYixjKX1yZXR1cm4gWmkoYSxiLGMpfXZhciB6aixBaixCaixDajtcbnpqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtBaj1mdW5jdGlvbigpe307XG5Caj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0NqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRGooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0UoV2YpO0UoSCk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSk7QWooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlCaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDt6aihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShMKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KEwuY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dGooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksXG5BaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKEwpO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRGooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RGooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKEwsTC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+R2omJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1DaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLERqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5HaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TC5jdXJyZW50LEcoTCxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShmaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSWooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIHpoKCksRShXZiksRShIKSxFaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEJoKGIpLG51bGw7Y2FzZSAxMzpFKEwpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKEwpLG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgSmo9ITEsVT0hMSxLaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTGooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE1qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgTmo9ITE7XG5mdW5jdGlvbiBPaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkNpKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49Tmo7Tmo9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZNaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBRaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gUmooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxTaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFRqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVWooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VGooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFZqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihWaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVZqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxYaj0hMTtmdW5jdGlvbiBZaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspWmooYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gWmooYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxMaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WGo7WD1udWxsO1lqKGEsYixjKTtYPWQ7WGo9ZTtudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVhqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDtcbllqKGEsYixjKTtYPWQ7WGo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP01qKGMsYixnKTowIT09KGYmNCkmJk1qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVlqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihMaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxZaihhLGIsYyksVT1kKTpZaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpZaihhLGIsYyl9fWZ1bmN0aW9uIGFrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEtqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9YmsuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtYaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO1pqKGYsZyxlKTtYPW51bGw7WGo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOylkayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2soYixhKTtlayhhKTtpZihkJjQpe3RyeXtQaigzLGEsYS5yZXR1cm4pLFFqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtQaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmNrKGIsYSk7ZWsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmNrKGIsYSk7ZWsoYSk7YnJlYWs7Y2FzZSAxMzpjayhiLGEpO2VrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZms9QigpKSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sY2soYixhKSxVPWwpOmNrKGIsYSk7ZWsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlBqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOkxqKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TGoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtnayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpnayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmNrKGIsYSk7ZWsoYSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6Y2soYixcbmEpLGVrKGEpfX1mdW5jdGlvbiBlayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFRqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVVqKGEpO1dqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1VaihhKTtWaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBoayhhLGIsYyl7Vj1hO2lrKGEsYixjKX1cbmZ1bmN0aW9uIGlrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxKajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUpqO3ZhciBsPVU7Smo9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2prKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6amsoZSk7Zm9yKDtudWxsIT09ZjspVj1mLGlrKGYsYixjKSxmPWYuc2libGluZztWPWU7Smo9aDtVPWx9a2soYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTprayhhLGIsYyl9fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxRaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkNpKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJnNoKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1zaChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmUmooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gZ2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGprKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1FqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIGxrPU1hdGguY2VpbCxtaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG5rPXVhLlJlYWN0Q3VycmVudE93bmVyLG9rPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxRPW51bGwsWT1udWxsLFo9MCxmaj0wLGVqPVVmKDApLFQ9MCxwaz1udWxsLHJoPTAscWs9MCxyaz0wLHNrPW51bGwsdGs9bnVsbCxmaz0wLEdqPUluZmluaXR5LHVrPW51bGwsT2k9ITEsUGk9bnVsbCxSaT1udWxsLHZrPSExLHdrPW51bGwseGs9MCx5az0wLHprPW51bGwsQWs9LTEsQms9MDtmdW5jdGlvbiBSKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Baz9BazpBaz1CKCl9XG5mdW5jdGlvbiB5aShhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09QmsmJihCaz15YygpKSxCazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7aWYoNTA8eWspdGhyb3cgeWs9MCx6az1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVEpYT09PVEmJigwPT09KEsmMikmJihxa3w9YyksND09PVQmJkNrKGEsWikpLERrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRWsuYmluZChudWxsLGEpKTpoZyhFay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1GayhjLEdrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBHayhhLGIpe0FrPS0xO0JrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSGsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SWsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxHaj1CKCkrNTAwLEtrKGEsYik7ZG8gdHJ5e0xrKCk7YnJlYWt9Y2F0Y2goaCl7TWsoYSxoKX13aGlsZSgxKTskZygpO21rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihRPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU5rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYztpZig2PT09YilDayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIU9rKGUpJiYoYj1JayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU5rKGEsZikpKSwxPT09YikpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpQayhhLHRrLHVrKTticmVhaztjYXNlIDM6Q2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9ZmsrNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGIpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNDpDayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmxrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxkKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDU6UGsoYSx0ayx1ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fURrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0drLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTmsoYSxiKXt2YXIgYz1zazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihLayhhLGIpLmZsYWdzfD0yNTYpO2E9SWsoYSxiKTsyIT09YSYmKGI9dGssdGs9YyxudWxsIT09YiYmRmooYikpO3JldHVybiBhfWZ1bmN0aW9uIEZqKGEpe251bGw9PT10az90az1hOnRrLnB1c2guYXBwbHkodGssYSl9XG5mdW5jdGlvbiBPayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQ2soYSxiKXtiJj1+cms7YiY9fnFrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEVrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0hrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIERrKGEsQigpKSxudWxsO3ZhciBjPUlrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1OayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxiKSxEayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UGsoYSx0ayx1ayk7RGsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUWsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFJrKGEpe251bGwhPT13ayYmMD09PXdrLnRhZyYmMD09PShLJjYpJiZIaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1vay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYob2sudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsb2sudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIEhqKCl7Zmo9ZWouY3VycmVudDtFKGVqKX1cbmZ1bmN0aW9uIEtrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOnpoKCk7RShXZik7RShIKTtFaCgpO2JyZWFrO2Nhc2UgNTpCaChkKTticmVhaztjYXNlIDQ6emgoKTticmVhaztjYXNlIDEzOkUoTCk7YnJlYWs7Y2FzZSAxOTpFKEwpO2JyZWFrO2Nhc2UgMTA6YWgoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SGooKX1jPWMucmV0dXJufVE9YTtZPWE9UGcoYS5jdXJyZW50LG51bGwpO1o9Zmo9YjtUPTA7cGs9bnVsbDtyaz1xaz1yaD0wO3RrPXNrPW51bGw7aWYobnVsbCE9PWZoKXtmb3IoYj1cbjA7YjxmaC5sZW5ndGg7YisrKWlmKGM9ZmhbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9Zmg9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1rKGEsYil7ZG97dmFyIGM9WTt0cnl7JGcoKTtGaC5jdXJyZW50PVJoO2lmKEloKXtmb3IodmFyIGQ9TS5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1JaD0hMX1IaD0wO089Tj1NPW51bGw7Smg9ITE7S2g9MDtuay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3BrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVVpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1ZpKHksZyxoLGYsYik7eS5tb2RlJjEmJlNpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7U2koZixsLGIpO3RqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVVpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtWaShKLGcsaCxmLGIpO0pnKEppKGssaCkpO2JyZWFrIGF9fWY9az1KaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09c2s/c2s9W2ZdOnNrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1OaShmLGssYik7cGgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVFpKGYsaCxiKTtwaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVNrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSmsoKXt2YXIgYT1tay5jdXJyZW50O21rLmN1cnJlbnQ9Umg7cmV0dXJuIG51bGw9PT1hP1JoOmF9XG5mdW5jdGlvbiB0aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1RfHwwPT09KHJoJjI2ODQzNTQ1NSkmJjA9PT0ocWsmMjY4NDM1NDU1KXx8Q2soUSxaKX1mdW5jdGlvbiBJayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEtrKGEsYik7ZG8gdHJ5e1RrKCk7YnJlYWt9Y2F0Y2goZSl7TWsoYSxlKX13aGlsZSgxKTskZygpO0s9Yzttay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtRPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFRrKCl7Zm9yKDtudWxsIT09WTspVWsoWSl9ZnVuY3Rpb24gTGsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVWsoWSl9ZnVuY3Rpb24gVWsoYSl7dmFyIGI9VmsoYS5hbHRlcm5hdGUsYSxmaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1NrKGEpOlk9Yjtuay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBTayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1FaihjLGIsZmopLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SWooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBQayhhLGIsYyl7dmFyIGQ9QyxlPW9rLnRyYW5zaXRpb247dHJ5e29rLnRyYW5zaXRpb249bnVsbCxDPTEsV2soYSxiLGMsZCl9ZmluYWxseXtvay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gV2soYSxiLGMsZCl7ZG8gSGsoKTt3aGlsZShudWxsIT09d2spO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09USYmKFk9UT1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx2a3x8KHZrPSEwLEZrKGhjLGZ1bmN0aW9uKCl7SGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9b2sudHJhbnNpdGlvbjtvay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7bmsuY3VycmVudD1udWxsO09qKGEsYyk7ZGsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2hrKGMsYSxlKTtkYygpO0s9aDtDPWc7b2sudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dmsmJih2az0hMSx3az1hLHhrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihSaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtEayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoT2kpdGhyb3cgT2k9ITEsYT1QaSxQaT1udWxsLGE7MCE9PSh4ayYxKSYmMCE9PWEudGFnJiZIaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT16az95aysrOih5az0wLHprPWEpOnlrPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEhrKCl7aWYobnVsbCE9PXdrKXt2YXIgYT1EYyh4ayksYj1vay50cmFuc2l0aW9uLGM9Qzt0cnl7b2sudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT13ayl2YXIgZD0hMTtlbHNle2E9d2s7d2s9bnVsbDt4az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtTaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG9rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWGsoYSxiLGMpe2I9SmkoYyxiKTtiPU5pKGEsYiwxKTthPW5oKGEsYiwxKTtiPVIoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxEayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylYayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtYayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyhkKSkpe2E9SmkoYyxhKTthPVFpKGIsYSwxKTtiPW5oKGIsYSwxKTthPVIoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxEayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztRPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1maz9LayhhLDApOnJrfD1jKTtEayhhLGIpfWZ1bmN0aW9uIFlrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9UigpO2E9aWgoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxEayhhLGMpKX1mdW5jdGlvbiB1aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WWsoYSxjKX1cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1lrKGEsYyl9dmFyIFZrO1xuVms9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KWRoPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gZGg9ITEseWooYSxiLGMpO2RoPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgZGg9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtjaChiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxraChiKSxlLnVwZGF0ZXI9RWksYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLElpKGIsZCxhLGMpLGI9amoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVprKGQpO2E9Q2koZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9Y2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWhqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxDaShkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksY2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaGooYSxiLGQsZSxjKTtjYXNlIDM6YTp7a2ooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2xoKGEsYik7cWgoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9SmkoRXJyb3IocCg0MjMpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUppKEVycm9yKHAoNDI0KSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPVZnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9WmkoYSxiLGMpO2JyZWFrIGF9WGkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQWgoYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5naihhLGIpLFhpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBvaihhLGIsYyk7Y2FzZSA0OnJldHVybiB5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1VZyhiLG51bGwsZCxjKTpYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksWWkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9WmkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9bWgoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO2JoKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO2JoKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31YaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGNoKGIsYyksZT1laChlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1DaShkLGIucGVuZGluZ1Byb3BzKSxlPUNpKGQudHlwZSxlKSwkaShhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGJqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxpaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsY2goYixjKSxHaShiLGQsZSksSWkoYixkLGUsYyksamoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB4aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBGayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gJGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyAkayhhLGIsYyxkKX1mdW5jdGlvbiBhaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gWmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGFqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFBnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFJnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlhaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gVGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHBqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gVGcoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiBRZyhhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGJsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBhbChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07a2goZik7cmV0dXJuIGF9ZnVuY3Rpb24gY2woYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGRsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9YmwoYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZGwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1SKCk7ZT15aShjKTtmPW1oKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7bmgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtEayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGZsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVIoKSxnPXlpKGUpO2M9ZGwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1taChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPW5oKGUsYixnKTtudWxsIT09YSYmKGdpKGEsZSxnLGYpLG9oKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBnbChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGhsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBpbChhLGIpe2hsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZobChhLGIpfWZ1bmN0aW9uIGpsKCl7cmV0dXJuIG51bGx9dmFyIGtsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBsbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS5yZW5kZXI9bGwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtmbChhLGIsbnVsbCxudWxsKX07bWwucHJvdG90eXBlLnVubW91bnQ9bGwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztSayhmdW5jdGlvbigpe2ZsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHBsKCl7fVxuZnVuY3Rpb24gcWwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7Zi5jYWxsKGEpfX12YXIgZz1lbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woayk7aC5jYWxsKGEpfX12YXIgaz1ibChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoZnVuY3Rpb24oKXtmbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7aC5jYWxsKGEpfX1mbChiLGcsYSxlKX1lbHNlIGc9cWwoYyxiLGEsZSxkKTtyZXR1cm4gZ2woZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRGsoYixCKCkpLDA9PT0oSyY2KSYmKEdqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6UmsoZnVuY3Rpb24oKXt2YXIgYj1paChhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEsYyl9fSksaWwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aWgoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEzNDIxNzcyOCxjKX1pbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj15aShhKSxjPWloKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPVIoKTtnaShjLGEsYixkKX1pbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1RaztIYj1SaztcbnZhciBzbD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUWtdfSx0bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHVsPXtidW5kbGVUeXBlOnRsLmJ1bmRsZVR5cGUsdmVyc2lvbjp0bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dGwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp0bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmpsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgdmw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF2bC5pc0Rpc2FibGVkJiZ2bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz12bC5pbmplY3QodWwpLGxjPXZsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1zbDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGNsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1rbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9YmwoYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGxsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBSayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1rbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZWwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbWwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFJrKGZ1bmN0aW9uKCl7cmwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9UWs7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFvbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gcmwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtmdW5jdGlvbiBYKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO2V4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7XG5leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7ZXhwb3J0cy5hY3Q9WDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1YO2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O1xuZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07ZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O1xuZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O2V4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBQb3AgPSBcIlBPUFwiLFxuXG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIFB1c2ggPSBcIlBVU0hcIixcblxuICAvKipcbiAgICogQSBSRVBMQUNFIGluZGljYXRlcyB0aGUgZW50cnkgYXQgdGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxuICAgKi9cbiAgUmVwbGFjZSA9IFwiUkVQTEFDRVwiLFxufVxuXG4vKipcbiAqIFRoZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCB2YWx1ZXMgb2YgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gIC8qKlxuICAgKiBBIFVSTCBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggYSAvLlxuICAgKi9cbiAgcGF0aG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQSBVUkwgc2VhcmNoIHN0cmluZywgYmVnaW5uaW5nIHdpdGggYSA/LlxuICAgKi9cbiAgc2VhcmNoOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgVVJMIGZyYWdtZW50IGlkZW50aWZpZXIsIGJlZ2lubmluZyB3aXRoIGEgIy5cbiAgICovXG4gIGhhc2g6IHN0cmluZztcbn1cblxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIExvY2F0aW9uIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYCBhbmRcbi8vIHJlbW92ZSBSZW1peCBgdXNlTG9jYXRpb25gIHdyYXBwZXIuXG5cbi8qKlxuICogQW4gZW50cnkgaW4gYSBoaXN0b3J5IHN0YWNrLiBBIGxvY2F0aW9uIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZVxuICogVVJMIHBhdGgsIGFzIHdlbGwgYXMgcG9zc2libHkgc29tZSBhcmJpdHJhcnkgc3RhdGUgYW5kIGEga2V5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uPFN0YXRlID0gYW55PiBleHRlbmRzIFBhdGgge1xuICAvKipcbiAgICogQSB2YWx1ZSBvZiBhcmJpdHJhcnkgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhpcyBsb2NhdGlvbi5cbiAgICovXG4gIHN0YXRlOiBTdGF0ZTtcblxuICAvKipcbiAgICogQSB1bmlxdWUgc3RyaW5nIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGxvY2F0aW9uLiBNYXkgYmUgdXNlZCB0byBzYWZlbHkgc3RvcmVcbiAgICogYW5kIHJldHJpZXZlIGRhdGEgaW4gc29tZSBvdGhlciBzdG9yYWdlIEFQSSwgbGlrZSBgbG9jYWxTdG9yYWdlYC5cbiAgICpcbiAgICogTm90ZTogVGhpcyB2YWx1ZSBpcyBhbHdheXMgXCJkZWZhdWx0XCIgb24gdGhlIGluaXRpYWwgbG9jYXRpb24uXG4gICAqL1xuICBrZXk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNoYW5nZSB0byB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcGRhdGUge1xuICAvKipcbiAgICogVGhlIGFjdGlvbiB0aGF0IHRyaWdnZXJlZCB0aGUgY2hhbmdlLlxuICAgKi9cbiAgYWN0aW9uOiBBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBuZXcgbG9jYXRpb24uXG4gICAqL1xuICBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBkZWx0YSBiZXR3ZWVuIHRoaXMgbG9jYXRpb24gYW5kIHRoZSBmb3JtZXIgbG9jYXRpb24gaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICovXG4gIGRlbHRhOiBudW1iZXIgfCBudWxsO1xufVxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBub3RpZmljYXRpb25zIGFib3V0IGxvY2F0aW9uIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdGVuZXIge1xuICAodXBkYXRlOiBVcGRhdGUpOiB2b2lkO1xufVxuXG4vKipcbiAqIERlc2NyaWJlcyBhIGxvY2F0aW9uIHRoYXQgaXMgdGhlIGRlc3RpbmF0aW9uIG9mIHNvbWUgbmF2aWdhdGlvbiwgZWl0aGVyIHZpYVxuICogYGhpc3RvcnkucHVzaGAgb3IgYGhpc3RvcnkucmVwbGFjZWAuIFRoaXMgbWF5IGJlIGVpdGhlciBhIFVSTCBvciB0aGUgcGllY2VzXG4gKiBvZiBhIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBUbyA9IHN0cmluZyB8IFBhcnRpYWw8UGF0aD47XG5cbi8qKlxuICogQSBoaXN0b3J5IGlzIGFuIGludGVyZmFjZSB0byB0aGUgbmF2aWdhdGlvbiBzdGFjay4gVGhlIGhpc3Rvcnkgc2VydmVzIGFzIHRoZVxuICogc291cmNlIG9mIHRydXRoIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbiwgYXMgd2VsbCBhcyBwcm92aWRlcyBhIHNldCBvZlxuICogbWV0aG9kcyB0aGF0IG1heSBiZSB1c2VkIHRvIGNoYW5nZSBpdC5cbiAqXG4gKiBJdCBpcyBzaW1pbGFyIHRvIHRoZSBET00ncyBgd2luZG93Lmhpc3RvcnlgIG9iamVjdCwgYnV0IHdpdGggYSBzbWFsbGVyLCBtb3JlXG4gKiBmb2N1c2VkIEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IGFjdGlvbiB0aGF0IG1vZGlmaWVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHdpbGwgYWx3YXlzIGJlXG4gICAqIEFjdGlvbi5Qb3Agd2hlbiBhIGhpc3RvcnkgaW5zdGFuY2UgaXMgZmlyc3QgY3JlYXRlZC4gVGhpcyB2YWx1ZSBpcyBtdXRhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgYWN0aW9uOiBBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHZhbHVlIGlzIG11dGFibGUuXG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWxpZCBocmVmIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSB0aGF0IG1heSBiZSB1c2VkIGFzXG4gICAqIHRoZSB2YWx1ZSBvZiBhbiA8YSBocmVmPiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBkZXN0aW5hdGlvbiBVUkxcbiAgICovXG4gIGNyZWF0ZUhyZWYodG86IFRvKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVVJMIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0gdG8gLSBUaGUgZGVzdGluYXRpb24gVVJMXG4gICAqL1xuICBjcmVhdGVVUkwodG86IFRvKTogVVJMO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgYSBsb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93Lmhpc3Rvcnkgd291bGQgZG8gKG5vLW9wIGZvciBtZW1vcnlcbiAgICogaGlzdG9yeSkgc28gd2UgZW5zdXJlIG91ciBQVVNIL1JFUExBQ0UgbmF2aWdhdGlvbnMgZm9yIGRhdGEgcm91dGVyc1xuICAgKiBiZWhhdmUgdGhlIHNhbWUgYXMgUE9QXG4gICAqXG4gICAqIEBwYXJhbSB0byBVbmVuY29kZWQgcGF0aFxuICAgKi9cbiAgZW5jb2RlTG9jYXRpb24odG86IFRvKTogUGF0aDtcblxuICAvKipcbiAgICogUHVzaGVzIGEgbmV3IGxvY2F0aW9uIG9udG8gdGhlIGhpc3Rvcnkgc3RhY2ssIGluY3JlYXNpbmcgaXRzIGxlbmd0aCBieSBvbmUuXG4gICAqIElmIHRoZXJlIHdlcmUgYW55IGVudHJpZXMgaW4gdGhlIHN0YWNrIGFmdGVyIHRoZSBjdXJyZW50IG9uZSwgdGhleSBhcmVcbiAgICogbG9zdC5cbiAgICpcbiAgICogQHBhcmFtIHRvIC0gVGhlIG5ldyBVUkxcbiAgICogQHBhcmFtIHN0YXRlIC0gRGF0YSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgbmV3IGxvY2F0aW9uXG4gICAqL1xuICBwdXNoKHRvOiBUbywgc3RhdGU/OiBhbnkpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiB0aGUgaGlzdG9yeSBzdGFjayB3aXRoIGEgbmV3IG9uZS4gIFRoZVxuICAgKiBsb2NhdGlvbiB0aGF0IHdhcyByZXBsYWNlZCB3aWxsIG5vIGxvbmdlciBiZSBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBuZXcgVVJMXG4gICAqIEBwYXJhbSBzdGF0ZSAtIERhdGEgdG8gYXNzb2NpYXRlIHdpdGggdGhlIG5ldyBsb2NhdGlvblxuICAgKi9cbiAgcmVwbGFjZSh0bzogVG8sIHN0YXRlPzogYW55KTogdm9pZDtcblxuICAvKipcbiAgICogTmF2aWdhdGVzIGBuYCBlbnRyaWVzIGJhY2t3YXJkL2ZvcndhcmQgaW4gdGhlIGhpc3Rvcnkgc3RhY2sgcmVsYXRpdmUgdG8gdGhlXG4gICAqIGN1cnJlbnQgaW5kZXguIEZvciBleGFtcGxlLCBhIFwiYmFja1wiIG5hdmlnYXRpb24gd291bGQgdXNlIGdvKC0xKS5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIC0gVGhlIGRlbHRhIGluIHRoZSBzdGFjayBpbmRleFxuICAgKi9cbiAgZ28oZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAqIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0ZW5lciAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzXG4gICAqIEByZXR1cm5zIHVubGlzdGVuIC0gQSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHN0b3AgbGlzdGVuaW5nXG4gICAqL1xuICBsaXN0ZW4obGlzdGVuZXI6IExpc3RlbmVyKTogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBIaXN0b3J5U3RhdGUgPSB7XG4gIHVzcjogYW55O1xuICBrZXk/OiBzdHJpbmc7XG4gIGlkeDogbnVtYmVyO1xufTtcblxuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBNZW1vcnkgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIHVzZXItc3VwcGxpZWQgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIGEgbG9jYXRpb24uIFVzZWQgd2hlbiBwcm92aWRpbmdcbiAqIGVudHJpZXMgdG8gYGNyZWF0ZU1lbW9yeUhpc3RvcnlgIHZpYSBpdHMgYGluaXRpYWxFbnRyaWVzYCBvcHRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIEluaXRpYWxFbnRyeSA9IHN0cmluZyB8IFBhcnRpYWw8TG9jYXRpb24+O1xuXG5leHBvcnQgdHlwZSBNZW1vcnlIaXN0b3J5T3B0aW9ucyA9IHtcbiAgaW5pdGlhbEVudHJpZXM/OiBJbml0aWFsRW50cnlbXTtcbiAgaW5pdGlhbEluZGV4PzogbnVtYmVyO1xuICB2NUNvbXBhdD86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEEgbWVtb3J5IGhpc3Rvcnkgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuIFRoaXMgaXMgdXNlZnVsIGluIHN0YXRlZnVsXG4gKiBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgaXMgbm8gd2ViIGJyb3dzZXIsIHN1Y2ggYXMgbm9kZSB0ZXN0cyBvciBSZWFjdFxuICogTmF0aXZlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeUhpc3RvcnkgZXh0ZW5kcyBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShcbiAgb3B0aW9uczogTWVtb3J5SGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogTWVtb3J5SGlzdG9yeSB7XG4gIGxldCB7IGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSwgaW5pdGlhbEluZGV4LCB2NUNvbXBhdCA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczogTG9jYXRpb25bXTsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PlxuICAgIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKFxuICAgICAgZW50cnksXG4gICAgICB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsXG4gICAgICBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkXG4gICAgKVxuICApO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KFxuICAgIGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4XG4gICk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXI6IExpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2xhbXBJbmRleChuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKTogTG9jYXRpb24ge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbihcbiAgICB0bzogVG8sXG4gICAgc3RhdGU6IGFueSA9IG51bGwsXG4gICAga2V5Pzogc3RyaW5nXG4gICk6IExvY2F0aW9uIHtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcbiAgICAgIGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLFxuICAgICAgdG8sXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgICk7XG4gICAgd2FybmluZyhcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsXG4gICAgICBgcmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX1gXG4gICAgKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvOiBUbykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgbGV0IGhpc3Rvcnk6IE1lbW9yeUhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvOiBUbykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiLFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7IGFjdGlvbiwgbG9jYXRpb246IG5leHRMb2NhdGlvbiwgZGVsdGE6IDEgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHsgYWN0aW9uLCBsb2NhdGlvbjogbmV4dExvY2F0aW9uLCBkZWx0YTogMCB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sIGRlbHRhIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuOiBMaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEJyb3dzZXIgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzIGluIGEgd2ViXG4gKiBicm93c2VyIGVudmlyb25tZW50LiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3IgbW9zdCB3ZWIgYXBwcyBhbmQgcHJvdmlkZXMgdGhlXG4gKiBjbGVhbmVzdCBVUkxzIHRoZSBicm93c2VyJ3MgYWRkcmVzcyBiYXIuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNicm93c2VyaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KFxuICBvcHRpb25zOiBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogQnJvd3Nlckhpc3Rvcnkge1xuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24oXG4gICAgd2luZG93OiBXaW5kb3csXG4gICAgZ2xvYmFsSGlzdG9yeTogV2luZG93W1wiaGlzdG9yeVwiXVxuICApIHtcbiAgICBsZXQgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgXCJcIixcbiAgICAgIHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9LFxuICAgICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgICAoZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzcikgfHwgbnVsbCxcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5KSB8fCBcImRlZmF1bHRcIlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3c6IFdpbmRvdywgdG86IFRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbixcbiAgICBjcmVhdGVCcm93c2VySHJlZixcbiAgICBudWxsLFxuICAgIG9wdGlvbnNcbiAgKTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhhc2ggSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgcG9ydGlvblxuICogb2YgdGhlIFVSTCBpbiBhIHdlYiBicm93c2VyIGVudmlyb25tZW50LlxuICpcbiAqIFRoaXMgaXMgaWRlYWwgZm9yIGFwcHMgdGhhdCBkbyBub3QgY29udHJvbCB0aGUgc2VydmVyIGZvciBzb21lIHJlYXNvblxuICogKGJlY2F1c2UgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgaXMgbmV2ZXIgc2VudCB0byB0aGUgc2VydmVyKSwgaW5jbHVkaW5nIHNvbWVcbiAqIHNoYXJlZCBob3N0aW5nIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBwcm92aWRlIGZpbmUtZ3JhaW5lZCBjb250cm9scyBvdmVyXG4gKiB3aGljaCBwYWdlcyBhcmUgc2VydmVkIGF0IHdoaWNoIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBIYXNoSGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoXG4gIG9wdGlvbnM6IEhhc2hIaXN0b3J5T3B0aW9ucyA9IHt9XG4pOiBIYXNoSGlzdG9yeSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbihcbiAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICBnbG9iYWxIaXN0b3J5OiBXaW5kb3dbXCJoaXN0b3J5XCJdXG4gICkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiLFxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcblxuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXG4gICAgICBcIlwiLFxuICAgICAgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0sXG4gICAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyKSB8fCBudWxsLFxuICAgICAgKGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkpIHx8IFwiZGVmYXVsdFwiXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdzogV2luZG93LCB0bzogVG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbjogTG9jYXRpb24sIHRvOiBUbykge1xuICAgIHdhcm5pbmcoXG4gICAgICBsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLFxuICAgICAgYHJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaCgke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX0pYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUhhc2hMb2NhdGlvbixcbiAgICBjcmVhdGVIYXNoSHJlZixcbiAgICB2YWxpZGF0ZUhhc2hMb2NhdGlvbixcbiAgICBvcHRpb25zXG4gICk7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlOiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nKTogYXNzZXJ0cyB2YWx1ZTtcbmV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQ8VD4oXG4gIHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgbWVzc2FnZT86IHN0cmluZ1xuKTogYXNzZXJ0cyB2YWx1ZSBpcyBUO1xuZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKGNvbmQ6IGFueSwgbWVzc2FnZTogc3RyaW5nKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlLCBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuXG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb246IExvY2F0aW9uLCBpbmRleDogbnVtYmVyKTogSGlzdG9yeVN0YXRlIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXgsXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihcbiAgY3VycmVudDogc3RyaW5nIHwgTG9jYXRpb24sXG4gIHRvOiBUbyxcbiAgc3RhdGU6IGFueSA9IG51bGwsXG4gIGtleT86IHN0cmluZ1xuKTogUmVhZG9ubHk8TG9jYXRpb24+IHtcbiAgbGV0IGxvY2F0aW9uOiBSZWFkb25seTxMb2NhdGlvbj4gPSB7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCIsXG4gICAgLi4uKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0byksXG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogKHRvICYmICh0byBhcyBMb2NhdGlvbikua2V5KSB8fCBrZXkgfHwgY3JlYXRlS2V5KCksXG4gIH07XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYXRoKHtcbiAgcGF0aG5hbWUgPSBcIi9cIixcbiAgc2VhcmNoID0gXCJcIixcbiAgaGFzaCA9IFwiXCIsXG59OiBQYXJ0aWFsPFBhdGg+KSB7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIilcbiAgICBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIilcbiAgICBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aDogc3RyaW5nKTogUGFydGlhbDxQYXRoPiB7XG4gIGxldCBwYXJzZWRQYXRoOiBQYXJ0aWFsPFBhdGg+ID0ge307XG5cbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG5cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVybEhpc3RvcnkgZXh0ZW5kcyBIaXN0b3J5IHt9XG5cbmV4cG9ydCB0eXBlIFVybEhpc3RvcnlPcHRpb25zID0ge1xuICB3aW5kb3c/OiBXaW5kb3c7XG4gIHY1Q29tcGF0PzogYm9vbGVhbjtcbn07XG5cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShcbiAgZ2V0TG9jYXRpb246ICh3aW5kb3c6IFdpbmRvdywgZ2xvYmFsSGlzdG9yeTogV2luZG93W1wiaGlzdG9yeVwiXSkgPT4gTG9jYXRpb24sXG4gIGNyZWF0ZUhyZWY6ICh3aW5kb3c6IFdpbmRvdywgdG86IFRvKSA9PiBzdHJpbmcsXG4gIHZhbGlkYXRlTG9jYXRpb246ICgobG9jYXRpb246IExvY2F0aW9uLCB0bzogVG8pID0+IHZvaWQpIHwgbnVsbCxcbiAgb3B0aW9uczogVXJsSGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogVXJsSGlzdG9yeSB7XG4gIGxldCB7IHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ISwgdjVDb21wYXQgPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lcjogTGlzdGVuZXIgfCBudWxsID0gbnVsbDtcblxuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpITtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IC4uLmdsb2JhbEhpc3Rvcnkuc3RhdGUsIGlkeDogaW5kZXggfSwgXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbmRleCgpOiBudW1iZXIge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwgeyBpZHg6IG51bGwgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7IGFjdGlvbiwgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sIGRlbHRhIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG86IFRvLCBzdGF0ZT86IGFueSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcblxuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuXG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLCBkZWx0YTogMSB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvOiBUbywgc3RhdGU/OiBhbnkpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG5cbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLCBkZWx0YTogMCB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG86IFRvKTogVVJMIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPVxuICAgICAgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCJcbiAgICAgICAgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgLy8gVHJlYXRpbmcgdGhpcyBhcyBhIGZ1bGwgVVJMIHdpbGwgc3RyaXAgYW55IHRyYWlsaW5nIHNwYWNlcyBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcHJlLWVuY29kZSB0aGVtIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFydCBvZiBhIG1hdGNoaW5nIHNwbGF0IHBhcmFtIGZyb21cbiAgICAvLyBhbiBhbmNlc3RvciByb3V0ZVxuICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoLyAkLywgXCIlMjBcIik7XG4gICAgaW52YXJpYW50KFxuICAgICAgYmFzZSxcbiAgICAgIGBObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogJHtocmVmfWBcbiAgICApO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG5cbiAgbGV0IGhpc3Rvcnk6IEhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3RlbihmbjogTGlzdGVuZXIpIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuLy8jZW5kcmVnaW9uXG4iLCJpbXBvcnQgdHlwZSB7IExvY2F0aW9uLCBQYXRoLCBUbyB9IGZyb20gXCIuL2hpc3RvcnlcIjtcbmltcG9ydCB7IGludmFyaWFudCwgcGFyc2VQYXRoLCB3YXJuaW5nIH0gZnJvbSBcIi4vaGlzdG9yeVwiO1xuXG4vKipcbiAqIE1hcCBvZiByb3V0ZUlkIC0+IGRhdGEgcmV0dXJuZWQgZnJvbSBhIGxvYWRlci9hY3Rpb24vZXJyb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZURhdGEge1xuICBbcm91dGVJZDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgZW51bSBSZXN1bHRUeXBlIHtcbiAgZGF0YSA9IFwiZGF0YVwiLFxuICBkZWZlcnJlZCA9IFwiZGVmZXJyZWRcIixcbiAgcmVkaXJlY3QgPSBcInJlZGlyZWN0XCIsXG4gIGVycm9yID0gXCJlcnJvclwiLFxufVxuXG4vKipcbiAqIFN1Y2Nlc3NmdWwgcmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3VjY2Vzc1Jlc3VsdCB7XG4gIHR5cGU6IFJlc3VsdFR5cGUuZGF0YTtcbiAgZGF0YTogdW5rbm93bjtcbiAgc3RhdHVzQ29kZT86IG51bWJlcjtcbiAgaGVhZGVycz86IEhlYWRlcnM7XG59XG5cbi8qKlxuICogU3VjY2Vzc2Z1bCBkZWZlcigpIHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlZmVycmVkUmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZDtcbiAgZGVmZXJyZWREYXRhOiBEZWZlcnJlZERhdGE7XG4gIHN0YXR1c0NvZGU/OiBudW1iZXI7XG4gIGhlYWRlcnM/OiBIZWFkZXJzO1xufVxuXG4vKipcbiAqIFJlZGlyZWN0IHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZGlyZWN0UmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdDtcbiAgLy8gV2Uga2VlcCB0aGUgcmF3IFJlc3BvbnNlIGZvciByZWRpcmVjdHMgc28gd2UgY2FuIHJldHVybiBpdCB2ZXJiYXRpbVxuICByZXNwb25zZTogUmVzcG9uc2U7XG59XG5cbi8qKlxuICogVW5zdWNjZXNzZnVsIHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yUmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcjtcbiAgZXJyb3I6IHVua25vd247XG4gIHN0YXR1c0NvZGU/OiBudW1iZXI7XG4gIGhlYWRlcnM/OiBIZWFkZXJzO1xufVxuXG4vKipcbiAqIFJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvbiAtIHBvdGVudGlhbGx5IHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsXG4gKi9cbmV4cG9ydCB0eXBlIERhdGFSZXN1bHQgPVxuICB8IFN1Y2Nlc3NSZXN1bHRcbiAgfCBEZWZlcnJlZFJlc3VsdFxuICB8IFJlZGlyZWN0UmVzdWx0XG4gIHwgRXJyb3JSZXN1bHQ7XG5cbi8qKlxuICogUmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uIGNhbGxlZCB2aWEgZGF0YVN0cmF0ZWd5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlclJlc3VsdCB7XG4gIHR5cGU6IFwiZGF0YVwiIHwgXCJlcnJvclwiO1xuICByZXN1bHQ6IHVua25vd247IC8vIGRhdGEsIEVycm9yLCBSZXNwb25zZSwgRGVmZXJyZWREYXRhXG4gIHN0YXR1cz86IG51bWJlcjtcbn1cblxudHlwZSBMb3dlckNhc2VGb3JtTWV0aG9kID0gXCJnZXRcIiB8IFwicG9zdFwiIHwgXCJwdXRcIiB8IFwicGF0Y2hcIiB8IFwiZGVsZXRlXCI7XG50eXBlIFVwcGVyQ2FzZUZvcm1NZXRob2QgPSBVcHBlcmNhc2U8TG93ZXJDYXNlRm9ybU1ldGhvZD47XG5cbi8qKlxuICogVXNlcnMgY2FuIHNwZWNpZnkgZWl0aGVyIGxvd2VyY2FzZSBvciB1cHBlcmNhc2UgZm9ybSBtZXRob2RzIG9uIGA8Rm9ybT5gLFxuICogdXNlU3VibWl0KCksIGA8ZmV0Y2hlci5Gb3JtPmAsIGV0Yy5cbiAqL1xuZXhwb3J0IHR5cGUgSFRNTEZvcm1NZXRob2QgPSBMb3dlckNhc2VGb3JtTWV0aG9kIHwgVXBwZXJDYXNlRm9ybU1ldGhvZDtcblxuLyoqXG4gKiBBY3RpdmUgbmF2aWdhdGlvbi9mZXRjaGVyIGZvcm0gbWV0aG9kcyBhcmUgZXhwb3NlZCBpbiBsb3dlcmNhc2Ugb24gdGhlXG4gKiBSb3V0ZXJTdGF0ZVxuICovXG5leHBvcnQgdHlwZSBGb3JtTWV0aG9kID0gTG93ZXJDYXNlRm9ybU1ldGhvZDtcbmV4cG9ydCB0eXBlIE11dGF0aW9uRm9ybU1ldGhvZCA9IEV4Y2x1ZGU8Rm9ybU1ldGhvZCwgXCJnZXRcIj47XG5cbi8qKlxuICogSW4gdjcsIGFjdGl2ZSBuYXZpZ2F0aW9uL2ZldGNoZXIgZm9ybSBtZXRob2RzIGFyZSBleHBvc2VkIGluIHVwcGVyY2FzZSBvbiB0aGVcbiAqIFJvdXRlclN0YXRlLiAgVGhpcyBpcyB0byBhbGlnbiB3aXRoIHRoZSBub3JtYWxpemF0aW9uIGRvbmUgdmlhIGZldGNoKCkuXG4gKi9cbmV4cG9ydCB0eXBlIFY3X0Zvcm1NZXRob2QgPSBVcHBlckNhc2VGb3JtTWV0aG9kO1xuZXhwb3J0IHR5cGUgVjdfTXV0YXRpb25Gb3JtTWV0aG9kID0gRXhjbHVkZTxWN19Gb3JtTWV0aG9kLCBcIkdFVFwiPjtcblxuZXhwb3J0IHR5cGUgRm9ybUVuY1R5cGUgPVxuICB8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcbiAgfCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIlxuICB8IFwiYXBwbGljYXRpb24vanNvblwiXG4gIHwgXCJ0ZXh0L3BsYWluXCI7XG5cbi8vIFRoYW5rcyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3R5cGUtZmVzdCFcbnR5cGUgSnNvbk9iamVjdCA9IHsgW0tleSBpbiBzdHJpbmddOiBKc29uVmFsdWUgfSAmIHtcbiAgW0tleSBpbiBzdHJpbmddPzogSnNvblZhbHVlIHwgdW5kZWZpbmVkO1xufTtcbnR5cGUgSnNvbkFycmF5ID0gSnNvblZhbHVlW10gfCByZWFkb25seSBKc29uVmFsdWVbXTtcbnR5cGUgSnNvblByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsO1xudHlwZSBKc29uVmFsdWUgPSBKc29uUHJpbWl0aXZlIHwgSnNvbk9iamVjdCB8IEpzb25BcnJheTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW50ZXJuYWwgaW50ZXJmYWNlIHRvIHBhc3MgYXJvdW5kIGZvciBhY3Rpb24gc3VibWlzc2lvbnMsIG5vdCBpbnRlbmRlZCBmb3JcbiAqIGV4dGVybmFsIGNvbnN1bXB0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIFN1Ym1pc3Npb24gPVxuICB8IHtcbiAgICAgIGZvcm1NZXRob2Q6IEZvcm1NZXRob2QgfCBWN19Gb3JtTWV0aG9kO1xuICAgICAgZm9ybUFjdGlvbjogc3RyaW5nO1xuICAgICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlO1xuICAgICAgZm9ybURhdGE6IEZvcm1EYXRhO1xuICAgICAganNvbjogdW5kZWZpbmVkO1xuICAgICAgdGV4dDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfCB7XG4gICAgICBmb3JtTWV0aG9kOiBGb3JtTWV0aG9kIHwgVjdfRm9ybU1ldGhvZDtcbiAgICAgIGZvcm1BY3Rpb246IHN0cmluZztcbiAgICAgIGZvcm1FbmNUeXBlOiBGb3JtRW5jVHlwZTtcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQ7XG4gICAgICBqc29uOiBKc29uVmFsdWU7XG4gICAgICB0ZXh0OiB1bmRlZmluZWQ7XG4gICAgfVxuICB8IHtcbiAgICAgIGZvcm1NZXRob2Q6IEZvcm1NZXRob2QgfCBWN19Gb3JtTWV0aG9kO1xuICAgICAgZm9ybUFjdGlvbjogc3RyaW5nO1xuICAgICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlO1xuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZDtcbiAgICAgIGpzb246IHVuZGVmaW5lZDtcbiAgICAgIHRleHQ6IHN0cmluZztcbiAgICB9O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBBcmd1bWVudHMgcGFzc2VkIHRvIHJvdXRlIGxvYWRlci9hY3Rpb24gZnVuY3Rpb25zLiAgU2FtZSBmb3Igbm93IGJ1dCB3ZSBrZWVwXG4gKiB0aGlzIGFzIGEgcHJpdmF0ZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWwgaW4gY2FzZSB0aGV5IGRpdmVyZ2UgaW4gdGhlIGZ1dHVyZS5cbiAqL1xuaW50ZXJmYWNlIERhdGFGdW5jdGlvbkFyZ3M8Q29udGV4dD4ge1xuICByZXF1ZXN0OiBSZXF1ZXN0O1xuICBwYXJhbXM6IFBhcmFtcztcbiAgY29udGV4dD86IENvbnRleHQ7XG59XG5cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSBkZWZhdWx0cyBmcm9tIGFueSB0byB1bmtub3duIGluIGFuZCByZW1vdmUgUmVtaXggd3JhcHBlcnM6XG4vLyAgIEFjdGlvbkZ1bmN0aW9uLCBBY3Rpb25GdW5jdGlvbkFyZ3MsIExvYWRlckZ1bmN0aW9uLCBMb2FkZXJGdW5jdGlvbkFyZ3Ncbi8vICAgQWxzbywgbWFrZSB0aGVtIGEgdHlwZSBhbGlhcyBpbnN0ZWFkIG9mIGFuIGludGVyZmFjZVxuXG4vKipcbiAqIEFyZ3VtZW50cyBwYXNzZWQgdG8gbG9hZGVyIGZ1bmN0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIExvYWRlckZ1bmN0aW9uQXJnczxDb250ZXh0ID0gYW55PlxuICBleHRlbmRzIERhdGFGdW5jdGlvbkFyZ3M8Q29udGV4dD4ge31cblxuLyoqXG4gKiBBcmd1bWVudHMgcGFzc2VkIHRvIGFjdGlvbiBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25GdW5jdGlvbkFyZ3M8Q29udGV4dCA9IGFueT5cbiAgZXh0ZW5kcyBEYXRhRnVuY3Rpb25BcmdzPENvbnRleHQ+IHt9XG5cbi8qKlxuICogTG9hZGVycyBhbmQgYWN0aW9ucyBjYW4gcmV0dXJuIGFueXRoaW5nIGV4Y2VwdCBgdW5kZWZpbmVkYCAoYG51bGxgIGlzIGFcbiAqIHZhbGlkIHJldHVybiB2YWx1ZSBpZiB0aGVyZSBpcyBubyBkYXRhIHRvIHJldHVybikuICBSZXNwb25zZXMgYXJlIHByZWZlcnJlZFxuICogYW5kIHdpbGwgZWFzZSBhbnkgZnV0dXJlIG1pZ3JhdGlvbiB0byBSZW1peFxuICovXG50eXBlIERhdGFGdW5jdGlvblZhbHVlID0gUmVzcG9uc2UgfCBOb25OdWxsYWJsZTx1bmtub3duPiB8IG51bGw7XG5cbnR5cGUgRGF0YUZ1bmN0aW9uUmV0dXJuVmFsdWUgPSBQcm9taXNlPERhdGFGdW5jdGlvblZhbHVlPiB8IERhdGFGdW5jdGlvblZhbHVlO1xuXG4vKipcbiAqIFJvdXRlIGxvYWRlciBmdW5jdGlvbiBzaWduYXR1cmVcbiAqL1xuZXhwb3J0IHR5cGUgTG9hZGVyRnVuY3Rpb248Q29udGV4dCA9IGFueT4gPSB7XG4gIChcbiAgICBhcmdzOiBMb2FkZXJGdW5jdGlvbkFyZ3M8Q29udGV4dD4sXG4gICAgaGFuZGxlckN0eD86IHVua25vd25cbiAgKTogRGF0YUZ1bmN0aW9uUmV0dXJuVmFsdWU7XG59ICYgeyBoeWRyYXRlPzogYm9vbGVhbiB9O1xuXG4vKipcbiAqIFJvdXRlIGFjdGlvbiBmdW5jdGlvbiBzaWduYXR1cmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25GdW5jdGlvbjxDb250ZXh0ID0gYW55PiB7XG4gIChcbiAgICBhcmdzOiBBY3Rpb25GdW5jdGlvbkFyZ3M8Q29udGV4dD4sXG4gICAgaGFuZGxlckN0eD86IHVua25vd25cbiAgKTogRGF0YUZ1bmN0aW9uUmV0dXJuVmFsdWU7XG59XG5cbi8qKlxuICogQXJndW1lbnRzIHBhc3NlZCB0byBzaG91bGRSZXZhbGlkYXRlIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uQXJncyB7XG4gIGN1cnJlbnRVcmw6IFVSTDtcbiAgY3VycmVudFBhcmFtczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtcInBhcmFtc1wiXTtcbiAgbmV4dFVybDogVVJMO1xuICBuZXh0UGFyYW1zOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW1wicGFyYW1zXCJdO1xuICBmb3JtTWV0aG9kPzogU3VibWlzc2lvbltcImZvcm1NZXRob2RcIl07XG4gIGZvcm1BY3Rpb24/OiBTdWJtaXNzaW9uW1wiZm9ybUFjdGlvblwiXTtcbiAgZm9ybUVuY1R5cGU/OiBTdWJtaXNzaW9uW1wiZm9ybUVuY1R5cGVcIl07XG4gIHRleHQ/OiBTdWJtaXNzaW9uW1widGV4dFwiXTtcbiAgZm9ybURhdGE/OiBTdWJtaXNzaW9uW1wiZm9ybURhdGFcIl07XG4gIGpzb24/OiBTdWJtaXNzaW9uW1wianNvblwiXTtcbiAgdW5zdGFibGVfYWN0aW9uU3RhdHVzPzogbnVtYmVyO1xuICBhY3Rpb25SZXN1bHQ/OiBhbnk7XG4gIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJvdXRlIHNob3VsZFJldmFsaWRhdGUgZnVuY3Rpb24gc2lnbmF0dXJlLiAgVGhpcyBydW5zIGFmdGVyIGFueSBzdWJtaXNzaW9uXG4gKiAobmF2aWdhdGlvbiBvciBmZXRjaGVyKSwgc28gd2UgZmxhdHRlbiB0aGUgbmF2aWdhdGlvbi9mZXRjaGVyIHN1Ym1pc3Npb25cbiAqIG9udG8gdGhlIGFyZ3VtZW50cy4gIEl0IHNob3VsZG4ndCBtYXR0ZXIgd2hldGhlciBpdCBjYW1lIGZyb20gYSBuYXZpZ2F0aW9uXG4gKiBvciBhIGZldGNoZXIsIHdoYXQgcmVhbGx5IG1hdHRlcnMgaXMgdGhlIFVSTHMgYW5kIHRoZSBmb3JtRGF0YSBzaW5jZSBsb2FkZXJzXG4gKiBoYXZlIHRvIHJlLXJ1biBiYXNlZCBvbiB0aGUgZGF0YSBtb2RlbHMgdGhhdCB3ZXJlIHBvdGVudGlhbGx5IG11dGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uIHtcbiAgKGFyZ3M6IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbkFyZ3MpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSBmcmFtZXdvcmstYXdhcmUgbGF5ZXJzIHRvIHNldCBgaGFzRXJyb3JCb3VuZGFyeWBcbiAqIGZyb20gdGhlIGZyYW1ld29yay1hd2FyZSBgZXJyb3JFbGVtZW50YCBwcm9wXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBtYXBSb3V0ZVByb3BlcnRpZXNgIGluc3RlYWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXRlY3RFcnJvckJvdW5kYXJ5RnVuY3Rpb24ge1xuICAocm91dGU6IEFnbm9zdGljUm91dGVPYmplY3QpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFTdHJhdGVneU1hdGNoXG4gIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU1hdGNoPHN0cmluZywgQWdub3N0aWNEYXRhUm91dGVPYmplY3Q+IHtcbiAgc2hvdWxkTG9hZDogYm9vbGVhbjtcbiAgcmVzb2x2ZTogKFxuICAgIGhhbmRsZXJPdmVycmlkZT86IChcbiAgICAgIGhhbmRsZXI6IChjdHg/OiB1bmtub3duKSA9PiBEYXRhRnVuY3Rpb25SZXR1cm5WYWx1ZVxuICAgICkgPT4gUHJvbWlzZTxIYW5kbGVyUmVzdWx0PlxuICApID0+IFByb21pc2U8SGFuZGxlclJlc3VsdD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVN0cmF0ZWd5RnVuY3Rpb25BcmdzPENvbnRleHQgPSBhbnk+XG4gIGV4dGVuZHMgRGF0YUZ1bmN0aW9uQXJnczxDb250ZXh0PiB7XG4gIG1hdGNoZXM6IERhdGFTdHJhdGVneU1hdGNoW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVN0cmF0ZWd5RnVuY3Rpb24ge1xuICAoYXJnczogRGF0YVN0cmF0ZWd5RnVuY3Rpb25BcmdzKTogUHJvbWlzZTxIYW5kbGVyUmVzdWx0W10+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFnbm9zdGljUGF0Y2hSb3V0ZXNPbk1pc3NGdW5jdGlvbjxcbiAgTSBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaCA9IEFnbm9zdGljUm91dGVNYXRjaFxuPiB7XG4gIChvcHRzOiB7XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIG1hdGNoZXM6IE1bXTtcbiAgICBwYXRjaDogKHJvdXRlSWQ6IHN0cmluZyB8IG51bGwsIGNoaWxkcmVuOiBBZ25vc3RpY1JvdXRlT2JqZWN0W10pID0+IHZvaWQ7XG4gIH0pOiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBwcm92aWRlZCBieSB0aGUgZnJhbWV3b3JrLWF3YXJlIGxheWVycyB0byBzZXQgYW55IGZyYW1ld29yay1zcGVjaWZpY1xuICogcHJvcGVydGllcyBmcm9tIGZyYW1ld29yay1hZ25vc3RpYyBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24ge1xuICAocm91dGU6IEFnbm9zdGljUm91dGVPYmplY3QpOiB7XG4gICAgaGFzRXJyb3JCb3VuZGFyeTogYm9vbGVhbjtcbiAgfSAmIFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbi8qKlxuICogS2V5cyB3ZSBjYW5ub3QgY2hhbmdlIGZyb20gd2l0aGluIGEgbGF6eSgpIGZ1bmN0aW9uLiBXZSBzcHJlYWQgYWxsIG90aGVyIGtleXNcbiAqIG9udG8gdGhlIHJvdXRlLiBFaXRoZXIgdGhleSdyZSBtZWFuaW5nZnVsIHRvIHRoZSByb3V0ZXIsIG9yIHRoZXknbGwgZ2V0XG4gKiBpZ25vcmVkLlxuICovXG5leHBvcnQgdHlwZSBJbW11dGFibGVSb3V0ZUtleSA9XG4gIHwgXCJsYXp5XCJcbiAgfCBcImNhc2VTZW5zaXRpdmVcIlxuICB8IFwicGF0aFwiXG4gIHwgXCJpZFwiXG4gIHwgXCJpbmRleFwiXG4gIHwgXCJjaGlsZHJlblwiO1xuXG5leHBvcnQgY29uc3QgaW1tdXRhYmxlUm91dGVLZXlzID0gbmV3IFNldDxJbW11dGFibGVSb3V0ZUtleT4oW1xuICBcImxhenlcIixcbiAgXCJjYXNlU2Vuc2l0aXZlXCIsXG4gIFwicGF0aFwiLFxuICBcImlkXCIsXG4gIFwiaW5kZXhcIixcbiAgXCJjaGlsZHJlblwiLFxuXSk7XG5cbnR5cGUgUmVxdWlyZU9uZTxULCBLZXkgPSBrZXlvZiBUPiA9IEV4Y2x1ZGU8XG4gIHtcbiAgICBbSyBpbiBrZXlvZiBUXTogSyBleHRlbmRzIEtleSA/IE9taXQ8VCwgSz4gJiBSZXF1aXJlZDxQaWNrPFQsIEs+PiA6IG5ldmVyO1xuICB9W2tleW9mIFRdLFxuICB1bmRlZmluZWRcbj47XG5cbi8qKlxuICogbGF6eSgpIGZ1bmN0aW9uIHRvIGxvYWQgYSByb3V0ZSBkZWZpbml0aW9uLCB3aGljaCBjYW4gYWRkIG5vbi1tYXRjaGluZ1xuICogcmVsYXRlZCBwcm9wZXJ0aWVzIHRvIGEgcm91dGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYXp5Um91dGVGdW5jdGlvbjxSIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdD4ge1xuICAoKTogUHJvbWlzZTxSZXF1aXJlT25lPE9taXQ8UiwgSW1tdXRhYmxlUm91dGVLZXk+Pj47XG59XG5cbi8qKlxuICogQmFzZSBSb3V0ZU9iamVjdCB3aXRoIGNvbW1vbiBwcm9wcyBzaGFyZWQgYnkgYWxsIHR5cGVzIG9mIHJvdXRlc1xuICovXG50eXBlIEFnbm9zdGljQmFzZVJvdXRlT2JqZWN0ID0ge1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgcGF0aD86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG4gIGxvYWRlcj86IExvYWRlckZ1bmN0aW9uIHwgYm9vbGVhbjtcbiAgYWN0aW9uPzogQWN0aW9uRnVuY3Rpb24gfCBib29sZWFuO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogYm9vbGVhbjtcbiAgc2hvdWxkUmV2YWxpZGF0ZT86IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbjtcbiAgaGFuZGxlPzogYW55O1xuICBsYXp5PzogTGF6eVJvdXRlRnVuY3Rpb248QWdub3N0aWNCYXNlUm91dGVPYmplY3Q+O1xufTtcblxuLyoqXG4gKiBJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZHJlblxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0luZGV4Um91dGVPYmplY3QgPSBBZ25vc3RpY0Jhc2VSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGluZGV4OiB0cnVlO1xufTtcblxuLyoqXG4gKiBOb24taW5kZXggcm91dGVzIG1heSBoYXZlIGNoaWxkcmVuLCBidXQgY2Fubm90IGhhdmUgaW5kZXhcbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNCYXNlUm91dGVPYmplY3QgJiB7XG4gIGNoaWxkcmVuPzogQWdub3N0aWNSb3V0ZU9iamVjdFtdO1xuICBpbmRleD86IGZhbHNlO1xufTtcblxuLyoqXG4gKiBBIHJvdXRlIG9iamVjdCByZXByZXNlbnRzIGEgbG9naWNhbCByb3V0ZSwgd2l0aCAob3B0aW9uYWxseSkgaXRzIGNoaWxkXG4gKiByb3V0ZXMgb3JnYW5pemVkIGluIGEgdHJlZS1saWtlIHN0cnVjdHVyZS5cbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0XG4gIHwgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0O1xuXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFJbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0ICYge1xuICBpZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQWdub3N0aWNEYXRhTm9uSW5kZXhSb3V0ZU9iamVjdCA9IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuICBpZDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIGRhdGEgcm91dGUgb2JqZWN0LCB3aGljaCBpcyBqdXN0IGEgUm91dGVPYmplY3Qgd2l0aCBhIHJlcXVpcmVkIHVuaXF1ZSBJRFxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNEYXRhSW5kZXhSb3V0ZU9iamVjdFxuICB8IEFnbm9zdGljRGF0YU5vbkluZGV4Um91dGVPYmplY3Q7XG5cbmV4cG9ydCB0eXBlIFJvdXRlTWFuaWZlc3QgPSBSZWNvcmQ8c3RyaW5nLCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCB8IHVuZGVmaW5lZD47XG5cbi8vIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGZpbmRpbmcgcGF0aCBwYXJhbWV0ZXJzIGluIHRoZSBhYnNlbmNlIG9mIHdpbGRjYXJkc1xudHlwZSBfUGF0aFBhcmFtPFBhdGggZXh0ZW5kcyBzdHJpbmc+ID1cbiAgLy8gc3BsaXQgcGF0aCBpbnRvIGluZGl2aWR1YWwgcGF0aCBzZWdtZW50c1xuICBQYXRoIGV4dGVuZHMgYCR7aW5mZXIgTH0vJHtpbmZlciBSfWBcbiAgICA/IF9QYXRoUGFyYW08TD4gfCBfUGF0aFBhcmFtPFI+XG4gICAgOiAvLyBmaW5kIHBhcmFtcyBhZnRlciBgOmBcbiAgICBQYXRoIGV4dGVuZHMgYDoke2luZmVyIFBhcmFtfWBcbiAgICA/IFBhcmFtIGV4dGVuZHMgYCR7aW5mZXIgT3B0aW9uYWx9P2BcbiAgICAgID8gT3B0aW9uYWxcbiAgICAgIDogUGFyYW1cbiAgICA6IC8vIG90aGVyd2lzZSwgdGhlcmUgYXJlbid0IGFueSBwYXJhbXMgcHJlc2VudFxuICAgICAgbmV2ZXI7XG5cbi8qKlxuICogRXhhbXBsZXM6XG4gKiBcIi9hL2IvKlwiIC0+IFwiKlwiXG4gKiBcIjphXCIgLT4gXCJhXCJcbiAqIFwiL2EvOmJcIiAtPiBcImJcIlxuICogXCIvYS9ibGFoYmxhaGJsYWg6YlwiIC0+IFwiYlwiXG4gKiBcIi86YS86YlwiIC0+IFwiYVwiIHwgXCJiXCJcbiAqIFwiLzphL2IvOmMvKlwiIC0+IFwiYVwiIHwgXCJjXCIgfCBcIipcIlxuICovXG5leHBvcnQgdHlwZSBQYXRoUGFyYW08UGF0aCBleHRlbmRzIHN0cmluZz4gPVxuICAvLyBjaGVjayBpZiBwYXRoIGlzIGp1c3QgYSB3aWxkY2FyZFxuICBQYXRoIGV4dGVuZHMgXCIqXCIgfCBcIi8qXCJcbiAgICA/IFwiKlwiXG4gICAgOiAvLyBsb29rIGZvciB3aWxkY2FyZCBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoXG4gICAgUGF0aCBleHRlbmRzIGAke2luZmVyIFJlc3R9LypgXG4gICAgPyBcIipcIiB8IF9QYXRoUGFyYW08UmVzdD5cbiAgICA6IC8vIGxvb2sgZm9yIHBhcmFtcyBpbiB0aGUgYWJzZW5jZSBvZiB3aWxkY2FyZHNcbiAgICAgIF9QYXRoUGFyYW08UGF0aD47XG5cbi8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIGdpdmVuIHN0cmluZyBzZWdtZW50LiBJZiBpdCBmYWlscywgdGhlbiBqdXN0IHJldHVybiB0aGVcbi8vIHBsYWluIHN0cmluZyB0eXBlIGFzIGEgZGVmYXVsdCBmYWxsYmFjay4gT3RoZXJ3aXNlLCByZXR1cm4gdGhlIHVuaW9uIG9mIHRoZVxuLy8gcGFyc2VkIHN0cmluZyBsaXRlcmFscyB0aGF0IHdlcmUgcmVmZXJlbmNlZCBhcyBkeW5hbWljIHNlZ21lbnRzIGluIHRoZSByb3V0ZS5cbmV4cG9ydCB0eXBlIFBhcmFtUGFyc2VLZXk8U2VnbWVudCBleHRlbmRzIHN0cmluZz4gPVxuICAvLyBpZiB5b3UgY291bGQgbm90IGZpbmQgcGF0aCBwYXJhbXMsIGZhbGxiYWNrIHRvIGBzdHJpbmdgXG4gIFtQYXRoUGFyYW08U2VnbWVudD5dIGV4dGVuZHMgW25ldmVyXSA/IHN0cmluZyA6IFBhdGhQYXJhbTxTZWdtZW50PjtcblxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFyc2VkIGZyb20gdGhlIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBQYXJhbXM8S2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW2tleSBpbiBLZXldOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEEgUm91dGVNYXRjaCBjb250YWlucyBpbmZvIGFib3V0IGhvdyBhIHJvdXRlIG1hdGNoZWQgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNSb3V0ZU1hdGNoPFxuICBQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4ge1xuICAvKipcbiAgICogVGhlIG5hbWVzIGFuZCB2YWx1ZXMgb2YgZHluYW1pYyBwYXJhbWV0ZXJzIGluIHRoZSBVUkwuXG4gICAqL1xuICBwYXJhbXM6IFBhcmFtczxQYXJhbUtleT47XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQuXG4gICAqL1xuICBwYXRobmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkIGJlZm9yZSBjaGlsZCByb3V0ZXMuXG4gICAqL1xuICBwYXRobmFtZUJhc2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSByb3V0ZSBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBtYXRjaC5cbiAgICovXG4gIHJvdXRlOiBSb3V0ZU9iamVjdFR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNEYXRhUm91dGVNYXRjaFxuICBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaDxzdHJpbmcsIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0PiB7fVxuXG5mdW5jdGlvbiBpc0luZGV4Um91dGUoXG4gIHJvdXRlOiBBZ25vc3RpY1JvdXRlT2JqZWN0XG4pOiByb3V0ZSBpcyBBZ25vc3RpY0luZGV4Um91dGVPYmplY3Qge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG5cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSwgc28gd2UgYXJlIHdvcmtpbmdcbi8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICByb3V0ZXM6IEFnbm9zdGljUm91dGVPYmplY3RbXSxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbixcbiAgcGFyZW50UGF0aDogc3RyaW5nW10gPSBbXSxcbiAgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QgPSB7fVxuKTogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSB7XG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgU3RyaW5nKGluZGV4KV07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSB8fCAhcm91dGUuY2hpbGRyZW4sXG4gICAgICBgQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGVgXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhbWFuaWZlc3RbaWRdLFxuICAgICAgYEZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFwiJHtpZH1cIi4gIFJvdXRlIGAgK1xuICAgICAgICBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiXG4gICAgKTtcblxuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZTogQWdub3N0aWNEYXRhSW5kZXhSb3V0ZU9iamVjdCA9IHtcbiAgICAgICAgLi4ucm91dGUsXG4gICAgICAgIC4uLm1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksXG4gICAgICAgIGlkLFxuICAgICAgfTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlOiBBZ25vc3RpY0RhdGFOb25JbmRleFJvdXRlT2JqZWN0ID0ge1xuICAgICAgICAuLi5yb3V0ZSxcbiAgICAgICAgLi4ubWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSxcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgbWFuaWZlc3RbaWRdID0gcGF0aE9yTGF5b3V0Um91dGU7XG5cbiAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBwYXRoT3JMYXlvdXRSb3V0ZS5jaGlsZHJlbiA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoXG4gICAgICAgICAgcm91dGUuY2hpbGRyZW4sXG4gICAgICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgICAgIHRyZWVQYXRoLFxuICAgICAgICAgIG1hbmlmZXN0XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJvdXRlczxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4oXG4gIHJvdXRlczogUm91dGVPYmplY3RUeXBlW10sXG4gIGxvY2F0aW9uQXJnOiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZyxcbiAgYmFzZW5hbWUgPSBcIi9cIlxuKTogQWdub3N0aWNSb3V0ZU1hdGNoPHN0cmluZywgUm91dGVPYmplY3RUeXBlPltdIHwgbnVsbCB7XG4gIHJldHVybiBtYXRjaFJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUm91dGVzSW1wbDxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4oXG4gIHJvdXRlczogUm91dGVPYmplY3RUeXBlW10sXG4gIGxvY2F0aW9uQXJnOiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZyxcbiAgYmFzZW5hbWU6IHN0cmluZyxcbiAgYWxsb3dQYXJ0aWFsOiBib29sZWFuXG4pOiBBZ25vc3RpY1JvdXRlTWF0Y2g8c3RyaW5nLCBSb3V0ZU9iamVjdFR5cGU+W10gfCBudWxsIHtcbiAgbGV0IGxvY2F0aW9uID1cbiAgICB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG5cbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuXG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcblxuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb25cbiAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkXG4gICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzXG4gICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlXG4gICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICBsZXQgZGVjb2RlZCA9IGRlY29kZVBhdGgocGF0aG5hbWUpO1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoPHN0cmluZywgUm91dGVPYmplY3RUeXBlPihcbiAgICAgIGJyYW5jaGVzW2ldLFxuICAgICAgZGVjb2RlZCxcbiAgICAgIGFsbG93UGFydGlhbFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVSU1hdGNoPERhdGEgPSB1bmtub3duLCBIYW5kbGUgPSB1bmtub3duPiB7XG4gIGlkOiBzdHJpbmc7XG4gIHBhdGhuYW1lOiBzdHJpbmc7XG4gIHBhcmFtczogQWdub3N0aWNSb3V0ZU1hdGNoW1wicGFyYW1zXCJdO1xuICBkYXRhOiBEYXRhO1xuICBoYW5kbGU6IEhhbmRsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKFxuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbG9hZGVyRGF0YTogUm91dGVEYXRhXG4pOiBVSU1hdGNoIHtcbiAgbGV0IHsgcm91dGUsIHBhdGhuYW1lLCBwYXJhbXMgfSA9IG1hdGNoO1xuICByZXR1cm4ge1xuICAgIGlkOiByb3V0ZS5pZCxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXMsXG4gICAgZGF0YTogbG9hZGVyRGF0YVtyb3V0ZS5pZF0sXG4gICAgaGFuZGxlOiByb3V0ZS5oYW5kbGUsXG4gIH07XG59XG5cbmludGVyZmFjZSBSb3V0ZU1ldGE8XG4gIFJvdXRlT2JqZWN0VHlwZSBleHRlbmRzIEFnbm9zdGljUm91dGVPYmplY3QgPSBBZ25vc3RpY1JvdXRlT2JqZWN0XG4+IHtcbiAgcmVsYXRpdmVQYXRoOiBzdHJpbmc7XG4gIGNhc2VTZW5zaXRpdmU6IGJvb2xlYW47XG4gIGNoaWxkcmVuSW5kZXg6IG51bWJlcjtcbiAgcm91dGU6IFJvdXRlT2JqZWN0VHlwZTtcbn1cblxuaW50ZXJmYWNlIFJvdXRlQnJhbmNoPFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPiB7XG4gIHBhdGg6IHN0cmluZztcbiAgc2NvcmU6IG51bWJlcjtcbiAgcm91dGVzTWV0YTogUm91dGVNZXRhPFJvdXRlT2JqZWN0VHlwZT5bXTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlczxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4oXG4gIHJvdXRlczogUm91dGVPYmplY3RUeXBlW10sXG4gIGJyYW5jaGVzOiBSb3V0ZUJyYW5jaDxSb3V0ZU9iamVjdFR5cGU+W10gPSBbXSxcbiAgcGFyZW50c01ldGE6IFJvdXRlTWV0YTxSb3V0ZU9iamVjdFR5cGU+W10gPSBbXSxcbiAgcGFyZW50UGF0aCA9IFwiXCJcbik6IFJvdXRlQnJhbmNoPFJvdXRlT2JqZWN0VHlwZT5bXSB7XG4gIGxldCBmbGF0dGVuUm91dGUgPSAoXG4gICAgcm91dGU6IFJvdXRlT2JqZWN0VHlwZSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHJlbGF0aXZlUGF0aD86IHN0cmluZ1xuICApID0+IHtcbiAgICBsZXQgbWV0YTogUm91dGVNZXRhPFJvdXRlT2JqZWN0VHlwZT4gPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6XG4gICAgICAgIHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGUsXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLFxuICAgICAgICBgQWJzb2x1dGUgcm91dGUgcGF0aCBcIiR7bWV0YS5yZWxhdGl2ZVBhdGh9XCIgbmVzdGVkIHVuZGVyIHBhdGggYCArXG4gICAgICAgICAgYFwiJHtwYXJlbnRQYXRofVwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBgICtcbiAgICAgICAgICBgbXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5gXG4gICAgICApO1xuXG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcblxuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSwgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLFxuICAgICAgICBgSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIGAgK1xuICAgICAgICAgIGBhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcIiR7cGF0aH1cIi5gXG4gICAgICApO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cblxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGEsXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICAvLyBjb2Fyc2UtZ3JhaW4gY2hlY2sgZm9yIG9wdGlvbmFsIHBhcmFtc1xuICAgIGlmIChyb3V0ZS5wYXRoID09PSBcIlwiIHx8ICFyb3V0ZS5wYXRoPy5pbmNsdWRlcyhcIj9cIikpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYWxsIGNvbWJpbmF0aW9ucyBvZiBvcHRpb25hbCBwYXRoIHNlZ21lbnRzIGZvciBhIGdpdmVuIHBhdGgsXG4gKiBleGNsdWRpbmcgY29tYmluYXRpb25zIHRoYXQgYXJlIGFtYmlndW91cyBhbmQgb2YgbG93ZXIgcHJpb3JpdHkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGAvb25lLzp0d28/L3RocmVlLzpmb3VyPy86Zml2ZT9gIGV4cGxvZGVzIHRvOlxuICogLSBgL29uZS90aHJlZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS90aHJlZS86Zm91ci86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91ci86Zml2ZWBcbiAqL1xuZnVuY3Rpb24gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuXG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7XG5cbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuXG4gIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIEludGVwcmV0IGVtcHR5IHN0cmluZyBhcyBvbWl0dGluZyBhbiBvcHRpb25hbCBzZWdtZW50XG4gICAgLy8gYFtcIm9uZVwiLCBcIlwiLCBcInRocmVlXCJdYCBjb3JyZXNwb25kcyB0byBvbWl0dGluZyBgOnR3b2AgZnJvbSBgL29uZS86dHdvPy90aHJlZWAgLT4gYC9vbmUvdGhyZWVgXG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBbcmVxdWlyZWQsIFwiXCJdIDogW3JlcXVpcmVkXTtcbiAgfVxuXG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcblxuICBsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4sIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaChcbiAgICAuLi5yZXN0RXhwbG9kZWQubWFwKChzdWJwYXRoKSA9PlxuICAgICAgc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKVxuICAgIClcbiAgKTtcblxuICAvLyBUaGVuLCBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG5cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcCgoZXhwbG9kZWQpID0+XG4gICAgcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWRcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXM6IFJvdXRlQnJhbmNoW10pOiB2b2lkIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT5cbiAgICBhLnNjb3JlICE9PSBiLnNjb3JlXG4gICAgICA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICAgICAgOiBjb21wYXJlSW5kZXhlcyhcbiAgICAgICAgICBhLnJvdXRlc01ldGEubWFwKChtZXRhKSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLFxuICAgICAgICAgIGIucm91dGVzTWV0YS5tYXAoKG1ldGEpID0+IG1ldGEuY2hpbGRyZW5JbmRleClcbiAgICAgICAgKVxuICApO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146W1xcdy1dKyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSAoczogc3RyaW5nKSA9PiBzID09PSBcIipcIjtcblxuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGg6IHN0cmluZywgaW5kZXg6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiBudW1iZXIge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50c1xuICAgIC5maWx0ZXIoKHMpID0+ICFpc1NwbGF0KHMpKVxuICAgIC5yZWR1Y2UoXG4gICAgICAoc2NvcmUsIHNlZ21lbnQpID0+XG4gICAgICAgIHNjb3JlICtcbiAgICAgICAgKHBhcmFtUmUudGVzdChzZWdtZW50KVxuICAgICAgICAgID8gZHluYW1pY1NlZ21lbnRWYWx1ZVxuICAgICAgICAgIDogc2VnbWVudCA9PT0gXCJcIlxuICAgICAgICAgID8gZW1wdHlTZWdtZW50VmFsdWVcbiAgICAgICAgICA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksXG4gICAgICBpbml0aWFsU2NvcmVcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiBudW1iZXIge1xuICBsZXQgc2libGluZ3MgPVxuICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG5cbiAgcmV0dXJuIHNpYmxpbmdzXG4gICAgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gICAgICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgICAgIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAgICAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICAgICAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdXG4gICAgOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gICAgICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgICAgIDA7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPihcbiAgYnJhbmNoOiBSb3V0ZUJyYW5jaDxSb3V0ZU9iamVjdFR5cGU+LFxuICBwYXRobmFtZTogc3RyaW5nLFxuICBhbGxvd1BhcnRpYWwgPSBmYWxzZVxuKTogQWdub3N0aWNSb3V0ZU1hdGNoPFBhcmFtS2V5LCBSb3V0ZU9iamVjdFR5cGU+W10gfCBudWxsIHtcbiAgbGV0IHsgcm91dGVzTWV0YSB9ID0gYnJhbmNoO1xuXG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXM6IEFnbm9zdGljUm91dGVNYXRjaDxQYXJhbUtleSwgUm91dGVPYmplY3RUeXBlPltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiXG4gICAgICAgID8gcGF0aG5hbWVcbiAgICAgICAgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoXG4gICAgICB7IHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLCBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsIGVuZCB9LFxuICAgICAgcmVtYWluaW5nUGF0aG5hbWVcbiAgICApO1xuXG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcblxuICAgIGlmIChcbiAgICAgICFtYXRjaCAmJlxuICAgICAgZW5kICYmXG4gICAgICBhbGxvd1BhcnRpYWwgJiZcbiAgICAgICFyb3V0ZXNNZXRhW3JvdXRlc01ldGEubGVuZ3RoIC0gMV0ucm91dGUuaW5kZXhcbiAgICApIHtcbiAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKFxuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgICAgIGVuZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbWFpbmluZ1BhdGhuYW1lXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcblxuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zIGFzIFBhcmFtczxQYXJhbUtleT4sXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKFxuICAgICAgICBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgICAgICksXG4gICAgICByb3V0ZSxcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQYXRoPFBhdGggZXh0ZW5kcyBzdHJpbmc+KFxuICBvcmlnaW5hbFBhdGg6IFBhdGgsXG4gIHBhcmFtczoge1xuICAgIFtrZXkgaW4gUGF0aFBhcmFtPFBhdGg+XTogc3RyaW5nIHwgbnVsbDtcbiAgfSA9IHt9IGFzIGFueVxuKTogc3RyaW5nIHtcbiAgbGV0IHBhdGg6IHN0cmluZyA9IG9yaWdpbmFsUGF0aDtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICBgUm91dGUgcGF0aCBcIiR7cGF0aH1cIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBgICtcbiAgICAgICAgYFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiIGJlY2F1c2UgdGhlIFxcYCpcXGAgY2hhcmFjdGVyIG11c3QgYCArXG4gICAgICAgIGBhbHdheXMgZm9sbG93IGEgXFxgL1xcYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIGAgK1xuICAgICAgICBgcGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcIiR7cGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKX1cIi5gXG4gICAgKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSBhcyBQYXRoO1xuICB9XG5cbiAgLy8gZW5zdXJlIGAvYCBpcyBhZGRlZCBhdCB0aGUgYmVnaW5uaW5nIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlXG4gIGNvbnN0IHByZWZpeCA9IHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCI7XG5cbiAgY29uc3Qgc3RyaW5naWZ5ID0gKHA6IGFueSkgPT5cbiAgICBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuXG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aFxuICAgIC5zcGxpdCgvXFwvKy8pXG4gICAgLm1hcCgoc2VnbWVudCwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgICBjb25zdCBpc0xhc3RTZWdtZW50ID0gaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDE7XG5cbiAgICAgIC8vIG9ubHkgYXBwbHkgdGhlIHNwbGF0IGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudFxuICAgICAgaWYgKGlzTGFzdFNlZ21lbnQgJiYgc2VnbWVudCA9PT0gXCIqXCIpIHtcbiAgICAgICAgY29uc3Qgc3RhciA9IFwiKlwiIGFzIFBhdGhQYXJhbTxQYXRoPjtcbiAgICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW1zW3N0YXJdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihbXFx3LV0rKShcXD8/KSQvKTtcbiAgICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgICBsZXQgcGFyYW0gPSBwYXJhbXNba2V5IGFzIFBhdGhQYXJhbTxQYXRoPl07XG4gICAgICAgIGludmFyaWFudChvcHRpb25hbCA9PT0gXCI/XCIgfHwgcGFyYW0gIT0gbnVsbCwgYE1pc3NpbmcgXCI6JHtrZXl9XCIgcGFyYW1gKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgICAgcmV0dXJuIHNlZ21lbnQucmVwbGFjZSgvXFw/JC9nLCBcIlwiKTtcbiAgICB9KVxuICAgIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAgIC5maWx0ZXIoKHNlZ21lbnQpID0+ICEhc2VnbWVudCk7XG5cbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuXG4vKipcbiAqIEEgUGF0aFBhdHRlcm4gaXMgdXNlZCB0byBtYXRjaCBvbiBzb21lIHBvcnRpb24gb2YgYSBVUkwgcGF0aG5hbWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aFBhdHRlcm48UGF0aCBleHRlbmRzIHN0cmluZyA9IHN0cmluZz4ge1xuICAvKipcbiAgICogQSBzdHJpbmcgdG8gbWF0Y2ggYWdhaW5zdCBhIFVSTCBwYXRobmFtZS4gTWF5IGNvbnRhaW4gYDppZGAtc3R5bGUgc2VnbWVudHNcbiAgICogdG8gaW5kaWNhdGUgcGxhY2Vob2xkZXJzIGZvciBkeW5hbWljIHBhcmFtZXRlcnMuIE1heSBhbHNvIGVuZCB3aXRoIGAvKmAgdG9cbiAgICogaW5kaWNhdGUgbWF0Y2hpbmcgdGhlIHJlc3Qgb2YgdGhlIFVSTCBwYXRobmFtZS5cbiAgICovXG4gIHBhdGg6IFBhdGg7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYHRydWVgIGlmIHRoZSBzdGF0aWMgcG9ydGlvbnMgb2YgdGhlIGBwYXRoYCBzaG91bGQgYmUgbWF0Y2hlZCBpblxuICAgKiB0aGUgc2FtZSBjYXNlLlxuICAgKi9cbiAgY2FzZVNlbnNpdGl2ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYHRydWVgIGlmIHRoaXMgcGF0dGVybiBzaG91bGQgbWF0Y2ggdGhlIGVudGlyZSBVUkwgcGF0aG5hbWUuXG4gICAqL1xuICBlbmQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgUGF0aE1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgUGF0aFBhdHRlcm4gbWF0Y2hlZCBvbiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRoTWF0Y2g8UGFyYW1LZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lcyBhbmQgdmFsdWVzIG9mIGR5bmFtaWMgcGFyYW1ldGVycyBpbiB0aGUgVVJMLlxuICAgKi9cbiAgcGFyYW1zOiBQYXJhbXM8UGFyYW1LZXk+O1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkLlxuICAgKi9cbiAgcGF0aG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgbWF0Y2hlZCBiZWZvcmUgY2hpbGQgcm91dGVzLlxuICAgKi9cbiAgcGF0aG5hbWVCYXNlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcGF0dGVybiB0aGF0IHdhcyB1c2VkIHRvIG1hdGNoLlxuICAgKi9cbiAgcGF0dGVybjogUGF0aFBhdHRlcm47XG59XG5cbnR5cGUgTXV0YWJsZTxUPiA9IHtcbiAgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBUW1BdO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFBhdGg8XG4gIFBhcmFtS2V5IGV4dGVuZHMgUGFyYW1QYXJzZUtleTxQYXRoPixcbiAgUGF0aCBleHRlbmRzIHN0cmluZ1xuPihcbiAgcGF0dGVybjogUGF0aFBhdHRlcm48UGF0aD4gfCBQYXRoLFxuICBwYXRobmFtZTogc3RyaW5nXG4pOiBQYXRoTWF0Y2g8UGFyYW1LZXk+IHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7IHBhdGg6IHBhdHRlcm4sIGNhc2VTZW5zaXRpdmU6IGZhbHNlLCBlbmQ6IHRydWUgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgY29tcGlsZWRQYXJhbXNdID0gY29tcGlsZVBhdGgoXG4gICAgcGF0dGVybi5wYXRoLFxuICAgIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSxcbiAgICBwYXR0ZXJuLmVuZFxuICApO1xuXG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zOiBQYXJhbXMgPSBjb21waWxlZFBhcmFtcy5yZWR1Y2U8TXV0YWJsZTxQYXJhbXM+PihcbiAgICAobWVtbywgeyBwYXJhbU5hbWUsIGlzT3B0aW9uYWwgfSwgaW5kZXgpID0+IHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lXG4gICAgICAgICAgLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aClcbiAgICAgICAgICAucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdO1xuICAgICAgaWYgKGlzT3B0aW9uYWwgJiYgIXZhbHVlKSB7XG4gICAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW9bcGFyYW1OYW1lXSA9ICh2YWx1ZSB8fCBcIlwiKS5yZXBsYWNlKC8lMkYvZywgXCIvXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSxcbiAgICB7fVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm4sXG4gIH07XG59XG5cbnR5cGUgQ29tcGlsZWRQYXRoUGFyYW0gPSB7IHBhcmFtTmFtZTogc3RyaW5nOyBpc09wdGlvbmFsPzogYm9vbGVhbiB9O1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChcbiAgcGF0aDogc3RyaW5nLFxuICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gIGVuZCA9IHRydWVcbik6IFtSZWdFeHAsIENvbXBpbGVkUGF0aFBhcmFtW11dIHtcbiAgd2FybmluZyhcbiAgICBwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLFxuICAgIGBSb3V0ZSBwYXRoIFwiJHtwYXRofVwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGAgK1xuICAgICAgYFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiIGJlY2F1c2UgdGhlIFxcYCpcXGAgY2hhcmFjdGVyIG11c3QgYCArXG4gICAgICBgYWx3YXlzIGZvbGxvdyBhIFxcYC9cXGAgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBgICtcbiAgICAgIGBwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiLmBcbiAgKTtcblxuICBsZXQgcGFyYW1zOiBDb21waWxlZFBhdGhQYXJhbVtdID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPVxuICAgIFwiXlwiICtcbiAgICBwYXRoXG4gICAgICAucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgICAgIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gICAgICAucmVwbGFjZSgvW1xcXFwuKiteJHt9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgICAgIC5yZXBsYWNlKFxuICAgICAgICAvXFwvOihbXFx3LV0rKShcXD8pPy9nLFxuICAgICAgICAoXzogc3RyaW5nLCBwYXJhbU5hbWU6IHN0cmluZywgaXNPcHRpb25hbCkgPT4ge1xuICAgICAgICAgIHBhcmFtcy5wdXNoKHsgcGFyYW1OYW1lLCBpc09wdGlvbmFsOiBpc09wdGlvbmFsICE9IG51bGwgfSk7XG4gICAgICAgICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBcIi8/KFteXFxcXC9dKyk/XCIgOiBcIi8oW15cXFxcL10rKVwiO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtcy5wdXNoKHsgcGFyYW1OYW1lOiBcIipcIiB9KTtcbiAgICByZWdleHBTb3VyY2UgKz1cbiAgICAgIHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIlxuICAgICAgICA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgICAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4LCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2Uge1xuICAgIC8vIE5vdGhpbmcgdG8gbWF0Y2ggZm9yIFwiXCIgb3IgXCIvXCJcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG5cbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbXNdO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVQYXRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgIC5zcGxpdChcIi9cIilcbiAgICAgIC5tYXAoKHYpID0+IGRlY29kZVVSSUNvbXBvbmVudCh2KS5yZXBsYWNlKC9cXC8vZywgXCIlMkZcIikpXG4gICAgICAuam9pbihcIi9cIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgYFRoZSBVUkwgcGF0aCBcIiR7dmFsdWV9XCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIGAgK1xuICAgICAgICBgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5IGR1ZSB0byBhIGJhZCBwZXJjZW50IGAgK1xuICAgICAgICBgZW5jb2RpbmcgKCR7ZXJyb3J9KS5gXG4gICAgKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKFxuICBwYXRobmFtZTogc3RyaW5nLFxuICBiYXNlbmFtZTogc3RyaW5nXG4pOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKVxuICAgID8gYmFzZW5hbWUubGVuZ3RoIC0gMVxuICAgIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9yZXNvbHZlLXBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvOiBUbywgZnJvbVBhdGhuYW1lID0gXCIvXCIpOiBQYXRoIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuXG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWVcbiAgICA/IHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIilcbiAgICAgID8gdG9QYXRobmFtZVxuICAgICAgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKVxuICAgIDogZnJvbVBhdGhuYW1lO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2goc2VhcmNoKSxcbiAgICBoYXNoOiBub3JtYWxpemVIYXNoKGhhc2gpLFxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoOiBzdHJpbmcsIGZyb21QYXRobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG5cbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKChzZWdtZW50KSA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihcbiAgY2hhcjogc3RyaW5nLFxuICBmaWVsZDogc3RyaW5nLFxuICBkZXN0OiBzdHJpbmcsXG4gIHBhdGg6IFBhcnRpYWw8UGF0aD5cbikge1xuICByZXR1cm4gKFxuICAgIGBDYW5ub3QgaW5jbHVkZSBhICcke2NoYXJ9JyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgYCArXG4gICAgYFxcYHRvLiR7ZmllbGR9XFxgIGZpZWxkIFske0pTT04uc3RyaW5naWZ5KFxuICAgICAgcGF0aFxuICAgICl9XS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIGAgK1xuICAgIGBcXGB0by4ke2Rlc3R9XFxgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIGAgK1xuICAgIGBhIHN0cmluZyBpbiA8TGluayB0bz1cIi4uLlwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuYFxuICApO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXM8XG4gIFQgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlTWF0Y2ggPSBBZ25vc3RpY1JvdXRlTWF0Y2hcbj4obWF0Y2hlczogVFtdKSB7XG4gIHJldHVybiBtYXRjaGVzLmZpbHRlcihcbiAgICAobWF0Y2gsIGluZGV4KSA9PlxuICAgICAgaW5kZXggPT09IDAgfHwgKG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKVxuICApO1xufVxuXG4vLyBSZXR1cm4gdGhlIGFycmF5IG9mIHBhdGhuYW1lcyBmb3IgdGhlIGN1cnJlbnQgcm91dGUgbWF0Y2hlcyAtIHVzZWQgdG9cbi8vIGdlbmVyYXRlIHRoZSByb3V0ZVBhdGhuYW1lcyBpbnB1dCBmb3IgcmVzb2x2ZVRvKClcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXNvbHZlVG9NYXRjaGVzPFxuICBUIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU1hdGNoID0gQWdub3N0aWNSb3V0ZU1hdGNoXG4+KG1hdGNoZXM6IFRbXSwgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGJvb2xlYW4pIHtcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG5cbiAgLy8gV2hlbiB2N19yZWxhdGl2ZVNwbGF0UGF0aCBpcyBlbmFibGVkLCB1c2UgdGhlIGZ1bGwgcGF0aG5hbWUgZm9yIHRoZSBsZWFmXG4gIC8vIG1hdGNoIHNvIHdlIGluY2x1ZGUgc3BsYXQgdmFsdWVzIGZvciBcIi5cIiBsaW5rcy4gIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExMDUyI2lzc3VlY29tbWVudC0xODM2NTg5MzI5XG4gIGlmICh2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICAgIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAoKG1hdGNoLCBpZHgpID0+XG4gICAgICBpZHggPT09IHBhdGhNYXRjaGVzLmxlbmd0aCAtIDEgPyBtYXRjaC5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcGF0aE1hdGNoZXMubWFwKChtYXRjaCkgPT4gbWF0Y2gucGF0aG5hbWVCYXNlKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRvKFxuICB0b0FyZzogVG8sXG4gIHJvdXRlUGF0aG5hbWVzOiBzdHJpbmdbXSxcbiAgbG9jYXRpb25QYXRobmFtZTogc3RyaW5nLFxuICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlXG4pOiBQYXRoIHtcbiAgbGV0IHRvOiBQYXJ0aWFsPFBhdGg+O1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0geyAuLi50b0FyZyB9O1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKVxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bylcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgICF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pXG4gICAgKTtcbiAgfVxuXG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcblxuICBsZXQgZnJvbTogc3RyaW5nO1xuXG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgLy8gV2l0aCByZWxhdGl2ZT1cInJvdXRlXCIgKHRoZSBkZWZhdWx0KSwgZWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnNcbiAgICAvLyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmUgVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXlcbiAgICAvLyBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYVxuICAgIC8vIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgaWYgKCFpc1BhdGhSZWxhdGl2ZSAmJiB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG5cbiAgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgXCJ0b1wiIGhhZCBvbmVcbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9XG4gICAgdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID1cbiAgICAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoXG4gICAgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmXG4gICAgKGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCB8fCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaClcbiAgKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvOiBUbyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgKHRvIGFzIFBhdGgpLnBhdGhuYW1lID09PSBcIlwiXG4gICAgPyBcIi9cIlxuICAgIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiXG4gICAgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lXG4gICAgOiB0by5wYXRobmFtZTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3Qgam9pblBhdGhzID0gKHBhdGhzOiBzdHJpbmdbXSk6IHN0cmluZyA9PlxuICBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSAocGF0aG5hbWU6IHN0cmluZyk6IHN0cmluZyA9PlxuICBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTZWFyY2ggPSAoc2VhcmNoOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiXG4gICAgPyBcIlwiXG4gICAgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIilcbiAgICA/IHNlYXJjaFxuICAgIDogXCI/XCIgKyBzZWFyY2g7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZUhhc2ggPSAoaGFzaDogc3RyaW5nKTogc3RyaW5nID0+XG4gICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuXG5leHBvcnQgdHlwZSBKc29uRnVuY3Rpb24gPSA8RGF0YT4oXG4gIGRhdGE6IERhdGEsXG4gIGluaXQ/OiBudW1iZXIgfCBSZXNwb25zZUluaXRcbikgPT4gUmVzcG9uc2U7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IGpzb246IEpzb25GdW5jdGlvbiA9IChkYXRhLCBpbml0ID0ge30pID0+IHtcbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8geyBzdGF0dXM6IGluaXQgfSA6IGluaXQ7XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCB7XG4gICAgLi4ucmVzcG9uc2VJbml0LFxuICAgIGhlYWRlcnMsXG4gIH0pO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBUcmFja2VkUHJvbWlzZSBleHRlbmRzIFByb21pc2U8YW55PiB7XG4gIF90cmFja2VkPzogYm9vbGVhbjtcbiAgX2RhdGE/OiBhbnk7XG4gIF9lcnJvcj86IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZXhwb3J0IGNsYXNzIERlZmVycmVkRGF0YSB7XG4gIHByaXZhdGUgcGVuZGluZ0tleXNTZXQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIHByaXZhdGUgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyO1xuICBwcml2YXRlIGFib3J0UHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgcHJpdmF0ZSB1bmxpc3RlbkFib3J0U2lnbmFsOiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIHN1YnNjcmliZXJzOiBTZXQ8KGFib3J0ZWQ6IGJvb2xlYW4sIHNldHRsZWRLZXk/OiBzdHJpbmcpID0+IHZvaWQ+ID1cbiAgICBuZXcgU2V0KCk7XG4gIGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBpbml0PzogUmVzcG9uc2VJbml0O1xuICBkZWZlcnJlZEtleXM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIHJlc3BvbnNlSW5pdD86IFJlc3BvbnNlSW5pdCkge1xuICAgIGludmFyaWFudChcbiAgICAgIGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSksXG4gICAgICBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIlxuICAgICk7XG5cbiAgICAvLyBTZXQgdXAgYW4gQWJvcnRDb250cm9sbGVyICsgUHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHRvIGV4aXQgZWFybHlcbiAgICAvLyBjYW5jZWxsYXRpb25cbiAgICBsZXQgcmVqZWN0OiAoZTogQWJvcnRlZERlZmVycmVkRXJyb3IpID0+IHZvaWQ7XG4gICAgdGhpcy5hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gKHJlamVjdCA9IHIpKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PlxuICAgICAgcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT5cbiAgICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuXG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKFxuICAgICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFtrZXldOiB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSxcbiAgICAgICAgfSksXG4gICAgICB7fVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuXG4gIHByaXZhdGUgdHJhY2tQcm9taXNlKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiBQcm9taXNlPHVua25vd24+IHwgdW5rbm93blxuICApOiBUcmFja2VkUHJvbWlzZSB8IHVua25vd24ge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcblxuICAgIC8vIFdlIHN0b3JlIGEgbGl0dGxlIHdyYXBwZXIgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZXh0ZW5kZWQgd2l0aFxuICAgIC8vIF9kYXRhL19lcnJvciBwcm9wcyB1cG9uIHJlc29sdmUvcmVqZWN0XG4gICAgbGV0IHByb21pc2U6IFRyYWNrZWRQcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKFxuICAgICAgKGRhdGEpID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCB1bmRlZmluZWQsIGRhdGEgYXMgdW5rbm93biksXG4gICAgICAoZXJyb3IpID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciBhcyB1bmtub3duKVxuICAgICk7XG5cbiAgICAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuICAgIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBwcml2YXRlIG9uU2V0dGxlKFxuICAgIHByb21pc2U6IFRyYWNrZWRQcm9taXNlLFxuICAgIGtleTogc3RyaW5nLFxuICAgIGVycm9yOiB1bmtub3duLFxuICAgIGRhdGE/OiB1bmtub3duXG4gICk6IHVua25vd24ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJlxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvclxuICAgICkge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IGVycm9yIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHByb21pc2Ugd2FzIHJlc29sdmVkL3JlamVjdGVkIHdpdGggdW5kZWZpbmVkLCB3ZSdsbCB0aHJvdyBhbiBlcnJvciBhcyB5b3VcbiAgICAvLyBzaG91bGQgYWx3YXlzIHJlc29sdmUgd2l0aCBhIHZhbHVlIG9yIG51bGxcbiAgICBpZiAoZXJyb3IgPT09IHVuZGVmaW5lZCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1bmRlZmluZWRFcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgYERlZmVycmVkIGRhdGEgZm9yIGtleSBcIiR7a2V5fVwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggXFxgdW5kZWZpbmVkXFxgLCBgICtcbiAgICAgICAgICBgeW91IG11c3QgcmVzb2x2ZS9yZWplY3Qgd2l0aCBhIHZhbHVlIG9yIFxcYG51bGxcXGAuYFxuICAgICAgKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3IgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodW5kZWZpbmVkRXJyb3IpO1xuICAgIH1cblxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gZXJyb3IgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHsgZ2V0OiAoKSA9PiBkYXRhIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdChhYm9ydGVkOiBib29sZWFuLCBzZXR0bGVkS2V5Pzogc3RyaW5nKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuXG4gIHN1YnNjcmliZShmbjogKGFib3J0ZWQ6IGJvb2xlYW4sIHNldHRsZWRLZXk/OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWw6IEFib3J0U2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgbGV0IG9uQWJvcnQgPSAoKSA9PiB0aGlzLmNhbmNlbCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZSgoYWJvcnRlZCkgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSxcbiAgICAgIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCJcbiAgICApO1xuXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKFxuICAgICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSksXG4gICAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuICB9XG5cbiAgZ2V0IHBlbmRpbmdLZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWU6IGFueSk6IHZhbHVlIGlzIFRyYWNrZWRQcm9taXNlIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgKHZhbHVlIGFzIFRyYWNrZWRQcm9taXNlKS5fdHJhY2tlZCA9PT0gdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZTogYW55KSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cblxuZXhwb3J0IHR5cGUgRGVmZXJGdW5jdGlvbiA9IChcbiAgZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gIGluaXQ/OiBudW1iZXIgfCBSZXNwb25zZUluaXRcbikgPT4gRGVmZXJyZWREYXRhO1xuXG5leHBvcnQgY29uc3QgZGVmZXI6IERlZmVyRnVuY3Rpb24gPSAoZGF0YSwgaW5pdCA9IHt9KSA9PiB7XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHsgc3RhdHVzOiBpbml0IH0gOiBpbml0O1xuXG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuXG5leHBvcnQgdHlwZSBSZWRpcmVjdEZ1bmN0aW9uID0gKFxuICB1cmw6IHN0cmluZyxcbiAgaW5pdD86IG51bWJlciB8IFJlc3BvbnNlSW5pdFxuKSA9PiBSZXNwb25zZTtcblxuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZGlyZWN0OiBSZWRpcmVjdEZ1bmN0aW9uID0gKHVybCwgaW5pdCA9IDMwMikgPT4ge1xuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7IHN0YXR1czogcmVzcG9uc2VJbml0IH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAuLi5yZXNwb25zZUluaXQsXG4gICAgaGVhZGVycyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UgdGhhdCB3aWxsIGZvcmNlIGEgZG9jdW1lbnQgcmVsb2FkIHRvIHRoZSBuZXcgbG9jYXRpb24uXG4gKiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZGlyZWN0RG9jdW1lbnQ6IFJlZGlyZWN0RnVuY3Rpb24gPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIiwgXCJ0cnVlXCIpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuXG5leHBvcnQgdHlwZSBFcnJvclJlc3BvbnNlID0ge1xuICBzdGF0dXM6IG51bWJlcjtcbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xuICBkYXRhOiBhbnk7XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKlxuICogV2UgZG9uJ3QgZXhwb3J0IHRoZSBjbGFzcyBmb3IgcHVibGljIHVzZSBzaW5jZSBpdCdzIGFuIGltcGxlbWVudGF0aW9uXG4gKiBkZXRhaWwsIGJ1dCB3ZSBleHBvcnQgdGhlIGludGVyZmFjZSBhYm92ZSBzbyBmb2xrcyBjYW4gYnVpbGQgdGhlaXIgb3duXG4gKiBhYnN0cmFjdGlvbnMgYXJvdW5kIGluc3RhbmNlcyB2aWEgaXNSb3V0ZUVycm9yUmVzcG9uc2UoKVxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JSZXNwb25zZUltcGwgaW1wbGVtZW50cyBFcnJvclJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIHN0YXR1c1RleHQ6IHN0cmluZztcbiAgZGF0YTogYW55O1xuICBwcml2YXRlIGVycm9yPzogRXJyb3I7XG4gIHByaXZhdGUgaW50ZXJuYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc3RhdHVzOiBudW1iZXIsXG4gICAgc3RhdHVzVGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGRhdGE6IGFueSxcbiAgICBpbnRlcm5hbCA9IGZhbHNlXG4gICkge1xuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9IHN0YXR1c1RleHQgfHwgXCJcIjtcbiAgICB0aGlzLmludGVybmFsID0gaW50ZXJuYWw7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgdGhpcy5lcnJvciA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVycm9yIGlzIGFuIEVycm9yUmVzcG9uc2UgZ2VuZXJhdGVkIGZyb20gYSA0eHgvNXh4XG4gKiBSZXNwb25zZSB0aHJvd24gZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcjogYW55KTogZXJyb3IgaXMgRXJyb3JSZXNwb25zZSB7XG4gIHJldHVybiAoXG4gICAgZXJyb3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiZcbiAgICB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIHR5cGVvZiBlcnJvci5pbnRlcm5hbCA9PT0gXCJib29sZWFuXCIgJiZcbiAgICBcImRhdGFcIiBpbiBlcnJvclxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBIaXN0b3J5LCBMb2NhdGlvbiwgUGF0aCwgVG8gfSBmcm9tIFwiLi9oaXN0b3J5XCI7XG5pbXBvcnQge1xuICBBY3Rpb24gYXMgSGlzdG9yeUFjdGlvbixcbiAgY3JlYXRlTG9jYXRpb24sXG4gIGNyZWF0ZVBhdGgsXG4gIGludmFyaWFudCxcbiAgcGFyc2VQYXRoLFxuICB3YXJuaW5nLFxufSBmcm9tIFwiLi9oaXN0b3J5XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0LFxuICBEYXRhU3RyYXRlZ3lNYXRjaCxcbiAgQWdub3N0aWNSb3V0ZU9iamVjdCxcbiAgRGF0YVJlc3VsdCxcbiAgRGF0YVN0cmF0ZWd5RnVuY3Rpb24sXG4gIERhdGFTdHJhdGVneUZ1bmN0aW9uQXJncyxcbiAgRGVmZXJyZWREYXRhLFxuICBEZWZlcnJlZFJlc3VsdCxcbiAgRGV0ZWN0RXJyb3JCb3VuZGFyeUZ1bmN0aW9uLFxuICBFcnJvclJlc3VsdCxcbiAgRm9ybUVuY1R5cGUsXG4gIEZvcm1NZXRob2QsXG4gIEhUTUxGb3JtTWV0aG9kLFxuICBIYW5kbGVyUmVzdWx0LFxuICBJbW11dGFibGVSb3V0ZUtleSxcbiAgTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24sXG4gIE11dGF0aW9uRm9ybU1ldGhvZCxcbiAgUmVkaXJlY3RSZXN1bHQsXG4gIFJvdXRlRGF0YSxcbiAgUm91dGVNYW5pZmVzdCxcbiAgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uQXJncyxcbiAgU3VibWlzc2lvbixcbiAgU3VjY2Vzc1Jlc3VsdCxcbiAgVUlNYXRjaCxcbiAgVjdfRm9ybU1ldGhvZCxcbiAgVjdfTXV0YXRpb25Gb3JtTWV0aG9kLFxuICBBZ25vc3RpY1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb24sXG59IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge1xuICBFcnJvclJlc3BvbnNlSW1wbCxcbiAgUmVzdWx0VHlwZSxcbiAgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsXG4gIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsXG4gIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLFxuICBnZXRSZXNvbHZlVG9NYXRjaGVzLFxuICBpbW11dGFibGVSb3V0ZUtleXMsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBqb2luUGF0aHMsXG4gIG1hdGNoUm91dGVzLFxuICBtYXRjaFJvdXRlc0ltcGwsXG4gIHJlc29sdmVUbyxcbiAgc3RyaXBCYXNlbmFtZSxcbn0gZnJvbSBcIi4vdXRpbHNcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEEgUm91dGVyIGluc3RhbmNlIG1hbmFnZXMgYWxsIG5hdmlnYXRpb24gYW5kIGRhdGEgbG9hZGluZy9tdXRhdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXIge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFJldHVybiB0aGUgYmFzZW5hbWUgZm9yIHRoZSByb3V0ZXJcbiAgICovXG4gIGdldCBiYXNlbmFtZSgpOiBSb3V0ZXJJbml0W1wiYmFzZW5hbWVcIl07XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBSZXR1cm4gdGhlIGZ1dHVyZSBjb25maWcgZm9yIHRoZSByb3V0ZXJcbiAgICovXG4gIGdldCBmdXR1cmUoKTogRnV0dXJlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogUmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSByb3V0ZXJcbiAgICovXG4gIGdldCBzdGF0ZSgpOiBSb3V0ZXJTdGF0ZTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFJldHVybiB0aGUgcm91dGVzIGZvciB0aGlzIHJvdXRlciBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0IHJvdXRlcygpOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogUmV0dXJuIHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSByb3V0ZXJcbiAgICovXG4gIGdldCB3aW5kb3coKTogUm91dGVySW5pdFtcIndpbmRvd1wiXTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEluaXRpYWxpemUgdGhlIHJvdXRlciwgaW5jbHVkaW5nIGFkZGluZyBoaXN0b3J5IGxpc3RlbmVycyBhbmQga2lja2luZyBvZmZcbiAgICogaW5pdGlhbCBkYXRhIGZldGNoZXMuICBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gY2xlYW51cCBsaXN0ZW5lcnMgYW5kIGFib3J0XG4gICAqIGFueSBpbi1wcm9ncmVzcyBsb2Fkc1xuICAgKi9cbiAgaW5pdGlhbGl6ZSgpOiBSb3V0ZXI7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBTdWJzY3JpYmUgdG8gcm91dGVyLnN0YXRlIHVwZGF0ZXNcbiAgICpcbiAgICogQHBhcmFtIGZuIGZ1bmN0aW9uIHRvIGNhbGwgd2l0aCB0aGUgbmV3IHN0YXRlXG4gICAqL1xuICBzdWJzY3JpYmUoZm46IFJvdXRlclN1YnNjcmliZXIpOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBiZWhhdmlvciBpbiB0aGUgcm91dGVyXG4gICAqXG4gICAqIEBwYXJhbSBzYXZlZFNjcm9sbFBvc2l0aW9ucyBPYmplY3QgdGhhdCB3aWxsIG1hbmFnZSBwb3NpdGlvbnMsIGluIGNhc2VcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0J3MgYmVpbmcgcmVzdG9yZWQgZnJvbSBzZXNzaW9uU3RvcmFnZVxuICAgKiBAcGFyYW0gZ2V0U2Nyb2xsUG9zaXRpb24gICAgRnVuY3Rpb24gdG8gZ2V0IHRoZSBhY3RpdmUgWSBzY3JvbGwgcG9zaXRpb25cbiAgICogQHBhcmFtIGdldEtleSAgICAgICAgICAgICAgIEZ1bmN0aW9uIHRvIGdldCB0aGUga2V5IHRvIHVzZSBmb3IgcmVzdG9yYXRpb25cbiAgICovXG4gIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKFxuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LFxuICAgIGdldFNjcm9sbFBvc2l0aW9uOiBHZXRTY3JvbGxQb3NpdGlvbkZ1bmN0aW9uLFxuICAgIGdldEtleT86IEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb25cbiAgKTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIE5hdmlnYXRlIGZvcndhcmQvYmFja3dhcmQgaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogQHBhcmFtIHRvIERlbHRhIHRvIG1vdmUgaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICovXG4gIG5hdmlnYXRlKHRvOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZSB0byB0aGUgZ2l2ZW4gcGF0aFxuICAgKiBAcGFyYW0gdG8gUGF0aCB0byBuYXZpZ2F0ZSB0b1xuICAgKiBAcGFyYW0gb3B0cyBOYXZpZ2F0aW9uIG9wdGlvbnMgKG1ldGhvZCwgc3VibWlzc2lvbiwgZXRjLilcbiAgICovXG4gIG5hdmlnYXRlKHRvOiBUbyB8IG51bGwsIG9wdHM/OiBSb3V0ZXJOYXZpZ2F0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXNzaW9uXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgICAgIEZldGNoZXIga2V5XG4gICAqIEBwYXJhbSByb3V0ZUlkIFJvdXRlIHRoYXQgb3ducyB0aGUgZmV0Y2hlclxuICAgKiBAcGFyYW0gaHJlZiAgICBocmVmIHRvIGZldGNoXG4gICAqIEBwYXJhbSBvcHRzICAgIEZldGNoZXIgb3B0aW9ucywgKG1ldGhvZCwgc3VibWlzc2lvbiwgZXRjLilcbiAgICovXG4gIGZldGNoKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJvdXRlSWQ6IHN0cmluZyxcbiAgICBocmVmOiBzdHJpbmcgfCBudWxsLFxuICAgIG9wdHM/OiBSb3V0ZXJGZXRjaE9wdGlvbnNcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYWxsIGN1cnJlbnQgcm91dGUgbG9hZGVycyBhbmQgZmV0Y2hlciBsb2Fkc1xuICAgKi9cbiAgcmV2YWxpZGF0ZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBjcmVhdGUgYW4gaHJlZiBmb3IgdGhlIGdpdmVuIGxvY2F0aW9uXG4gICAqIEBwYXJhbSBsb2NhdGlvblxuICAgKi9cbiAgY3JlYXRlSHJlZihsb2NhdGlvbjogTG9jYXRpb24gfCBVUkwpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIFVSTCBlbmNvZGUgYSBkZXN0aW5hdGlvbiBwYXRoIGFjY29yZGluZyB0byB0aGUgaW50ZXJuYWxcbiAgICogaGlzdG9yeSBpbXBsZW1lbnRhdGlvblxuICAgKiBAcGFyYW0gdG9cbiAgICovXG4gIGVuY29kZUxvY2F0aW9uKHRvOiBUbyk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBHZXQvY3JlYXRlIGEgZmV0Y2hlciBmb3IgdGhlIGdpdmVuIGtleVxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBnZXRGZXRjaGVyPFREYXRhID0gYW55PihrZXk6IHN0cmluZyk6IEZldGNoZXI8VERhdGE+O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogRGVsZXRlIHRoZSBmZXRjaGVyIGZvciBhIGdpdmVuIGtleVxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBkZWxldGVGZXRjaGVyKGtleTogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIENsZWFudXAgbGlzdGVuZXJzIGFuZCBhYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbG9hZHNcbiAgICovXG4gIGRpc3Bvc2UoKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEdldCBhIG5hdmlnYXRpb24gYmxvY2tlclxuICAgKiBAcGFyYW0ga2V5IFRoZSBpZGVudGlmaWVyIGZvciB0aGUgYmxvY2tlclxuICAgKiBAcGFyYW0gZm4gVGhlIGJsb2NrZXIgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25cbiAgICovXG4gIGdldEJsb2NrZXIoa2V5OiBzdHJpbmcsIGZuOiBCbG9ja2VyRnVuY3Rpb24pOiBCbG9ja2VyO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogRGVsZXRlIGEgbmF2aWdhdGlvbiBibG9ja2VyXG4gICAqIEBwYXJhbSBrZXkgVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBibG9ja2VyXG4gICAqL1xuICBkZWxldGVCbG9ja2VyKGtleTogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgRE8gTk9UIFVTRVxuICAgKlxuICAgKiBQYXRjaCBhZGRpdGlvbmFsIGNoaWxkcmVuIHJvdXRlcyBpbnRvIGFuIGV4aXN0aW5nIHBhcmVudCByb3V0ZVxuICAgKiBAcGFyYW0gcm91dGVJZCBUaGUgcGFyZW50IHJvdXRlIGlkIG9yIGEgY2FsbGJhY2sgZnVuY3Rpb24gYWNjZXB0aW5nIGBwYXRjaGBcbiAgICogICAgICAgICAgICAgICAgdG8gcGVyZm9ybSBiYXRjaCBwYXRjaGluZ1xuICAgKiBAcGFyYW0gY2hpbGRyZW4gVGhlIGFkZGl0aW9uYWwgY2hpbGRyZW4gcm91dGVzXG4gICAqL1xuICBwYXRjaFJvdXRlcyhyb3V0ZUlkOiBzdHJpbmcgfCBudWxsLCBjaGlsZHJlbjogQWdub3N0aWNSb3V0ZU9iamVjdFtdKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEhNUiBuZWVkcyB0byBwYXNzIGluLWZsaWdodCByb3V0ZSB1cGRhdGVzIHRvIFJlYWN0IFJvdXRlclxuICAgKiBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBncmFudWxhciByb3V0ZSB1cGRhdGUgQVBJcyAoYWRkUm91dGUsIHVwZGF0ZVJvdXRlLCBkZWxldGVSb3V0ZSlcbiAgICovXG4gIF9pbnRlcm5hbFNldFJvdXRlcyhyb3V0ZXM6IEFnbm9zdGljUm91dGVPYmplY3RbXSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBJbnRlcm5hbCBmZXRjaCBBYm9ydENvbnRyb2xsZXJzIGFjY2Vzc2VkIGJ5IHVuaXQgdGVzdHNcbiAgICovXG4gIF9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnM6IE1hcDxzdHJpbmcsIEFib3J0Q29udHJvbGxlcj47XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBJbnRlcm5hbCBwZW5kaW5nIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgYWNjZXNzZWQgYnkgdW5pdCB0ZXN0c1xuICAgKi9cbiAgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzOiBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+O1xufVxuXG4vKipcbiAqIFN0YXRlIG1haW50YWluZWQgaW50ZXJuYWxseSBieSB0aGUgcm91dGVyLiAgRHVyaW5nIGEgbmF2aWdhdGlvbiwgYWxsIHN0YXRlc1xuICogcmVmbGVjdCB0aGUgdGhlIFwib2xkXCIgbG9jYXRpb24gdW5sZXNzIG90aGVyd2lzZSBub3RlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJTdGF0ZSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIG9mIHRoZSBtb3N0IHJlY2VudCBuYXZpZ2F0aW9uXG4gICAqL1xuICBoaXN0b3J5QWN0aW9uOiBIaXN0b3J5QWN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBsb2NhdGlvbiByZWZsZWN0ZWQgYnkgdGhlIHJvdXRlclxuICAgKi9cbiAgbG9jYXRpb246IExvY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBzZXQgb2Ygcm91dGUgbWF0Y2hlc1xuICAgKi9cbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdO1xuXG4gIC8qKlxuICAgKiBUcmFja3Mgd2hldGhlciB3ZSd2ZSBjb21wbGV0ZWQgb3VyIGluaXRpYWwgZGF0YSBsb2FkXG4gICAqL1xuICBpbml0aWFsaXplZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ3VycmVudCBzY3JvbGwgcG9zaXRpb24gd2Ugc2hvdWxkIHN0YXJ0IGF0IGZvciBhIG5ldyB2aWV3XG4gICAqICAtIG51bWJlciAtPiBzY3JvbGwgcG9zaXRpb24gdG8gcmVzdG9yZSB0b1xuICAgKiAgLSBmYWxzZSAtPiBkbyBub3QgcmVzdG9yZSBzY3JvbGwgYXQgYWxsICh1c2VkIGR1cmluZyBzdWJtaXNzaW9ucylcbiAgICogIC0gbnVsbCAtPiBkb24ndCBoYXZlIGEgc2F2ZWQgcG9zaXRpb24sIHNjcm9sbCB0byBoYXNoIG9yIHRvcCBvZiBwYWdlXG4gICAqL1xuICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IG51bWJlciB8IGZhbHNlIHwgbnVsbDtcblxuICAvKipcbiAgICogSW5kaWNhdGUgd2hldGhlciB0aGlzIG5hdmlnYXRpb24gc2hvdWxkIHNraXAgcmVzZXR0aW5nIHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICogaWYgd2UgYXJlIHVuYWJsZSB0byByZXN0b3JlIHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICovXG4gIHByZXZlbnRTY3JvbGxSZXNldDogYm9vbGVhbjtcblxuICAvKipcbiAgICogVHJhY2tzIHRoZSBzdGF0ZSBvZiB0aGUgY3VycmVudCBuYXZpZ2F0aW9uXG4gICAqL1xuICBuYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uO1xuXG4gIC8qKlxuICAgKiBUcmFja3MgYW55IGluLXByb2dyZXNzIHJldmFsaWRhdGlvbnNcbiAgICovXG4gIHJldmFsaWRhdGlvbjogUmV2YWxpZGF0aW9uU3RhdGU7XG5cbiAgLyoqXG4gICAqIERhdGEgZnJvbSB0aGUgbG9hZGVycyBmb3IgdGhlIGN1cnJlbnQgbWF0Y2hlc1xuICAgKi9cbiAgbG9hZGVyRGF0YTogUm91dGVEYXRhO1xuXG4gIC8qKlxuICAgKiBEYXRhIGZyb20gdGhlIGFjdGlvbiBmb3IgdGhlIGN1cnJlbnQgbWF0Y2hlc1xuICAgKi9cbiAgYWN0aW9uRGF0YTogUm91dGVEYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogRXJyb3JzIGNhdWdodCBmcm9tIGxvYWRlcnMgZm9yIHRoZSBjdXJyZW50IG1hdGNoZXNcbiAgICovXG4gIGVycm9yczogUm91dGVEYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogTWFwIG9mIGN1cnJlbnQgZmV0Y2hlcnNcbiAgICovXG4gIGZldGNoZXJzOiBNYXA8c3RyaW5nLCBGZXRjaGVyPjtcblxuICAvKipcbiAgICogTWFwIG9mIGN1cnJlbnQgYmxvY2tlcnNcbiAgICovXG4gIGJsb2NrZXJzOiBNYXA8c3RyaW5nLCBCbG9ja2VyPjtcbn1cblxuLyoqXG4gKiBEYXRhIHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIGh5ZHJhdGUgYSBSb3V0ZXIgZnJvbSBTU1JcbiAqL1xuZXhwb3J0IHR5cGUgSHlkcmF0aW9uU3RhdGUgPSBQYXJ0aWFsPFxuICBQaWNrPFJvdXRlclN0YXRlLCBcImxvYWRlckRhdGFcIiB8IFwiYWN0aW9uRGF0YVwiIHwgXCJlcnJvcnNcIj5cbj47XG5cbi8qKlxuICogRnV0dXJlIGZsYWdzIHRvIHRvZ2dsZSBuZXcgZmVhdHVyZSBiZWhhdmlvclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZ1dHVyZUNvbmZpZyB7XG4gIHY3X2ZldGNoZXJQZXJzaXN0OiBib29sZWFuO1xuICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBib29sZWFuO1xuICB2N19wYXJ0aWFsSHlkcmF0aW9uOiBib29sZWFuO1xuICB2N19wcmVwZW5kQmFzZW5hbWU6IGJvb2xlYW47XG4gIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBib29sZWFuO1xuICB1bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb246IGJvb2xlYW47XG59XG5cbi8qKlxuICogSW5pdGlhbGl6YXRpb24gb3B0aW9ucyBmb3IgY3JlYXRlUm91dGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVySW5pdCB7XG4gIHJvdXRlczogQWdub3N0aWNSb3V0ZU9iamVjdFtdO1xuICBoaXN0b3J5OiBIaXN0b3J5O1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgbWFwUm91dGVQcm9wZXJ0aWVzYCBpbnN0ZWFkXG4gICAqL1xuICBkZXRlY3RFcnJvckJvdW5kYXJ5PzogRGV0ZWN0RXJyb3JCb3VuZGFyeUZ1bmN0aW9uO1xuICBtYXBSb3V0ZVByb3BlcnRpZXM/OiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbjtcbiAgZnV0dXJlPzogUGFydGlhbDxGdXR1cmVDb25maWc+O1xuICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG4gIHdpbmRvdz86IFdpbmRvdztcbiAgdW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3M/OiBBZ25vc3RpY1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb247XG4gIHVuc3RhYmxlX2RhdGFTdHJhdGVneT86IERhdGFTdHJhdGVneUZ1bmN0aW9uO1xufVxuXG4vKipcbiAqIFN0YXRlIHJldHVybmVkIGZyb20gYSBzZXJ2ZXItc2lkZSBxdWVyeSgpIGNhbGxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNIYW5kbGVyQ29udGV4dCB7XG4gIGJhc2VuYW1lOiBSb3V0ZXJbXCJiYXNlbmFtZVwiXTtcbiAgbG9jYXRpb246IFJvdXRlclN0YXRlW1wibG9jYXRpb25cIl07XG4gIG1hdGNoZXM6IFJvdXRlclN0YXRlW1wibWF0Y2hlc1wiXTtcbiAgbG9hZGVyRGF0YTogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdO1xuICBhY3Rpb25EYXRhOiBSb3V0ZXJTdGF0ZVtcImFjdGlvbkRhdGFcIl07XG4gIGVycm9yczogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl07XG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgbG9hZGVySGVhZGVyczogUmVjb3JkPHN0cmluZywgSGVhZGVycz47XG4gIGFjdGlvbkhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIEhlYWRlcnM+O1xuICBhY3RpdmVEZWZlcnJlZHM6IFJlY29yZDxzdHJpbmcsIERlZmVycmVkRGF0YT4gfCBudWxsO1xuICBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZD86IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogQSBTdGF0aWNIYW5kbGVyIGluc3RhbmNlIG1hbmFnZXMgYSBzaW5ndWxhciBTU1IgbmF2aWdhdGlvbi9mZXRjaCBldmVudFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0hhbmRsZXIge1xuICBkYXRhUm91dGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuICBxdWVyeShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIG9wdHM/OiB7XG4gICAgICByZXF1ZXN0Q29udGV4dD86IHVua25vd247XG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZz86IGJvb2xlYW47XG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k/OiBEYXRhU3RyYXRlZ3lGdW5jdGlvbjtcbiAgICB9XG4gICk6IFByb21pc2U8U3RhdGljSGFuZGxlckNvbnRleHQgfCBSZXNwb25zZT47XG4gIHF1ZXJ5Um91dGUoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBvcHRzPzoge1xuICAgICAgcm91dGVJZD86IHN0cmluZztcbiAgICAgIHJlcXVlc3RDb250ZXh0PzogdW5rbm93bjtcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneT86IERhdGFTdHJhdGVneUZ1bmN0aW9uO1xuICAgIH1cbiAgKTogUHJvbWlzZTxhbnk+O1xufVxuXG50eXBlIFZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgY3VycmVudExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgbmV4dExvY2F0aW9uOiBMb2NhdGlvbjtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBmdW5jdGlvbiBzaWduYXR1cmUgZm9yIGNoYW5nZXMgdG8gcm91dGVyIHN0YXRlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVyU3Vic2NyaWJlciB7XG4gIChcbiAgICBzdGF0ZTogUm91dGVyU3RhdGUsXG4gICAgb3B0czoge1xuICAgICAgZGVsZXRlZEZldGNoZXJzOiBzdHJpbmdbXTtcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0cz86IFZpZXdUcmFuc2l0aW9uT3B0cztcbiAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogYm9vbGVhbjtcbiAgICB9XG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gc2lnbmF0dXJlIGZvciBkZXRlcm1pbmluZyB0aGUga2V5IHRvIGJlIHVzZWQgaW4gc2Nyb2xsIHJlc3RvcmF0aW9uXG4gKiBmb3IgYSBnaXZlbiBsb2NhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb24ge1xuICAobG9jYXRpb246IExvY2F0aW9uLCBtYXRjaGVzOiBVSU1hdGNoW10pOiBzdHJpbmcgfCBudWxsO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHNpZ25hdHVyZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U2Nyb2xsUG9zaXRpb25GdW5jdGlvbiB7XG4gICgpOiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFJlbGF0aXZlUm91dGluZ1R5cGUgPSBcInJvdXRlXCIgfCBcInBhdGhcIjtcblxuLy8gQWxsb3dlZCBmb3IgYW55IG5hdmlnYXRpb24gb3IgZmV0Y2hcbnR5cGUgQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnMgPSB7XG4gIHByZXZlbnRTY3JvbGxSZXNldD86IGJvb2xlYW47XG4gIHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZTtcbiAgdW5zdGFibGVfZmx1c2hTeW5jPzogYm9vbGVhbjtcbn07XG5cbi8vIE9ubHkgYWxsb3dlZCBmb3IgbmF2aWdhdGlvbnNcbnR5cGUgQmFzZU5hdmlnYXRlT3B0aW9ucyA9IEJhc2VOYXZpZ2F0ZU9yRmV0Y2hPcHRpb25zICYge1xuICByZXBsYWNlPzogYm9vbGVhbjtcbiAgc3RhdGU/OiBhbnk7XG4gIGZyb21Sb3V0ZUlkPzogc3RyaW5nO1xuICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj86IGJvb2xlYW47XG59O1xuXG4vLyBPbmx5IGFsbG93ZWQgZm9yIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbnR5cGUgQmFzZVN1Ym1pc3Npb25PcHRpb25zID0ge1xuICBmb3JtTWV0aG9kPzogSFRNTEZvcm1NZXRob2Q7XG4gIGZvcm1FbmNUeXBlPzogRm9ybUVuY1R5cGU7XG59ICYgKFxuICB8IHsgZm9ybURhdGE6IEZvcm1EYXRhOyBib2R5PzogdW5kZWZpbmVkIH1cbiAgfCB7IGZvcm1EYXRhPzogdW5kZWZpbmVkOyBib2R5OiBhbnkgfVxuKTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBhIG5hdmlnYXRlKCkgY2FsbCBmb3IgYSBub3JtYWwgKG5vbi1zdWJtaXNzaW9uKSBuYXZpZ2F0aW9uXG4gKi9cbnR5cGUgTGlua05hdmlnYXRlT3B0aW9ucyA9IEJhc2VOYXZpZ2F0ZU9wdGlvbnM7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSBuYXZpZ2F0ZSgpIGNhbGwgZm9yIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uXG4gKi9cbnR5cGUgU3VibWlzc2lvbk5hdmlnYXRlT3B0aW9ucyA9IEJhc2VOYXZpZ2F0ZU9wdGlvbnMgJiBCYXNlU3VibWlzc2lvbk9wdGlvbnM7XG5cbi8qKlxuICogT3B0aW9ucyB0byBwYXNzIHRvIG5hdmlnYXRlKCkgZm9yIGEgbmF2aWdhdGlvblxuICovXG5leHBvcnQgdHlwZSBSb3V0ZXJOYXZpZ2F0ZU9wdGlvbnMgPVxuICB8IExpbmtOYXZpZ2F0ZU9wdGlvbnNcbiAgfCBTdWJtaXNzaW9uTmF2aWdhdGVPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGEgZmV0Y2goKSBsb2FkXG4gKi9cbnR5cGUgTG9hZEZldGNoT3B0aW9ucyA9IEJhc2VOYXZpZ2F0ZU9yRmV0Y2hPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGEgZmV0Y2goKSBzdWJtaXNzaW9uXG4gKi9cbnR5cGUgU3VibWl0RmV0Y2hPcHRpb25zID0gQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnMgJiBCYXNlU3VibWlzc2lvbk9wdGlvbnM7XG5cbi8qKlxuICogT3B0aW9ucyB0byBwYXNzIHRvIGZldGNoKClcbiAqL1xuZXhwb3J0IHR5cGUgUm91dGVyRmV0Y2hPcHRpb25zID0gTG9hZEZldGNoT3B0aW9ucyB8IFN1Ym1pdEZldGNoT3B0aW9ucztcblxuLyoqXG4gKiBQb3RlbnRpYWwgc3RhdGVzIGZvciBzdGF0ZS5uYXZpZ2F0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25TdGF0ZXMgPSB7XG4gIElkbGU6IHtcbiAgICBzdGF0ZTogXCJpZGxlXCI7XG4gICAgbG9jYXRpb246IHVuZGVmaW5lZDtcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQ7XG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZDtcbiAgICBqc29uOiB1bmRlZmluZWQ7XG4gICAgdGV4dDogdW5kZWZpbmVkO1xuICB9O1xuICBMb2FkaW5nOiB7XG4gICAgc3RhdGU6IFwibG9hZGluZ1wiO1xuICAgIGxvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICBmb3JtTWV0aG9kOiBTdWJtaXNzaW9uW1wiZm9ybU1ldGhvZFwiXSB8IHVuZGVmaW5lZDtcbiAgICBmb3JtQWN0aW9uOiBTdWJtaXNzaW9uW1wiZm9ybUFjdGlvblwiXSB8IHVuZGVmaW5lZDtcbiAgICBmb3JtRW5jVHlwZTogU3VibWlzc2lvbltcImZvcm1FbmNUeXBlXCJdIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1EYXRhOiBTdWJtaXNzaW9uW1wiZm9ybURhdGFcIl0gfCB1bmRlZmluZWQ7XG4gICAganNvbjogU3VibWlzc2lvbltcImpzb25cIl0gfCB1bmRlZmluZWQ7XG4gICAgdGV4dDogU3VibWlzc2lvbltcInRleHRcIl0gfCB1bmRlZmluZWQ7XG4gIH07XG4gIFN1Ym1pdHRpbmc6IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCI7XG4gICAgbG9jYXRpb246IExvY2F0aW9uO1xuICAgIGZvcm1NZXRob2Q6IFN1Ym1pc3Npb25bXCJmb3JtTWV0aG9kXCJdO1xuICAgIGZvcm1BY3Rpb246IFN1Ym1pc3Npb25bXCJmb3JtQWN0aW9uXCJdO1xuICAgIGZvcm1FbmNUeXBlOiBTdWJtaXNzaW9uW1wiZm9ybUVuY1R5cGVcIl07XG4gICAgZm9ybURhdGE6IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXTtcbiAgICBqc29uOiBTdWJtaXNzaW9uW1wianNvblwiXTtcbiAgICB0ZXh0OiBTdWJtaXNzaW9uW1widGV4dFwiXTtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb24gPSBOYXZpZ2F0aW9uU3RhdGVzW2tleW9mIE5hdmlnYXRpb25TdGF0ZXNdO1xuXG5leHBvcnQgdHlwZSBSZXZhbGlkYXRpb25TdGF0ZSA9IFwiaWRsZVwiIHwgXCJsb2FkaW5nXCI7XG5cbi8qKlxuICogUG90ZW50aWFsIHN0YXRlcyBmb3IgZmV0Y2hlcnNcbiAqL1xudHlwZSBGZXRjaGVyU3RhdGVzPFREYXRhID0gYW55PiA9IHtcbiAgSWRsZToge1xuICAgIHN0YXRlOiBcImlkbGVcIjtcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQ7XG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQ7XG4gICAgdGV4dDogdW5kZWZpbmVkO1xuICAgIGZvcm1EYXRhOiB1bmRlZmluZWQ7XG4gICAganNvbjogdW5kZWZpbmVkO1xuICAgIGRhdGE6IFREYXRhIHwgdW5kZWZpbmVkO1xuICB9O1xuICBMb2FkaW5nOiB7XG4gICAgc3RhdGU6IFwibG9hZGluZ1wiO1xuICAgIGZvcm1NZXRob2Q6IFN1Ym1pc3Npb25bXCJmb3JtTWV0aG9kXCJdIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1BY3Rpb246IFN1Ym1pc3Npb25bXCJmb3JtQWN0aW9uXCJdIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiBTdWJtaXNzaW9uW1wiZm9ybUVuY1R5cGVcIl0gfCB1bmRlZmluZWQ7XG4gICAgdGV4dDogU3VibWlzc2lvbltcInRleHRcIl0gfCB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXSB8IHVuZGVmaW5lZDtcbiAgICBqc29uOiBTdWJtaXNzaW9uW1wianNvblwiXSB8IHVuZGVmaW5lZDtcbiAgICBkYXRhOiBURGF0YSB8IHVuZGVmaW5lZDtcbiAgfTtcbiAgU3VibWl0dGluZzoge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIjtcbiAgICBmb3JtTWV0aG9kOiBTdWJtaXNzaW9uW1wiZm9ybU1ldGhvZFwiXTtcbiAgICBmb3JtQWN0aW9uOiBTdWJtaXNzaW9uW1wiZm9ybUFjdGlvblwiXTtcbiAgICBmb3JtRW5jVHlwZTogU3VibWlzc2lvbltcImZvcm1FbmNUeXBlXCJdO1xuICAgIHRleHQ6IFN1Ym1pc3Npb25bXCJ0ZXh0XCJdO1xuICAgIGZvcm1EYXRhOiBTdWJtaXNzaW9uW1wiZm9ybURhdGFcIl07XG4gICAganNvbjogU3VibWlzc2lvbltcImpzb25cIl07XG4gICAgZGF0YTogVERhdGEgfCB1bmRlZmluZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBGZXRjaGVyPFREYXRhID0gYW55PiA9XG4gIEZldGNoZXJTdGF0ZXM8VERhdGE+W2tleW9mIEZldGNoZXJTdGF0ZXM8VERhdGE+XTtcblxuaW50ZXJmYWNlIEJsb2NrZXJCbG9ja2VkIHtcbiAgc3RhdGU6IFwiYmxvY2tlZFwiO1xuICByZXNldCgpOiB2b2lkO1xuICBwcm9jZWVkKCk6IHZvaWQ7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbn1cblxuaW50ZXJmYWNlIEJsb2NrZXJVbmJsb2NrZWQge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIjtcbiAgcmVzZXQ6IHVuZGVmaW5lZDtcbiAgcHJvY2VlZDogdW5kZWZpbmVkO1xuICBsb2NhdGlvbjogdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgQmxvY2tlclByb2NlZWRpbmcge1xuICBzdGF0ZTogXCJwcm9jZWVkaW5nXCI7XG4gIHJlc2V0OiB1bmRlZmluZWQ7XG4gIHByb2NlZWQ6IHVuZGVmaW5lZDtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xufVxuXG5leHBvcnQgdHlwZSBCbG9ja2VyID0gQmxvY2tlclVuYmxvY2tlZCB8IEJsb2NrZXJCbG9ja2VkIHwgQmxvY2tlclByb2NlZWRpbmc7XG5cbmV4cG9ydCB0eXBlIEJsb2NrZXJGdW5jdGlvbiA9IChhcmdzOiB7XG4gIGN1cnJlbnRMb2NhdGlvbjogTG9jYXRpb247XG4gIG5leHRMb2NhdGlvbjogTG9jYXRpb247XG4gIGhpc3RvcnlBY3Rpb246IEhpc3RvcnlBY3Rpb247XG59KSA9PiBib29sZWFuO1xuXG5pbnRlcmZhY2UgU2hvcnRDaXJjdWl0YWJsZSB7XG4gIC8qKlxuICAgKiBzdGFydE5hdmlnYXRpb24gZG9lcyBub3QgbmVlZCB0byBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvbiBiZWNhdXNlIHdlXG4gICAqIHJlZGlyZWN0ZWQgb3IgZ290IGludGVycnVwdGVkXG4gICAqL1xuICBzaG9ydENpcmN1aXRlZD86IGJvb2xlYW47XG59XG5cbnR5cGUgUGVuZGluZ0FjdGlvblJlc3VsdCA9IFtzdHJpbmcsIFN1Y2Nlc3NSZXN1bHQgfCBFcnJvclJlc3VsdF07XG5cbmludGVyZmFjZSBIYW5kbGVBY3Rpb25SZXN1bHQgZXh0ZW5kcyBTaG9ydENpcmN1aXRhYmxlIHtcbiAgLyoqXG4gICAqIFJvdXRlIG1hdGNoZXMgd2hpY2ggbWF5IGhhdmUgYmVlbiB1cGRhdGVkIGZyb20gZm9nIG9mIHdhciBkaXNjb3ZlcnlcbiAgICovXG4gIG1hdGNoZXM/OiBSb3V0ZXJTdGF0ZVtcIm1hdGNoZXNcIl07XG4gIC8qKlxuICAgKiBUdXBsZSBmb3IgdGhlIHJldHVybmVkIG9yIHRocm93biB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGFjdGlvbi4gIFRoZSByb3V0ZUlkXG4gICAqIGlzIHRoZSBhY3Rpb24gcm91dGUgZm9yIHN1Y2Nlc3MgYW5kIHRoZSBidWJibGVkIGJvdW5kYXJ5IHJvdXRlIGZvciBlcnJvcnMuXG4gICAqL1xuICBwZW5kaW5nQWN0aW9uUmVzdWx0PzogUGVuZGluZ0FjdGlvblJlc3VsdDtcbn1cblxuaW50ZXJmYWNlIEhhbmRsZUxvYWRlcnNSZXN1bHQgZXh0ZW5kcyBTaG9ydENpcmN1aXRhYmxlIHtcbiAgLyoqXG4gICAqIFJvdXRlIG1hdGNoZXMgd2hpY2ggbWF5IGhhdmUgYmVlbiB1cGRhdGVkIGZyb20gZm9nIG9mIHdhciBkaXNjb3ZlcnlcbiAgICovXG4gIG1hdGNoZXM/OiBSb3V0ZXJTdGF0ZVtcIm1hdGNoZXNcIl07XG4gIC8qKlxuICAgKiBsb2FkZXJEYXRhIHJldHVybmVkIGZyb20gdGhlIGN1cnJlbnQgc2V0IG9mIGxvYWRlcnNcbiAgICovXG4gIGxvYWRlckRhdGE/OiBSb3V0ZXJTdGF0ZVtcImxvYWRlckRhdGFcIl07XG4gIC8qKlxuICAgKiBlcnJvcnMgdGhyb3duIGZyb20gdGhlIGN1cnJlbnQgc2V0IG9mIGxvYWRlcnNcbiAgICovXG4gIGVycm9ycz86IFJvdXRlclN0YXRlW1wiZXJyb3JzXCJdO1xufVxuXG4vKipcbiAqIENhY2hlZCBpbmZvIGZvciBhY3RpdmUgZmV0Y2hlci5sb2FkKCkgaW5zdGFuY2VzIHNvIHRoZXkgY2FuIHBhcnRpY2lwYXRlXG4gKiBpbiByZXZhbGlkYXRpb25cbiAqL1xuaW50ZXJmYWNlIEZldGNoTG9hZE1hdGNoIHtcbiAgcm91dGVJZDogc3RyaW5nO1xuICBwYXRoOiBzdHJpbmc7XG59XG5cbi8qKlxuICogSWRlbnRpZmllZCBmZXRjaGVyLmxvYWQoKSBjYWxscyB0aGF0IG5lZWQgdG8gYmUgcmV2YWxpZGF0ZWRcbiAqL1xuaW50ZXJmYWNlIFJldmFsaWRhdGluZ0ZldGNoZXIgZXh0ZW5kcyBGZXRjaExvYWRNYXRjaCB7XG4gIGtleTogc3RyaW5nO1xuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCB8IG51bGw7XG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSB8IG51bGw7XG4gIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlciB8IG51bGw7XG59XG5cbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzQXJyOiBNdXRhdGlvbkZvcm1NZXRob2RbXSA9IFtcbiAgXCJwb3N0XCIsXG4gIFwicHV0XCIsXG4gIFwicGF0Y2hcIixcbiAgXCJkZWxldGVcIixcbl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQ8TXV0YXRpb25Gb3JtTWV0aG9kPihcbiAgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnJcbik7XG5cbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHNBcnI6IEZvcm1NZXRob2RbXSA9IFtcbiAgXCJnZXRcIixcbiAgLi4udmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIsXG5dO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kcyA9IG5ldyBTZXQ8Rm9ybU1ldGhvZD4odmFsaWRSZXF1ZXN0TWV0aG9kc0Fycik7XG5cbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcblxuZXhwb3J0IGNvbnN0IElETEVfTkFWSUdBVElPTjogTmF2aWdhdGlvblN0YXRlc1tcIklkbGVcIl0gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgbG9jYXRpb246IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gIGpzb246IHVuZGVmaW5lZCxcbiAgdGV4dDogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGNvbnN0IElETEVfRkVUQ0hFUjogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWQsXG59O1xuXG5leHBvcnQgY29uc3QgSURMRV9CTE9DS0VSOiBCbG9ja2VyVW5ibG9ja2VkID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxufTtcblxuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuXG5jb25zdCBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbiA9IChyb3V0ZSkgPT4gKHtcbiAgaGFzRXJyb3JCb3VuZGFyeTogQm9vbGVhbihyb3V0ZS5oYXNFcnJvckJvdW5kYXJ5KSxcbn0pO1xuXG5jb25zdCBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSA9IFwicmVtaXgtcm91dGVyLXRyYW5zaXRpb25zXCI7XG5cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUm91dGVyKGluaXQ6IFJvdXRlckluaXQpOiBSb3V0ZXIge1xuICBjb25zdCByb3V0ZXJXaW5kb3cgPSBpbml0LndpbmRvd1xuICAgID8gaW5pdC53aW5kb3dcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCJcbiAgICA/IHdpbmRvd1xuICAgIDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPVxuICAgIHR5cGVvZiByb3V0ZXJXaW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG5cbiAgaW52YXJpYW50KFxuICAgIGluaXQucm91dGVzLmxlbmd0aCA+IDAsXG4gICAgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIlxuICApO1xuXG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM6IE1hcFJvdXRlUHJvcGVydGllc0Z1bmN0aW9uO1xuICBpZiAoaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBpbml0Lm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChpbml0LmRldGVjdEVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBJZiB0aGV5IGFyZSBzdGlsbCB1c2luZyB0aGUgZGVwcmVjYXRlZCB2ZXJzaW9uLCB3cmFwIGl0IHdpdGggdGhlIG5ldyBBUElcbiAgICBsZXQgZGV0ZWN0RXJyb3JCb3VuZGFyeSA9IGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeTtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSAocm91dGUpID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9XG5cbiAgLy8gUm91dGVzIGtleWVkIGJ5IElEXG4gIGxldCBtYW5pZmVzdDogUm91dGVNYW5pZmVzdCA9IHt9O1xuICAvLyBSb3V0ZXMgaW4gdHJlZSBmb3JtYXQgZm9yIG1hdGNoaW5nXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhcbiAgICBpbml0LnJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1hbmlmZXN0XG4gICk7XG4gIGxldCBpbkZsaWdodERhdGFSb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10gfCB1bmRlZmluZWQ7XG4gIGxldCBiYXNlbmFtZSA9IGluaXQuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhU3RyYXRlZ3lJbXBsID0gaW5pdC51bnN0YWJsZV9kYXRhU3RyYXRlZ3kgfHwgZGVmYXVsdERhdGFTdHJhdGVneTtcbiAgbGV0IHBhdGNoUm91dGVzT25NaXNzSW1wbCA9IGluaXQudW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3M7XG5cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlOiBGdXR1cmVDb25maWcgPSB7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIHVuc3RhYmxlX3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbjogZmFsc2UsXG4gICAgLi4uaW5pdC5mdXR1cmUsXG4gIH07XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeTogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldDxSb3V0ZXJTdWJzY3JpYmVyPigpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHwgbnVsbCA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleTogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb246IEdldFNjcm9sbFBvc2l0aW9uRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcblxuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnM6IFJvdXRlRGF0YSB8IG51bGwgPSBudWxsO1xuXG4gIGlmIChpbml0aWFsTWF0Y2hlcyA9PSBudWxsICYmICFwYXRjaFJvdXRlc09uTWlzc0ltcGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgfSk7XG4gICAgbGV0IHsgbWF0Y2hlcywgcm91dGUgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7IFtyb3V0ZS5pZF06IGVycm9yIH07XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwcm92aWRlZCBhIHBhdGNoUm91dGVzT25NaXNzIGltcGxlbWVudGF0aW9uIGFuZCBvdXIgaW5pdGlhbFxuICAvLyBtYXRjaCBpcyBhIHNwbGF0IHJvdXRlLCBjbGVhciB0aGVtIG91dCBzbyB3ZSBydW4gdGhyb3VnaCBsYXp5IGRpc2NvdmVyeVxuICAvLyBvbiBoeWRyYXRpb24gaW4gY2FzZSB0aGVyZSdzIGEgbW9yZSBhY2N1cmF0ZSBsYXp5IHJvdXRlIG1hdGNoXG4gIGlmIChpbml0aWFsTWF0Y2hlcyAmJiBwYXRjaFJvdXRlc09uTWlzc0ltcGwpIHtcbiAgICBsZXQgZm9nT2ZXYXIgPSBjaGVja0ZvZ09mV2FyKFxuICAgICAgaW5pdGlhbE1hdGNoZXMsXG4gICAgICBkYXRhUm91dGVzLFxuICAgICAgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgKTtcbiAgICBpZiAoZm9nT2ZXYXIuYWN0aXZlKSB7XG4gICAgICBpbml0aWFsTWF0Y2hlcyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbGV0IGluaXRpYWxpemVkOiBib29sZWFuO1xuICBpZiAoIWluaXRpYWxNYXRjaGVzKSB7XG4gICAgLy8gV2UgbmVlZCB0byBydW4gcGF0Y2hSb3V0ZXNPbk1pc3MgaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IFtdO1xuICB9IGVsc2UgaWYgKGluaXRpYWxNYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUubGF6eSkpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaW5pdGlhbE1hdGNoZXMuc29tZSgobSkgPT4gbS5yb3V0ZS5sb2FkZXIpKSB7XG4gICAgLy8gSWYgd2UndmUgZ290IG5vIGxvYWRlcnMgdG8gcnVuLCB0aGVuIHdlJ3JlIGdvb2QgdG8gZ29cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICAvLyBJZiBwYXJ0aWFsIGh5ZHJhdGlvbiBpcyBlbmFibGVkLCB3ZSdyZSBpbml0aWFsaXplZCBzbyBsb25nIGFzIHdlIHdlcmVcbiAgICAvLyBwcm92aWRlZCB3aXRoIGh5ZHJhdGlvbkRhdGEgZm9yIGV2ZXJ5IHJvdXRlIHdpdGggYSBsb2FkZXIsIGFuZCBubyBsb2FkZXJzXG4gICAgLy8gd2VyZSBtYXJrZWQgZm9yIGV4cGxpY2l0IGh5ZHJhdGlvblxuICAgIGxldCBsb2FkZXJEYXRhID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgOiBudWxsO1xuICAgIGxldCBlcnJvcnMgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgPyBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIDogbnVsbDtcbiAgICBsZXQgaXNSb3V0ZUluaXRpYWxpemVkID0gKG06IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gpID0+IHtcbiAgICAgIC8vIE5vIGxvYWRlciwgbm90aGluZyB0byBpbml0aWFsaXplXG4gICAgICBpZiAoIW0ucm91dGUubG9hZGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gRXhwbGljaXRseSBvcHRpbmctaW4gdG8gcnVubmluZyBvbiBoeWRyYXRpb25cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIG0ucm91dGUubG9hZGVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbS5yb3V0ZS5sb2FkZXIuaHlkcmF0ZSA9PT0gdHJ1ZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgaW5pdGlhbGl6ZWQgaWYgaHlkcmF0ZWQgd2l0aCBkYXRhIG9yIGFuIGVycm9yXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobG9hZGVyRGF0YSAmJiBsb2FkZXJEYXRhW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAgIChlcnJvcnMgJiYgZXJyb3JzW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBJZiBlcnJvcnMgZXhpc3QsIGRvbid0IGNvbnNpZGVyIHJvdXRlcyBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICBpZiAoZXJyb3JzKSB7XG4gICAgICBsZXQgaWR4ID0gaW5pdGlhbE1hdGNoZXMuZmluZEluZGV4KFxuICAgICAgICAobSkgPT4gZXJyb3JzIVttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkXG4gICAgICApO1xuICAgICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5zbGljZSgwLCBpZHggKyAxKS5ldmVyeShpc1JvdXRlSW5pdGlhbGl6ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLmV2ZXJ5KGlzUm91dGVJbml0aWFsaXplZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cblxuICBsZXQgcm91dGVyOiBSb3V0ZXI7XG4gIGxldCBzdGF0ZTogUm91dGVyU3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAvLyBEb24ndCByZXN0b3JlIG9uIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBpZiB3ZSB3ZXJlIFNTUidkXG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCA/IGZhbHNlIDogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSkgfHwge30sXG4gICAgYWN0aW9uRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSkgfHwgbnVsbCxcbiAgICBlcnJvcnM6IChpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycykgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpLFxuICAgIGJsb2NrZXJzOiBuZXcgTWFwKCksXG4gIH07XG5cbiAgLy8gLS0gU3RhdGVmdWwgaW50ZXJuYWwgdmFyaWFibGVzIHRvIG1hbmFnZSBuYXZpZ2F0aW9ucyAtLVxuICAvLyBDdXJyZW50IG5hdmlnYXRpb24gaW4gcHJvZ3Jlc3MgKHRvIGJlIGNvbW1pdHRlZCBpbiBjb21wbGV0ZU5hdmlnYXRpb24pXG4gIGxldCBwZW5kaW5nQWN0aW9uOiBIaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5Qb3A7XG5cbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG5cbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyIHwgbnVsbDtcblxuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcblxuICAvLyBTdG9yZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgc28gd2UgY2FuIGFwcGx5IHRoZW0gb24gUE9QXG4gIGxldCBhcHBsaWVkVmlld1RyYW5zaXRpb25zOiBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj4gPSBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICBTZXQ8c3RyaW5nPlxuICA+KCk7XG5cbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXI6ICgoKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuXG4gIC8vIFdlIHVzZSB0aGlzIHRvIGF2b2lkIHRvdWNoaW5nIGhpc3RvcnkgaW4gY29tcGxldGVOYXZpZ2F0aW9uIGlmIGFcbiAgLy8gcmV2YWxpZGF0aW9uIGlzIGVudGlyZWx5IHVuaW50ZXJydXB0ZWRcbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuXG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcblxuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXA8c3RyaW5nLCBBYm9ydENvbnRyb2xsZXI+KCk7XG5cbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcblxuICAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7XG5cbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIC8vIE1vc3QgcmVjZW50IGhyZWYvbWF0Y2ggZm9yIGZldGNoZXIubG9hZCBjYWxscyBmb3IgZmV0Y2hlcnNcbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwPHN0cmluZywgRmV0Y2hMb2FkTWF0Y2g+KCk7XG5cbiAgLy8gUmVmLWNvdW50IG1vdW50ZWQgZmV0Y2hlcnMgc28gd2Uga25vdyB3aGVuIGl0J3Mgb2sgdG8gY2xlYW4gdGhlbSB1cFxuICBsZXQgYWN0aXZlRmV0Y2hlcnMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4gIC8vIEZldGNoZXJzIHRoYXQgaGF2ZSByZXF1ZXN0ZWQgYSBkZWxldGUgd2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCxcbiAgLy8gdGhleSdsbCBiZSBvZmZpY2lhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSByZXR1cm4gdG8gaWRsZVxuICBsZXQgZGVsZXRlZEZldGNoZXJzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+KCk7XG5cbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQmxvY2tlckZ1bmN0aW9uPigpO1xuXG4gIC8vIE1hcCBvZiBwZW5kaW5nIHBhdGNoUm91dGVzT25NaXNzKCkgcHJvbWlzZXMgKGtleWVkIGJ5IHBhdGgvbWF0Y2hlcykgc29cbiAgLy8gdGhhdCB3ZSBvbmx5IGtpY2sgdGhlbSBvZmYgb25jZSBmb3IgYSBnaXZlbiBjb21ib1xuICBsZXQgcGVuZGluZ1BhdGNoUm91dGVzID0gbmV3IE1hcDxcbiAgICBzdHJpbmcsXG4gICAgUmV0dXJuVHlwZTxBZ25vc3RpY1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb24+XG4gID4oKTtcblxuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKFxuICAgICAgKHsgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgZGVsdGEgfSkgPT4ge1xuICAgICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsXG4gICAgICAgICAgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArXG4gICAgICAgICAgICBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArXG4gICAgICAgICAgICBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICtcbiAgICAgICAgICAgIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArXG4gICAgICAgICAgICBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICtcbiAgICAgICAgICAgIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBoaXN0b3J5QWN0aW9uLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG5cbiAgICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5ISwge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuICAgICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXkhLCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgICAgICB1cGRhdGVTdGF0ZSh7IGJsb2NrZXJzIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgLy8gRklYTUU6IFRoaXMgZmVlbHMgZ3Jvc3MuICBIb3cgY2FuIHdlIGNsZWFudXAgdGhlIGxpbmVzIGJldHdlZW5cbiAgICAgIC8vIHNjcm9sbFJlc3RvcmF0aW9uL2FwcGxpZWRUcmFuc2l0aW9ucyBwZXJzaXN0YW5jZT9cbiAgICAgIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIGxldCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyA9ICgpID0+XG4gICAgICAgIHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIHJvdXRlcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMpO1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gKCkgPT5cbiAgICAgICAgcm91dGVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oSGlzdG9yeUFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIGluaXRpYWxIeWRyYXRpb246IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG5cbiAgLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG4gIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHVubGlzdGVuSGlzdG9yeSkge1xuICAgICAgdW5saXN0ZW5IaXN0b3J5KCk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG5cbiAgLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGZuOiBSb3V0ZXJTdWJzY3JpYmVyKSB7XG4gICAgc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUoXG4gICAgbmV3U3RhdGU6IFBhcnRpYWw8Um91dGVyU3RhdGU+LFxuICAgIG9wdHM6IHtcbiAgICAgIGZsdXNoU3luYz86IGJvb2xlYW47XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHM/OiBWaWV3VHJhbnNpdGlvbk9wdHM7XG4gICAgfSA9IHt9XG4gICk6IHZvaWQge1xuICAgIHN0YXRlID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICAuLi5uZXdTdGF0ZSxcbiAgICB9O1xuXG4gICAgLy8gUHJlcCBmZXRjaGVyIGNsZWFudXAgc28gd2UgY2FuIHRlbGwgdGhlIFVJIHdoaWNoIGZldGNoZXIgZGF0YSBlbnRyaWVzXG4gICAgLy8gY2FuIGJlIHJlbW92ZWRcbiAgICBsZXQgY29tcGxldGVkRmV0Y2hlcnM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IGRlbGV0ZWRGZXRjaGVyc0tleXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChmZXRjaGVyLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gVW5tb3VudGVkIGZyb20gdGhlIFVJIGFuZCBjYW4gYmUgdG90YWxseSByZW1vdmVkXG4gICAgICAgICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmV0dXJuZWQgdG8gaWRsZSBidXQgc3RpbGwgbW91bnRlZCBpbiB0aGUgVUksIHNvIHNlbWktcmVtYWlucyBmb3JcbiAgICAgICAgICAgIC8vIHJldmFsaWRhdGlvbnMgYW5kIHN1Y2hcbiAgICAgICAgICAgIGNvbXBsZXRlZEZldGNoZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEl0ZXJhdGUgb3ZlciBhIGxvY2FsIGNvcHkgc28gdGhhdCBpZiBmbHVzaFN5bmMgaXMgdXNlZCBhbmQgd2UgZW5kIHVwXG4gICAgLy8gcmVtb3ZpbmcgYW5kIGFkZGluZyBhIG5ldyBzdWJzY3JpYmVyIGR1ZSB0byB0aGUgdXNlQ2FsbGJhY2sgZGVwZW5kZW5jaWVzLFxuICAgIC8vIHdlIGRvbid0IGdldCBvdXJzZWx2ZXMgaW50byBhIGxvb3AgY2FsbGluZyB0aGUgbmV3IHN1YnNjcmliZXIgaW1tZWRpYXRlbHlcbiAgICBbLi4uc3Vic2NyaWJlcnNdLmZvckVhY2goKHN1YnNjcmliZXIpID0+XG4gICAgICBzdWJzY3JpYmVyKHN0YXRlLCB7XG4gICAgICAgIGRlbGV0ZWRGZXRjaGVyczogZGVsZXRlZEZldGNoZXJzS2V5cyxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiBvcHRzLnZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZSxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIC8vIFJlbW92ZSBpZGxlIGZldGNoZXJzIGZyb20gc3RhdGUgc2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IGluLWZsaWdodCBmZXRjaGVycy5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBjb21wbGV0ZWRGZXRjaGVycy5mb3JFYWNoKChrZXkpID0+IHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpKTtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMuZm9yRWFjaCgoa2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24oXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG5ld1N0YXRlOiBQYXJ0aWFsPE9taXQ8Um91dGVyU3RhdGUsIFwiYWN0aW9uXCIgfCBcImxvY2F0aW9uXCIgfCBcIm5hdmlnYXRpb25cIj4+LFxuICAgIHsgZmx1c2hTeW5jIH06IHsgZmx1c2hTeW5jPzogYm9vbGVhbiB9ID0ge31cbiAgKTogdm9pZCB7XG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gYmVpbmcgbG9hZGVkIGlzIG5vdCB0aGUgcmVzdWx0IG9mIGEgcmVkaXJlY3RcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPVxuICAgICAgc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmXG4gICAgICBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJlxuICAgICAgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmXG4gICAgICBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJlxuICAgICAgbG9jYXRpb24uc3RhdGU/Ll9pc1JlZGlyZWN0ICE9PSB0cnVlO1xuXG4gICAgbGV0IGFjdGlvbkRhdGE6IFJvdXRlRGF0YSB8IG51bGw7XG4gICAgaWYgKG5ld1N0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdTdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbkRhdGEgPSBuZXdTdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1wdHkgYWN0aW9uRGF0YSAtPiBjbGVhciBwcmlvciBhY3Rpb25EYXRhIGR1ZSB0byBhbiBhY3Rpb24gZXJyb3JcbiAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjdGlvblJlbG9hZCkge1xuICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhIGlmIHdlJ3JlIHdyYXBwaW5nIHVwIHRoZSBhY3Rpb24gcmVsb2FkXG4gICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xlYXIgYWN0aW9uRGF0YSBvbiBhbnkgb3RoZXIgY29tcGxldGVkIG5hdmlnYXRpb25zXG4gICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuICAgIGxldCBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YVxuICAgICAgPyBtZXJnZUxvYWRlckRhdGEoXG4gICAgICAgICAgc3RhdGUubG9hZGVyRGF0YSxcbiAgICAgICAgICBuZXdTdGF0ZS5sb2FkZXJEYXRhLFxuICAgICAgICAgIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sXG4gICAgICAgICAgbmV3U3RhdGUuZXJyb3JzXG4gICAgICAgIClcbiAgICAgIDogc3RhdGUubG9hZGVyRGF0YTtcblxuICAgIC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG4gICAgbGV0IGJsb2NrZXJzID0gc3RhdGUuYmxvY2tlcnM7XG4gICAgaWYgKGJsb2NrZXJzLnNpemUgPiAwKSB7XG4gICAgICBibG9ja2VycyA9IG5ldyBNYXAoYmxvY2tlcnMpO1xuICAgICAgYmxvY2tlcnMuZm9yRWFjaCgoXywgaykgPT4gYmxvY2tlcnMuc2V0KGssIElETEVfQkxPQ0tFUikpO1xuICAgIH1cblxuICAgIC8vIEFsd2F5cyByZXNwZWN0IHRoZSB1c2VyIGZsYWcuICBPdGhlcndpc2UgZG9uJ3QgcmVzZXQgb24gbXV0YXRpb25cbiAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9XG4gICAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8XG4gICAgICAoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiZcbiAgICAgICAgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmXG4gICAgICAgIGxvY2F0aW9uLnN0YXRlPy5faXNSZWRpcmVjdCAhPT0gdHJ1ZSk7XG5cbiAgICAvLyBDb21taXQgYW55IGluLWZsaWdodCByb3V0ZXMgYXQgdGhlIGVuZCBvZiB0aGUgSE1SIHJldmFsaWRhdGlvbiBcIm5hdmlnYXRpb25cIlxuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikge1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24gdGhlbiBkbyBub3QgdG91Y2ggaGlzdG9yeVxuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gSGlzdG9yeUFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIERvIG5vdGhpbmcgZm9yIFBPUCAtIFVSTCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEhpc3RvcnlBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEhpc3RvcnlBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG5cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzOiBWaWV3VHJhbnNpdGlvbk9wdHMgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbiBQT1AsIGVuYWJsZSB0cmFuc2l0aW9ucyBpZiB0aGV5IHdlcmUgZW5hYmxlZCBvbiB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nQWN0aW9uID09PSBIaXN0b3J5QWN0aW9uLlBvcCkge1xuICAgICAgLy8gRm9yd2FyZCB0YWtlcyBwcmVjZWRlbmNlIHNvIHRoZXkgYmVoYXZlIGxpa2UgdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICAgIGxldCBwcmlvclBhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHByaW9yUGF0aHMgJiYgcHJpb3JQYXRocy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkKSB7XG4gICAgICAvLyBTdG9yZSB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIG9uIFBVU0gvUkVQTEFDRVxuICAgICAgbGV0IHRvUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAodG9QYXRocykge1xuICAgICAgICB0b1BhdGhzLmFkZChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b1BhdGhzID0gbmV3IFNldDxzdHJpbmc+KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXRlKFxuICAgICAge1xuICAgICAgICAuLi5uZXdTdGF0ZSwgLy8gbWF0Y2hlcywgZXJyb3JzLCBmZXRjaGVycyBnbyB0aHJvdWdoIGFzLWlzXG4gICAgICAgIGFjdGlvbkRhdGEsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzXG4gICAgICAgICksXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgYmxvY2tlcnMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jID09PSB0cnVlLFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcbiAgICBwZW5kaW5nQWN0aW9uID0gSGlzdG9yeUFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuXG4gIC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUoXG4gICAgdG86IG51bWJlciB8IFRvIHwgbnVsbCxcbiAgICBvcHRzPzogUm91dGVyTmF2aWdhdGVPcHRpb25zXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oXG4gICAgICBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsXG4gICAgICB0byxcbiAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCxcbiAgICAgIG9wdHM/LmZyb21Sb3V0ZUlkLFxuICAgICAgb3B0cz8ucmVsYXRpdmVcbiAgICApO1xuICAgIGxldCB7IHBhdGgsIHN1Ym1pc3Npb24sIGVycm9yIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoXG4gICAgICBmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCxcbiAgICAgIGZhbHNlLFxuICAgICAgbm9ybWFsaXplZFBhdGgsXG4gICAgICBvcHRzXG4gICAgKTtcblxuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG5cbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSB7XG4gICAgICAuLi5uZXh0TG9jYXRpb24sXG4gICAgICAuLi5pbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSxcbiAgICB9O1xuXG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5QdXNoO1xuXG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSB7XG4gICAgICAvLyBuby1vcFxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzdWJtaXNzaW9uICE9IG51bGwgJiZcbiAgICAgIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJlxuICAgICAgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaFxuICAgICkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5SZXBsYWNlO1xuICAgIH1cblxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPVxuICAgICAgb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHNcbiAgICAgICAgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG5cbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uLFxuICAgIH0pO1xuXG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXkhLCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXkhLCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHsgYmxvY2tlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogb3B0cyAmJiBvcHRzLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgZmx1c2hTeW5jLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoeyByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiIH0pO1xuXG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKFxuICAgICAgcGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgICAgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbixcbiAgICAgIHsgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uIH1cbiAgICApO1xuICB9XG5cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihcbiAgICBoaXN0b3J5QWN0aW9uOiBIaXN0b3J5QWN0aW9uLFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBvcHRzPzoge1xuICAgICAgaW5pdGlhbEh5ZHJhdGlvbj86IGJvb2xlYW47XG4gICAgICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIGZldGNoZXJTdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbj86IE5hdmlnYXRpb247XG4gICAgICBwZW5kaW5nRXJyb3I/OiBFcnJvclJlc3BvbnNlSW1wbDtcbiAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbj86IGJvb2xlYW47XG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICAgICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbj86IGJvb2xlYW47XG4gICAgICBmbHVzaFN5bmM/OiBib29sZWFuO1xuICAgIH1cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPVxuICAgICAgKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuXG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcblxuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSAob3B0cyAmJiBvcHRzLmVuYWJsZVZpZXdUcmFuc2l0aW9uKSA9PT0gdHJ1ZTtcblxuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuXG4gICAgbGV0IGZvZ09mV2FyID0gY2hlY2tGb2dPZldhcihtYXRjaGVzLCByb3V0ZXNUb1VzZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIGlmIChmb2dPZldhci5hY3RpdmUgJiYgZm9nT2ZXYXIubWF0Y2hlcykge1xuICAgICAgbWF0Y2hlcyA9IGZvZ09mV2FyLm1hdGNoZXM7XG4gICAgfVxuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCB7IGVycm9yLCBub3RGb3VuZE1hdGNoZXMsIHJvdXRlIH0gPSBoYW5kbGVOYXZpZ2F0aW9uYWw0MDQoXG4gICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICApO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAge1xuICAgICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgZmx1c2hTeW5jIH1cbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgcmV2YWxpZGF0aW9uIG9yXG4gICAgLy8gbXV0YXRpb24gc3VibWlzc2lvbi5cbiAgICAvL1xuICAgIC8vIElnbm9yZSBvbiBpbml0aWFsIHBhZ2UgbG9hZHMgYmVjYXVzZSBzaW5jZSB0aGUgaW5pdGlhbCBsb2FkIHdpbGwgYWx3YXlzXG4gICAgLy8gYmUgXCJzYW1lIGhhc2hcIi4gIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+XG4gICAgLy8gd2hpY2ggd2lsbCBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuICAgIGlmIChcbiAgICAgIHN0YXRlLmluaXRpYWxpemVkICYmXG4gICAgICAhaXNSZXZhbGlkYXRpb25SZXF1aXJlZCAmJlxuICAgICAgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmXG4gICAgICAhKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKVxuICAgICkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7IG1hdGNoZXMgfSwgeyBmbHVzaFN5bmMgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgY29udHJvbGxlci9SZXF1ZXN0IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCxcbiAgICAgIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uXG4gICAgKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvblJlc3VsdDogUGVuZGluZ0FjdGlvblJlc3VsdCB8IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gW1xuICAgICAgICBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkLFxuICAgICAgICB7IHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsIGVycm9yOiBvcHRzLnBlbmRpbmdFcnJvciB9LFxuICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgb3B0cyAmJlxuICAgICAgb3B0cy5zdWJtaXNzaW9uICYmXG4gICAgICBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKVxuICAgICkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBoYW5kbGVBY3Rpb24oXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBvcHRzLnN1Ym1pc3Npb24sXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGZvZ09mV2FyLmFjdGl2ZSxcbiAgICAgICAgeyByZXBsYWNlOiBvcHRzLnJlcGxhY2UsIGZsdXNoU3luYyB9XG4gICAgICApO1xuXG4gICAgICBpZiAoYWN0aW9uUmVzdWx0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgcmVjZWl2ZWQgYSA0MDQgZnJvbSBoYW5kbGVBY3Rpb24sIGl0J3MgYmVjYXVzZSB3ZSBjb3VsZG4ndCBsYXppbHlcbiAgICAgIC8vIGRpc2NvdmVyIHRoZSBkZXN0aW5hdGlvbiByb3V0ZSBzbyB3ZSBkb24ndCB3YW50IHRvIGNhbGwgbG9hZGVyc1xuICAgICAgaWYgKGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgICAgIGxldCBbcm91dGVJZCwgcmVzdWx0XSA9IGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNFcnJvclJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgICAgaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSAmJlxuICAgICAgICAgIHJlc3VsdC5lcnJvci5zdGF0dXMgPT09IDQwNFxuICAgICAgICApIHtcbiAgICAgICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuXG4gICAgICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgICAgICBtYXRjaGVzOiBhY3Rpb25SZXN1bHQubWF0Y2hlcyxcbiAgICAgICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgICAgIFtyb3V0ZUlkXTogcmVzdWx0LmVycm9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWF0Y2hlcyA9IGFjdGlvblJlc3VsdC5tYXRjaGVzIHx8IG1hdGNoZXM7XG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gYWN0aW9uUmVzdWx0LnBlbmRpbmdBY3Rpb25SZXN1bHQ7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG4gICAgICAvLyBObyBuZWVkIHRvIGRvIGZvZyBvZiB3YXIgbWF0Y2hpbmcgYWdhaW4gb24gbG9hZGVyIGV4ZWN1dGlvblxuICAgICAgZm9nT2ZXYXIuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgICAgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgICBpbml0Lmhpc3RvcnksXG4gICAgICAgIHJlcXVlc3QudXJsLFxuICAgICAgICByZXF1ZXN0LnNpZ25hbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDYWxsIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBtYXRjaGVzOiB1cGRhdGVkTWF0Y2hlcyxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnMsXG4gICAgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMoXG4gICAgICByZXF1ZXN0LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBtYXRjaGVzLFxuICAgICAgZm9nT2ZXYXIuYWN0aXZlLFxuICAgICAgbG9hZGluZ05hdmlnYXRpb24sXG4gICAgICBvcHRzICYmIG9wdHMuc3VibWlzc2lvbixcbiAgICAgIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbixcbiAgICAgIG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgICAgb3B0cyAmJiBvcHRzLmluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsXG4gICAgICBmbHVzaFN5bmMsXG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0XG4gICAgKTtcblxuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcblxuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgbWF0Y2hlczogdXBkYXRlZE1hdGNoZXMgfHwgbWF0Y2hlcyxcbiAgICAgIC4uLmdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCksXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIHN1Ym1pc3Npb246IFN1Ym1pc3Npb24sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGlzRm9nT2ZXYXI6IGJvb2xlYW4sXG4gICAgb3B0czogeyByZXBsYWNlPzogYm9vbGVhbjsgZmx1c2hTeW5jPzogYm9vbGVhbiB9ID0ge31cbiAgKTogUHJvbWlzZTxIYW5kbGVBY3Rpb25SZXN1bHQ+IHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuXG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHsgbmF2aWdhdGlvbiB9LCB7IGZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWUgfSk7XG5cbiAgICBpZiAoaXNGb2dPZldhcikge1xuICAgICAgbGV0IGRpc2NvdmVyUmVzdWx0ID0gYXdhaXQgZGlzY292ZXJSb3V0ZXMoXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByZXF1ZXN0LnNpZ25hbFxuICAgICAgKTtcbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgICAgfSBlbHNlIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgbGV0IHsgZXJyb3IsIG5vdEZvdW5kTWF0Y2hlcywgcm91dGUgfSA9IGhhbmRsZURpc2NvdmVyUm91dGVFcnJvcihcbiAgICAgICAgICBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICBkaXNjb3ZlclJlc3VsdFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbXG4gICAgICAgICAgICByb3V0ZS5pZCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIGxldCB7IG5vdEZvdW5kTWF0Y2hlcywgZXJyb3IsIHJvdXRlIH0gPSBoYW5kbGVOYXZpZ2F0aW9uYWw0MDQoXG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW1xuICAgICAgICAgICAgcm91dGUuaWQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2hlcyA9IGRpc2NvdmVyUmVzdWx0Lm1hdGNoZXM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ6IERhdGFSZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWQsXG4gICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFxuICAgICAgICBcImFjdGlvblwiLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBtYXRjaGVzXG4gICAgICApO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1swXTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTogYm9vbGVhbjtcbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICBsZXQgbG9jYXRpb24gPSBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKFxuICAgICAgICAgIHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpISxcbiAgICAgICAgICBuZXcgVVJMKHJlcXVlc3QudXJsKSxcbiAgICAgICAgICBiYXNlbmFtZVxuICAgICAgICApO1xuICAgICAgICByZXBsYWNlID0gbG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2UsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7IHNob3J0Q2lyY3VpdGVkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHsgdHlwZTogXCJkZWZlci1hY3Rpb25cIiB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG5cbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiBhcmUgUkVQTEFDRVxuICAgICAgLy8gbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGUgYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW5cbiAgICAgIC8vIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbCBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZVxuICAgICAgLy8gYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5XG4gICAgICAvLyBhZ2FpblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEhpc3RvcnlBY3Rpb24uUHVzaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdF0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2FjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHRdLFxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBpc0ZvZ09mV2FyOiBib29sZWFuLFxuICAgIG92ZXJyaWRlTmF2aWdhdGlvbj86IE5hdmlnYXRpb24sXG4gICAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb24sXG4gICAgZmV0Y2hlclN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uLFxuICAgIHJlcGxhY2U/OiBib29sZWFuLFxuICAgIGluaXRpYWxIeWRyYXRpb24/OiBib29sZWFuLFxuICAgIGZsdXNoU3luYz86IGJvb2xlYW4sXG4gICAgcGVuZGluZ0FjdGlvblJlc3VsdD86IFBlbmRpbmdBY3Rpb25SZXN1bHRcbiAgKTogUHJvbWlzZTxIYW5kbGVMb2FkZXJzUmVzdWx0PiB7XG4gICAgLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID1cbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG5cbiAgICAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPVxuICAgICAgc3VibWlzc2lvbiB8fFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24gfHxcbiAgICAgIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihsb2FkaW5nTmF2aWdhdGlvbik7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIC8vIElmIHdlIGhhdmUgcGFydGlhbEh5ZHJhdGlvbiBlbmFibGVkLCB0aGVuIGRvbid0IHVwZGF0ZSB0aGUgc3RhdGUgZm9yIHRoZVxuICAgIC8vIGluaXRpYWwgZGF0YSBsb2FkIHNpbmNlIGl0J3Mgbm90IGEgXCJuYXZpZ2F0aW9uXCJcbiAgICBsZXQgc2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlID1cbiAgICAgICFpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gJiZcbiAgICAgICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pO1xuXG4gICAgLy8gV2hlbiBmb2cgb2Ygd2FyIGlzIGVuYWJsZWQsIHdlIGVudGVyIG91ciBgbG9hZGluZ2Agc3RhdGUgZWFybGllciBzbyB3ZVxuICAgIC8vIGNhbiBkaXNjb3ZlciBuZXcgcm91dGVzIGR1cmluZyB0aGUgYGxvYWRpbmdgIHN0YXRlLiAgV2Ugc2tpcCB0aGlzIGlmXG4gICAgLy8gd2UndmUgYWxyZWFkeSBydW4gYWN0aW9ucyBzaW5jZSB3ZSB3b3VsZCBoYXZlIGRvbmUgb3VyIG1hdGNoaW5nIGFscmVhZHkuXG4gICAgLy8gSWYgdGhlIGNoaWxkcmVuKCkgZnVuY3Rpb24gdGhyZXcgdGhlbiwgd2Ugd2FudCB0byBwcm9jZWVkIHdpdGggdGhlXG4gICAgLy8gcGFydGlhbCBtYXRjaGVzIGl0IGRpc2NvdmVyZWQuXG4gICAgaWYgKGlzRm9nT2ZXYXIpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVOYXZpZ2F0aW9uU3RhdGUpIHtcbiAgICAgICAgbGV0IGFjdGlvbkRhdGEgPSBnZXRVcGRhdGVkQWN0aW9uRGF0YShwZW5kaW5nQWN0aW9uUmVzdWx0KTtcbiAgICAgICAgdXBkYXRlU3RhdGUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmF2aWdhdGlvbjogbG9hZGluZ05hdmlnYXRpb24sXG4gICAgICAgICAgICAuLi4oYWN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkID8geyBhY3Rpb25EYXRhIH0gOiB7fSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBmbHVzaFN5bmMsXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGlzY292ZXJSZXN1bHQgPSBhd2FpdCBkaXNjb3ZlclJvdXRlcyhcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJlcXVlc3Quc2lnbmFsXG4gICAgICApO1xuXG4gICAgICBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfTtcbiAgICAgIH0gZWxzZSBpZiAoZGlzY292ZXJSZXN1bHQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGxldCB7IGVycm9yLCBub3RGb3VuZE1hdGNoZXMsIHJvdXRlIH0gPSBoYW5kbGVEaXNjb3ZlclJvdXRlRXJyb3IoXG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgZGlzY292ZXJSZXN1bHRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvcixcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmICghZGlzY292ZXJSZXN1bHQubWF0Y2hlcykge1xuICAgICAgICBsZXQgeyBlcnJvciwgbm90Rm91bmRNYXRjaGVzLCByb3V0ZSB9ID0gaGFuZGxlTmF2aWdhdGlvbmFsNDA0KFxuICAgICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAgIGVycm9yczoge1xuICAgICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3IsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5tYXRjaGVzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIGFjdGl2ZVN1Ym1pc3Npb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsXG4gICAgICBmdXR1cmUudW5zdGFibGVfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLFxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCxcbiAgICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLFxuICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLFxuICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgZmV0Y2hMb2FkTWF0Y2hlcyxcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMsXG4gICAgICByb3V0ZXNUb1VzZSxcbiAgICAgIGJhc2VuYW1lLFxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdFxuICAgICk7XG5cbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKFxuICAgICAgKHJvdXRlSWQpID0+XG4gICAgICAgICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fFxuICAgICAgICAobWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKVxuICAgICk7XG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgICBlcnJvcnM6XG4gICAgICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSlcbiAgICAgICAgICAgICAgPyB7IFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvciB9XG4gICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAuLi5nZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpLFxuICAgICAgICAgIC4uLih1cGRhdGVkRmV0Y2hlcnMgPyB7IGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSB9IDoge30pLFxuICAgICAgICB9LFxuICAgICAgICB7IGZsdXNoU3luYyB9XG4gICAgICApO1xuICAgICAgcmV0dXJuIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlKSB7XG4gICAgICBsZXQgdXBkYXRlczogUGFydGlhbDxSb3V0ZXJTdGF0ZT4gPSB7fTtcbiAgICAgIGlmICghaXNGb2dPZldhcikge1xuICAgICAgICAvLyBPbmx5IHVwZGF0ZSBuYXZpZ2F0aW9uL2FjdGlvbk5EYXRhIGlmIHdlIGRpZG4ndCBhbHJlYWR5IGRvIGl0IGFib3ZlXG4gICAgICAgIHVwZGF0ZXMubmF2aWdhdGlvbiA9IGxvYWRpbmdOYXZpZ2F0aW9uO1xuICAgICAgICBsZXQgYWN0aW9uRGF0YSA9IGdldFVwZGF0ZWRBY3Rpb25EYXRhKHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgICAgICBpZiAoYWN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBkYXRlcy5hY3Rpb25EYXRhID0gYWN0aW9uRGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXBkYXRlcy5mZXRjaGVycyA9IGdldFVwZGF0ZWRSZXZhbGlkYXRpbmdGZXRjaGVycyhyZXZhbGlkYXRpbmdGZXRjaGVycyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVTdGF0ZSh1cGRhdGVzLCB7IGZsdXNoU3luYyB9KTtcbiAgICB9XG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChyZikgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHJmLmtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHJmLmtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICAvLyBGZXRjaGVycyB1c2UgYW4gaW5kZXBlbmRlbnQgQWJvcnRDb250cm9sbGVyIHNvIHRoYXQgYWJvcnRpbmcgYSBmZXRjaGVyXG4gICAgICAgIC8vICh2aWEgZGVsZXRlRmV0Y2hlcikgZG9lcyBub3QgYWJvcnQgdGhlIHRyaWdnZXJpbmcgbmF2aWdhdGlvbiB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXJlZCB0aGUgcmV2YWxpZGF0aW9uXG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChmKSA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwiYWJvcnRcIixcbiAgICAgICAgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCB7IGxvYWRlclJlc3VsdHMsIGZldGNoZXJSZXN1bHRzIH0gPVxuICAgICAgYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKFxuICAgICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJhYm9ydFwiLFxuICAgICAgICBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnNcbiAgICAgICk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHJmKSA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcblxuICAgIC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChbLi4ubG9hZGVyUmVzdWx0cywgLi4uZmV0Y2hlclJlc3VsdHNdKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID1cbiAgICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVyc1tyZWRpcmVjdC5pZHggLSBtYXRjaGVzVG9Mb2FkLmxlbmd0aF0ua2V5O1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChmZXRjaGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCwge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHsgbG9hZGVyRGF0YSwgZXJyb3JzIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShcbiAgICAgIHN0YXRlLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIG1hdGNoZXNUb0xvYWQsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdCxcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgZmV0Y2hlclJlc3VsdHMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHNcbiAgICApO1xuXG4gICAgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKChhYm9ydGVkKSA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIER1cmluZyBwYXJ0aWFsIGh5ZHJhdGlvbiwgcHJlc2VydmUgU1NSIGVycm9ycyBmb3Igcm91dGVzIHRoYXQgZG9uJ3QgcmUtcnVuXG4gICAgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgICBPYmplY3QuZW50cmllcyhzdGF0ZS5lcnJvcnMpXG4gICAgICAgIC5maWx0ZXIoKFtpZF0pID0+ICFtYXRjaGVzVG9Mb2FkLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IGlkKSlcbiAgICAgICAgLmZvckVhY2goKFtyb3V0ZUlkLCBlcnJvcl0pID0+IHtcbiAgICAgICAgICBlcnJvcnMgPSBPYmplY3QuYXNzaWduKGVycm9ycyB8fCB7fSwgeyBbcm91dGVJZF06IGVycm9yIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID1cbiAgICAgIHVwZGF0ZWRGZXRjaGVycyB8fCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMDtcblxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9ycyxcbiAgICAgIC4uLihzaG91bGRVcGRhdGVGZXRjaGVycyA/IHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0gOiB7fSksXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFVwZGF0ZWRBY3Rpb25EYXRhKFxuICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQ6IFBlbmRpbmdBY3Rpb25SZXN1bHQgfCB1bmRlZmluZWRcbiAgKTogUmVjb3JkPHN0cmluZywgUm91dGVEYXRhPiB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgIGlmIChwZW5kaW5nQWN0aW9uUmVzdWx0ICYmICFpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pKSB7XG4gICAgICAvLyBUaGlzIGlzIGNhc3QgdG8gYGFueWAgY3VycmVudGx5IGJlY2F1c2UgYFJvdXRlRGF0YWB1c2VzIGFueSBhbmQgaXRcbiAgICAgIC8vIHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlIHRvIHVzZSBhbnkuXG4gICAgICAvLyBUT0RPOiB2NyAtIGNoYW5nZSBgUm91dGVEYXRhYCB0byB1c2UgYHVua25vd25gIGluc3RlYWQgb2YgYGFueWBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhIGFzIGFueSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VXBkYXRlZFJldmFsaWRhdGluZ0ZldGNoZXJzKFxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzOiBSZXZhbGlkYXRpbmdGZXRjaGVyW11cbiAgKSB7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgocmYpID0+IHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHJmLmtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgICAgICk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IE1hcChzdGF0ZS5mZXRjaGVycyk7XG4gIH1cblxuICAvLyBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pdCBmb3IgdGhlIGdpdmVuIGZldGNoZXIga2V5XG4gIGZ1bmN0aW9uIGZldGNoKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJvdXRlSWQ6IHN0cmluZyxcbiAgICBocmVmOiBzdHJpbmcgfCBudWxsLFxuICAgIG9wdHM/OiBSb3V0ZXJGZXRjaE9wdGlvbnNcbiAgKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICtcbiAgICAgICAgICBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArXG4gICAgICAgICAgXCJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG5cbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVUbyhcbiAgICAgIHN0YXRlLmxvY2F0aW9uLFxuICAgICAgc3RhdGUubWF0Y2hlcyxcbiAgICAgIGJhc2VuYW1lLFxuICAgICAgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSxcbiAgICAgIGhyZWYsXG4gICAgICBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsXG4gICAgICByb3V0ZUlkLFxuICAgICAgb3B0cz8ucmVsYXRpdmVcbiAgICApO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoLCBiYXNlbmFtZSk7XG5cbiAgICBsZXQgZm9nT2ZXYXIgPSBjaGVja0ZvZ09mV2FyKG1hdGNoZXMsIHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCk7XG4gICAgaWYgKGZvZ09mV2FyLmFjdGl2ZSAmJiBmb2dPZldhci5tYXRjaGVzKSB7XG4gICAgICBtYXRjaGVzID0gZm9nT2ZXYXIubWF0Y2hlcztcbiAgICB9XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkLFxuICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbm9ybWFsaXplZFBhdGggfSksXG4gICAgICAgIHsgZmx1c2hTeW5jIH1cbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHsgcGF0aCwgc3VibWlzc2lvbiwgZXJyb3IgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhcbiAgICAgIGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLFxuICAgICAgdHJ1ZSxcbiAgICAgIG5vcm1hbGl6ZWRQYXRoLFxuICAgICAgb3B0c1xuICAgICk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7IGZsdXNoU3luYyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcblxuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG5cbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oXG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZCxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgbWF0Y2gsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGZvZ09mV2FyLmFjdGl2ZSxcbiAgICAgICAgZmx1c2hTeW5jLFxuICAgICAgICBzdWJtaXNzaW9uXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7IHJvdXRlSWQsIHBhdGggfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihcbiAgICAgIGtleSxcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoLFxuICAgICAgbWF0Y2gsXG4gICAgICBtYXRjaGVzLFxuICAgICAgZm9nT2ZXYXIuYWN0aXZlLFxuICAgICAgZmx1c2hTeW5jLFxuICAgICAgc3VibWlzc2lvblxuICAgICk7XG4gIH1cblxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJvdXRlSWQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gICAgcmVxdWVzdE1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBpc0ZvZ09mV2FyOiBib29sZWFuLFxuICAgIGZsdXNoU3luYzogYm9vbGVhbixcbiAgICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uXG4gICkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcblxuICAgIGZ1bmN0aW9uIGRldGVjdEFuZEhhbmRsZTQwNUVycm9yKG06IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gpIHtcbiAgICAgIGlmICghbS5yb3V0ZS5hY3Rpb24gJiYgIW0ucm91dGUubGF6eSkge1xuICAgICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICAgIHJvdXRlSWQ6IHJvdXRlSWQsXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwgeyBmbHVzaFN5bmMgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghaXNGb2dPZldhciAmJiBkZXRlY3RBbmRIYW5kbGU0MDVFcnJvcihtYXRjaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luYyxcbiAgICB9KTtcblxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgaW5pdC5oaXN0b3J5LFxuICAgICAgcGF0aCxcbiAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgKTtcblxuICAgIGlmIChpc0ZvZ09mV2FyKSB7XG4gICAgICBsZXQgZGlzY292ZXJSZXN1bHQgPSBhd2FpdCBkaXNjb3ZlclJvdXRlcyhcbiAgICAgICAgcmVxdWVzdE1hdGNoZXMsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGZldGNoUmVxdWVzdC5zaWduYWxcbiAgICAgICk7XG5cbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBsZXQgeyBlcnJvciB9ID0gaGFuZGxlRGlzY292ZXJSb3V0ZUVycm9yKHBhdGgsIGRpc2NvdmVyUmVzdWx0KTtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHsgZmx1c2hTeW5jIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgcm91dGVJZCxcbiAgICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogcGF0aCB9KSxcbiAgICAgICAgICB7IGZsdXNoU3luYyB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3RNYXRjaGVzID0gZGlzY292ZXJSZXN1bHQubWF0Y2hlcztcbiAgICAgICAgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChyZXF1ZXN0TWF0Y2hlcywgcGF0aCk7XG5cbiAgICAgICAgaWYgKGRldGVjdEFuZEhhbmRsZTQwNUVycm9yKG1hdGNoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG5cbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IGFjdGlvblJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIGZldGNoUmVxdWVzdCxcbiAgICAgIFttYXRjaF0sXG4gICAgICByZXF1ZXN0TWF0Y2hlc1xuICAgICk7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGFjdGlvblJlc3VsdHNbMF07XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCwgd2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgdG8gdGhlIFVJXG4gICAgLy8gb3IgcmVkaXJlY3RzIHByb2Nlc3NlZCBmb3IgdW5tb3VudGVkIGZldGNoZXJzIHNvIHdlIGp1c3QgcmV2ZXJ0IHRoZW0gdG9cbiAgICAvLyBpZGxlXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCAmJiBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkgfHwgaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBMZXQgU3VjY2Vzc1Jlc3VsdCdzIGZhbGwgdGhyb3VnaCBmb3IgcmV2YWxpZGF0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBhY3Rpb24gc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb24uICBXZSBhbHJlYWR5XG4gICAgICAgICAgLy8gc2V0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgc28gYWxsIGxvYWRlcnMgZm9yIHRoZSBuZXcgcm91dGUgc2hvdWxkXG4gICAgICAgICAgLy8gZmlyZSB1bmxlc3Mgb3B0ZWQgb3V0IHZpYSBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbikpO1xuICAgICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihmZXRjaFJlcXVlc3QsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb24sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7IHR5cGU6IFwiZGVmZXItYWN0aW9uXCIgfSk7XG4gICAgfVxuXG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICApO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID1cbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiXG4gICAgICAgID8gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGJhc2VuYW1lKVxuICAgICAgICA6IHN0YXRlLm1hdGNoZXM7XG5cbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcblxuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcblxuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChcbiAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBmYWxzZSxcbiAgICAgIGZ1dHVyZS51bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkLFxuICAgICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsXG4gICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsXG4gICAgICBkZWxldGVkRmV0Y2hlcnMsXG4gICAgICBmZXRjaExvYWRNYXRjaGVzLFxuICAgICAgZmV0Y2hSZWRpcmVjdElkcyxcbiAgICAgIHJvdXRlc1RvVXNlLFxuICAgICAgYmFzZW5hbWUsXG4gICAgICBbbWF0Y2gucm91dGUuaWQsIGFjdGlvblJlc3VsdF1cbiAgICApO1xuXG4gICAgLy8gUHV0IGFsbCByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgaW50byB0aGUgbG9hZGluZyBzdGF0ZSwgZXhjZXB0IGZvciB0aGVcbiAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoXG4gICAgLy8gY29udGFpbnMgaXQncyBhY3Rpb24gc3VibWlzc2lvbiBpbmZvICsgYWN0aW9uIGRhdGFcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVyc1xuICAgICAgLmZpbHRlcigocmYpID0+IHJmLmtleSAhPT0ga2V5KVxuICAgICAgLmZvckVhY2goKHJmKSA9PiB7XG4gICAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhzdGFsZUtleSkpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoc3RhbGVLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHVwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pO1xuXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChyZikgPT4gYWJvcnRGZXRjaGVyKHJmLmtleSkpO1xuXG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJhYm9ydFwiLFxuICAgICAgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zXG4gICAgKTtcblxuICAgIGxldCB7IGxvYWRlclJlc3VsdHMsIGZldGNoZXJSZXN1bHRzIH0gPVxuICAgICAgYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKFxuICAgICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgICAgcmV2YWxpZGF0aW9uUmVxdWVzdFxuICAgICAgKTtcblxuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcImFib3J0XCIsXG4gICAgICBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnNcbiAgICApO1xuXG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChyKSA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KFsuLi5sb2FkZXJSZXN1bHRzLCAuLi5mZXRjaGVyUmVzdWx0c10pO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgaWYgKHJlZGlyZWN0LmlkeCA+PSBtYXRjaGVzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGlzIHJlZGlyZWN0IGNhbWUgZnJvbSBhIGZldGNoZXIgbWFrZSBzdXJlIHdlIG1hcmsgaXQgaW5cbiAgICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgICAgbGV0IGZldGNoZXJLZXkgPVxuICAgICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJldmFsaWRhdGlvblJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgeyBsb2FkZXJEYXRhLCBlcnJvcnMgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKFxuICAgICAgc3RhdGUsXG4gICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgbWF0Y2hlc1RvTG9hZCxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgIGZldGNoZXJSZXN1bHRzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzXG4gICAgKTtcblxuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cblxuICAgIGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG5cbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChcbiAgICAgIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmXG4gICAgICBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZFxuICAgICkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG5cbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKFxuICAgICAgICAgIHN0YXRlLmxvYWRlckRhdGEsXG4gICAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICApLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcm91dGVJZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgaXNGb2dPZldhcjogYm9vbGVhbixcbiAgICBmbHVzaFN5bmM6IGJvb2xlYW4sXG4gICAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb25cbiAgKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShcbiAgICAgIGtleSxcbiAgICAgIGdldExvYWRpbmdGZXRjaGVyKFxuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZFxuICAgICAgKSxcbiAgICAgIHsgZmx1c2hTeW5jIH1cbiAgICApO1xuXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoXG4gICAgICBpbml0Lmhpc3RvcnksXG4gICAgICBwYXRoLFxuICAgICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbFxuICAgICk7XG5cbiAgICBpZiAoaXNGb2dPZldhcikge1xuICAgICAgbGV0IGRpc2NvdmVyUmVzdWx0ID0gYXdhaXQgZGlzY292ZXJSb3V0ZXMoXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGZldGNoUmVxdWVzdC5zaWduYWxcbiAgICAgICk7XG5cbiAgICAgIGlmIChkaXNjb3ZlclJlc3VsdC50eXBlID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGRpc2NvdmVyUmVzdWx0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBsZXQgeyBlcnJvciB9ID0gaGFuZGxlRGlzY292ZXJSb3V0ZUVycm9yKHBhdGgsIGRpc2NvdmVyUmVzdWx0KTtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHsgZmx1c2hTeW5jIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKCFkaXNjb3ZlclJlc3VsdC5tYXRjaGVzKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgcm91dGVJZCxcbiAgICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogcGF0aCB9KSxcbiAgICAgICAgICB7IGZsdXNoU3luYyB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5tYXRjaGVzO1xuICAgICAgICBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuXG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcbiAgICAgIFwibG9hZGVyXCIsXG4gICAgICBmZXRjaFJlcXVlc3QsXG4gICAgICBbbWF0Y2hdLFxuICAgICAgbWF0Y2hlc1xuICAgICk7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbMF07XG5cbiAgICAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHxcbiAgICAgICAgcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCBvciByZWRpcmVjdHMgZm9sbG93ZWQgZm9yIHVubW91bnRlZFxuICAgIC8vIGZldGNoZXJzLCBzbyBzaG9ydCBjaXJjdWl0IGhlcmUgaWYgaXQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgVUlcbiAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKGZldGNoUmVxdWVzdCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgcmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuXG4gICAgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIHJlZGlyZWN0OiBSZWRpcmVjdFJlc3VsdCxcbiAgICB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICByZXBsYWNlLFxuICAgIH06IHtcbiAgICAgIHN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uO1xuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uO1xuICAgICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgfSA9IHt9XG4gICkge1xuICAgIGlmIChyZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmhhcyhcIlgtUmVtaXgtUmV2YWxpZGF0ZVwiKSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gcmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBMb2NhdGlvbiBoZWFkZXIgb24gdGhlIHJlZGlyZWN0IFJlc3BvbnNlXCIpO1xuICAgIGxvY2F0aW9uID0gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmV3IFVSTChyZXF1ZXN0LnVybCksXG4gICAgICBiYXNlbmFtZVxuICAgICk7XG4gICAgbGV0IHJlZGlyZWN0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24sIHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlLFxuICAgIH0pO1xuXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgICB1cmwub3JpZ2luICE9PSByb3V0ZXJXaW5kb3cubG9jYXRpb24ub3JpZ2luIHx8XG4gICAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RvY3VtZW50UmVsb2FkKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLnJlcGxhY2UobG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5hc3NpZ24obG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG5cbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID1cbiAgICAgIHJlcGxhY2UgPT09IHRydWUgPyBIaXN0b3J5QWN0aW9uLlJlcGxhY2UgOiBIaXN0b3J5QWN0aW9uLlB1c2g7XG5cbiAgICAvLyBVc2UgdGhlIGluY29taW5nIHN1Ym1pc3Npb24gaWYgcHJvdmlkZWQsIGZhbGxiYWNrIG9uIHRoZSBhY3RpdmUgb25lIGluXG4gICAgLy8gc3RhdGUubmF2aWdhdGlvblxuICAgIGxldCB7IGZvcm1NZXRob2QsIGZvcm1BY3Rpb24sIGZvcm1FbmNUeXBlIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmIChcbiAgICAgICFzdWJtaXNzaW9uICYmXG4gICAgICAhZmV0Y2hlclN1Ym1pc3Npb24gJiZcbiAgICAgIGZvcm1NZXRob2QgJiZcbiAgICAgIGZvcm1BY3Rpb24gJiZcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uO1xuICAgIGlmIChcbiAgICAgIHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3QucmVzcG9uc2Uuc3RhdHVzKSAmJlxuICAgICAgYWN0aXZlU3VibWlzc2lvbiAmJlxuICAgICAgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpXG4gICAgKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAuLi5hY3RpdmVTdWJtaXNzaW9uLFxuICAgICAgICAgIGZvcm1BY3Rpb246IGxvY2F0aW9uLFxuICAgICAgICB9LFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIG5hdmlnYXRpb24gc3VibWlzc2lvbiwgd2Ugd2lsbCBwcmVzZXJ2ZSBpdCB0aHJvdWdoIHRoZVxuICAgICAgLy8gcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKFxuICAgICAgICByZWRpcmVjdExvY2F0aW9uLFxuICAgICAgICBzdWJtaXNzaW9uXG4gICAgICApO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFNlbmQgZmV0Y2hlciBzdWJtaXNzaW9ucyB0aHJvdWdoIGZvciBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IGNsaWVudC1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3koXG4gICAgdHlwZTogXCJsb2FkZXJcIiB8IFwiYWN0aW9uXCIsXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBtYXRjaGVzVG9Mb2FkOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdXG4gICk6IFByb21pc2U8RGF0YVJlc3VsdFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneUltcGwoXG4gICAgICAgIGRhdGFTdHJhdGVneUltcGwsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1hdGNoZXNUb0xvYWQsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIG1hbmlmZXN0LFxuICAgICAgICBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgcmVzdWx0cy5tYXAoKHJlc3VsdCwgaSkgPT4ge1xuICAgICAgICAgIGlmIChpc1JlZGlyZWN0SGFuZGxlclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQucmVzdWx0IGFzIFJlc3BvbnNlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgICAgICAgcmVzcG9uc2U6IG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UoXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBtYXRjaGVzVG9Mb2FkW2ldLnJvdXRlLmlkLFxuICAgICAgICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgICAgICAgICAgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdChyZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgb3V0ZXIgZGF0YVN0cmF0ZWd5IG1ldGhvZCB0aHJvd3MsIGp1c3QgcmV0dXJuIHRoZSBlcnJvciBmb3IgYWxsXG4gICAgICAvLyBtYXRjaGVzIC0gYW5kIGl0J2xsIG5hdHVyYWxseSBidWJibGUgdG8gdGhlIHJvb3RcbiAgICAgIHJldHVybiBtYXRjaGVzVG9Mb2FkLm1hcCgoKSA9PiAoe1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZSxcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoXG4gICAgY3VycmVudE1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgbWF0Y2hlc1RvTG9hZDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGZldGNoZXJzVG9Mb2FkOiBSZXZhbGlkYXRpbmdGZXRjaGVyW10sXG4gICAgcmVxdWVzdDogUmVxdWVzdFxuICApIHtcbiAgICBsZXQgW2xvYWRlclJlc3VsdHMsIC4uLmZldGNoZXJSZXN1bHRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIG1hdGNoZXNUb0xvYWQubGVuZ3RoXG4gICAgICAgID8gY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzKVxuICAgICAgICA6IFtdLFxuICAgICAgLi4uZmV0Y2hlcnNUb0xvYWQubWFwKChmKSA9PiB7XG4gICAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBsZXQgZmV0Y2hlclJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgICAgICAgICAgIGluaXQuaGlzdG9yeSxcbiAgICAgICAgICAgIGYucGF0aCxcbiAgICAgICAgICAgIGYuY29udHJvbGxlci5zaWduYWxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBjYWxsRGF0YVN0cmF0ZWd5KFxuICAgICAgICAgICAgXCJsb2FkZXJcIixcbiAgICAgICAgICAgIGZldGNoZXJSZXF1ZXN0LFxuICAgICAgICAgICAgW2YubWF0Y2hdLFxuICAgICAgICAgICAgZi5tYXRjaGVzXG4gICAgICAgICAgKS50aGVuKChyKSA9PiByWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlPERhdGFSZXN1bHQ+KHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICAgICAgcGF0aG5hbWU6IGYucGF0aCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICBdKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoXG4gICAgICAgIGN1cnJlbnRNYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgICBsb2FkZXJSZXN1bHRzLm1hcCgoKSA9PiByZXF1ZXN0LnNpZ25hbCksXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBzdGF0ZS5sb2FkZXJEYXRhXG4gICAgICApLFxuICAgICAgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhcbiAgICAgICAgY3VycmVudE1hdGNoZXMsXG4gICAgICAgIGZldGNoZXJzVG9Mb2FkLm1hcCgoZikgPT4gZi5tYXRjaCksXG4gICAgICAgIGZldGNoZXJSZXN1bHRzLFxuICAgICAgICBmZXRjaGVyc1RvTG9hZC5tYXAoKGYpID0+IChmLmNvbnRyb2xsZXIgPyBmLmNvbnRyb2xsZXIuc2lnbmFsIDogbnVsbCkpLFxuICAgICAgICB0cnVlXG4gICAgICApLFxuICAgIF0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0cyxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG5cbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcblxuICAgIC8vIEFib3J0IGluLWZsaWdodCBmZXRjaGVyIGxvYWRzXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRmV0Y2hlclN0YXRlKFxuICAgIGtleTogc3RyaW5nLFxuICAgIGZldGNoZXI6IEZldGNoZXIsXG4gICAgb3B0czogeyBmbHVzaFN5bmM/OiBib29sZWFuIH0gPSB7fVxuICApIHtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZShcbiAgICAgIHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0sXG4gICAgICB7IGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlIH1cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJvdXRlSWQ6IHN0cmluZyxcbiAgICBlcnJvcjogYW55LFxuICAgIG9wdHM6IHsgZmx1c2hTeW5jPzogYm9vbGVhbiB9ID0ge31cbiAgKSB7XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZShcbiAgICAgIHtcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvcixcbiAgICAgICAgfSxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpLFxuICAgICAgfSxcbiAgICAgIHsgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWUgfVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyPFREYXRhID0gYW55PihrZXk6IHN0cmluZyk6IEZldGNoZXI8VERhdGE+IHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgKyAxKTtcbiAgICAgIC8vIElmIHRoaXMgZmV0Y2hlciB3YXMgcHJldmlvdXNseSBtYXJrZWQgZm9yIGRlbGV0aW9uLCB1bm1hcmsgaXQgc2luY2Ugd2VcbiAgICAgIC8vIGhhdmUgYSBuZXcgaW5zdGFuY2VcbiAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gRG9uJ3QgYWJvcnQgdGhlIGNvbnRyb2xsZXIgaWYgdGhpcyBpcyBhIGRlbGV0aW9uIG9mIGEgZmV0Y2hlci5zdWJtaXQoKVxuICAgIC8vIGluIGl0J3MgbG9hZGluZyBwaGFzZSBzaW5jZSAtIHdlIGRvbid0IHdhbnQgdG8gYWJvcnQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyByZXZhbGlkYXRpb24gYW5kIHdhbnQgdGhlbSB0byBjb21wbGV0ZSBhbmQgbGFuZFxuICAgIGlmIChcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkgJiZcbiAgICAgICEoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBmZXRjaFJlbG9hZElkcy5oYXMoa2V5KSlcbiAgICApIHtcbiAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgbGV0IGNvdW50ID0gKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApIC0gMTtcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCBjb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5OiBzdHJpbmcpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7XG4gICAgaW52YXJpYW50KGNvbnRyb2xsZXIsIGBFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiAke2tleX1gKTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5czogc3RyaW5nW10pIHtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgbGV0IGZldGNoZXIgPSBnZXRGZXRjaGVyKGtleSk7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihmZXRjaGVyLmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTogYm9vbGVhbiB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGtleSBvZiBmZXRjaFJlZGlyZWN0SWRzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgaW52YXJpYW50KGZldGNoZXIsIGBFeHBlY3RlZCBmZXRjaGVyOiAke2tleX1gKTtcbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHVwZGF0ZWRGZXRjaGVycyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoZG9uZUtleXMpO1xuICAgIHJldHVybiB1cGRhdGVkRmV0Y2hlcnM7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBgRXhwZWN0ZWQgZmV0Y2hlcjogJHtrZXl9YCk7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5OiBzdHJpbmcsIGZuOiBCbG9ja2VyRnVuY3Rpb24pIHtcbiAgICBsZXQgYmxvY2tlcjogQmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrZXI7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVCbG9ja2VyKGtleTogc3RyaW5nKSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuICBmdW5jdGlvbiB1cGRhdGVCbG9ja2VyKGtleTogc3RyaW5nLCBuZXdCbG9ja2VyOiBCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG5cbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoXG4gICAgICAoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIikgfHxcbiAgICAgICAgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB8fFxuICAgICAgICAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHx8XG4gICAgICAgIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiKSB8fFxuICAgICAgICAoYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiksXG4gICAgICBgSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246ICR7YmxvY2tlci5zdGF0ZX0gLT4gJHtuZXdCbG9ja2VyLnN0YXRlfWBcbiAgICApO1xuXG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoeyBibG9ja2VycyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgY3VycmVudExvY2F0aW9uLFxuICAgIG5leHRMb2NhdGlvbixcbiAgICBoaXN0b3J5QWN0aW9uLFxuICB9OiB7XG4gICAgY3VycmVudExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICBuZXh0TG9jYXRpb246IExvY2F0aW9uO1xuICAgIGhpc3RvcnlBY3Rpb246IEhpc3RvcnlBY3Rpb247XG4gIH0pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuXG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG5cbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHsgY3VycmVudExvY2F0aW9uLCBuZXh0TG9jYXRpb24sIGhpc3RvcnlBY3Rpb24gfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5hdmlnYXRpb25hbDQwNChwYXRobmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWUgfSk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IHsgbWF0Y2hlcywgcm91dGUgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuXG4gICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG5cbiAgICByZXR1cm4geyBub3RGb3VuZE1hdGNoZXM6IG1hdGNoZXMsIHJvdXRlLCBlcnJvciB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRGlzY292ZXJSb3V0ZUVycm9yKFxuICAgIHBhdGhuYW1lOiBzdHJpbmcsXG4gICAgZGlzY292ZXJSZXN1bHQ6IERpc2NvdmVyUm91dGVzRXJyb3JSZXN1bHRcbiAgKSB7XG4gICAgbGV0IG1hdGNoZXMgPSBkaXNjb3ZlclJlc3VsdC5wYXJ0aWFsTWF0Y2hlcztcbiAgICBsZXQgcm91dGUgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGU7XG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgIHR5cGU6IFwicm91dGUtZGlzY292ZXJ5XCIsXG4gICAgICByb3V0ZUlkOiByb3V0ZS5pZCxcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgZGlzY292ZXJSZXN1bHQuZXJyb3IgIT0gbnVsbCAmJiBcIm1lc3NhZ2VcIiBpbiBkaXNjb3ZlclJlc3VsdC5lcnJvclxuICAgICAgICAgID8gZGlzY292ZXJSZXN1bHQuZXJyb3JcbiAgICAgICAgICA6IFN0cmluZyhkaXNjb3ZlclJlc3VsdC5lcnJvciksXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm90Rm91bmRNYXRjaGVzOiBtYXRjaGVzLCByb3V0ZSwgZXJyb3IgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhcbiAgICBwcmVkaWNhdGU/OiAocm91dGVJZDogc3RyaW5nKSA9PiBib29sZWFuXG4gICk6IHN0cmluZ1tdIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHM6IHN0cmluZ1tdID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH1cblxuICAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKFxuICAgIHBvc2l0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyPixcbiAgICBnZXRQb3NpdGlvbjogR2V0U2Nyb2xsUG9zaXRpb25GdW5jdGlvbixcbiAgICBnZXRLZXk/OiBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uXG4gICkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgbnVsbDtcblxuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoeyByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHkgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uOiBMb2NhdGlvbiwgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdKSB7XG4gICAgaWYgKGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkoXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzLm1hcCgobSkgPT4gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24oXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXVxuICApOiB2b2lkIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihcbiAgICBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdXG4gICk6IG51bWJlciB8IG51bGwge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucykge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcyk7XG4gICAgICBsZXQgeSA9IHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV07XG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tGb2dPZldhcihcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10gfCBudWxsLFxuICAgIHJvdXRlc1RvVXNlOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdLFxuICAgIHBhdGhuYW1lOiBzdHJpbmdcbiAgKTogeyBhY3RpdmU6IGJvb2xlYW47IG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSB8IG51bGwgfSB7XG4gICAgaWYgKHBhdGNoUm91dGVzT25NaXNzSW1wbCkge1xuICAgICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAgIGxldCBmb2dNYXRjaGVzID0gbWF0Y2hSb3V0ZXNJbXBsPEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0PihcbiAgICAgICAgICByb3V0ZXNUb1VzZSxcbiAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHsgYWN0aXZlOiB0cnVlLCBtYXRjaGVzOiBmb2dNYXRjaGVzIHx8IFtdIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbGVhZlJvdXRlID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbGVhZlJvdXRlLnBhdGggJiZcbiAgICAgICAgICAobGVhZlJvdXRlLnBhdGggPT09IFwiKlwiIHx8IGxlYWZSb3V0ZS5wYXRoLmVuZHNXaXRoKFwiLypcIikpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHdlIG1hdGNoZWQgYSBzcGxhdCwgaXQgbWlnaHQgb25seSBiZSBiZWNhdXNlIHdlIGhhdmVuJ3QgeWV0IGZldGNoZWRcbiAgICAgICAgICAvLyB0aGUgY2hpbGRyZW4gdGhhdCB3b3VsZCBtYXRjaCB3aXRoIGEgaGlnaGVyIHNjb3JlLCBzbyBsZXQncyBmZXRjaFxuICAgICAgICAgIC8vIGFyb3VuZCBhbmQgZmluZCBvdXRcbiAgICAgICAgICBsZXQgcGFydGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlc0ltcGw8QWdub3N0aWNEYXRhUm91dGVPYmplY3Q+KFxuICAgICAgICAgICAgcm91dGVzVG9Vc2UsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIGJhc2VuYW1lLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHsgYWN0aXZlOiB0cnVlLCBtYXRjaGVzOiBwYXJ0aWFsTWF0Y2hlcyB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgYWN0aXZlOiBmYWxzZSwgbWF0Y2hlczogbnVsbCB9O1xuICB9XG5cbiAgdHlwZSBEaXNjb3ZlclJvdXRlc1N1Y2Nlc3NSZXN1bHQgPSB7XG4gICAgdHlwZTogXCJzdWNjZXNzXCI7XG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdIHwgbnVsbDtcbiAgfTtcbiAgdHlwZSBEaXNjb3ZlclJvdXRlc0Vycm9yUmVzdWx0ID0ge1xuICAgIHR5cGU6IFwiZXJyb3JcIjtcbiAgICBlcnJvcjogYW55O1xuICAgIHBhcnRpYWxNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW107XG4gIH07XG4gIHR5cGUgRGlzY292ZXJSb3V0ZXNBYm9ydGVkUmVzdWx0ID0geyB0eXBlOiBcImFib3J0ZWRcIiB9O1xuICB0eXBlIERpc2NvdmVyUm91dGVzUmVzdWx0ID1cbiAgICB8IERpc2NvdmVyUm91dGVzU3VjY2Vzc1Jlc3VsdFxuICAgIHwgRGlzY292ZXJSb3V0ZXNFcnJvclJlc3VsdFxuICAgIHwgRGlzY292ZXJSb3V0ZXNBYm9ydGVkUmVzdWx0O1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGRpc2NvdmVyUm91dGVzKFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBwYXRobmFtZTogc3RyaW5nLFxuICAgIHNpZ25hbDogQWJvcnRTaWduYWxcbiAgKTogUHJvbWlzZTxEaXNjb3ZlclJvdXRlc1Jlc3VsdD4ge1xuICAgIGxldCBwYXJ0aWFsTWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdIHwgbnVsbCA9IG1hdGNoZXM7XG4gICAgbGV0IHJvdXRlID1cbiAgICAgIHBhcnRpYWxNYXRjaGVzLmxlbmd0aCA+IDBcbiAgICAgICAgPyBwYXJ0aWFsTWF0Y2hlc1twYXJ0aWFsTWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZVxuICAgICAgICA6IG51bGw7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBpc05vbkhNUiA9IGluRmxpZ2h0RGF0YVJvdXRlcyA9PSBudWxsO1xuICAgICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlQ2hpbGRyZW4oXG4gICAgICAgICAgcGF0Y2hSb3V0ZXNPbk1pc3NJbXBsISxcbiAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICBwYXJ0aWFsTWF0Y2hlcyxcbiAgICAgICAgICByb3V0ZXNUb1VzZSxcbiAgICAgICAgICBtYW5pZmVzdCxcbiAgICAgICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICAgICAgcGVuZGluZ1BhdGNoUm91dGVzLFxuICAgICAgICAgIHNpZ25hbFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImVycm9yXCIsIGVycm9yOiBlLCBwYXJ0aWFsTWF0Y2hlcyB9O1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCBpbiB0aGUgbWlkZGxlIG9mIGFuIEhNUiByZXZhbGlkYXRpb24gYW5kIHdlIGNoYW5nZWQgdGhlXG4gICAgICAgIC8vIHJvdXRlcywgcHJvdmlkZSBhIG5ldyBpZGVudGl0eSBzbyB3aGVuIHdlIGB1cGRhdGVTdGF0ZWAgYXQgdGhlIGVuZCBvZlxuICAgICAgICAvLyB0aGlzIG5hdmlnYXRpb24vZmV0Y2ggYHJvdXRlci5yb3V0ZXNgIHdpbGwgYmUgYSBuZXcgaWRlbnRpdHkgYW5kXG4gICAgICAgIC8vIHRyaWdnZXIgYSByZS1ydW4gb2YgbWVtb2l6ZWQgYHJvdXRlci5yb3V0ZXNgIGRlcGVuZGVuY2llcy5cbiAgICAgICAgLy8gSE1SIHdpbGwgYWxyZWFkeSB1cGRhdGUgdGhlIGlkZW50aXR5IGFuZCByZWZsb3cgd2hlbiBpdCBsYW5kc1xuICAgICAgICAvLyBgaW5GbGlnaHREYXRhUm91dGVzYCBpbiBgY29tcGxldGVOYXZpZ2F0aW9uYFxuICAgICAgICBpZiAoaXNOb25ITVIpIHtcbiAgICAgICAgICBkYXRhUm91dGVzID0gWy4uLmRhdGFSb3V0ZXNdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcImFib3J0ZWRcIiB9O1xuICAgICAgfVxuXG4gICAgICBsZXQgbmV3TWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgbGV0IG1hdGNoZWRTcGxhdCA9IGZhbHNlO1xuICAgICAgaWYgKG5ld01hdGNoZXMpIHtcbiAgICAgICAgbGV0IGxlYWZSb3V0ZSA9IG5ld01hdGNoZXNbbmV3TWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZTtcblxuICAgICAgICBpZiAobGVhZlJvdXRlLmluZGV4KSB7XG4gICAgICAgICAgLy8gSWYgd2UgZm91bmQgYW4gaW5kZXggcm91dGUsIHdlIGNhbiBzdG9wXG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJzdWNjZXNzXCIsIG1hdGNoZXM6IG5ld01hdGNoZXMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZWFmUm91dGUucGF0aCAmJiBsZWFmUm91dGUucGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKGxlYWZSb3V0ZS5wYXRoID09PSBcIipcIikge1xuICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgYSBzcGxhdCByb3V0ZSwgd2UgY2FuJ3QgYmUgc3VyZSB0aGVyZSdzIG5vdCBhXG4gICAgICAgICAgICAvLyBoaWdoZXItc2NvcmluZyByb3V0ZSBkb3duIHNvbWUgcGFydGlhbCBtYXRjaGVzIHRyYWlsIHNvIHdlIG5lZWRcbiAgICAgICAgICAgIC8vIHRvIGNoZWNrIHRoYXQgb3V0XG4gICAgICAgICAgICBtYXRjaGVkU3BsYXQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCBhIG5vbi1zcGxhdCByb3V0ZSwgd2UgY2FuIHN0b3BcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwic3VjY2Vzc1wiLCBtYXRjaGVzOiBuZXdNYXRjaGVzIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBuZXdQYXJ0aWFsTWF0Y2hlcyA9IG1hdGNoUm91dGVzSW1wbDxBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdD4oXG4gICAgICAgIHJvdXRlc1RvVXNlLFxuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG5cbiAgICAgIC8vIElmIHdlIGFyZSBubyBsb25nZXIgcGFydGlhbGx5IG1hdGNoaW5nIGFueXRoaW5nLCB0aGlzIHdhcyBlaXRoZXIgYVxuICAgICAgLy8gbGVnaXQgc3BsYXQgbWF0Y2ggYWJvdmUsIG9yIGl0J3MgYSA0MDQuICBBbHNvIGF2b2lkIGxvb3BzIGlmIHRoZVxuICAgICAgLy8gc2Vjb25kIHBhc3MgcmVzdWx0cyBpbiB0aGUgc2FtZSBwYXJ0aWFsIG1hdGNoZXNcbiAgICAgIGlmIChcbiAgICAgICAgIW5ld1BhcnRpYWxNYXRjaGVzIHx8XG4gICAgICAgIHBhcnRpYWxNYXRjaGVzLm1hcCgobSkgPT4gbS5yb3V0ZS5pZCkuam9pbihcIi1cIikgPT09XG4gICAgICAgICAgbmV3UGFydGlhbE1hdGNoZXMubWFwKChtKSA9PiBtLnJvdXRlLmlkKS5qb2luKFwiLVwiKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwic3VjY2Vzc1wiLCBtYXRjaGVzOiBtYXRjaGVkU3BsYXQgPyBuZXdNYXRjaGVzIDogbnVsbCB9O1xuICAgICAgfVxuXG4gICAgICBwYXJ0aWFsTWF0Y2hlcyA9IG5ld1BhcnRpYWxNYXRjaGVzO1xuICAgICAgcm91dGUgPSBwYXJ0aWFsTWF0Y2hlc1twYXJ0aWFsTWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZTtcbiAgICAgIGlmIChyb3V0ZS5wYXRoID09PSBcIipcIikge1xuICAgICAgICAvLyBUaGUgc3BsYXQgaXMgc3RpbGwgb3VyIG1vc3QgYWNjdXJhdGUgcGFydGlhbCwgc28gcnVuIHdpdGggaXRcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJzdWNjZXNzXCIsIG1hdGNoZXM6IHBhcnRpYWxNYXRjaGVzIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlczogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSkge1xuICAgIG1hbmlmZXN0ID0ge307XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhcbiAgICAgIG5ld1JvdXRlcyxcbiAgICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIG1hbmlmZXN0XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoUm91dGVzKFxuICAgIHJvdXRlSWQ6IHN0cmluZyB8IG51bGwsXG4gICAgY2hpbGRyZW46IEFnbm9zdGljUm91dGVPYmplY3RbXVxuICApOiB2b2lkIHtcbiAgICBsZXQgaXNOb25ITVIgPSBpbkZsaWdodERhdGFSb3V0ZXMgPT0gbnVsbDtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBwYXRjaFJvdXRlc0ltcGwoXG4gICAgICByb3V0ZUlkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICByb3V0ZXNUb1VzZSxcbiAgICAgIG1hbmlmZXN0LFxuICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzXG4gICAgKTtcblxuICAgIC8vIElmIHdlIGFyZSBub3QgaW4gdGhlIG1pZGRsZSBvZiBhbiBITVIgcmV2YWxpZGF0aW9uIGFuZCB3ZSBjaGFuZ2VkIHRoZVxuICAgIC8vIHJvdXRlcywgcHJvdmlkZSBhIG5ldyBpZGVudGl0eSBhbmQgdHJpZ2dlciBhIHJlZmxvdyB2aWEgYHVwZGF0ZVN0YXRlYFxuICAgIC8vIHRvIHJlLXJ1biBtZW1vaXplZCBgcm91dGVyLnJvdXRlc2AgZGVwZW5kZW5jaWVzLlxuICAgIC8vIEhNUiB3aWxsIGFscmVhZHkgdXBkYXRlIHRoZSBpZGVudGl0eSBhbmQgcmVmbG93IHdoZW4gaXQgbGFuZHNcbiAgICAvLyBgaW5GbGlnaHREYXRhUm91dGVzYCBpbiBgY29tcGxldGVOYXZpZ2F0aW9uYFxuICAgIGlmIChpc05vbkhNUikge1xuICAgICAgZGF0YVJvdXRlcyA9IFsuLi5kYXRhUm91dGVzXTtcbiAgICAgIHVwZGF0ZVN0YXRlKHt9KTtcbiAgICB9XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6ICh0bzogVG8pID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogKHRvOiBUbykgPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBwYXRjaFJvdXRlcyxcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzLFxuICB9O1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVTdGF0aWNIYW5kbGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuXG4vKipcbiAqIEZ1dHVyZSBmbGFncyB0byB0b2dnbGUgbmV3IGZlYXR1cmUgYmVoYXZpb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnIHtcbiAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGJvb2xlYW47XG4gIHY3X3Rocm93QWJvcnRSZWFzb246IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU3RhdGljSGFuZGxlck9wdGlvbnMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgbWFwUm91dGVQcm9wZXJ0aWVzYCBpbnN0ZWFkXG4gICAqL1xuICBkZXRlY3RFcnJvckJvdW5kYXJ5PzogRGV0ZWN0RXJyb3JCb3VuZGFyeUZ1bmN0aW9uO1xuICBtYXBSb3V0ZVByb3BlcnRpZXM/OiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbjtcbiAgZnV0dXJlPzogUGFydGlhbDxTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIoXG4gIHJvdXRlczogQWdub3N0aWNSb3V0ZU9iamVjdFtdLFxuICBvcHRzPzogQ3JlYXRlU3RhdGljSGFuZGxlck9wdGlvbnNcbik6IFN0YXRpY0hhbmRsZXIge1xuICBpbnZhcmlhbnQoXG4gICAgcm91dGVzLmxlbmd0aCA+IDAsXG4gICAgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCJcbiAgKTtcblxuICBsZXQgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM6IE1hcFJvdXRlUHJvcGVydGllc0Z1bmN0aW9uO1xuICBpZiAob3B0cz8ubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cz8uZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IChyb3V0ZSkgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlOiBTdGF0aWNIYW5kbGVyRnV0dXJlQ29uZmlnID0ge1xuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N190aHJvd0Fib3J0UmVhc29uOiBmYWxzZSxcbiAgICAuLi4ob3B0cyA/IG9wdHMuZnV0dXJlIDogbnVsbCksXG4gIH07XG5cbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIG1hbmlmZXN0XG4gICk7XG5cbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICpcbiAgICogLSBgb3B0cy5yZXF1ZXN0Q29udGV4dGAgaXMgYW4gb3B0aW9uYWwgc2VydmVyIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZFxuICAgKiAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKiAtIGBvcHRzLnNraXBMb2FkZXJFcnJvckJ1YmJsaW5nYCBpcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCB3aWxsIHByZXZlbnRcbiAgICogICB0aGUgYnViYmxpbmcgb2YgZXJyb3JzIHdoaWNoIGFsbG93cyBzaW5nbGUtZmV0Y2gtdHlwZSBpbXBsZW1lbnRhdGlvbnNcbiAgICogICB3aGVyZSB0aGUgY2xpZW50IHdpbGwgaGFuZGxlIHRoZSBidWJibGluZyBhbmQgd2UgbWF5IG5lZWQgdG8gcmV0dXJuIGRhdGFcbiAgICogICBmb3IgdGhlIGhhbmRsaW5nIHJvdXRlXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIHtcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgc2tpcExvYWRlckVycm9yQnViYmxpbmcsXG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgfToge1xuICAgICAgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duO1xuICAgICAgc2tpcExvYWRlckVycm9yQnViYmxpbmc/OiBib29sZWFuO1xuICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5PzogRGF0YVN0cmF0ZWd5RnVuY3Rpb247XG4gICAgfSA9IHt9XG4gICk6IFByb21pc2U8U3RhdGljSGFuZGxlckNvbnRleHQgfCBSZXNwb25zZT4ge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuXG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwgeyBtZXRob2QgfSk7XG4gICAgICBsZXQgeyBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcywgcm91dGUgfSA9XG4gICAgICAgIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGwsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7IHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtcbiAgICAgIGxldCB7IG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcywgcm91dGUgfSA9XG4gICAgICAgIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yLFxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5IHx8IG51bGwsXG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZyA9PT0gdHJ1ZSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gV2hlbiByZXR1cm5pbmcgU3RhdGljSGFuZGxlckNvbnRleHQsIHdlIHBhdGNoIGJhY2sgaW4gdGhlIGxvY2F0aW9uIGhlcmVcbiAgICAvLyBzaW5jZSB3ZSBuZWVkIGl0IGZvciBSZWFjdCBDb250ZXh0LiAgQnV0IHRoaXMgaGVscHMga2VlcCBvdXIgc3VibWl0IGFuZFxuICAgIC8vIGxvYWRSb3V0ZURhdGEgb3BlcmF0aW5nIG9uIGEgUmVxdWVzdCBpbnN0ZWFkIG9mIGEgTG9jYXRpb25cbiAgICByZXR1cm4geyBsb2NhdGlvbiwgYmFzZW5hbWUsIC4uLnJlc3VsdCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICpcbiAgICogLSBgb3B0cy5yb3V0ZUlkYCBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhlIHNwZWNpZmljIHJvdXRlIGhhbmRsZXIgdG8gY2FsbC5cbiAgICogICBJZiBub3QgcHJvdmlkZWQgdGhlIGhhbmRsZXIgd2lsbCBkZXRlcm1pbmUgdGhlIHByb3BlciByb3V0ZSBieSBtYXRjaGluZ1xuICAgKiAgIGFnYWluc3QgYHJlcXVlc3QudXJsYFxuICAgKiAtIGBvcHRzLnJlcXVlc3RDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBzZXJ2ZXIgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAqICAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneSxcbiAgICB9OiB7XG4gICAgICByZXF1ZXN0Q29udGV4dD86IHVua25vd247XG4gICAgICByb3V0ZUlkPzogc3RyaW5nO1xuICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5PzogRGF0YVN0cmF0ZWd5RnVuY3Rpb247XG4gICAgfSA9IHt9XG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG5cbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIgJiYgbWV0aG9kICE9PSBcIk9QVElPTlNcIikge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHsgbWV0aG9kIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7IHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtcbiAgICB9XG5cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkXG4gICAgICA/IG1hdGNoZXMuZmluZCgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZClcbiAgICAgIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChcbiAgICAgIHJlcXVlc3QsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIG1hdGNoZXMsXG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBudWxsLFxuICAgICAgZmFsc2UsXG4gICAgICBtYXRjaFxuICAgICk7XG5cbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LmxvYWRlckRhdGEpIHtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAocmVzdWx0LmFjdGl2ZURlZmVycmVkcz8uW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlJbXBsKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICByZXF1ZXN0Q29udGV4dDogdW5rbm93bixcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IERhdGFTdHJhdGVneUZ1bmN0aW9uIHwgbnVsbCxcbiAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZzogYm9vbGVhbixcbiAgICByb3V0ZU1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoIHwgbnVsbFxuICApOiBQcm9taXNlPE9taXQ8U3RhdGljSGFuZGxlckNvbnRleHQsIFwibG9jYXRpb25cIiB8IFwiYmFzZW5hbWVcIj4gfCBSZXNwb25zZT4ge1xuICAgIGludmFyaWFudChcbiAgICAgIHJlcXVlc3Quc2lnbmFsLFxuICAgICAgXCJxdWVyeSgpL3F1ZXJ5Um91dGUoKSByZXF1ZXN0cyBtdXN0IGNvbnRhaW4gYW4gQWJvcnRDb250cm9sbGVyIHNpZ25hbFwiXG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICByb3V0ZU1hdGNoIHx8IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSxcbiAgICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgICAgICAgc2tpcExvYWRlckVycm9yQnViYmxpbmcsXG4gICAgICAgICAgcm91dGVNYXRjaCAhPSBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LFxuICAgICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZyxcbiAgICAgICAgcm91dGVNYXRjaFxuICAgICAgKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdClcbiAgICAgICAgPyByZXN1bHRcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiBmb3IgYVxuICAgICAgLy8gYHF1ZXJ5Um91dGVgIGNhbGwsIHdlIHRocm93IHRoZSBgSGFuZGxlclJlc3VsdGAgdG8gYmFpbCBvdXQgZWFybHlcbiAgICAgIC8vIGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyB0aGUgcmF3IFJlc3BvbnNlIGhlcmUgYWNjb3JkaW5nbHlcbiAgICAgIGlmIChpc0hhbmRsZXJSZXN1bHQoZSkgJiYgaXNSZXNwb25zZShlLnJlc3VsdCkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgYWN0aW9uTWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gICAgcmVxdWVzdENvbnRleHQ6IHVua25vd24sXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBEYXRhU3RyYXRlZ3lGdW5jdGlvbiB8IG51bGwsXG4gICAgc2tpcExvYWRlckVycm9yQnViYmxpbmc6IGJvb2xlYW4sXG4gICAgaXNSb3V0ZVJlcXVlc3Q6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxPbWl0PFN0YXRpY0hhbmRsZXJDb250ZXh0LCBcImxvY2F0aW9uXCIgfCBcImJhc2VuYW1lXCI+IHwgUmVzcG9uc2U+IHtcbiAgICBsZXQgcmVzdWx0OiBEYXRhUmVzdWx0O1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWQsXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3IsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXG4gICAgICAgIFwiYWN0aW9uXCIsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIFthY3Rpb25NYXRjaF0sXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5XG4gICAgICApO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1swXTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQucmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpISxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7IHR5cGU6IFwiZGVmZXItYWN0aW9uXCIgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHsgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGEgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcbiAgICB9KTtcblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBza2lwTG9hZGVyRXJyb3JCdWJibGluZ1xuICAgICAgICA/IGFjdGlvbk1hdGNoXG4gICAgICAgIDogZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG5cbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShcbiAgICAgICAgbG9hZGVyUmVxdWVzdCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneSxcbiAgICAgICAgc2tpcExvYWRlckVycm9yQnViYmxpbmcsXG4gICAgICAgIG51bGwsXG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkLCByZXN1bHRdXG4gICAgICApO1xuXG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNvbnRleHQsXG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcilcbiAgICAgICAgICA/IHJlc3VsdC5lcnJvci5zdGF0dXNcbiAgICAgICAgICA6IHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGxcbiAgICAgICAgICA/IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgICAgICAgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHtcbiAgICAgICAgICAuLi4ocmVzdWx0LmhlYWRlcnMgPyB7IFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzIH0gOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShcbiAgICAgIGxvYWRlclJlcXVlc3QsXG4gICAgICBtYXRjaGVzLFxuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZyxcbiAgICAgIG51bGxcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhLFxuICAgICAgfSxcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgLi4uKHJlc3VsdC5zdGF0dXNDb2RlID8geyBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzQ29kZSB9IDoge30pLFxuICAgICAgYWN0aW9uSGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgPyB7IFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzIH1cbiAgICAgICAgOiB7fSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICByZXF1ZXN0Q29udGV4dDogdW5rbm93bixcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IERhdGFTdHJhdGVneUZ1bmN0aW9uIHwgbnVsbCxcbiAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZzogYm9vbGVhbixcbiAgICByb3V0ZU1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoIHwgbnVsbCxcbiAgICBwZW5kaW5nQWN0aW9uUmVzdWx0PzogUGVuZGluZ0FjdGlvblJlc3VsdFxuICApOiBQcm9taXNlPFxuICAgIHwgT21pdDxcbiAgICAgICAgU3RhdGljSGFuZGxlckNvbnRleHQsXG4gICAgICAgIFwibG9jYXRpb25cIiB8IFwiYmFzZW5hbWVcIiB8IFwiYWN0aW9uRGF0YVwiIHwgXCJhY3Rpb25IZWFkZXJzXCJcbiAgICAgID5cbiAgICB8IFJlc3BvbnNlXG4gID4ge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnlSb3V0ZSgpKVxuICAgIGlmIChcbiAgICAgIGlzUm91dGVSZXF1ZXN0ICYmXG4gICAgICAhcm91dGVNYXRjaD8ucm91dGUubG9hZGVyICYmXG4gICAgICAhcm91dGVNYXRjaD8ucm91dGUubGF6eVxuICAgICkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZU1hdGNoPy5yb3V0ZS5pZCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2hcbiAgICAgID8gW3JvdXRlTWF0Y2hdXG4gICAgICA6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKVxuICAgICAgPyBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBwZW5kaW5nQWN0aW9uUmVzdWx0WzBdKVxuICAgICAgOiBtYXRjaGVzO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKFxuICAgICAgKG0pID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eVxuICAgICk7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICAvLyBBZGQgYSBudWxsIGZvciBhbGwgbWF0Y2hlZCByb3V0ZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgICAgICBsb2FkZXJEYXRhOiBtYXRjaGVzLnJlZHVjZShcbiAgICAgICAgICAoYWNjLCBtKSA9PiBPYmplY3QuYXNzaWduKGFjYywgeyBbbS5yb3V0ZS5pZF06IG51bGwgfSksXG4gICAgICAgICAge31cbiAgICAgICAgKSxcbiAgICAgICAgZXJyb3JzOlxuICAgICAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFxuICAgICAgXCJsb2FkZXJcIixcbiAgICAgIHJlcXVlc3QsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3lcbiAgICApO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwPHN0cmluZywgRGVmZXJyZWREYXRhPigpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShcbiAgICAgIG1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgcmVzdWx0cyxcbiAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQsXG4gICAgICBhY3RpdmVEZWZlcnJlZHMsXG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZ1xuICAgICk7XG5cbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldDxzdHJpbmc+KFxuICAgICAgbWF0Y2hlc1RvTG9hZC5tYXAoKG1hdGNoKSA9PiBtYXRjaC5yb3V0ZS5pZClcbiAgICApO1xuICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zaXplID4gMFxuICAgICAgICAgID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpXG4gICAgICAgICAgOiBudWxsLFxuICAgIH07XG4gIH1cblxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IHNlcnZlci1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3koXG4gICAgdHlwZTogXCJsb2FkZXJcIiB8IFwiYWN0aW9uXCIsXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBtYXRjaGVzVG9Mb2FkOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIGlzUm91dGVSZXF1ZXN0OiBib29sZWFuLFxuICAgIHJlcXVlc3RDb250ZXh0OiB1bmtub3duLFxuICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneTogRGF0YVN0cmF0ZWd5RnVuY3Rpb24gfCBudWxsXG4gICk6IFByb21pc2U8RGF0YVJlc3VsdFtdPiB7XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5SW1wbChcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBkZWZhdWx0RGF0YVN0cmF0ZWd5LFxuICAgICAgdHlwZSxcbiAgICAgIHJlcXVlc3QsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIG1hbmlmZXN0LFxuICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICApO1xuXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgcmVzdWx0cy5tYXAoKHJlc3VsdCwgaSkgPT4ge1xuICAgICAgICBpZiAoaXNSZWRpcmVjdEhhbmRsZXJSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICAgIGxldCByZXNwb25zZSA9IHJlc3VsdC5yZXN1bHQgYXMgUmVzcG9uc2U7XG4gICAgICAgICAgLy8gVGhyb3cgcmVkaXJlY3RzIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgdGhlbSB3aXRoIGFuIEhUVFAgcmVkaXJlY3RcbiAgICAgICAgICB0aHJvdyBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgbWF0Y2hlc1RvTG9hZFtpXS5yb3V0ZS5pZCxcbiAgICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgICAgIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0LnJlc3VsdCkgJiYgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgICAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrXG4gICAgICAgICAgLy8gZGlyZWN0bHkgd2l0aG91dCB1bndyYXBwaW5nXG4gICAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnZlcnRIYW5kbGVyUmVzdWx0VG9EYXRhUmVzdWx0KHJlc3VsdCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZSxcbiAgfTtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKFxuICByb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10sXG4gIGNvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICBlcnJvcjogYW55XG4pIHtcbiAgbGV0IG5ld0NvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0ID0ge1xuICAgIC4uLmNvbnRleHQsXG4gICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3IsXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgaXNSb3V0ZVJlcXVlc3Q6IGJvb2xlYW4sXG4gIGZ1dHVyZTogU3RhdGljSGFuZGxlckZ1dHVyZUNvbmZpZ1xuKSB7XG4gIGlmIChmdXR1cmUudjdfdGhyb3dBYm9ydFJlYXNvbiAmJiByZXF1ZXN0LnNpZ25hbC5yZWFzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IHJlcXVlc3Quc2lnbmFsLnJlYXNvbjtcbiAgfVxuXG4gIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICB0aHJvdyBuZXcgRXJyb3IoYCR7bWV0aG9kfSgpIGNhbGwgYWJvcnRlZDogJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybH1gKTtcbn1cblxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihcbiAgb3B0czogQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnNcbik6IG9wdHMgaXMgU3VibWlzc2lvbk5hdmlnYXRlT3B0aW9ucyB7XG4gIHJldHVybiAoXG4gICAgb3B0cyAhPSBudWxsICYmXG4gICAgKChcImZvcm1EYXRhXCIgaW4gb3B0cyAmJiBvcHRzLmZvcm1EYXRhICE9IG51bGwpIHx8XG4gICAgICAoXCJib2R5XCIgaW4gb3B0cyAmJiBvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKFxuICBsb2NhdGlvbjogUGF0aCxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBiYXNlbmFtZTogc3RyaW5nLFxuICBwcmVwZW5kQmFzZW5hbWU6IGJvb2xlYW4sXG4gIHRvOiBUbyB8IG51bGwsXG4gIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBib29sZWFuLFxuICBmcm9tUm91dGVJZD86IHN0cmluZyxcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlXG4pIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW107XG4gIGxldCBhY3RpdmVSb3V0ZU1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoIHwgdW5kZWZpbmVkO1xuICBpZiAoZnJvbVJvdXRlSWQpIHtcbiAgICAvLyBHcmFiIG1hdGNoZXMgdXAgdG8gdGhlIGNhbGxpbmcgcm91dGUgc28gb3VyIHJvdXRlLXJlbGF0aXZlIGxvZ2ljIGlzXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGNvcnJlY3Qgc291cmNlIHJvdXRlXG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb250ZXh0dWFsTWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCA9PT0gZnJvbVJvdXRlSWQpIHtcbiAgICAgICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cblxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKFxuICAgIHRvID8gdG8gOiBcIi5cIixcbiAgICBnZXRSZXNvbHZlVG9NYXRjaGVzKGNvbnRleHR1YWxNYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCksXG4gICAgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgIHJlbGF0aXZlID09PSBcInBhdGhcIlxuICApO1xuXG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cblxuICAvLyBBZGQgYW4gP2luZGV4IHBhcmFtIGZvciBtYXRjaGVkIGluZGV4IHJvdXRlcyBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgb25lXG4gIGlmIChcbiAgICAodG8gPT0gbnVsbCB8fCB0byA9PT0gXCJcIiB8fCB0byA9PT0gXCIuXCIpICYmXG4gICAgYWN0aXZlUm91dGVNYXRjaCAmJlxuICAgIGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiZcbiAgICAhaGFzTmFrZWRJbmRleFF1ZXJ5KHBhdGguc2VhcmNoKVxuICApIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoXG4gICAgICA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIilcbiAgICAgIDogXCI/aW5kZXhcIjtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoXG4gIG5vcm1hbGl6ZUZvcm1NZXRob2Q6IGJvb2xlYW4sXG4gIGlzRmV0Y2hlcjogYm9vbGVhbixcbiAgcGF0aDogc3RyaW5nLFxuICBvcHRzPzogQmFzZU5hdmlnYXRlT3JGZXRjaE9wdGlvbnNcbik6IHtcbiAgcGF0aDogc3RyaW5nO1xuICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgZXJyb3I/OiBFcnJvclJlc3BvbnNlSW1wbDtcbn0ge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHsgcGF0aCB9O1xuICB9XG5cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHsgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2QgfSksXG4gICAgfTtcbiAgfVxuXG4gIGxldCBnZXRJbnZhbGlkQm9keUVycm9yID0gKCkgPT4gKHtcbiAgICBwYXRoLFxuICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgeyB0eXBlOiBcImludmFsaWQtYm9keVwiIH0pLFxuICB9KTtcblxuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHJhd0Zvcm1NZXRob2QgPSBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIjtcbiAgbGV0IGZvcm1NZXRob2QgPSBub3JtYWxpemVGb3JtTWV0aG9kXG4gICAgPyAocmF3Rm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIGFzIFY3X0Zvcm1NZXRob2QpXG4gICAgOiAocmF3Rm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpIGFzIEZvcm1NZXRob2QpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpO1xuXG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHRleHQgPVxuICAgICAgICB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgPyBvcHRzLmJvZHlcbiAgICAgICAgICA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8XG4gICAgICAgICAgICBvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXNcbiAgICAgICAgICA/IC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICAgICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZShcbiAgICAgICAgICAgICAgKGFjYywgW25hbWUsIHZhbHVlXSkgPT4gYCR7YWNjfSR7bmFtZX09JHt2YWx1ZX1cXG5gLFxuICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBTdHJpbmcob3B0cy5ib2R5KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGpzb24gPVxuICAgICAgICAgIHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGludmFyaWFudChcbiAgICB0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIixcbiAgICBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiXG4gICk7XG5cbiAgbGV0IHNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zO1xuICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhO1xuXG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmZvcm1EYXRhO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuYm9keTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBvcHRzLmJvZHk7XG4gICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSA9PSBudWxsKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTpcbiAgICAgIChvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUpIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHsgcGF0aCwgc3VibWlzc2lvbiB9O1xuICB9XG5cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIC8vIE9uIEdFVCBuYXZpZ2F0aW9uIHN1Ym1pc3Npb25zIHdlIGNhbiBkcm9wIHRoZSA/aW5kZXggcGFyYW0gZnJvbSB0aGVcbiAgLy8gcmVzdWx0aW5nIGxvY2F0aW9uIHNpbmNlIGFsbCBsb2FkZXJzIHdpbGwgcnVuLiAgQnV0IGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zXG4gIC8vIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG4gIGlmIChpc0ZldGNoZXIgJiYgcGFyc2VkUGF0aC5zZWFyY2ggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHBhcnNlZFBhdGguc2VhcmNoKSkge1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgfVxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IGA/JHtzZWFyY2hQYXJhbXN9YDtcblxuICByZXR1cm4geyBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLCBzdWJtaXNzaW9uIH07XG59XG5cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGJvdW5kYXJ5SWQ6IHN0cmluZ1xuKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSBib3VuZGFyeUlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoXG4gIGhpc3Rvcnk6IEhpc3RvcnksXG4gIHN0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uIHwgdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogTG9jYXRpb24sXG4gIGlzSW5pdGlhbExvYWQ6IGJvb2xlYW4sXG4gIHNraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbjogYm9vbGVhbixcbiAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZDogYm9vbGVhbixcbiAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXM6IHN0cmluZ1tdLFxuICBjYW5jZWxsZWRGZXRjaGVyTG9hZHM6IHN0cmluZ1tdLFxuICBkZWxldGVkRmV0Y2hlcnM6IFNldDxzdHJpbmc+LFxuICBmZXRjaExvYWRNYXRjaGVzOiBNYXA8c3RyaW5nLCBGZXRjaExvYWRNYXRjaD4sXG4gIGZldGNoUmVkaXJlY3RJZHM6IFNldDxzdHJpbmc+LFxuICByb3V0ZXNUb1VzZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSxcbiAgYmFzZW5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgcGVuZGluZ0FjdGlvblJlc3VsdD86IFBlbmRpbmdBY3Rpb25SZXN1bHRcbik6IFtBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sIFJldmFsaWRhdGluZ0ZldGNoZXJbXV0ge1xuICBsZXQgYWN0aW9uUmVzdWx0ID0gcGVuZGluZ0FjdGlvblJlc3VsdFxuICAgID8gaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKVxuICAgICAgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yXG4gICAgICA6IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YVxuICAgIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG5cbiAgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cbiAgbGV0IGJvdW5kYXJ5SWQgPVxuICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKVxuICAgICAgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGJvdW5kYXJ5SWRcbiAgICA/IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpXG4gICAgOiBtYXRjaGVzO1xuXG4gIC8vIERvbid0IHJldmFsaWRhdGUgbG9hZGVycyBieSBkZWZhdWx0IGFmdGVyIGFjdGlvbiA0eHgvNXh4IHJlc3BvbnNlc1xuICAvLyB3aGVuIHRoZSBmbGFnIGlzIGVuYWJsZWQuICBUaGV5IGNhbiBzdGlsbCBvcHQtaW50byByZXZhbGlkYXRpb24gdmlhXG4gIC8vIGBzaG91bGRSZXZhbGlkYXRlYCB2aWEgYGFjdGlvblJlc3VsdGBcbiAgbGV0IGFjdGlvblN0YXR1cyA9IHBlbmRpbmdBY3Rpb25SZXN1bHRcbiAgICA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uc3RhdHVzQ29kZVxuICAgIDogdW5kZWZpbmVkO1xuICBsZXQgc2hvdWxkU2tpcFJldmFsaWRhdGlvbiA9XG4gICAgc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uICYmIGFjdGlvblN0YXR1cyAmJiBhY3Rpb25TdGF0dXMgPj0gNDAwO1xuXG4gIGxldCBuYXZpZ2F0aW9uTWF0Y2hlcyA9IGJvdW5kYXJ5TWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCB7IHJvdXRlIH0gPSBtYXRjaDtcbiAgICBpZiAocm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZS5sb2FkZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0luaXRpYWxMb2FkKSB7XG4gICAgICBpZiAodHlwZW9mIHJvdXRlLmxvYWRlciAhPT0gXCJmdW5jdGlvblwiIHx8IHJvdXRlLmxvYWRlci5oeWRyYXRlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgc3RhdGUubG9hZGVyRGF0YVtyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAvLyBEb24ndCByZS1ydW4gaWYgdGhlIGxvYWRlciByYW4gYW5kIHRocmV3IGFuIGVycm9yXG4gICAgICAgICghc3RhdGUuZXJyb3JzIHx8IHN0YXRlLmVycm9yc1tyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoXG4gICAgICBpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8XG4gICAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKChpZCkgPT4gaWQgPT09IG1hdGNoLnJvdXRlLmlkKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG5cbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwge1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgdW5zdGFibGVfYWN0aW9uU3RhdHVzOiBhY3Rpb25TdGF0dXMsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogc2hvdWxkU2tpcFJldmFsaWRhdGlvblxuICAgICAgICA/IGZhbHNlXG4gICAgICAgIDogLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICAgICAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHxcbiAgICAgICAgICBjdXJyZW50VXJsLnBhdGhuYW1lICsgY3VycmVudFVybC5zZWFyY2ggPT09XG4gICAgICAgICAgICBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgICAgIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaCB8fFxuICAgICAgICAgIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpLFxuICAgIH0pO1xuICB9KTtcblxuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyczogUmV2YWxpZGF0aW5nRmV0Y2hlcltdID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoZiwga2V5KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmV2YWxpZGF0ZTpcbiAgICAvLyAgLSBvbiBpbml0aWFsIGxvYWQgKHNob3VsZG4ndCBiZSBhbnkgZmV0Y2hlcnMgdGhlbiBhbnl3YXkpXG4gICAgLy8gIC0gaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIC8vICAgIC0gbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIFVSTCAodjdfZmV0Y2hlclBlcnNpc3Q9ZmFsc2UpXG4gICAgLy8gICAgLSB3YXMgdW5tb3VudGVkIGJ1dCBwZXJzaXN0ZWQgZHVlIHRvIHY3X2ZldGNoZXJQZXJzaXN0PXRydWVcbiAgICBpZiAoXG4gICAgICBpc0luaXRpYWxMb2FkIHx8XG4gICAgICAhbWF0Y2hlcy5zb21lKChtKSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpIHx8XG4gICAgICBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG5cbiAgICAvLyBJZiB0aGUgZmV0Y2hlciBwYXRoIG5vIGxvbmdlciBtYXRjaGVzLCBwdXNoIGl0IGluIHdpdGggbnVsbCBtYXRjaGVzIHNvXG4gICAgLy8gd2UgY2FuIHRyaWdnZXIgYSA0MDQgaW4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhLiAgTm90ZSB0aGlzIGlzXG4gICAgLy8gY3VycmVudGx5IG9ubHkgYSB1c2UtY2FzZSBmb3IgUmVtaXggSE1SIHdoZXJlIHRoZSByb3V0ZSB0cmVlIGNhbiBjaGFuZ2VcbiAgICAvLyBhdCBydW50aW1lIGFuZCByZW1vdmUgYSByb3V0ZSBwcmV2aW91c2x5IGxvYWRlZCB2aWEgYSBmZXRjaGVyXG4gICAgaWYgKCFmZXRjaGVyTWF0Y2hlcykge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IG51bGwsXG4gICAgICAgIG1hdGNoOiBudWxsLFxuICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgLy8gbG9hZCBmcm9tIGEgc3RhdGljIGhyZWYuICBUaGV5IHJldmFsaWRhdGUgYmFzZWQgb24gZXhwbGljaXQgcmV2YWxpZGF0aW9uXG4gICAgLy8gKHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGUpXG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG5cbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAvLyBBbHdheXMgcmV2YWxpZGF0ZSBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZmV0Y2hlciAmJlxuICAgICAgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiZcbiAgICAgIGZldGNoZXIuZGF0YSA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGUgZmV0Y2hlciBoYXNuJ3QgZXZlciBjb21wbGV0ZWQgbG9hZGluZyB5ZXQsIHRoZW4gdGhpcyBpc24ndCBhXG4gICAgICAvLyByZXZhbGlkYXRpb24sIGl0IHdvdWxkIGp1c3QgYmUgYSBicmFuZCBuZXcgbG9hZCBpZiBhbiBleHBsaWNpdFxuICAgICAgLy8gcmV2YWxpZGF0aW9uIGlzIHJlcXVpcmVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gaXNSZXZhbGlkYXRpb25SZXF1aXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhbnkgdXNlci1kZWZpbmVkIHNob3VsZFJldmFsaWRhdGUsIGRlZmF1bHRpbmdcbiAgICAgIC8vIHRvIGV4cGxpY2l0IHJldmFsaWRhdGlvbnMgb25seVxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHNob3VsZFJldmFsaWRhdGVMb2FkZXIoZmV0Y2hlck1hdGNoLCB7XG4gICAgICAgIGN1cnJlbnRVcmwsXG4gICAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIG5leHRVcmwsXG4gICAgICAgIG5leHRQYXJhbXM6IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIC4uLnN1Ym1pc3Npb24sXG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgdW5zdGFibGVfYWN0aW9uU3RhdHVzOiBhY3Rpb25TdGF0dXMsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBzaG91bGRTa2lwUmV2YWxpZGF0aW9uXG4gICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgIDogaXNSZXZhbGlkYXRpb25SZXF1aXJlZCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihcbiAgY3VycmVudExvYWRlckRhdGE6IFJvdXRlRGF0YSxcbiAgY3VycmVudE1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFxuKSB7XG4gIGxldCBpc05ldyA9XG4gICAgLy8gW2FdIC0+IFthLCBiXVxuICAgICFjdXJyZW50TWF0Y2ggfHxcbiAgICAvLyBbYSwgYl0gLT4gW2EsIGNdXG4gICAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDtcblxuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuXG4gIC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcbiAgcmV0dXJuIGlzTmV3IHx8IGlzTWlzc2luZ0RhdGE7XG59XG5cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShcbiAgY3VycmVudE1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFxuKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKFxuICAgIC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fFxuICAgIC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICAoY3VycmVudFBhdGggIT0gbnVsbCAmJlxuICAgICAgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmXG4gICAgICBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihcbiAgbG9hZGVyTWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gIGFyZzogU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uQXJnc1xuKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cblxuLyoqXG4gKiBJZGVtcG90ZW50IHV0aWxpdHkgdG8gZXhlY3V0ZSBwYXRjaFJvdXRlc09uTWlzcygpIHRvIGxhemlseSBsb2FkIHJvdXRlXG4gKiBkZWZpbml0aW9ucyBhbmQgdXBkYXRlIHRoZSByb3V0ZXMvcm91dGVNYW5pZmVzdFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlQ2hpbGRyZW4oXG4gIHBhdGNoUm91dGVzT25NaXNzSW1wbDogQWdub3N0aWNQYXRjaFJvdXRlc09uTWlzc0Z1bmN0aW9uLFxuICBwYXRoOiBzdHJpbmcsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcm91dGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdLFxuICBtYW5pZmVzdDogUm91dGVNYW5pZmVzdCxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbixcbiAgcGVuZGluZ1JvdXRlQ2hpbGRyZW46IE1hcDxzdHJpbmcsIFJldHVyblR5cGU8dHlwZW9mIHBhdGNoUm91dGVzT25NaXNzSW1wbD4+LFxuICBzaWduYWw6IEFib3J0U2lnbmFsXG4pIHtcbiAgbGV0IGtleSA9IFtwYXRoLCAuLi5tYXRjaGVzLm1hcCgobSkgPT4gbS5yb3V0ZS5pZCldLmpvaW4oXCItXCIpO1xuICB0cnkge1xuICAgIGxldCBwZW5kaW5nID0gcGVuZGluZ1JvdXRlQ2hpbGRyZW4uZ2V0KGtleSk7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gcGF0Y2hSb3V0ZXNPbk1pc3NJbXBsKHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgcGF0Y2g6IChyb3V0ZUlkLCBjaGlsZHJlbikgPT4ge1xuICAgICAgICAgIGlmICghc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHBhdGNoUm91dGVzSW1wbChcbiAgICAgICAgICAgICAgcm91dGVJZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgICAgICAgIG1hcFJvdXRlUHJvcGVydGllc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHBlbmRpbmdSb3V0ZUNoaWxkcmVuLnNldChrZXksIHBlbmRpbmcpO1xuICAgIH1cblxuICAgIGlmIChwZW5kaW5nICYmIGlzUHJvbWlzZTxBZ25vc3RpY1JvdXRlT2JqZWN0W10+KHBlbmRpbmcpKSB7XG4gICAgICBhd2FpdCBwZW5kaW5nO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBwZW5kaW5nUm91dGVDaGlsZHJlbi5kZWxldGUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaFJvdXRlc0ltcGwoXG4gIHJvdXRlSWQ6IHN0cmluZyB8IG51bGwsXG4gIGNoaWxkcmVuOiBBZ25vc3RpY1JvdXRlT2JqZWN0W10sXG4gIHJvdXRlc1RvVXNlOiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdLFxuICBtYW5pZmVzdDogUm91dGVNYW5pZmVzdCxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvblxuKSB7XG4gIGlmIChyb3V0ZUlkKSB7XG4gICAgbGV0IHJvdXRlID0gbWFuaWZlc3Rbcm91dGVJZF07XG4gICAgaW52YXJpYW50KFxuICAgICAgcm91dGUsXG4gICAgICBgTm8gcm91dGUgZm91bmQgdG8gcGF0Y2ggY2hpbGRyZW4gaW50bzogcm91dGVJZCA9ICR7cm91dGVJZH1gXG4gICAgKTtcbiAgICBsZXQgZGF0YUNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgW3JvdXRlSWQsIFwicGF0Y2hcIiwgU3RyaW5nKHJvdXRlLmNoaWxkcmVuPy5sZW5ndGggfHwgXCIwXCIpXSxcbiAgICAgIG1hbmlmZXN0XG4gICAgKTtcbiAgICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuLnB1c2goLi4uZGF0YUNoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBkYXRhQ2hpbGRyZW47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBkYXRhQ2hpbGRyZW4gPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgICBbXCJwYXRjaFwiLCBTdHJpbmcocm91dGVzVG9Vc2UubGVuZ3RoIHx8IFwiMFwiKV0sXG4gICAgICBtYW5pZmVzdFxuICAgICk7XG4gICAgcm91dGVzVG9Vc2UucHVzaCguLi5kYXRhQ2hpbGRyZW4pO1xuICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKFxuICByb3V0ZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3QsXG4gIG1hcFJvdXRlUHJvcGVydGllczogTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24sXG4gIG1hbmlmZXN0OiBSb3V0ZU1hbmlmZXN0XG4pIHtcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcblxuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHJvdXRlVG9VcGRhdGUgPSBtYW5pZmVzdFtyb3V0ZS5pZF07XG4gIGludmFyaWFudChyb3V0ZVRvVXBkYXRlLCBcIk5vIHJvdXRlIGZvdW5kIGluIG1hbmlmZXN0XCIpO1xuXG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPVxuICAgICAgcm91dGVUb1VwZGF0ZVtsYXp5Um91dGVQcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2Ygcm91dGVUb1VwZGF0ZV07XG5cbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID1cbiAgICAgIHN0YXRpY1JvdXRlVmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgICAgbGF6eVJvdXRlUHJvcGVydHkgIT09IFwiaGFzRXJyb3JCb3VuZGFyeVwiO1xuXG4gICAgd2FybmluZyhcbiAgICAgICFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsXG4gICAgICBgUm91dGUgXCIke3JvdXRlVG9VcGRhdGUuaWR9XCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFwiJHtsYXp5Um91dGVQcm9wZXJ0eX1cIiBgICtcbiAgICAgICAgYGRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIGAgK1xuICAgICAgICBgVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXCIke2xhenlSb3V0ZVByb3BlcnR5fVwiIHdpbGwgYmUgaWdub3JlZC5gXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgICFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiZcbiAgICAgICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5IGFzIEltbXV0YWJsZVJvdXRlS2V5KVxuICAgICkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9XG4gICAgICAgIGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eSBhcyBrZXlvZiB0eXBlb2YgbGF6eVJvdXRlXTtcbiAgICB9XG4gIH1cblxuICAvLyBNdXRhdGUgdGhlIHJvdXRlIHdpdGggdGhlIHByb3ZpZGVkIHVwZGF0ZXMuICBEbyB0aGlzIGZpcnN0IHNvIHdlIHBhc3NcbiAgLy8gdGhlIHVwZGF0ZWQgdmVyc2lvbiB0byBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCByb3V0ZVVwZGF0ZXMpO1xuXG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCB7XG4gICAgLy8gVG8ga2VlcCB0aGluZ3MgZnJhbWV3b3JrIGFnbm9zdGljLCB3ZSB1c2UgdGhlIHByb3ZpZGVkXG4gICAgLy8gYG1hcFJvdXRlUHJvcGVydGllc2AgKG9yIHdyYXBwZWQgYGRldGVjdEVycm9yQm91bmRhcnlgKSBmdW5jdGlvbiB0b1xuICAgIC8vIHNldCB0aGUgZnJhbWV3b3JrLWF3YXJlIHByb3BlcnRpZXMgKGBlbGVtZW50YC9gaGFzRXJyb3JCb3VuZGFyeWApIHNpbmNlXG4gICAgLy8gdGhlIGxvZ2ljIHdpbGwgZGlmZmVyIGJldHdlZW4gZnJhbWV3b3Jrcy5cbiAgICAuLi5tYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksXG4gICAgbGF6eTogdW5kZWZpbmVkLFxuICB9KTtcbn1cblxuLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgZGF0YVN0cmF0ZWd5YCB3aGljaCBmZXRjaGVzIGFsbCBsb2FkZXJzIGluIHBhcmFsbGVsXG5mdW5jdGlvbiBkZWZhdWx0RGF0YVN0cmF0ZWd5KFxuICBvcHRzOiBEYXRhU3RyYXRlZ3lGdW5jdGlvbkFyZ3Ncbik6IFJldHVyblR5cGU8RGF0YVN0cmF0ZWd5RnVuY3Rpb24+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKG9wdHMubWF0Y2hlcy5tYXAoKG0pID0+IG0ucmVzb2x2ZSgpKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3lJbXBsKFxuICBkYXRhU3RyYXRlZ3lJbXBsOiBEYXRhU3RyYXRlZ3lGdW5jdGlvbixcbiAgdHlwZTogXCJsb2FkZXJcIiB8IFwiYWN0aW9uXCIsXG4gIHJlcXVlc3Q6IFJlcXVlc3QsXG4gIG1hdGNoZXNUb0xvYWQ6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBtYW5pZmVzdDogUm91dGVNYW5pZmVzdCxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzOiBNYXBSb3V0ZVByb3BlcnRpZXNGdW5jdGlvbixcbiAgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duXG4pOiBQcm9taXNlPEhhbmRsZXJSZXN1bHRbXT4ge1xuICBsZXQgcm91dGVJZHNUb0xvYWQgPSBtYXRjaGVzVG9Mb2FkLnJlZHVjZShcbiAgICAoYWNjLCBtKSA9PiBhY2MuYWRkKG0ucm91dGUuaWQpLFxuICAgIG5ldyBTZXQ8c3RyaW5nPigpXG4gICk7XG4gIGxldCBsb2FkZWRNYXRjaGVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgLy8gU2VuZCBhbGwgbWF0Y2hlcyBoZXJlIHRvIGFsbG93IGZvciBhIG1pZGRsZXdhcmUtdHlwZSBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gaGFuZGxlciB3aWxsIGJlIGEgbm8tb3AgZm9yIHVubmVlZGVkIHJvdXRlcyBhbmQgd2UgZmlsdGVyIHRob3NlIHJlc3VsdHNcbiAgLy8gYmFjayBvdXQgYmVsb3cuXG4gIGxldCByZXN1bHRzID0gYXdhaXQgZGF0YVN0cmF0ZWd5SW1wbCh7XG4gICAgbWF0Y2hlczogbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PiB7XG4gICAgICBsZXQgc2hvdWxkTG9hZCA9IHJvdXRlSWRzVG9Mb2FkLmhhcyhtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAvLyBgcmVzb2x2ZWAgZW5jYXBzdWxhdGVzIHRoZSByb3V0ZS5sYXp5LCBleGVjdXRpbmcgdGhlXG4gICAgICAvLyBsb2FkZXIvYWN0aW9uLCBhbmQgbWFwcGluZyByZXR1cm4gdmFsdWVzL3Rocm93biBlcnJvcnMgdG8gYVxuICAgICAgLy8gSGFuZGxlclJlc3VsdC4gIFVzZXJzIGNhbiBwYXNzIGEgY2FsbGJhY2sgdG8gdGFrZSBmaW5lLWdyYWluZWQgY29udHJvbFxuICAgICAgLy8gb3ZlciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsb2FkZXIvYWN0aW9uXG4gICAgICBsZXQgcmVzb2x2ZTogRGF0YVN0cmF0ZWd5TWF0Y2hbXCJyZXNvbHZlXCJdID0gKGhhbmRsZXJPdmVycmlkZSkgPT4ge1xuICAgICAgICBsb2FkZWRNYXRjaGVzLmFkZChtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAgIHJldHVybiBzaG91bGRMb2FkXG4gICAgICAgICAgPyBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgICBtYW5pZmVzdCxcbiAgICAgICAgICAgICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICBoYW5kbGVyT3ZlcnJpZGUsXG4gICAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoeyB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsIHJlc3VsdDogdW5kZWZpbmVkIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ubWF0Y2gsXG4gICAgICAgIHNob3VsZExvYWQsXG4gICAgICAgIHJlc29sdmUsXG4gICAgICB9O1xuICAgIH0pLFxuICAgIHJlcXVlc3QsXG4gICAgcGFyYW1zOiBtYXRjaGVzWzBdLnBhcmFtcyxcbiAgICBjb250ZXh0OiByZXF1ZXN0Q29udGV4dCxcbiAgfSk7XG5cbiAgLy8gVGhyb3cgaWYgYW55IGxvYWRSb3V0ZSBpbXBsZW1lbnRhdGlvbnMgbm90IGNhbGxlZCBzaW5jZSB0aGV5IGFyZSB3aGF0XG4gIC8vIGVuc3VyZXMgYSByb3V0ZSBpcyBmdWxseSBsb2FkZWRcbiAgbWF0Y2hlcy5mb3JFYWNoKChtKSA9PlxuICAgIGludmFyaWFudChcbiAgICAgIGxvYWRlZE1hdGNoZXMuaGFzKG0ucm91dGUuaWQpLFxuICAgICAgYFxcYG1hdGNoLnJlc29sdmUoKVxcYCB3YXMgbm90IGNhbGxlZCBmb3Igcm91dGUgaWQgXCIke20ucm91dGUuaWR9XCIuIGAgK1xuICAgICAgICBcIllvdSBtdXN0IGNhbGwgYG1hdGNoLnJlc29sdmUoKWAgb24gZXZlcnkgbWF0Y2ggcGFzc2VkIHRvIFwiICtcbiAgICAgICAgXCJgZGF0YVN0cmF0ZWd5YCB0byBlbnN1cmUgYWxsIHJvdXRlcyBhcmUgcHJvcGVybHkgbG9hZGVkLlwiXG4gICAgKVxuICApO1xuXG4gIC8vIEZpbHRlciBvdXQgYW55IG1pZGRsZXdhcmUtb25seSBtYXRjaGVzIGZvciB3aGljaCB3ZSBkaWRuJ3QgbmVlZCB0byBydW4gaGFuZGxlcnNcbiAgcmV0dXJuIHJlc3VsdHMuZmlsdGVyKChfLCBpKSA9PiByb3V0ZUlkc1RvTG9hZC5oYXMobWF0Y2hlc1tpXS5yb3V0ZS5pZCkpO1xufVxuXG4vLyBEZWZhdWx0IGxvZ2ljIGZvciBjYWxsaW5nIGEgbG9hZGVyL2FjdGlvbiBpcyB0aGUgdXNlciBoYXMgbm8gc3BlY2lmaWVkIGEgZGF0YVN0cmF0ZWd5XG5hc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gIHR5cGU6IFwibG9hZGVyXCIgfCBcImFjdGlvblwiLFxuICByZXF1ZXN0OiBSZXF1ZXN0LFxuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbWFuaWZlc3Q6IFJvdXRlTWFuaWZlc3QsXG4gIG1hcFJvdXRlUHJvcGVydGllczogTWFwUm91dGVQcm9wZXJ0aWVzRnVuY3Rpb24sXG4gIGhhbmRsZXJPdmVycmlkZTogUGFyYW1ldGVyczxEYXRhU3RyYXRlZ3lNYXRjaFtcInJlc29sdmVcIl0+WzBdLFxuICBzdGF0aWNDb250ZXh0PzogdW5rbm93blxuKTogUHJvbWlzZTxIYW5kbGVyUmVzdWx0PiB7XG4gIGxldCByZXN1bHQ6IEhhbmRsZXJSZXN1bHQ7XG4gIGxldCBvblJlamVjdDogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuXG4gIGxldCBydW5IYW5kbGVyID0gKFxuICAgIGhhbmRsZXI6IEFnbm9zdGljUm91dGVPYmplY3RbXCJsb2FkZXJcIl0gfCBBZ25vc3RpY1JvdXRlT2JqZWN0W1wiYWN0aW9uXCJdXG4gICk6IFByb21pc2U8SGFuZGxlclJlc3VsdD4gPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDogKCkgPT4gdm9pZDtcbiAgICAvLyBUaGlzIHdpbGwgbmV2ZXIgcmVzb2x2ZSBzbyBzYWZlIHRvIHR5cGUgaXQgYXMgUHJvbWlzZTxIYW5kbGVyUmVzdWx0PiB0b1xuICAgIC8vIHNhdGlzZnkgdGhlIGZ1bmN0aW9uIHJldHVybiB2YWx1ZVxuICAgIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZTxIYW5kbGVyUmVzdWx0PigoXywgcikgPT4gKHJlamVjdCA9IHIpKTtcbiAgICBvblJlamVjdCA9ICgpID0+IHJlamVjdCgpO1xuICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG5cbiAgICBsZXQgYWN0dWFsSGFuZGxlciA9IChjdHg/OiB1bmtub3duKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFlvdSBjYW5ub3QgY2FsbCB0aGUgaGFuZGxlciBmb3IgYSByb3V0ZSB3aGljaCBkZWZpbmVzIGEgYm9vbGVhbiBgICtcbiAgICAgICAgICAgICAgYFwiJHt0eXBlfVwiIFtyb3V0ZUlkOiAke21hdGNoLnJvdXRlLmlkfV1gXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZXIoXG4gICAgICAgIHtcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgICAgIGNvbnRleHQ6IHN0YXRpY0NvbnRleHQsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLihjdHggIT09IHVuZGVmaW5lZCA/IFtjdHhdIDogW10pXG4gICAgICApO1xuICAgIH07XG5cbiAgICBsZXQgaGFuZGxlclByb21pc2U6IFByb21pc2U8SGFuZGxlclJlc3VsdD47XG4gICAgaWYgKGhhbmRsZXJPdmVycmlkZSkge1xuICAgICAgaGFuZGxlclByb21pc2UgPSBoYW5kbGVyT3ZlcnJpZGUoKGN0eDogdW5rbm93bikgPT4gYWN0dWFsSGFuZGxlcihjdHgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlclByb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCB2YWwgPSBhd2FpdCBhY3R1YWxIYW5kbGVyKCk7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkYXRhXCIsIHJlc3VsdDogdmFsIH07XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4geyB0eXBlOiBcImVycm9yXCIsIHJlc3VsdDogZSB9O1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXJQcm9taXNlLCBhYm9ydFByb21pc2VdKTtcbiAgfTtcblxuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG5cbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCBbdmFsdWVdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgICAgLy8gc2luY2Ugd2UgbmVlZCB0byBsZXQgdGhlIGxhenkoKSBleGVjdXRpb24gZmluaXNoIHNvIHdlIGtub3cgaWYgdGhpc1xuICAgICAgICAgIC8vIHJvdXRlIGhhcyBhIGJvdW5kYXJ5IHRoYXQgY2FuIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyRXJyb3IgPSBlO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpLFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlITtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvYWQgbGF6eSByb3V0ZSBtb2R1bGUsIHRoZW4gcnVuIGFueSByZXR1cm5lZCBoYW5kbGVyXG4gICAgICAgIGF3YWl0IGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpO1xuXG4gICAgICAgIGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAvLyBIYW5kbGVyIHN0aWxsIHJ1bnMgZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5kYXRhLCByZXN1bHQ6IHVuZGVmaW5lZCB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaGFuZGxlcikge1xuICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgcmVzdWx0LnJlc3VsdCAhPT0gdW5kZWZpbmVkLFxuICAgICAgYFlvdSBkZWZpbmVkICR7dHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCJ9IGZvciByb3V0ZSBgICtcbiAgICAgICAgYFwiJHttYXRjaC5yb3V0ZS5pZH1cIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgXFxgJHt0eXBlfVxcYCBgICtcbiAgICAgICAgYGZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgXFxgbnVsbFxcYC5gXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFdlIHNob3VsZCBhbHJlYWR5IGJlIGNhdGNoaW5nIGFuZCBjb252ZXJ0aW5nIG5vcm1hbCBoYW5kbGVyIGV4ZWN1dGlvbnMgdG9cbiAgICAvLyBIYW5kbGVyUmVzdWx0cyBhbmQgcmV0dXJuaW5nIHRoZW0sIHNvIGFueXRoaW5nIHRoYXQgdGhyb3dzIGhlcmUgaXMgYW5cbiAgICAvLyB1bmV4cGVjdGVkIGVycm9yIHdlIHN0aWxsIG5lZWQgdG8gd3JhcFxuICAgIHJldHVybiB7IHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsIHJlc3VsdDogZSB9O1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdChcbiAgaGFuZGxlclJlc3VsdDogSGFuZGxlclJlc3VsdFxuKTogUHJvbWlzZTxEYXRhUmVzdWx0PiB7XG4gIGxldCB7IHJlc3VsdCwgdHlwZSwgc3RhdHVzIH0gPSBoYW5kbGVyUmVzdWx0O1xuXG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgZGF0YTogYW55O1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5ID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5lcnJvciwgZXJyb3I6IGUgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlSW1wbChyZXN1bHQuc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVycyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgIGVycm9yOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0LnN0YXR1cyA6IHN0YXR1cyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGlzRGVmZXJyZWREYXRhKHJlc3VsdCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LmluaXQ/LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5pbml0Py5oZWFkZXJzICYmIG5ldyBIZWFkZXJzKHJlc3VsdC5pbml0LmhlYWRlcnMpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsIGRhdGE6IHJlc3VsdCwgc3RhdHVzQ29kZTogc3RhdHVzIH07XG59XG5cbi8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UoXG4gIHJlc3BvbnNlOiBSZXNwb25zZSxcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgcm91dGVJZDogc3RyaW5nLFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGJhc2VuYW1lOiBzdHJpbmcsXG4gIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBib29sZWFuXG4pIHtcbiAgbGV0IGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgaW52YXJpYW50KFxuICAgIGxvY2F0aW9uLFxuICAgIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIlxuICApO1xuXG4gIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgbGV0IHRyaW1tZWRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZShcbiAgICAgIDAsXG4gICAgICBtYXRjaGVzLmZpbmRJbmRleCgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxXG4gICAgKTtcbiAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKFxuICAgICAgbmV3IFVSTChyZXF1ZXN0LnVybCksXG4gICAgICB0cmltbWVkTWF0Y2hlcyxcbiAgICAgIGJhc2VuYW1lLFxuICAgICAgdHJ1ZSxcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICApO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgbG9jYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKFxuICBsb2NhdGlvbjogc3RyaW5nLFxuICBjdXJyZW50VXJsOiBVUkwsXG4gIGJhc2VuYW1lOiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlIHJlZGlyZWN0c1xuICAgIGxldCBub3JtYWxpemVkTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICBsZXQgdXJsID0gbm9ybWFsaXplZExvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKVxuICAgICAgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBub3JtYWxpemVkTG9jYXRpb24pXG4gICAgICA6IG5ldyBVUkwobm9ybWFsaXplZExvY2F0aW9uKTtcbiAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgaWYgKHVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIGlzU2FtZUJhc2VuYW1lKSB7XG4gICAgICByZXR1cm4gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbG9jYXRpb247XG59XG5cbi8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgaGlzdG9yeTogSGlzdG9yeSxcbiAgbG9jYXRpb246IHN0cmluZyB8IExvY2F0aW9uLFxuICBzaWduYWw6IEFib3J0U2lnbmFsLFxuICBzdWJtaXNzaW9uPzogU3VibWlzc2lvblxuKTogUmVxdWVzdCB7XG4gIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0OiBSZXF1ZXN0SW5pdCA9IHsgc2lnbmFsIH07XG5cbiAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgbGV0IHsgZm9ybU1ldGhvZCwgZm9ybUVuY1R5cGUgfSA9IHN1Ym1pc3Npb247XG4gICAgLy8gRGlkbid0IHRoaW5rIHdlIG5lZWRlZCB0aGlzIGJ1dCBpdCB0dXJucyBvdXQgdW5saWtlIG90aGVyIG1ldGhvZHMsIHBhdGNoXG4gICAgLy8gd29uJ3QgYmUgcHJvcGVybHkgbm9ybWFsaXplZCB0byB1cHBlcmNhc2UgYW5kIHJlc3VsdHMgaW4gYSA0MDUgZXJyb3IuXG4gICAgLy8gU2VlOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tZXRob2RcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcblxuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHsgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGUgfSk7XG4gICAgICBpbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShzdWJtaXNzaW9uLmpzb24pO1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24udGV4dDtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgJiZcbiAgICAgIHN1Ym1pc3Npb24uZm9ybURhdGFcbiAgICApIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoc3VibWlzc2lvbi5mb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi5mb3JtRGF0YTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbn1cblxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGE6IEZvcm1EYXRhKTogVVJMU2VhcmNoUGFyYW1zIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcblxuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjY29udmVydGluZy1hbi1lbnRyeS1saXN0LXRvLWEtbGlzdC1vZi1uYW1lLXZhbHVlLXBhaXJzXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogdmFsdWUubmFtZSk7XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShcbiAgc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNcbik6IEZvcm1EYXRhIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBtYXRjaGVzVG9Mb2FkOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIHJlc3VsdHM6IERhdGFSZXN1bHRbXSxcbiAgcGVuZGluZ0FjdGlvblJlc3VsdDogUGVuZGluZ0FjdGlvblJlc3VsdCB8IHVuZGVmaW5lZCxcbiAgYWN0aXZlRGVmZXJyZWRzOiBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+LFxuICBza2lwTG9hZGVyRXJyb3JCdWJibGluZzogYm9vbGVhblxuKToge1xuICBsb2FkZXJEYXRhOiBSb3V0ZXJTdGF0ZVtcImxvYWRlckRhdGFcIl07XG4gIGVycm9yczogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl0gfCBudWxsO1xuICBzdGF0dXNDb2RlOiBudW1iZXI7XG4gIGxvYWRlckhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIEhlYWRlcnM+O1xufSB7XG4gIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVyc1xuICBsZXQgbG9hZGVyRGF0YTogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdID0ge307XG4gIGxldCBlcnJvcnM6IFJvdXRlclN0YXRlW1wiZXJyb3JzXCJdIHwgbnVsbCA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIGxldCBmb3VuZEVycm9yID0gZmFsc2U7XG4gIGxldCBsb2FkZXJIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBIZWFkZXJzPiA9IHt9O1xuICBsZXQgcGVuZGluZ0Vycm9yID1cbiAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSlcbiAgICAgID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvclxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudChcbiAgICAgICFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksXG4gICAgICBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiXG4gICAgKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlcnJvciA9IHBlbmRpbmdFcnJvcjtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG5cbiAgICAgIGlmIChza2lwTG9hZGVyRXJyb3JCdWJibGluZykge1xuICAgICAgICBlcnJvcnNbaWRdID0gZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3JcbiAgICAgICAgLy8gYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2guICBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlc1xuICAgICAgICAvLyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICAgIGlmIChlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcblxuICAgICAgLy8gT25jZSB3ZSBmaW5kIG91ciBmaXJzdCAoaGlnaGVzdCkgZXJyb3IsIHdlIHNldCB0aGUgc3RhdHVzIGNvZGUgYW5kXG4gICAgICAvLyBwcmV2ZW50IGRlZXBlciBzdGF0dXMgY29kZXMgZnJvbSBvdmVycmlkaW5nXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpXG4gICAgICAgICAgPyByZXN1bHQuZXJyb3Iuc3RhdHVzXG4gICAgICAgICAgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJlxuICAgICAgICAgIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiZcbiAgICAgICAgICAhZm91bmRFcnJvclxuICAgICAgICApIHtcbiAgICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuXG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGVcbiAgLy8gdGhyb3dpbmcgcm91dGVcbiAgaWYgKHBlbmRpbmdFcnJvciAhPT0gdW5kZWZpbmVkICYmIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICBlcnJvcnMgPSB7IFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0Vycm9yIH07XG4gICAgbG9hZGVyRGF0YVtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVycyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0xvYWRlckRhdGEoXG4gIHN0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBtYXRjaGVzVG9Mb2FkOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIHJlc3VsdHM6IERhdGFSZXN1bHRbXSxcbiAgcGVuZGluZ0FjdGlvblJlc3VsdDogUGVuZGluZ0FjdGlvblJlc3VsdCB8IHVuZGVmaW5lZCxcbiAgcmV2YWxpZGF0aW5nRmV0Y2hlcnM6IFJldmFsaWRhdGluZ0ZldGNoZXJbXSxcbiAgZmV0Y2hlclJlc3VsdHM6IERhdGFSZXN1bHRbXSxcbiAgYWN0aXZlRGVmZXJyZWRzOiBNYXA8c3RyaW5nLCBEZWZlcnJlZERhdGE+XG4pOiB7XG4gIGxvYWRlckRhdGE6IFJvdXRlclN0YXRlW1wibG9hZGVyRGF0YVwiXTtcbiAgZXJyb3JzPzogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl07XG59IHtcbiAgbGV0IHsgbG9hZGVyRGF0YSwgZXJyb3JzIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKFxuICAgIG1hdGNoZXMsXG4gICAgbWF0Y2hlc1RvTG9hZCxcbiAgICByZXN1bHRzLFxuICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQsXG4gICAgYWN0aXZlRGVmZXJyZWRzLFxuICAgIGZhbHNlIC8vIFRoaXMgbWV0aG9kIGlzIG9ubHkgY2FsbGVkIGNsaWVudCBzaWRlIHNvIHdlIGFsd2F5cyB3YW50IHRvIGJ1YmJsZVxuICApO1xuXG4gIC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7IGtleSwgbWF0Y2gsIGNvbnRyb2xsZXIgfSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLFxuICAgICAgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiXG4gICAgKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdO1xuXG4gICAgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcbiAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciBhYm9ydGVkIGZldGNoZXJzXG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIG1hdGNoPy5yb3V0ZS5pZCk7XG4gICAgICBpZiAoIShlcnJvcnMgJiYgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdKSkge1xuICAgICAgICBlcnJvcnMgPSB7XG4gICAgICAgICAgLi4uZXJyb3JzLFxuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgcmV2YWxpZGF0aW9uIHJlZGlyZWN0XCIpO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzXG4gICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGxvYWRlckRhdGEsIGVycm9ycyB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEoXG4gIGxvYWRlckRhdGE6IFJvdXRlRGF0YSxcbiAgbmV3TG9hZGVyRGF0YTogUm91dGVEYXRhLFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGVycm9yczogUm91dGVEYXRhIHwgbnVsbCB8IHVuZGVmaW5lZFxuKTogUm91dGVEYXRhIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSB7IC4uLm5ld0xvYWRlckRhdGEgfTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vLW9wIC0gdGhpcyBpcyBzbyB3ZSBpZ25vcmUgZXhpc3RpbmcgZGF0YSBpZiB3ZSBoYXZlIGEga2V5IGluIHRoZVxuICAgICAgICAvLyBpbmNvbWluZyBvYmplY3Qgd2l0aCBhbiB1bmRlZmluZWQgdmFsdWUsIHdoaWNoIGlzIGhvdyB3ZSB1bnNldCBhIHByaW9yXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaWYgd2UgZW5jb3VudGVyIGEgbG9hZGVyIGVycm9yXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoLnJvdXRlLmxvYWRlcikge1xuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcga2V5cyBub3QgaW5jbHVkZWQgaW4gbmV3TG9hZGVyRGF0YSBhbmQgd2hlcmUgYSBsb2FkZXJcbiAgICAgIC8vIHdhc24ndCByZW1vdmVkIGJ5IEhNUlxuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KFxuICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBQZW5kaW5nQWN0aW9uUmVzdWx0IHwgdW5kZWZpbmVkXG4pIHtcbiAgaWYgKCFwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pXG4gICAgPyB7XG4gICAgICAgIC8vIENsZWFyIG91dCBwcmlvciBhY3Rpb25EYXRhIG9uIGVycm9yc1xuICAgICAgICBhY3Rpb25EYXRhOiB7fSxcbiAgICAgIH1cbiAgICA6IHtcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhLFxuICAgICAgICB9LFxuICAgICAgfTtcbn1cblxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkoXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcm91dGVJZD86IHN0cmluZ1xuKTogQWdub3N0aWNEYXRhUm91dGVNYXRjaCB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkXG4gICAgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpXG4gICAgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiAoXG4gICAgZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKChtKSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8XG4gICAgbWF0Y2hlc1swXVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlczogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSk6IHtcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdO1xuICByb3V0ZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3Q7XG59IHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID1cbiAgICByb3V0ZXMubGVuZ3RoID09PSAxXG4gICAgICA/IHJvdXRlc1swXVxuICAgICAgOiByb3V0ZXMuZmluZCgocikgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICAgICAgICBpZDogYF9fc2hpbS1lcnJvci1yb3V0ZV9fYCxcbiAgICAgICAgfTtcblxuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFtcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgICAgcm91dGUsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcm91dGUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3IoXG4gIHN0YXR1czogbnVtYmVyLFxuICB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZSxcbiAgICBtZXNzYWdlLFxuICB9OiB7XG4gICAgcGF0aG5hbWU/OiBzdHJpbmc7XG4gICAgcm91dGVJZD86IHN0cmluZztcbiAgICBtZXRob2Q/OiBzdHJpbmc7XG4gICAgdHlwZT86IFwiZGVmZXItYWN0aW9uXCIgfCBcImludmFsaWQtYm9keVwiIHwgXCJyb3V0ZS1kaXNjb3ZlcnlcIjtcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICB9ID0ge31cbikge1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuXG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG4gICAgaWYgKHR5cGUgPT09IFwicm91dGUtZGlzY292ZXJ5XCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGBVbmFibGUgdG8gbWF0Y2ggVVJMIFwiJHtwYXRobmFtZX1cIiAtIHRoZSBcXGBjaGlsZHJlbigpXFxgIGZ1bmN0aW9uIGZvciBgICtcbiAgICAgICAgYHJvdXRlIFxcYCR7cm91dGVJZH1cXGAgdGhyZXcgdGhlIGZvbGxvd2luZyBlcnJvcjpcXG4ke21lc3NhZ2V9YDtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBgWW91IG1hZGUgYSAke21ldGhvZH0gcmVxdWVzdCB0byBcIiR7cGF0aG5hbWV9XCIgYnV0IGAgK1xuICAgICAgICBgZGlkIG5vdCBwcm92aWRlIGEgXFxgbG9hZGVyXFxgIGZvciByb3V0ZSBcIiR7cm91dGVJZH1cIiwgYCArXG4gICAgICAgIGBzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LmA7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImludmFsaWQtYm9keVwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlbmNvZGUgc3VibWlzc2lvbiBib2R5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gYFJvdXRlIFwiJHtyb3V0ZUlkfVwiIGRvZXMgbm90IG1hdGNoIFVSTCBcIiR7cGF0aG5hbWV9XCJgO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gYE5vIHJvdXRlIG1hdGNoZXMgVVJMIFwiJHtwYXRobmFtZX1cImA7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGBZb3UgbWFkZSBhICR7bWV0aG9kLnRvVXBwZXJDYXNlKCl9IHJlcXVlc3QgdG8gXCIke3BhdGhuYW1lfVwiIGJ1dCBgICtcbiAgICAgICAgYGRpZCBub3QgcHJvdmlkZSBhbiBcXGBhY3Rpb25cXGAgZm9yIHJvdXRlIFwiJHtyb3V0ZUlkfVwiLCBgICtcbiAgICAgICAgYHNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuYDtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gYEludmFsaWQgcmVxdWVzdCBtZXRob2QgXCIke21ldGhvZC50b1VwcGVyQ2FzZSgpfVwiYDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2VJbXBsKFxuICAgIHN0YXR1cyB8fCA1MDAsXG4gICAgc3RhdHVzVGV4dCxcbiAgICBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSxcbiAgICB0cnVlXG4gICk7XG59XG5cbi8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5mdW5jdGlvbiBmaW5kUmVkaXJlY3QoXG4gIHJlc3VsdHM6IERhdGFSZXN1bHRbXVxuKTogeyByZXN1bHQ6IFJlZGlyZWN0UmVzdWx0OyBpZHg6IG51bWJlciB9IHwgdW5kZWZpbmVkIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4geyByZXN1bHQsIGlkeDogaSB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoOiBUbykge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoeyAuLi5wYXJzZWRQYXRoLCBoYXNoOiBcIlwiIH0pO1xufVxuXG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGE6IExvY2F0aW9uLCBiOiBMb2NhdGlvbik6IGJvb2xlYW4ge1xuICBpZiAoYS5wYXRobmFtZSAhPT0gYi5wYXRobmFtZSB8fCBhLnNlYXJjaCAhPT0gYi5zZWFyY2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiB0aGUgaGFzaCBpcyByZW1vdmVkIHRoZSBicm93c2VyIHdpbGwgcmUtcGVyZm9ybSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlclxuICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlPFQgPSB1bmtub3duPih2YWw6IHVua25vd24pOiB2YWwgaXMgUHJvbWlzZTxUPiB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPSBudWxsICYmIFwidGhlblwiIGluIHZhbDtcbn1cblxuZnVuY3Rpb24gaXNIYW5kbGVyUmVzdWx0KHJlc3VsdDogdW5rbm93bik6IHJlc3VsdCBpcyBIYW5kbGVyUmVzdWx0IHtcbiAgcmV0dXJuIChcbiAgICByZXN1bHQgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIgJiZcbiAgICBcInR5cGVcIiBpbiByZXN1bHQgJiZcbiAgICBcInJlc3VsdFwiIGluIHJlc3VsdCAmJlxuICAgIChyZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0SGFuZGxlclJlc3VsdChyZXN1bHQ6IEhhbmRsZXJSZXN1bHQpIHtcbiAgcmV0dXJuIChcbiAgICBpc1Jlc3BvbnNlKHJlc3VsdC5yZXN1bHQpICYmIHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHJlc3VsdC5yZXN1bHQuc3RhdHVzKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdDogRGF0YVJlc3VsdCk6IHJlc3VsdCBpcyBEZWZlcnJlZFJlc3VsdCB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQ6IERhdGFSZXN1bHQpOiByZXN1bHQgaXMgRXJyb3JSZXN1bHQge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0PzogRGF0YVJlc3VsdCk6IHJlc3VsdCBpcyBSZWRpcmVjdFJlc3VsdCB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBEZWZlcnJlZERhdGEge1xuICBsZXQgZGVmZXJyZWQ6IERlZmVycmVkRGF0YSA9IHZhbHVlO1xuICByZXR1cm4gKFxuICAgIGRlZmVycmVkICYmXG4gICAgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmXG4gICAgdHlwZW9mIGRlZmVycmVkLmRhdGEgPT09IFwib2JqZWN0XCIgJiZcbiAgICB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICB0eXBlb2YgZGVmZXJyZWQucmVzb2x2ZURhdGEgPT09IFwiZnVuY3Rpb25cIlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBSZXNwb25zZSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiZcbiAgICB0eXBlb2YgdmFsdWUuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmXG4gICAgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCJcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdDogYW55KTogcmVzdWx0IGlzIFJlc3BvbnNlIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2Q6IHN0cmluZyk6IG1ldGhvZCBpcyBGb3JtTWV0aG9kIHwgVjdfRm9ybU1ldGhvZCB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSBhcyBGb3JtTWV0aG9kKTtcbn1cblxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChcbiAgbWV0aG9kOiBzdHJpbmdcbik6IG1ldGhvZCBpcyBNdXRhdGlvbkZvcm1NZXRob2QgfCBWN19NdXRhdGlvbkZvcm1NZXRob2Qge1xuICByZXR1cm4gdmFsaWRNdXRhdGlvbk1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpIGFzIE11dGF0aW9uRm9ybU1ldGhvZCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoXG4gIGN1cnJlbnRNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIG1hdGNoZXNUb0xvYWQ6IChBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoIHwgbnVsbClbXSxcbiAgcmVzdWx0czogRGF0YVJlc3VsdFtdLFxuICBzaWduYWxzOiAoQWJvcnRTaWduYWwgfCBudWxsKVtdLFxuICBpc0ZldGNoZXI6IGJvb2xlYW4sXG4gIGN1cnJlbnRMb2FkZXJEYXRhPzogUm91dGVEYXRhXG4pIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBtYXRjaCwgdGhlbiB3ZSBjYW4gaGF2ZSBhIGRlZmVycmVkIHJlc3VsdCB0byBkb1xuICAgIC8vIGFueXRoaW5nIHdpdGguICBUaGlzIGlzIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgd2hlcmUgdGhlIHJvdXRlIHdhc1xuICAgIC8vIHJlbW92ZWQgZHVyaW5nIEhNUlxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKFxuICAgICAgKG0pID0+IG0ucm91dGUuaWQgPT09IG1hdGNoIS5yb3V0ZS5pZFxuICAgICk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID1cbiAgICAgIGN1cnJlbnRNYXRjaCAhPSBudWxsICYmXG4gICAgICAhaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpICYmXG4gICAgICAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSAmJiAoaXNGZXRjaGVyIHx8IGlzUmV2YWxpZGF0aW5nTG9hZGVyKSkge1xuICAgICAgLy8gTm90ZTogd2UgZG8gbm90IGhhdmUgdG8gdG91Y2ggYWN0aXZlRGVmZXJyZWRzIGhlcmUgc2luY2Ugd2UgcmFjZSB0aGVtXG4gICAgICAvLyBhZ2FpbnN0IHRoZSBzaWduYWwgaW4gcmVzb2x2ZURlZmVycmVkRGF0YSBhbmQgdGhleSdsbCBnZXQgYWJvcnRlZFxuICAgICAgLy8gdGhlcmUgaWYgbmVlZGVkXG4gICAgICBsZXQgc2lnbmFsID0gc2lnbmFsc1tpbmRleF07XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHNpZ25hbCxcbiAgICAgICAgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCJcbiAgICAgICk7XG4gICAgICBhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCBpc0ZldGNoZXIpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXN1bHQgfHwgcmVzdWx0c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKFxuICByZXN1bHQ6IERlZmVycmVkUmVzdWx0LFxuICBzaWduYWw6IEFib3J0U2lnbmFsLFxuICB1bndyYXAgPSBmYWxzZVxuKTogUHJvbWlzZTxTdWNjZXNzUmVzdWx0IHwgRXJyb3JSZXN1bHQgfCB1bmRlZmluZWQ+IHtcbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGEsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpLmdldEFsbChcImluZGV4XCIpLnNvbWUoKHYpID0+IHYgPT09IFwiXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBsb2NhdGlvbjogTG9jYXRpb24gfCBzdHJpbmdcbikge1xuICBsZXQgc2VhcmNoID1cbiAgICB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDtcbiAgaWYgKFxuICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJlxuICAgIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIilcbiAgKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIHJldHVybiBwYXRoTWF0Y2hlc1twYXRoTWF0Y2hlcy5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKFxuICBuYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uXG4pOiBTdWJtaXNzaW9uIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHsgZm9ybU1ldGhvZCwgZm9ybUFjdGlvbiwgZm9ybUVuY1R5cGUsIHRleHQsIGZvcm1EYXRhLCBqc29uIH0gPVxuICAgIG5hdmlnYXRpb247XG4gIGlmICghZm9ybU1ldGhvZCB8fCAhZm9ybUFjdGlvbiB8fCAhZm9ybUVuY1R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dCxcbiAgICB9O1xuICB9IGVsc2UgaWYgKGZvcm1EYXRhICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKFxuICBsb2NhdGlvbjogTG9jYXRpb24sXG4gIHN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uXG4pOiBOYXZpZ2F0aW9uU3RhdGVzW1wiTG9hZGluZ1wiXSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb246IE5hdmlnYXRpb25TdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5hdmlnYXRpb246IE5hdmlnYXRpb25TdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKFxuICBsb2NhdGlvbjogTG9jYXRpb24sXG4gIHN1Ym1pc3Npb246IFN1Ym1pc3Npb25cbik6IE5hdmlnYXRpb25TdGF0ZXNbXCJTdWJtaXR0aW5nXCJdIHtcbiAgbGV0IG5hdmlnYXRpb246IE5hdmlnYXRpb25TdGF0ZXNbXCJTdWJtaXR0aW5nXCJdID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihcbiAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb24sXG4gIGRhdGE/OiBGZXRjaGVyW1wiZGF0YVwiXVxuKTogRmV0Y2hlclN0YXRlc1tcIkxvYWRpbmdcIl0ge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBmZXRjaGVyOiBGZXRjaGVyU3RhdGVzW1wiTG9hZGluZ1wiXSA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgICBkYXRhLFxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhLFxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoXG4gIHN1Ym1pc3Npb246IFN1Ym1pc3Npb24sXG4gIGV4aXN0aW5nRmV0Y2hlcj86IEZldGNoZXJcbik6IEZldGNoZXJTdGF0ZXNbXCJTdWJtaXR0aW5nXCJdIHtcbiAgbGV0IGZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJTdWJtaXR0aW5nXCJdID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQsXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuXG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhOiBGZXRjaGVyW1wiZGF0YVwiXSk6IEZldGNoZXJTdGF0ZXNbXCJJZGxlXCJdIHtcbiAgbGV0IGZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJJZGxlXCJdID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKFxuICBfd2luZG93OiBXaW5kb3csXG4gIHRyYW5zaXRpb25zOiBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj5cbikge1xuICB0cnkge1xuICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFxuICAgICAgVFJBTlNJVElPTlNfU1RPUkFHRV9LRVlcbiAgICApO1xuICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICBmb3IgKGxldCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbiB8fCB7fSkpIHtcbiAgICAgICAgaWYgKHYgJiYgQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNldChrLCBuZXcgU2V0KHYgfHwgW10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgfVxufVxuXG5mdW5jdGlvbiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKFxuICBfd2luZG93OiBXaW5kb3csXG4gIHRyYW5zaXRpb25zOiBNYXA8c3RyaW5nLCBTZXQ8c3RyaW5nPj5cbikge1xuICBpZiAodHJhbnNpdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBsZXQganNvbjogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge307XG4gICAgZm9yIChsZXQgW2ssIHZdIG9mIHRyYW5zaXRpb25zKSB7XG4gICAgICBqc29uW2tdID0gWy4uLnZdO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoanNvbilcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBgRmFpbGVkIHRvIHNhdmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlICgke2Vycm9yfSkuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbi8vI2VuZHJlZ2lvblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEFnbm9zdGljSW5kZXhSb3V0ZU9iamVjdCxcbiAgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0LFxuICBBZ25vc3RpY1JvdXRlTWF0Y2gsXG4gIEhpc3RvcnksXG4gIExhenlSb3V0ZUZ1bmN0aW9uLFxuICBMb2NhdGlvbixcbiAgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLFxuICBSZWxhdGl2ZVJvdXRpbmdUeXBlLFxuICBSb3V0ZXIsXG4gIFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICBUbyxcbiAgVHJhY2tlZFByb21pc2UsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuXG4vLyBDcmVhdGUgcmVhY3Qtc3BlY2lmaWMgdHlwZXMgZnJvbSB0aGUgYWdub3N0aWMgdHlwZXMgaW4gQHJlbWl4LXJ1bi9yb3V0ZXIgdG9cbi8vIGV4cG9ydCBmcm9tIHJlYWN0LXJvdXRlclxuZXhwb3J0IGludGVyZmFjZSBJbmRleFJvdXRlT2JqZWN0IHtcbiAgY2FzZVNlbnNpdGl2ZT86IEFnbm9zdGljSW5kZXhSb3V0ZU9iamVjdFtcImNhc2VTZW5zaXRpdmVcIl07XG4gIHBhdGg/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJwYXRoXCJdO1xuICBpZD86IEFnbm9zdGljSW5kZXhSb3V0ZU9iamVjdFtcImlkXCJdO1xuICBsb2FkZXI/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJsb2FkZXJcIl07XG4gIGFjdGlvbj86IEFnbm9zdGljSW5kZXhSb3V0ZU9iamVjdFtcImFjdGlvblwiXTtcbiAgaGFzRXJyb3JCb3VuZGFyeT86IEFnbm9zdGljSW5kZXhSb3V0ZU9iamVjdFtcImhhc0Vycm9yQm91bmRhcnlcIl07XG4gIHNob3VsZFJldmFsaWRhdGU/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJzaG91bGRSZXZhbGlkYXRlXCJdO1xuICBoYW5kbGU/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJoYW5kbGVcIl07XG4gIGluZGV4OiB0cnVlO1xuICBjaGlsZHJlbj86IHVuZGVmaW5lZDtcbiAgZWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBDb21wb25lbnQ/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgSHlkcmF0ZUZhbGxiYWNrPzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEVycm9yQm91bmRhcnk/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgbGF6eT86IExhenlSb3V0ZUZ1bmN0aW9uPFJvdXRlT2JqZWN0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb25JbmRleFJvdXRlT2JqZWN0IHtcbiAgY2FzZVNlbnNpdGl2ZT86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImNhc2VTZW5zaXRpdmVcIl07XG4gIHBhdGg/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJwYXRoXCJdO1xuICBpZD86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImlkXCJdO1xuICBsb2FkZXI/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJsb2FkZXJcIl07XG4gIGFjdGlvbj86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImFjdGlvblwiXTtcbiAgaGFzRXJyb3JCb3VuZGFyeT86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhc0Vycm9yQm91bmRhcnlcIl07XG4gIHNob3VsZFJldmFsaWRhdGU/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJzaG91bGRSZXZhbGlkYXRlXCJdO1xuICBoYW5kbGU/OiBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3RbXCJoYW5kbGVcIl07XG4gIGluZGV4PzogZmFsc2U7XG4gIGNoaWxkcmVuPzogUm91dGVPYmplY3RbXTtcbiAgZWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBDb21wb25lbnQ/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgSHlkcmF0ZUZhbGxiYWNrPzogUmVhY3QuQ29tcG9uZW50VHlwZSB8IG51bGw7XG4gIEVycm9yQm91bmRhcnk/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgbGF6eT86IExhenlSb3V0ZUZ1bmN0aW9uPFJvdXRlT2JqZWN0Pjtcbn1cblxuZXhwb3J0IHR5cGUgUm91dGVPYmplY3QgPSBJbmRleFJvdXRlT2JqZWN0IHwgTm9uSW5kZXhSb3V0ZU9iamVjdDtcblxuZXhwb3J0IHR5cGUgRGF0YVJvdXRlT2JqZWN0ID0gUm91dGVPYmplY3QgJiB7XG4gIGNoaWxkcmVuPzogRGF0YVJvdXRlT2JqZWN0W107XG4gIGlkOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlTWF0Y2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBSb3V0ZU9iamVjdCA9IFJvdXRlT2JqZWN0XG4+IGV4dGVuZHMgQWdub3N0aWNSb3V0ZU1hdGNoPFBhcmFtS2V5LCBSb3V0ZU9iamVjdFR5cGU+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVJvdXRlTWF0Y2ggZXh0ZW5kcyBSb3V0ZU1hdGNoPHN0cmluZywgRGF0YVJvdXRlT2JqZWN0PiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFSb3V0ZXJDb250ZXh0T2JqZWN0XG4gIC8vIE9taXQgYGZ1dHVyZWAgc2luY2UgdGhvc2UgY2FuIGJlIHB1bGxlZCBmcm9tIHRoZSBgcm91dGVyYFxuICAvLyBgTmF2aWdhdGlvbkNvbnRleHRgIG5lZWRzIGZ1dHVyZSBzaW5jZSBpdCBkb2Vzbid0IGhhdmUgYSBgcm91dGVyYCBpbiBhbGwgY2FzZXNcbiAgZXh0ZW5kcyBPbWl0PE5hdmlnYXRpb25Db250ZXh0T2JqZWN0LCBcImZ1dHVyZVwiPiB7XG4gIHJvdXRlcjogUm91dGVyO1xuICBzdGF0aWNDb250ZXh0PzogU3RhdGljSGFuZGxlckNvbnRleHQ7XG59XG5cbmV4cG9ydCBjb25zdCBEYXRhUm91dGVyQ29udGV4dCA9XG4gIFJlYWN0LmNyZWF0ZUNvbnRleHQ8RGF0YVJvdXRlckNvbnRleHRPYmplY3QgfCBudWxsPihudWxsKTtcbmlmIChfX0RFVl9fKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmV4cG9ydCBjb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgUm91dGVyW1wic3RhdGVcIl0gfCBudWxsXG4+KG51bGwpO1xuaWYgKF9fREVWX18pIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5cbmV4cG9ydCBjb25zdCBBd2FpdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFRyYWNrZWRQcm9taXNlIHwgbnVsbD4obnVsbCk7XG5pZiAoX19ERVZfXykge1xuICBBd2FpdENvbnRleHQuZGlzcGxheU5hbWUgPSBcIkF3YWl0XCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVPcHRpb25zIHtcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG4gIHVuc3RhYmxlX2ZsdXNoU3luYz86IGJvb2xlYW47XG4gIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgYDxSb3V0ZXI+YCBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRvciB7XG4gIGNyZWF0ZUhyZWY6IEhpc3RvcnlbXCJjcmVhdGVIcmVmXCJdO1xuICAvLyBPcHRpb25hbCBmb3IgYmFja3dhcmRzLWNvbXBhdCB3aXRoIFJvdXRlci9IaXN0b3J5Um91dGVyIHVzYWdlIChlZGdlIGNhc2UpXG4gIGVuY29kZUxvY2F0aW9uPzogSGlzdG9yeVtcImVuY29kZUxvY2F0aW9uXCJdO1xuICBnbzogSGlzdG9yeVtcImdvXCJdO1xuICBwdXNoKHRvOiBUbywgc3RhdGU/OiBhbnksIG9wdHM/OiBOYXZpZ2F0ZU9wdGlvbnMpOiB2b2lkO1xuICByZXBsYWNlKHRvOiBUbywgc3RhdGU/OiBhbnksIG9wdHM/OiBOYXZpZ2F0ZU9wdGlvbnMpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgTmF2aWdhdGlvbkNvbnRleHRPYmplY3Qge1xuICBiYXNlbmFtZTogc3RyaW5nO1xuICBuYXZpZ2F0b3I6IE5hdmlnYXRvcjtcbiAgc3RhdGljOiBib29sZWFuO1xuICBmdXR1cmU6IHtcbiAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogYm9vbGVhbjtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxOYXZpZ2F0aW9uQ29udGV4dE9iamVjdD4oXG4gIG51bGwhXG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuXG5pbnRlcmZhY2UgTG9jYXRpb25Db250ZXh0T2JqZWN0IHtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xuICBuYXZpZ2F0aW9uVHlwZTogTmF2aWdhdGlvblR5cGU7XG59XG5cbmV4cG9ydCBjb25zdCBMb2NhdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PExvY2F0aW9uQ29udGV4dE9iamVjdD4oXG4gIG51bGwhXG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVDb250ZXh0T2JqZWN0IHtcbiAgb3V0bGV0OiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsO1xuICBtYXRjaGVzOiBSb3V0ZU1hdGNoW107XG4gIGlzRGF0YVJvdXRlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgUm91dGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxSb3V0ZUNvbnRleHRPYmplY3Q+KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlLFxufSk7XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cblxuZXhwb3J0IGNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxhbnk+KG51bGwpO1xuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEJsb2NrZXIsXG4gIEJsb2NrZXJGdW5jdGlvbixcbiAgTG9jYXRpb24sXG4gIFBhcmFtUGFyc2VLZXksXG4gIFBhcmFtcyxcbiAgUGF0aCxcbiAgUGF0aE1hdGNoLFxuICBQYXRoUGF0dGVybixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVyIGFzIFJlbWl4Um91dGVyLFxuICBSZXZhbGlkYXRpb25TdGF0ZSxcbiAgVG8sXG4gIFVJTWF0Y2gsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuaW1wb3J0IHtcbiAgSURMRV9CTE9DS0VSLFxuICBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsXG4gIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCBhcyBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCxcbiAgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMgYXMgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyxcbiAgVU5TQUZFX2ludmFyaWFudCBhcyBpbnZhcmlhbnQsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBqb2luUGF0aHMsXG4gIG1hdGNoUGF0aCxcbiAgbWF0Y2hSb3V0ZXMsXG4gIHBhcnNlUGF0aCxcbiAgcmVzb2x2ZVRvLFxuICBzdHJpcEJhc2VuYW1lLFxuICBVTlNBRkVfd2FybmluZyBhcyB3YXJuaW5nLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVNYXRjaCxcbiAgTmF2aWdhdGVPcHRpb25zLFxuICBSb3V0ZUNvbnRleHRPYmplY3QsXG4gIFJvdXRlTWF0Y2gsXG4gIFJvdXRlT2JqZWN0LFxufSBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQge1xuICBBd2FpdENvbnRleHQsXG4gIERhdGFSb3V0ZXJDb250ZXh0LFxuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LFxuICBMb2NhdGlvbkNvbnRleHQsXG4gIE5hdmlnYXRpb25Db250ZXh0LFxuICBSb3V0ZUNvbnRleHQsXG4gIFJvdXRlRXJyb3JDb250ZXh0LFxufSBmcm9tIFwiLi9jb250ZXh0XCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWhyZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUhyZWYoXG4gIHRvOiBUbyxcbiAgeyByZWxhdGl2ZSB9OiB7IHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZSB9ID0ge31cbik6IHN0cmluZyB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICBsZXQgeyBiYXNlbmFtZSwgbmF2aWdhdG9yIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHsgaGFzaCwgcGF0aG5hbWUsIHNlYXJjaCB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7IHJlbGF0aXZlIH0pO1xuXG4gIGxldCBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lO1xuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGhyZWYuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXdcbiAgLy8gYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZVxuICAvLyBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGpvaW5lZFBhdGhuYW1lID1cbiAgICAgIHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7IHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYSBgPFJvdXRlcj5gLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWluLXJvdXRlci1jb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKTogYm9vbGVhbiB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24oKTogTG9jYXRpb24ge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCk6IE5hdmlnYXRpb25UeXBlIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUGF0aE1hdGNoIG9iamVjdCBpZiB0aGUgZ2l2ZW4gcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIGA8TmF2TGluaz5gLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXRjaDxcbiAgUGFyYW1LZXkgZXh0ZW5kcyBQYXJhbVBhcnNlS2V5PFBhdGg+LFxuICBQYXRoIGV4dGVuZHMgc3RyaW5nXG4+KHBhdHRlcm46IFBhdGhQYXR0ZXJuPFBhdGg+IHwgUGF0aCk6IFBhdGhNYXRjaDxQYXJhbUtleT4gfCBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAgIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgdXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICBsZXQgeyBwYXRobmFtZSB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gbWF0Y2hQYXRoPFBhcmFtS2V5LCBQYXRoPihwYXR0ZXJuLCBwYXRobmFtZSksXG4gICAgW3BhdGhuYW1lLCBwYXR0ZXJuXVxuICApO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYXZpZ2F0ZUZ1bmN0aW9uIHtcbiAgKHRvOiBUbywgb3B0aW9ucz86IE5hdmlnYXRlT3B0aW9ucyk6IHZvaWQ7XG4gIChkZWx0YTogbnVtYmVyKTogdm9pZDtcbn1cblxuY29uc3QgbmF2aWdhdGVFZmZlY3RXYXJuaW5nID1cbiAgYFlvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIGAgK1xuICBgeW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuYDtcblxuLy8gTXV0ZSB3YXJuaW5ncyBmb3IgY2FsbHMgdG8gdXNlTmF2aWdhdGUgaW4gU1NSIGVudmlyb25tZW50c1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChcbiAgY2I6IFBhcmFtZXRlcnM8dHlwZW9mIFJlYWN0LnVzZUxheW91dEVmZmVjdD5bMF1cbikge1xuICBsZXQgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWM7XG4gIGlmICghaXNTdGF0aWMpIHtcbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgb25jZSByZWFjdCAxOC4zIGlzIHJlbGVhc2VkXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdChjYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgYDxMaW5rPmBzLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTmF2aWdhdGUoKTogTmF2aWdhdGVGdW5jdGlvbiB7XG4gIGxldCB7IGlzRGF0YVJvdXRlIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKTogTmF2aWdhdGVGdW5jdGlvbiB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7IGJhc2VuYW1lLCBmdXR1cmUsIG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHsgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFxuICAgIGdldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKVxuICApO1xuXG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuXG4gIGxldCBuYXZpZ2F0ZTogTmF2aWdhdGVGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh0bzogVG8gfCBudW1iZXIsIG9wdGlvbnM6IE5hdmlnYXRlT3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICB3YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpO1xuXG4gICAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciBoaXN0b3J5IGxpc3RlbmVyIHlldFxuICAgICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHBhdGggPSByZXNvbHZlVG8oXG4gICAgICAgIHRvLFxuICAgICAgICBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksXG4gICAgICAgIGxvY2F0aW9uUGF0aG5hbWUsXG4gICAgICAgIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiXG4gICAgICApO1xuXG4gICAgICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAgIC8vIG90aGVyd2lzZSBpdCdsbCBwcmVwZW5kIHRoZSBiYXNlbmFtZSBpbnNpZGUgb2YgdGhlIHJvdXRlcikuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWVcbiAgICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgICAgLy8gdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICAgICAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ID09IG51bGwgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgICAgIHBhdGgucGF0aG5hbWUgPT09IFwiL1wiXG4gICAgICAgICAgICA/IGJhc2VuYW1lXG4gICAgICAgICAgICA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkoXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgfSxcbiAgICBbXG4gICAgICBiYXNlbmFtZSxcbiAgICAgIG5hdmlnYXRvcixcbiAgICAgIHJvdXRlUGF0aG5hbWVzSnNvbixcbiAgICAgIGxvY2F0aW9uUGF0aG5hbWUsXG4gICAgICBkYXRhUm91dGVyQ29udGV4dCxcbiAgICBdXG4gICk7XG5cbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuXG5jb25zdCBPdXRsZXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDx1bmtub3duPihudWxsKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0LWNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQ8Q29udGV4dCA9IHVua25vd24+KCk6IENvbnRleHQge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KSBhcyBDb250ZXh0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgYDxPdXRsZXQ+YCB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQ/OiB1bmtub3duKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxPdXRsZXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT57b3V0bGV0fTwvT3V0bGV0Q29udGV4dC5Qcm92aWRlcj5cbiAgICApO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQYXJhbXM8XG4gIFBhcmFtc09yS2V5IGV4dGVuZHMgc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPiA9IHN0cmluZ1xuPigpOiBSZWFkb25seTxcbiAgW1BhcmFtc09yS2V5XSBleHRlbmRzIFtzdHJpbmddID8gUGFyYW1zPFBhcmFtc09yS2V5PiA6IFBhcnRpYWw8UGFyYW1zT3JLZXk+XG4+IHtcbiAgbGV0IHsgbWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyAocm91dGVNYXRjaC5wYXJhbXMgYXMgYW55KSA6IHt9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aChcbiAgdG86IFRvLFxuICB7IHJlbGF0aXZlIH06IHsgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlIH0gPSB7fVxuKTogUGF0aCB7XG4gIGxldCB7IGZ1dHVyZSB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHsgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShcbiAgICBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aClcbiAgKTtcblxuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgcmVzb2x2ZVRvKFxuICAgICAgICB0byxcbiAgICAgICAgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLFxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLFxuICAgICAgICByZWxhdGl2ZSA9PT0gXCJwYXRoXCJcbiAgICAgICksXG4gICAgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXVxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIGA8T3V0bGV0PmAgdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXMoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgbG9jYXRpb25Bcmc/OiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZ1xuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcpO1xufVxuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGFjY2VwdCBvcHRpb25hbCBwYXJhbSBmb3IgUm91dGVyUHJvdmlkZXIgdXNhZ2VcbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKFxuICByb3V0ZXM6IFJvdXRlT2JqZWN0W10sXG4gIGxvY2F0aW9uQXJnPzogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmcsXG4gIGRhdGFSb3V0ZXJTdGF0ZT86IFJlbWl4Um91dGVyW1wic3RhdGVcIl0sXG4gIGZ1dHVyZT86IFJlbWl4Um91dGVyW1wiZnV0dXJlXCJdXG4pOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAgIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgdXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgbmF2aWdhdG9yIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHsgbWF0Y2hlczogcGFyZW50TWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAoX19ERVZfXykge1xuICAgIC8vIFlvdSB3b24ndCBnZXQgYSB3YXJuaW5nIGFib3V0IDIgZGlmZmVyZW50IDxSb3V0ZXM+IHVuZGVyIGEgPFJvdXRlPlxuICAgIC8vIHdpdGhvdXQgYSB0cmFpbGluZyAqLCBidXQgdGhpcyBpcyBhIGJlc3QtZWZmb3J0IHdhcm5pbmcgYW55d2F5IHNpbmNlIHdlXG4gICAgLy8gY2Fubm90IGV2ZW4gZ2l2ZSB0aGUgd2FybmluZyB1bmxlc3MgdGhleSBsYW5kIGF0IHRoZSBwYXJlbnQgcm91dGUuXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gPFJvdXRlcz5cbiAgICAvLyAgIHsvKiBUaGlzIHJvdXRlIHBhdGggTVVTVCBlbmQgd2l0aCAvKiBiZWNhdXNlIG90aGVyd2lzZVxuICAgIC8vICAgICAgIGl0IHdpbGwgbmV2ZXIgbWF0Y2ggL2Jsb2cvcG9zdC8xMjMgKi99XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2dcIiBlbGVtZW50PXs8QmxvZyAvPn0gLz5cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZy9mZWVkXCIgZWxlbWVudD17PEJsb2dGZWVkIC8+fSAvPlxuICAgIC8vIDwvUm91dGVzPlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gQmxvZygpIHtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxSb3V0ZXM+XG4gICAgLy8gICAgICAgPFJvdXRlIHBhdGg9XCJwb3N0LzppZFwiIGVsZW1lbnQ9ezxQb3N0IC8+fSAvPlxuICAgIC8vICAgICA8L1JvdXRlcz5cbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIGxldCBwYXJlbnRQYXRoID0gKHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGgpIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UoXG4gICAgICBwYXJlbnRQYXRobmFtZSxcbiAgICAgICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSxcbiAgICAgIGBZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIFxcYHVzZVJvdXRlcygpXFxgKSBhdCBgICtcbiAgICAgICAgYFwiJHtwYXJlbnRQYXRobmFtZX1cIiAodW5kZXIgPFJvdXRlIHBhdGg9XCIke3BhcmVudFBhdGh9XCI+KSBidXQgdGhlIGAgK1xuICAgICAgICBgcGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFwiKlwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBgICtcbiAgICAgICAgYGRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIGAgK1xuICAgICAgICBgcm91dGVzIHdpbGwgbmV2ZXIgcmVuZGVyLlxcblxcbmAgK1xuICAgICAgICBgUGxlYXNlIGNoYW5nZSB0aGUgcGFyZW50IDxSb3V0ZSBwYXRoPVwiJHtwYXJlbnRQYXRofVwiPiB0byA8Um91dGUgYCArXG4gICAgICAgIGBwYXRoPVwiJHtwYXJlbnRQYXRoID09PSBcIi9cIiA/IFwiKlwiIDogYCR7cGFyZW50UGF0aH0vKmB9XCI+LmBcbiAgICApO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuXG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgbGV0IHBhcnNlZExvY2F0aW9uQXJnID1cbiAgICAgIHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcblxuICAgIGludmFyaWFudChcbiAgICAgIHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHxcbiAgICAgICAgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWU/LnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSxcbiAgICAgIGBXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIFxcYDxSb3V0ZXMgbG9jYXRpb24+XFxgIG9yIFxcYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKVxcYCwgYCArXG4gICAgICAgIGB0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgYCArXG4gICAgICAgIGBtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFwiJHtwYXJlbnRQYXRobmFtZUJhc2V9XCIgYCArXG4gICAgICAgIGBidXQgcGF0aG5hbWUgXCIke3BhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lfVwiIHdhcyBnaXZlbiBpbiB0aGUgXFxgbG9jYXRpb25cXGAgcHJvcC5gXG4gICAgKTtcblxuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG5cbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWU7XG4gIGlmIChwYXJlbnRQYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSByZW1haW5pbmcgcGF0aG5hbWUgYnkgcmVtb3ZpbmcgdGhlICMgb2YgVVJMIHNlZ21lbnRzIHRoZVxuICAgIC8vIHBhcmVudFBhdGhuYW1lQmFzZSBoYXMsIGluc3RlYWQgb2YgcmVtb3ZpbmcgYmFzZWQgb24gY2hhcmFjdGVyIGNvdW50LlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSBjYW4ndCBndWFyYW50ZWUgdGhhdCBpbmNvbWluZy9vdXRnb2luZyBlbmNvZGluZ3MvXG4gICAgLy8gZGVjb2RpbmdzIHdpbGwgbWF0Y2ggZXhhY3RseS5cbiAgICAvLyBXZSBkZWNvZGUgcGF0aHMgYmVmb3JlIG1hdGNoaW5nIG9uIGEgcGVyLXNlZ21lbnQgYmFzaXMgd2l0aFxuICAgIC8vIGRlY29kZVVSSUNvbXBvbmVudCgpLCBidXQgd2UgcmUtZW5jb2RlIHBhdGhuYW1lcyB2aWEgYG5ldyBVUkwoKWAgc28gdGhleVxuICAgIC8vIG1hdGNoIHdoYXQgYHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZWAgd291bGQgcmVmbGVjdC4gIFRob3NlIGRvbid0IDEwMCVcbiAgICAvLyBhbGlnbiB3aGVuIGl0IGNvbWVzIHRvIGVuY29kZWQgVVJJIGNoYXJhY3RlcnMgc3VjaCBhcyAlIGFuZCAmLlxuICAgIC8vXG4gICAgLy8gU28gd2UgbWF5IGVuZCB1cCB3aXRoOlxuICAgIC8vICAgcGF0aG5hbWU6ICAgICAgICAgICBcIi9kZXNjZW5kYW50L2ElMjViL21hdGNoXCJcbiAgICAvLyAgIHBhcmVudFBhdGhuYW1lQmFzZTogXCIvZGVzY2VuZGFudC9hJWJcIlxuICAgIC8vXG4gICAgLy8gQW5kIHRoZSBkaXJlY3Qgc3Vic3RyaW5nIHJlbW92YWwgYXBwcm9hY2ggd29uJ3Qgd29yayA6L1xuICAgIGxldCBwYXJlbnRTZWdtZW50cyA9IHBhcmVudFBhdGhuYW1lQmFzZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIGxldCBzZWdtZW50cyA9IHBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSBcIi9cIiArIHNlZ21lbnRzLnNsaWNlKHBhcmVudFNlZ21lbnRzLmxlbmd0aCkuam9pbihcIi9cIik7XG4gIH1cblxuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywgeyBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWUgfSk7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLFxuICAgICAgYE5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFwiJHtsb2NhdGlvbi5wYXRobmFtZX0ke2xvY2F0aW9uLnNlYXJjaH0ke2xvY2F0aW9uLmhhc2h9XCIgYFxuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgbWF0Y2hlcyA9PSBudWxsIHx8XG4gICAgICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLkNvbXBvbmVudCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5sYXp5ICE9PSB1bmRlZmluZWQsXG4gICAgICBgTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFwiJHtsb2NhdGlvbi5wYXRobmFtZX0ke2xvY2F0aW9uLnNlYXJjaH0ke2xvY2F0aW9uLmhhc2h9XCIgYCArXG4gICAgICAgIGBkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIGAgK1xuICAgICAgICBgbnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcImVtcHR5XCIgcGFnZS5gXG4gICAgKTtcbiAgfVxuXG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhcbiAgICBtYXRjaGVzICYmXG4gICAgICBtYXRjaGVzLm1hcCgobWF0Y2gpID0+XG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgICAgICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbXG4gICAgICAgICAgICBwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgICAgICAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgICAgICAgICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uXG4gICAgICAgICAgICAgID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZVxuICAgICAgICAgICAgICA6IG1hdGNoLnBhdGhuYW1lLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHBhdGhuYW1lQmFzZTpcbiAgICAgICAgICAgIG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCJcbiAgICAgICAgICAgICAgPyBwYXJlbnRQYXRobmFtZUJhc2VcbiAgICAgICAgICAgICAgOiBqb2luUGF0aHMoW1xuICAgICAgICAgICAgICAgICAgcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgICAgICAgICAgICAgICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lXG4gICAgICAgICAgICAgICAgICAgIDogbWF0Y2gucGF0aG5hbWVCYXNlLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICBwYXJlbnRNYXRjaGVzLFxuICAgIGRhdGFSb3V0ZXJTdGF0ZSxcbiAgICBmdXR1cmVcbiAgKTtcblxuICAvLyBXaGVuIGEgdXNlciBwYXNzZXMgaW4gYSBgbG9jYXRpb25BcmdgLCB0aGUgYXNzb2NpYXRlZCByb3V0ZXMgbmVlZCB0b1xuICAvLyBiZSB3cmFwcGVkIGluIGEgbmV3IGBMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXJgIGluIG9yZGVyIGZvciBgdXNlTG9jYXRpb25gXG4gIC8vIHRvIHVzZSB0aGUgc2NvcGVkIGxvY2F0aW9uIGluc3RlYWQgb2YgdGhlIGdsb2JhbCBsb2NhdGlvbi5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAoXG4gICAgICA8TG9jYXRpb25Db250ZXh0LlByb3ZpZGVyXG4gICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGtleTogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgICAuLi5sb2NhdGlvbixcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hdmlnYXRpb25UeXBlOiBOYXZpZ2F0aW9uVHlwZS5Qb3AsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJlZE1hdGNoZXN9XG4gICAgICA8L0xvY2F0aW9uQ29udGV4dC5Qcm92aWRlcj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gRGVmYXVsdEVycm9yQ29tcG9uZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpXG4gICAgPyBgJHtlcnJvci5zdGF0dXN9ICR7ZXJyb3Iuc3RhdHVzVGV4dH1gXG4gICAgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgPyBlcnJvci5tZXNzYWdlXG4gICAgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHsgcGFkZGluZzogXCIwLjVyZW1cIiwgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXkgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7IHBhZGRpbmc6IFwiMnB4IDRweFwiLCBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleSB9O1xuXG4gIGxldCBkZXZJbmZvID0gbnVsbDtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgXCJFcnJvciBoYW5kbGVkIGJ5IFJlYWN0IFJvdXRlciBkZWZhdWx0IEVycm9yQm91bmRhcnk6XCIsXG4gICAgICBlcnJvclxuICAgICk7XG5cbiAgICBkZXZJbmZvID0gKFxuICAgICAgPD5cbiAgICAgICAgPHA+8J+SvyBIZXkgZGV2ZWxvcGVyIPCfkYs8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFlvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9yc1xuICAgICAgICAgIGJ5IHByb3ZpZGluZyB5b3VyIG93biA8Y29kZSBzdHlsZT17Y29kZVN0eWxlc30+RXJyb3JCb3VuZGFyeTwvY29kZT4gb3J7XCIgXCJ9XG4gICAgICAgICAgPGNvZGUgc3R5bGU9e2NvZGVTdHlsZXN9PmVycm9yRWxlbWVudDwvY29kZT4gcHJvcCBvbiB5b3VyIHJvdXRlLlxuICAgICAgICA8L3A+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgyPlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhPC9oMj5cbiAgICAgIDxoMyBzdHlsZT17eyBmb250U3R5bGU6IFwiaXRhbGljXCIgfX0+e21lc3NhZ2V9PC9oMz5cbiAgICAgIHtzdGFjayA/IDxwcmUgc3R5bGU9e3ByZVN0eWxlc30+e3N0YWNrfTwvcHJlPiA6IG51bGx9XG4gICAgICB7ZGV2SW5mb31cbiAgICA8Lz5cbiAgKTtcbn1cblxuY29uc3QgZGVmYXVsdEVycm9yRWxlbWVudCA9IDxEZWZhdWx0RXJyb3JDb21wb25lbnQgLz47XG5cbnR5cGUgUmVuZGVyRXJyb3JCb3VuZGFyeVByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBsb2NhdGlvbjogTG9jYXRpb247XG4gIHJldmFsaWRhdGlvbjogUmV2YWxpZGF0aW9uU3RhdGU7XG4gIGVycm9yOiBhbnk7XG4gIGNvbXBvbmVudDogUmVhY3QuUmVhY3ROb2RlO1xuICByb3V0ZUNvbnRleHQ6IFJvdXRlQ29udGV4dE9iamVjdDtcbn0+O1xuXG50eXBlIFJlbmRlckVycm9yQm91bmRhcnlTdGF0ZSA9IHtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xuICByZXZhbGlkYXRpb246IFJldmFsaWRhdGlvblN0YXRlO1xuICBlcnJvcjogYW55O1xufTtcblxuZXhwb3J0IGNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIFJlbmRlckVycm9yQm91bmRhcnlQcm9wcyxcbiAgUmVuZGVyRXJyb3JCb3VuZGFyeVN0YXRlXG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFJlbmRlckVycm9yQm91bmRhcnlQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7IGVycm9yOiBlcnJvciB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICBwcm9wczogUmVuZGVyRXJyb3JCb3VuZGFyeVByb3BzLFxuICAgIHN0YXRlOiBSZW5kZXJFcnJvckJvdW5kYXJ5U3RhdGVcbiAgKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKFxuICAgICAgc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uIHx8XG4gICAgICAoc3RhdGUucmV2YWxpZGF0aW9uICE9PSBcImlkbGVcIiAmJiBwcm9wcy5yZXZhbGlkYXRpb24gPT09IFwiaWRsZVwiKVxuICAgICkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yICE9PSB1bmRlZmluZWQgPyBwcm9wcy5lcnJvciA6IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcjogYW55LCBlcnJvckluZm86IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsXG4gICAgICBlcnJvcixcbiAgICAgIGVycm9ySW5mb1xuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgIT09IHVuZGVmaW5lZCA/IChcbiAgICAgIDxSb3V0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3RoaXMucHJvcHMucm91dGVDb250ZXh0fT5cbiAgICAgICAgPFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZXJyb3J9XG4gICAgICAgICAgY2hpbGRyZW49e3RoaXMucHJvcHMuY29tcG9uZW50fVxuICAgICAgICAvPlxuICAgICAgPC9Sb3V0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKSA6IChcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG59XG5cbmludGVyZmFjZSBSZW5kZXJlZFJvdXRlUHJvcHMge1xuICByb3V0ZUNvbnRleHQ6IFJvdXRlQ29udGV4dE9iamVjdDtcbiAgbWF0Y2g6IFJvdXRlTWF0Y2g8c3RyaW5nLCBSb3V0ZU9iamVjdD47XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xufVxuXG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKHsgcm91dGVDb250ZXh0LCBtYXRjaCwgY2hpbGRyZW4gfTogUmVuZGVyZWRSb3V0ZVByb3BzKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuXG4gIC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG4gIGlmIChcbiAgICBkYXRhUm91dGVyQ29udGV4dCAmJlxuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJlxuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiZcbiAgICAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkpXG4gICkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cm91dGVDb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1JvdXRlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKFxuICBtYXRjaGVzOiBSb3V0ZU1hdGNoW10gfCBudWxsLFxuICBwYXJlbnRNYXRjaGVzOiBSb3V0ZU1hdGNoW10gPSBbXSxcbiAgZGF0YVJvdXRlclN0YXRlOiBSZW1peFJvdXRlcltcInN0YXRlXCJdIHwgbnVsbCA9IG51bGwsXG4gIGZ1dHVyZTogUmVtaXhSb3V0ZXJbXCJmdXR1cmVcIl0gfCBudWxsID0gbnVsbFxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlPy5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXMgYXMgRGF0YVJvdXRlTWF0Y2hbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG4gIGxldCBlcnJvcnMgPSBkYXRhUm91dGVyU3RhdGU/LmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KFxuICAgICAgKG0pID0+IG0ucm91dGUuaWQgJiYgZXJyb3JzPy5bbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgZXJyb3JJbmRleCA+PSAwLFxuICAgICAgYENvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgcm91dGUgZm9yIGVycm9ycyBvbiByb3V0ZSBJRHM6ICR7T2JqZWN0LmtleXMoXG4gICAgICAgIGVycm9yc1xuICAgICAgKS5qb2luKFwiLFwiKX1gXG4gICAgKTtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoXG4gICAgICAwLFxuICAgICAgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpXG4gICAgKTtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIGluIGEgcGFydGlhbCBoeWRyYXRpb24gbW9kZSwgZGV0ZWN0IGlmIHdlIG5lZWQgdG8gcmVuZGVyIGRvd24gdG9cbiAgLy8gYSBnaXZlbiBIeWRyYXRlRmFsbGJhY2sgd2hpbGUgd2UgbG9hZCB0aGUgcmVzdCBvZiB0aGUgaHlkcmF0aW9uIGRhdGFcbiAgbGV0IHJlbmRlckZhbGxiYWNrID0gZmFsc2U7XG4gIGxldCBmYWxsYmFja0luZGV4ID0gLTE7XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgJiYgZnV0dXJlICYmIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJlZE1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlbmRlcmVkTWF0Y2hlc1tpXTtcbiAgICAgIC8vIFRyYWNrIHRoZSBkZWVwZXN0IGZhbGxiYWNrIHVwIHVudGlsIHRoZSBmaXJzdCByb3V0ZSB3aXRob3V0IGRhdGFcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5IeWRyYXRlRmFsbGJhY2sgfHwgbWF0Y2gucm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBmYWxsYmFja0luZGV4ID0gaTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkKSB7XG4gICAgICAgIGxldCB7IGxvYWRlckRhdGEsIGVycm9ycyB9ID0gZGF0YVJvdXRlclN0YXRlO1xuICAgICAgICBsZXQgbmVlZHNUb1J1bkxvYWRlciA9XG4gICAgICAgICAgbWF0Y2gucm91dGUubG9hZGVyICYmXG4gICAgICAgICAgbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICghZXJyb3JzIHx8IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG5lZWRzVG9SdW5Mb2FkZXIpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCB0aGUgZmlyc3Qgcm91dGUgdGhhdCdzIG5vdCByZWFkeSB0byByZW5kZXIgKHdhaXRpbmcgb25cbiAgICAgICAgICAvLyBsYXp5LCBvciBoYXMgYSBsb2FkZXIgdGhhdCBoYXNuJ3QgcnVuIHlldCkuICBGbGFnIHRoYXQgd2UgbmVlZCB0b1xuICAgICAgICAgIC8vIHJlbmRlciBhIGZhbGxiYWNrIGFuZCByZW5kZXIgdXAgdW50aWwgdGhlIGFwcHJvcHJpYXRlIGZhbGxiYWNrXG4gICAgICAgICAgcmVuZGVyRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWxsYmFja0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBmYWxsYmFja0luZGV4ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IFtyZW5kZXJlZE1hdGNoZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9ycy9mYWxsYmFja3NcbiAgICBsZXQgZXJyb3I6IGFueTtcbiAgICBsZXQgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gZmFsc2U7XG4gICAgbGV0IGVycm9yRWxlbWVudDogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGwgPSBudWxsO1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUpIHtcbiAgICAgIGVycm9yID0gZXJyb3JzICYmIG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgIGVycm9yRWxlbWVudCA9IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBkZWZhdWx0RXJyb3JFbGVtZW50O1xuXG4gICAgICBpZiAocmVuZGVyRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPCAwICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgd2FybmluZ09uY2UoXG4gICAgICAgICAgICBcInJvdXRlLWZhbGxiYWNrXCIsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFwiTm8gYEh5ZHJhdGVGYWxsYmFja2AgZWxlbWVudCBwcm92aWRlZCB0byByZW5kZXIgZHVyaW5nIGluaXRpYWwgaHlkcmF0aW9uXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZmFsbGJhY2tJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBsZXQgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjaGlsZHJlbiA9IGVycm9yRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgICAgIGNoaWxkcmVuID0gaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBkZS1vcHRpbWl6ZWQgcGF0aCBzaW5jZSBSZWFjdCB3b24ndCByZS11c2UgdGhlXG4gICAgICAgIC8vIFJlYWN0RWxlbWVudCBzaW5jZSBpdCdzIGlkZW50aXR5IGNoYW5nZXMgd2l0aCBlYWNoIG5ld1xuICAgICAgICAvLyBSZWFjdC5jcmVhdGVFbGVtZW50IGNhbGwuICBXZSBrZWVwIHRoaXMgc28gZm9sa3MgY2FuIHVzZVxuICAgICAgICAvLyBgPFJvdXRlIENvbXBvbmVudD17Li4ufT5gIGluIGA8Um91dGVzPmAgYnV0IGdlbmVyYWxseSBgQ29tcG9uZW50YFxuICAgICAgICAvLyB1c2FnZSBpcyBvbmx5IGFkdmlzZWQgaW4gYFJvdXRlclByb3ZpZGVyYCB3aGVuIHdlIGNhbiBjb252ZXJ0IGl0IHRvXG4gICAgICAgIC8vIGBlbGVtZW50YCBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBjaGlsZHJlbiA9IDxtYXRjaC5yb3V0ZS5Db21wb25lbnQgLz47XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBtYXRjaC5yb3V0ZS5lbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvdXRsZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UmVuZGVyZWRSb3V0ZVxuICAgICAgICAgIG1hdGNoPXttYXRjaH1cbiAgICAgICAgICByb3V0ZUNvbnRleHQ9e3tcbiAgICAgICAgICAgIG91dGxldCxcbiAgICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgICBpc0RhdGFSb3V0ZTogZGF0YVJvdXRlclN0YXRlICE9IG51bGwsXG4gICAgICAgICAgfX1cbiAgICAgICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH07XG4gICAgLy8gT25seSB3cmFwIGluIGFuIGVycm9yIGJvdW5kYXJ5IHdpdGhpbiBkYXRhIHJvdXRlciB1c2FnZXMgd2hlbiB3ZSBoYXZlIGFuXG4gICAgLy8gRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvXG4gICAgLy8gYW4gYW5jZXN0b3IgRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnRcbiAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmXG4gICAgICAobWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSB8fCBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gKFxuICAgICAgPFJlbmRlckVycm9yQm91bmRhcnlcbiAgICAgICAgbG9jYXRpb249e2RhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbn1cbiAgICAgICAgcmV2YWxpZGF0aW9uPXtkYXRhUm91dGVyU3RhdGUucmV2YWxpZGF0aW9ufVxuICAgICAgICBjb21wb25lbnQ9e2Vycm9yRWxlbWVudH1cbiAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICBjaGlsZHJlbj17Z2V0Q2hpbGRyZW4oKX1cbiAgICAgICAgcm91dGVDb250ZXh0PXt7IG91dGxldDogbnVsbCwgbWF0Y2hlcywgaXNEYXRhUm91dGU6IHRydWUgfX1cbiAgICAgIC8+XG4gICAgKSA6IChcbiAgICAgIGdldENoaWxkcmVuKClcbiAgICApO1xuICB9LCBudWxsIGFzIFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwpO1xufVxuXG5lbnVtIERhdGFSb3V0ZXJIb29rIHtcbiAgVXNlQmxvY2tlciA9IFwidXNlQmxvY2tlclwiLFxuICBVc2VSZXZhbGlkYXRvciA9IFwidXNlUmV2YWxpZGF0b3JcIixcbiAgVXNlTmF2aWdhdGVTdGFibGUgPSBcInVzZU5hdmlnYXRlXCIsXG59XG5cbmVudW0gRGF0YVJvdXRlclN0YXRlSG9vayB7XG4gIFVzZUJsb2NrZXIgPSBcInVzZUJsb2NrZXJcIixcbiAgVXNlTG9hZGVyRGF0YSA9IFwidXNlTG9hZGVyRGF0YVwiLFxuICBVc2VBY3Rpb25EYXRhID0gXCJ1c2VBY3Rpb25EYXRhXCIsXG4gIFVzZVJvdXRlRXJyb3IgPSBcInVzZVJvdXRlRXJyb3JcIixcbiAgVXNlTmF2aWdhdGlvbiA9IFwidXNlTmF2aWdhdGlvblwiLFxuICBVc2VSb3V0ZUxvYWRlckRhdGEgPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiLFxuICBVc2VNYXRjaGVzID0gXCJ1c2VNYXRjaGVzXCIsXG4gIFVzZVJldmFsaWRhdG9yID0gXCJ1c2VSZXZhbGlkYXRvclwiLFxuICBVc2VOYXZpZ2F0ZVN0YWJsZSA9IFwidXNlTmF2aWdhdGVcIixcbiAgVXNlUm91dGVJZCA9IFwidXNlUm91dGVJZFwiLFxufVxuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKFxuICBob29rTmFtZTogRGF0YVJvdXRlckhvb2sgfCBEYXRhUm91dGVyU3RhdGVIb29rXG4pIHtcbiAgcmV0dXJuIGAke2hvb2tOYW1lfSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLmA7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lOiBEYXRhUm91dGVySG9vaykge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGludmFyaWFudChjdHgsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKTtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lOiBEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGludmFyaWFudChzdGF0ZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZTogRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGludmFyaWFudChyb3V0ZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpO1xuICByZXR1cm4gcm91dGU7XG59XG5cbi8vIEludGVybmFsIHZlcnNpb24gd2l0aCBob29rTmFtZS1hd2FyZSBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lOiBEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGludmFyaWFudChcbiAgICB0aGlzUm91dGUucm91dGUuaWQsXG4gICAgYCR7aG9va05hbWV9IGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcImlkXCJgXG4gICk7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgZm9yIHRoZSBuZWFyZXN0IGNvbnRleHR1YWwgcm91dGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlSWQoKSB7XG4gIHJldHVybiB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlSWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uLFxuICAgIH0pLFxuICAgIFtkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwgc3RhdGUucmV2YWxpZGF0aW9uXVxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWF0Y2hlcygpOiBVSU1hdGNoW10ge1xuICBsZXQgeyBtYXRjaGVzLCBsb2FkZXJEYXRhIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoXG4gICAgRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzXG4gICk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IG1hdGNoZXMubWFwKChtKSA9PiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBsb2FkZXJEYXRhKSksXG4gICAgW21hdGNoZXMsIGxvYWRlckRhdGFdXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpOiB1bmtub3duIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcblxuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBZb3UgY2Fubm90IFxcYHVzZUxvYWRlckRhdGFcXGAgaW4gYW4gZXJyb3JFbGVtZW50IChyb3V0ZUlkOiAke3JvdXRlSWR9KWBcbiAgICApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkOiBzdHJpbmcpOiB1bmtub3duIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpOiB1bmtub3duIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGEgPyBzdGF0ZS5hY3Rpb25EYXRhW3JvdXRlSWRdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKTogdW5rbm93biB7XG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuXG4gIC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlXG4gIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnlcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiBzdGF0ZS5lcnJvcnM/Lltyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpOiB1bmtub3duIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWU/Ll9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKTogdW5rbm93biB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlPy5fZXJyb3I7XG59XG5cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrOiBib29sZWFuIHwgQmxvY2tlckZ1bmN0aW9uKTogQmxvY2tlciB7XG4gIGxldCB7IHJvdXRlciwgYmFzZW5hbWUgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcblxuICBsZXQgW2Jsb2NrZXJLZXksIHNldEJsb2NrZXJLZXldID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIGxldCBibG9ja2VyRnVuY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjazxCbG9ja2VyRnVuY3Rpb24+KFxuICAgIChhcmcpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygc2hvdWxkQmxvY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZXkgcHJvdmlkZWQgdXMgYSBmdW5jdGlvbiBhbmQgd2UndmUgZ290IGFuIGFjdGl2ZSBiYXNlbmFtZSwgc3RyaXBcbiAgICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgICAvLyB1c2VMb2NhdGlvblxuICAgICAgbGV0IHsgY3VycmVudExvY2F0aW9uLCBuZXh0TG9jYXRpb24sIGhpc3RvcnlBY3Rpb24gfSA9IGFyZztcbiAgICAgIHJldHVybiBzaG91bGRCbG9jayh7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjoge1xuICAgICAgICAgIC4uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBwYXRobmFtZTpcbiAgICAgICAgICAgIHN0cmlwQmFzZW5hbWUoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHxcbiAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dExvY2F0aW9uOiB7XG4gICAgICAgICAgLi4ubmV4dExvY2F0aW9uLFxuICAgICAgICAgIHBhdGhuYW1lOlxuICAgICAgICAgICAgc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fFxuICAgICAgICAgICAgbmV4dExvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICB9LFxuICAgICAgICBoaXN0b3J5QWN0aW9uLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbYmFzZW5hbWUsIHNob3VsZEJsb2NrXVxuICApO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpXG4gICAgPyBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSkhXG4gICAgOiBJRExFX0JMT0NLRVI7XG59XG5cbi8qKlxuICogU3RhYmxlIHZlcnNpb24gb2YgdXNlTmF2aWdhdGUgdGhhdCBpcyB1c2VkIHdoZW4gd2UgYXJlIGluIHRoZSBjb250ZXh0IG9mXG4gKiBhIFJvdXRlclByb3ZpZGVyLlxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVN0YWJsZSgpOiBOYXZpZ2F0ZUZ1bmN0aW9uIHtcbiAgbGV0IHsgcm91dGVyIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuXG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuXG4gIGxldCBuYXZpZ2F0ZTogTmF2aWdhdGVGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh0bzogVG8gfCBudW1iZXIsIG9wdGlvbnM6IE5hdmlnYXRlT3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICB3YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpO1xuXG4gICAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByb3V0ZXIubmF2aWdhdGUodG8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCB7IGZyb21Sb3V0ZUlkOiBpZCwgLi4ub3B0aW9ucyB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtyb3V0ZXIsIGlkXVxuICApO1xuXG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cblxuY29uc3QgYWxyZWFkeVdhcm5lZDogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5OiBzdHJpbmcsIGNvbmQ6IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZykge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgd2FybmluZyhmYWxzZSwgbWVzc2FnZSk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHtcbiAgSW5pdGlhbEVudHJ5LFxuICBMYXp5Um91dGVGdW5jdGlvbixcbiAgTG9jYXRpb24sXG4gIE1lbW9yeUhpc3RvcnksXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgUm91dGVyU3RhdGUsXG4gIFJvdXRlclN1YnNjcmliZXIsXG4gIFRvLFxuICBUcmFja2VkUHJvbWlzZSxcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5pbXBvcnQge1xuICBBYm9ydGVkRGVmZXJyZWRFcnJvcixcbiAgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLFxuICBjcmVhdGVNZW1vcnlIaXN0b3J5LFxuICBVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyBhcyBnZXRSZXNvbHZlVG9NYXRjaGVzLFxuICBVTlNBRkVfaW52YXJpYW50IGFzIGludmFyaWFudCxcbiAgcGFyc2VQYXRoLFxuICByZXNvbHZlVG8sXG4gIHN0cmlwQmFzZW5hbWUsXG4gIFVOU0FGRV93YXJuaW5nIGFzIHdhcm5pbmcsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgRGF0YVJvdXRlT2JqZWN0LFxuICBJbmRleFJvdXRlT2JqZWN0LFxuICBOYXZpZ2F0b3IsXG4gIE5vbkluZGV4Um91dGVPYmplY3QsXG4gIFJvdXRlTWF0Y2gsXG4gIFJvdXRlT2JqZWN0LFxufSBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQge1xuICBBd2FpdENvbnRleHQsXG4gIERhdGFSb3V0ZXJDb250ZXh0LFxuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LFxuICBMb2NhdGlvbkNvbnRleHQsXG4gIE5hdmlnYXRpb25Db250ZXh0LFxuICBSb3V0ZUNvbnRleHQsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7XG4gIF9yZW5kZXJNYXRjaGVzLFxuICB1c2VBc3luY1ZhbHVlLFxuICB1c2VJblJvdXRlckNvbnRleHQsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlT3V0bGV0LFxuICB1c2VSb3V0ZXMsXG4gIHVzZVJvdXRlc0ltcGwsXG59IGZyb20gXCIuL2hvb2tzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnV0dXJlQ29uZmlnIHtcbiAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGJvb2xlYW47XG4gIHY3X3N0YXJ0VHJhbnNpdGlvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJQcm92aWRlclByb3BzIHtcbiAgZmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlO1xuICByb3V0ZXI6IFJlbWl4Um91dGVyO1xuICAvLyBPbmx5IGFjY2VwdCBmdXR1cmUgZmxhZ3MgcmVsZXZhbnQgdG8gcmVuZGVyaW5nIGJlaGF2aW9yXG4gIC8vIHJvdXRpbmcgZmxhZ3Mgc2hvdWxkIGJlIGFjY2Vzc2VkIHZpYSByb3V0ZXIuZnV0dXJlXG4gIGZ1dHVyZT86IFBhcnRpYWw8UGljazxGdXR1cmVDb25maWcsIFwidjdfc3RhcnRUcmFuc2l0aW9uXCI+Pjtcbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKHtcbiAgZmFsbGJhY2tFbGVtZW50LFxuICByb3V0ZXIsXG4gIGZ1dHVyZSxcbn06IFJvdXRlclByb3ZpZGVyUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG5cbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2s8Um91dGVyU3Vic2NyaWJlcj4oXG4gICAgKG5ld1N0YXRlOiBSb3V0ZXJTdGF0ZSkgPT4ge1xuICAgICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgICAgIHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLFxuICAgICAgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArXG4gICAgICAgIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiXG4gICAgKTtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpOiBOYXZpZ2F0b3IgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogKG4pID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cz8ucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzPy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIH0pLFxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcblxuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG5cbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgcm91dGVyLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIGJhc2VuYW1lLFxuICAgIH0pLFxuICAgIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdXG4gICk7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkYXRhUm91dGVyQ29udGV4dH0+XG4gICAgICAgIDxEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+XG4gICAgICAgICAgPFJvdXRlclxuICAgICAgICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmhpc3RvcnlBY3Rpb259XG4gICAgICAgICAgICBuYXZpZ2F0b3I9e25hdmlnYXRvcn1cbiAgICAgICAgICAgIGZ1dHVyZT17e1xuICAgICAgICAgICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3N0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IChcbiAgICAgICAgICAgICAgPERhdGFSb3V0ZXNcbiAgICAgICAgICAgICAgICByb3V0ZXM9e3JvdXRlci5yb3V0ZXN9XG4gICAgICAgICAgICAgICAgZnV0dXJlPXtyb3V0ZXIuZnV0dXJlfVxuICAgICAgICAgICAgICAgIHN0YXRlPXtzdGF0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIGZhbGxiYWNrRWxlbWVudFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1JvdXRlcj5cbiAgICAgICAgPC9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgPC9EYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIHtudWxsfVxuICAgIDwvPlxuICApO1xufVxuXG5mdW5jdGlvbiBEYXRhUm91dGVzKHtcbiAgcm91dGVzLFxuICBmdXR1cmUsXG4gIHN0YXRlLFxufToge1xuICByb3V0ZXM6IERhdGFSb3V0ZU9iamVjdFtdO1xuICBmdXR1cmU6IFJlbWl4Um91dGVyW1wiZnV0dXJlXCJdO1xuICBzdGF0ZTogUm91dGVyU3RhdGU7XG59KTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1vcnlSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaW5pdGlhbEVudHJpZXM/OiBJbml0aWFsRW50cnlbXTtcbiAgaW5pdGlhbEluZGV4PzogbnVtYmVyO1xuICBmdXR1cmU/OiBQYXJ0aWFsPEZ1dHVyZUNvbmZpZz47XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1lbW9yeVJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgaW5pdGlhbEVudHJpZXMsXG4gIGluaXRpYWxJbmRleCxcbiAgZnV0dXJlLFxufTogTWVtb3J5Um91dGVyUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZjxNZW1vcnlIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4LFxuICAgICAgdjVDb21wYXQ6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICB9KTtcbiAgbGV0IHsgdjdfc3RhcnRUcmFuc2l0aW9uIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXdTdGF0ZTogeyBhY3Rpb246IE5hdmlnYXRpb25UeXBlOyBsb2NhdGlvbjogTG9jYXRpb24gfSkgPT4ge1xuICAgICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGxcbiAgICAgICAgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpXG4gICAgICAgIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9LFxuICAgIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl1cbiAgKTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJcbiAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgIG5hdmlnYXRpb25UeXBlPXtzdGF0ZS5hY3Rpb259XG4gICAgICBuYXZpZ2F0b3I9e2hpc3Rvcnl9XG4gICAgICBmdXR1cmU9e2Z1dHVyZX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlUHJvcHMge1xuICB0bzogVG87XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL25hdmlnYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOYXZpZ2F0ZSh7XG4gIHRvLFxuICByZXBsYWNlLFxuICBzdGF0ZSxcbiAgcmVsYXRpdmUsXG59OiBOYXZpZ2F0ZVByb3BzKTogbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAgIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYDxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgZnV0dXJlLCBzdGF0aWM6IGlzU3RhdGljIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcblxuICB3YXJuaW5nKFxuICAgICFpc1N0YXRpYyxcbiAgICBgPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBgICtcbiAgICAgIGBUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgYCArXG4gICAgICBgb25seSBldmVyIHJlbmRlcmVkIGluIHJlc3BvbnNlIHRvIHNvbWUgdXNlciBpbnRlcmFjdGlvbiBvciBzdGF0ZSBjaGFuZ2UuYFxuICApO1xuXG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHsgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgLy8gUmVzb2x2ZSB0aGUgcGF0aCBvdXRzaWRlIG9mIHRoZSBlZmZlY3Qgc28gdGhhdCB3aGVuIGVmZmVjdHMgcnVuIHR3aWNlIGluXG4gIC8vIFN0cmljdE1vZGUgdGhleSBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBwbGFjZVxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyhcbiAgICB0byxcbiAgICBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCksXG4gICAgbG9jYXRpb25QYXRobmFtZSxcbiAgICByZWxhdGl2ZSA9PT0gXCJwYXRoXCJcbiAgKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KFxuICAgICgpID0+IG5hdmlnYXRlKEpTT04ucGFyc2UoanNvblBhdGgpLCB7IHJlcGxhY2UsIHN0YXRlLCByZWxhdGl2ZSB9KSxcbiAgICBbbmF2aWdhdGUsIGpzb25QYXRoLCByZWxhdGl2ZSwgcmVwbGFjZSwgc3RhdGVdXG4gICk7XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3V0bGV0UHJvcHMge1xuICBjb250ZXh0PzogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvb3V0bGV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBPdXRsZXQocHJvcHM6IE91dGxldFByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aFJvdXRlUHJvcHMge1xuICBjYXNlU2Vuc2l0aXZlPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImNhc2VTZW5zaXRpdmVcIl07XG4gIHBhdGg/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wicGF0aFwiXTtcbiAgaWQ/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wiaWRcIl07XG4gIGxhenk/OiBMYXp5Um91dGVGdW5jdGlvbjxOb25JbmRleFJvdXRlT2JqZWN0PjtcbiAgbG9hZGVyPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImxvYWRlclwiXTtcbiAgYWN0aW9uPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImFjdGlvblwiXTtcbiAgaGFzRXJyb3JCb3VuZGFyeT86IE5vbkluZGV4Um91dGVPYmplY3RbXCJoYXNFcnJvckJvdW5kYXJ5XCJdO1xuICBzaG91bGRSZXZhbGlkYXRlPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcInNob3VsZFJldmFsaWRhdGVcIl07XG4gIGhhbmRsZT86IE5vbkluZGV4Um91dGVPYmplY3RbXCJoYW5kbGVcIl07XG4gIGluZGV4PzogZmFsc2U7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBlbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIENvbXBvbmVudD86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBIeWRyYXRlRmFsbGJhY2s/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgRXJyb3JCb3VuZGFyeT86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheW91dFJvdXRlUHJvcHMgZXh0ZW5kcyBQYXRoUm91dGVQcm9wcyB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4Um91dGVQcm9wcyB7XG4gIGNhc2VTZW5zaXRpdmU/OiBJbmRleFJvdXRlT2JqZWN0W1wiY2FzZVNlbnNpdGl2ZVwiXTtcbiAgcGF0aD86IEluZGV4Um91dGVPYmplY3RbXCJwYXRoXCJdO1xuICBpZD86IEluZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbGF6eT86IExhenlSb3V0ZUZ1bmN0aW9uPEluZGV4Um91dGVPYmplY3Q+O1xuICBsb2FkZXI/OiBJbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBJbmRleFJvdXRlT2JqZWN0W1wiYWN0aW9uXCJdO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogSW5kZXhSb3V0ZU9iamVjdFtcImhhc0Vycm9yQm91bmRhcnlcIl07XG4gIHNob3VsZFJldmFsaWRhdGU/OiBJbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogSW5kZXhSb3V0ZU9iamVjdFtcImhhbmRsZVwiXTtcbiAgaW5kZXg6IHRydWU7XG4gIGNoaWxkcmVuPzogdW5kZWZpbmVkO1xuICBlbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIENvbXBvbmVudD86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xuICBIeWRyYXRlRmFsbGJhY2s/OiBSZWFjdC5Db21wb25lbnRUeXBlIHwgbnVsbDtcbiAgRXJyb3JCb3VuZGFyeT86IFJlYWN0LkNvbXBvbmVudFR5cGUgfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBSb3V0ZVByb3BzID0gUGF0aFJvdXRlUHJvcHMgfCBMYXlvdXRSb3V0ZVByb3BzIHwgSW5kZXhSb3V0ZVByb3BzO1xuXG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gUm91dGUoX3Byb3BzOiBSb3V0ZVByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICBmYWxzZSxcbiAgICBgQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBgICtcbiAgICAgIGBuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uYFxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBsb2NhdGlvbjogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmc7XG4gIG5hdmlnYXRpb25UeXBlPzogTmF2aWdhdGlvblR5cGU7XG4gIG5hdmlnYXRvcjogTmF2aWdhdG9yO1xuICBzdGF0aWM/OiBib29sZWFuO1xuICBmdXR1cmU/OiBQYXJ0aWFsPFBpY2s8RnV0dXJlQ29uZmlnLCBcInY3X3JlbGF0aXZlU3BsYXRQYXRoXCI+Pjtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIGA8Um91dGVyPmAgZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSBgPEJyb3dzZXJSb3V0ZXI+YFxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgYDxTdGF0aWNSb3V0ZXI+YCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gUm91dGVyKHtcbiAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICBjaGlsZHJlbiA9IG51bGwsXG4gIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gIG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuUG9wLFxuICBuYXZpZ2F0b3IsXG4gIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlLFxuICBmdXR1cmUsXG59OiBSb3V0ZXJQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBpbnZhcmlhbnQoXG4gICAgIXVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIGBZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LmAgK1xuICAgICAgYCBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5gXG4gICk7XG5cbiAgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVByb3AucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGJhc2VuYW1lLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBzdGF0aWNQcm9wLFxuICAgICAgZnV0dXJlOiB7XG4gICAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICAgICAgLi4uZnV0dXJlLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBbYmFzZW5hbWUsIGZ1dHVyZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXVxuICApO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCIsXG4gIH0gPSBsb2NhdGlvblByb3A7XG5cbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgICBzZWFyY2gsXG4gICAgICAgIGhhc2gsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBrZXksXG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGUsXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuXG4gIHdhcm5pbmcoXG4gICAgbG9jYXRpb25Db250ZXh0ICE9IG51bGwsXG4gICAgYDxSb3V0ZXIgYmFzZW5hbWU9XCIke2Jhc2VuYW1lfVwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIGAgK1xuICAgICAgYFwiJHtwYXRobmFtZX0ke3NlYXJjaH0ke2hhc2h9XCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBgICtcbiAgICAgIGBiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5gXG4gICk7XG5cbiAgaWYgKGxvY2F0aW9uQ29udGV4dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bmF2aWdhdGlvbkNvbnRleHR9PlxuICAgICAgPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciBjaGlsZHJlbj17Y2hpbGRyZW59IHZhbHVlPXtsb2NhdGlvbkNvbnRleHR9IC8+XG4gICAgPC9OYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXNQcm9wcyB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBsb2NhdGlvbj86IFBhcnRpYWw8TG9jYXRpb24+IHwgc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIGA8Um91dGU+YCBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gUm91dGVzKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2F0aW9uLFxufTogUm91dGVzUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXdhaXRSZXNvbHZlUmVuZGVyRnVuY3Rpb24ge1xuICAoZGF0YTogQXdhaXRlZDxhbnk+KTogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF3YWl0UHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgQXdhaXRSZXNvbHZlUmVuZGVyRnVuY3Rpb247XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcmVzb2x2ZTogVHJhY2tlZFByb21pc2UgfCBhbnk7XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gQXdhaXQoeyBjaGlsZHJlbiwgZXJyb3JFbGVtZW50LCByZXNvbHZlIH06IEF3YWl0UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QXdhaXRFcnJvckJvdW5kYXJ5IHJlc29sdmU9e3Jlc29sdmV9IGVycm9yRWxlbWVudD17ZXJyb3JFbGVtZW50fT5cbiAgICAgIDxSZXNvbHZlQXdhaXQ+e2NoaWxkcmVufTwvUmVzb2x2ZUF3YWl0PlxuICAgIDwvQXdhaXRFcnJvckJvdW5kYXJ5PlxuICApO1xufVxuXG50eXBlIEF3YWl0RXJyb3JCb3VuZGFyeVByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJlc29sdmU6IFRyYWNrZWRQcm9taXNlIHwgYW55O1xufT47XG5cbnR5cGUgQXdhaXRFcnJvckJvdW5kYXJ5U3RhdGUgPSB7XG4gIGVycm9yOiBhbnk7XG59O1xuXG5lbnVtIEF3YWl0UmVuZGVyU3RhdHVzIHtcbiAgcGVuZGluZyxcbiAgc3VjY2VzcyxcbiAgZXJyb3IsXG59XG5cbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5cbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgQXdhaXRFcnJvckJvdW5kYXJ5UHJvcHMsXG4gIEF3YWl0RXJyb3JCb3VuZGFyeVN0YXRlXG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IEF3YWl0RXJyb3JCb3VuZGFyeVByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGVycm9yOiBudWxsIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4geyBlcnJvciB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IGFueSwgZXJyb3JJbmZvOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIixcbiAgICAgIGVycm9yLFxuICAgICAgZXJyb3JJbmZvXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgeyBjaGlsZHJlbiwgZXJyb3JFbGVtZW50LCByZXNvbHZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IHByb21pc2U6IFRyYWNrZWRQcm9taXNlIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IHN0YXR1czogQXdhaXRSZW5kZXJTdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7IGdldDogKCkgPT4gcmVzb2x2ZSB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IHJlbmRlckVycm9yIH0pO1xuICAgIH0gZWxzZSBpZiAoKHJlc29sdmUgYXMgVHJhY2tlZFByb21pc2UpLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9XG4gICAgICAgIFwiX2Vycm9yXCIgaW4gcHJvbWlzZVxuICAgICAgICAgID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3JcbiAgICAgICAgICA6IFwiX2RhdGFcIiBpbiBwcm9taXNlXG4gICAgICAgICAgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzXG4gICAgICAgICAgOiBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0XG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKFxuICAgICAgICAoZGF0YTogYW55KSA9PlxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9kYXRhXCIsIHsgZ2V0OiAoKSA9PiBkYXRhIH0pLFxuICAgICAgICAoZXJyb3I6IGFueSkgPT5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IGVycm9yIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiZcbiAgICAgIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3JcbiAgICApIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7XG4gICAgICAvLyBSZW5kZXIgdmlhIG91ciBlcnJvckVsZW1lbnRcbiAgICAgIHJldHVybiA8QXdhaXRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9taXNlfSBjaGlsZHJlbj17ZXJyb3JFbGVtZW50fSAvPjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIDxBd2FpdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb21pc2V9IGNoaWxkcmVuPXtjaGlsZHJlbn0gLz47XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KHtcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfCBBd2FpdFJlc29sdmVSZW5kZXJGdW5jdGlvbjtcbn0pIHtcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIDw+e3RvUmVuZGVyfTwvPjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUsXG4gIHBhcmVudFBhdGg6IG51bWJlcltdID0gW11cbik6IFJvdXRlT2JqZWN0W10ge1xuICBsZXQgcm91dGVzOiBSb3V0ZU9iamVjdFtdID0gW107XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkoXG4gICAgICAgIHJvdXRlcyxcbiAgICAgICAgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBlbGVtZW50LnR5cGUgPT09IFJvdXRlLFxuICAgICAgYFske1xuICAgICAgICB0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWVcbiAgICAgIH1dIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5gXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuLFxuICAgICAgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCJcbiAgICApO1xuXG4gICAgbGV0IHJvdXRlOiBSb3V0ZU9iamVjdCA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTpcbiAgICAgICAgZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHxcbiAgICAgICAgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenksXG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihcbiAgICAgICAgZWxlbWVudC5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgdHJlZVBhdGhcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcblxuICByZXR1cm4gcm91dGVzO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNYXRjaGVzKFxuICBtYXRjaGVzOiBSb3V0ZU1hdGNoW10gfCBudWxsXG4pOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuIiwiaW1wb3J0IHR5cGUge1xuICBGb3JtRW5jVHlwZSxcbiAgSFRNTEZvcm1NZXRob2QsXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcgYXMgd2FybmluZyB9IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdE1ldGhvZDogSFRNTEZvcm1NZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGU6IEZvcm1FbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgSFRNTEVsZW1lbnQge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdDogYW55KTogb2JqZWN0IGlzIEhUTUxCdXR0b25FbGVtZW50IHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJ1dHRvblwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtRWxlbWVudChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBIVE1MRm9ybUVsZW1lbnQge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgSFRNTElucHV0RWxlbWVudCB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuXG50eXBlIExpbWl0ZWRNb3VzZUV2ZW50ID0gUGljazxcbiAgTW91c2VFdmVudCxcbiAgXCJidXR0b25cIiB8IFwibWV0YUtleVwiIHwgXCJhbHRLZXlcIiB8IFwiY3RybEtleVwiIHwgXCJzaGlmdEtleVwiXG4+O1xuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQ6IExpbWl0ZWRNb3VzZUV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soXG4gIGV2ZW50OiBMaW1pdGVkTW91c2VFdmVudCxcbiAgdGFyZ2V0Pzogc3RyaW5nXG4pIHtcbiAgcmV0dXJuIChcbiAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgKTtcbn1cblxuZXhwb3J0IHR5cGUgUGFyYW1LZXlWYWx1ZVBhaXIgPSBbc3RyaW5nLCBzdHJpbmddO1xuXG5leHBvcnQgdHlwZSBVUkxTZWFyY2hQYXJhbXNJbml0ID1cbiAgfCBzdHJpbmdcbiAgfCBQYXJhbUtleVZhbHVlUGFpcltdXG4gIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10+XG4gIHwgVVJMU2VhcmNoUGFyYW1zO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoXG4gIGluaXQ6IFVSTFNlYXJjaFBhcmFtc0luaXQgPSBcIlwiXG4pOiBVUkxTZWFyY2hQYXJhbXMge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhcbiAgICB0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fFxuICAgIEFycmF5LmlzQXJyYXkoaW5pdCkgfHxcbiAgICBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zXG4gICAgICA/IGluaXRcbiAgICAgIDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgICAgICAgcmV0dXJuIG1lbW8uY29uY2F0KFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKHYpID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgW10gYXMgUGFyYW1LZXlWYWx1ZVBhaXJbXSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKFxuICBsb2NhdGlvblNlYXJjaDogc3RyaW5nLFxuICBkZWZhdWx0U2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMgfCBudWxsXG4pIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG5cbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuXG4vLyBUaGFua3MgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy90eXBlLWZlc3QhXG50eXBlIEpzb25PYmplY3QgPSB7IFtLZXkgaW4gc3RyaW5nXTogSnNvblZhbHVlIH0gJiB7XG4gIFtLZXkgaW4gc3RyaW5nXT86IEpzb25WYWx1ZSB8IHVuZGVmaW5lZDtcbn07XG50eXBlIEpzb25BcnJheSA9IEpzb25WYWx1ZVtdIHwgcmVhZG9ubHkgSnNvblZhbHVlW107XG50eXBlIEpzb25QcmltaXRpdmUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbDtcbnR5cGUgSnNvblZhbHVlID0gSnNvblByaW1pdGl2ZSB8IEpzb25PYmplY3QgfCBKc29uQXJyYXk7XG5cbmV4cG9ydCB0eXBlIFN1Ym1pdFRhcmdldCA9XG4gIHwgSFRNTEZvcm1FbGVtZW50XG4gIHwgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgfCBIVE1MSW5wdXRFbGVtZW50XG4gIHwgRm9ybURhdGFcbiAgfCBVUkxTZWFyY2hQYXJhbXNcbiAgfCBKc29uVmFsdWVcbiAgfCBudWxsO1xuXG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKFxuICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyO1xufVxuXG4vKipcbiAqIFN1Ym1pdCBvcHRpb25zIHNoYXJlZCBieSBib3RoIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVyc1xuICovXG5pbnRlcmZhY2UgU2hhcmVkU3VibWl0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2QgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0uIE92ZXJyaWRlcyBgPGZvcm0gbWV0aG9kPmAuXG4gICAqIERlZmF1bHRzIHRvIFwiR0VUXCIuXG4gICAqL1xuICBtZXRob2Q/OiBIVE1MRm9ybU1ldGhvZDtcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiBVUkwgcGF0aCB1c2VkIHRvIHN1Ym1pdCB0aGUgZm9ybS4gT3ZlcnJpZGVzIGA8Zm9ybSBhY3Rpb24+YC5cbiAgICogRGVmYXVsdHMgdG8gdGhlIHBhdGggb2YgdGhlIGN1cnJlbnQgcm91dGUuXG4gICAqL1xuICBhY3Rpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbmNvZGluZyB1c2VkIHRvIHN1Ym1pdCB0aGUgZm9ybS4gT3ZlcnJpZGVzIGA8Zm9ybSBlbmNUeXBlPmAuXG4gICAqIERlZmF1bHRzIHRvIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIuXG4gICAqL1xuICBlbmNUeXBlPzogRm9ybUVuY1R5cGU7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZm9ybSBhY3Rpb24gaXMgcmVsYXRpdmUgdG8gdGhlIHJvdXRlIGhpZXJhcmNoeSBvclxuICAgKiB0aGUgcGF0aG5hbWUuICBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBvcHQgb3V0IG9mIG5hdmlnYXRpbmcgdGhlIHJvdXRlXG4gICAqIGhpZXJhcmNoeSBhbmQgd2FudCB0byBpbnN0ZWFkIHJvdXRlIGJhc2VkIG9uIC8tZGVsaW1pdGVkIFVSTCBzZWdtZW50c1xuICAgKi9cbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuXG4gIC8qKlxuICAgKiBJbiBicm93c2VyLWJhc2VkIGVudmlyb25tZW50cywgcHJldmVudCByZXNldHRpbmcgc2Nyb2xsIGFmdGVyIHRoaXNcbiAgICogbmF2aWdhdGlvbiB3aGVuIHVzaW5nIHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICAgKi9cbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRW5hYmxlIGZsdXNoU3luYyBmb3IgdGhpcyBzdWJtaXNzaW9uJ3Mgc3RhdGUgdXBkYXRlc1xuICAgKi9cbiAgdW5zdGFibGVfZmx1c2hTeW5jPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBTdWJtaXQgb3B0aW9ucyBhdmFpbGFibGUgdG8gZmV0Y2hlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGZXRjaGVyU3VibWl0T3B0aW9ucyBleHRlbmRzIFNoYXJlZFN1Ym1pdE9wdGlvbnMge31cblxuLyoqXG4gKiBTdWJtaXQgb3B0aW9ucyBhdmFpbGFibGUgdG8gbmF2aWdhdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJtaXRPcHRpb25zIGV4dGVuZHMgRmV0Y2hlclN1Ym1pdE9wdGlvbnMge1xuICAvKipcbiAgICogU2V0IGB0cnVlYCB0byByZXBsYWNlIHRoZSBjdXJyZW50IGVudHJ5IGluIHRoZSBicm93c2VyJ3MgaGlzdG9yeSBzdGFja1xuICAgKiBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9uZSAoaS5lLiBzdGF5IG9uIFwidGhlIHNhbWUgcGFnZVwiKS4gRGVmYXVsdHNcbiAgICogdG8gYGZhbHNlYC5cbiAgICovXG4gIHJlcGxhY2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTdGF0ZSBvYmplY3QgdG8gYWRkIHRvIHRoZSBoaXN0b3J5IHN0YWNrIGVudHJ5IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICovXG4gIHN0YXRlPzogYW55O1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZSBhIHNwZWNpZmljIGZldGNoZXJLZXkgdG8gdXNlIHdoZW4gdXNpbmcgbmF2aWdhdGU9ZmFsc2VcbiAgICovXG4gIGZldGNoZXJLZXk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG5hdmlnYXRlPWZhbHNlIHdpbGwgdXNlIGEgZmV0Y2hlciBpbnN0ZWFkIG9mIGEgbmF2aWdhdGlvblxuICAgKi9cbiAgbmF2aWdhdGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBFbmFibGUgdmlldyB0cmFuc2l0aW9ucyBvbiB0aGlzIHN1Ym1pc3Npb24gbmF2aWdhdGlvblxuICAgKi9cbiAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24/OiBib29sZWFuO1xufVxuXG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXM6IFNldDxGb3JtRW5jVHlwZT4gPSBuZXcgU2V0KFtcbiAgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG4gIFwidGV4dC9wbGFpblwiLFxuXSk7XG5cbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGU6IHN0cmluZyB8IG51bGwpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlIGFzIEZvcm1FbmNUeXBlKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBcIiR7ZW5jVHlwZX1cIiBpcyBub3QgYSB2YWxpZCBcXGBlbmNUeXBlXFxgIGZvciBcXGA8Rm9ybT5cXGAvXFxgPGZldGNoZXIuRm9ybT5cXGAgYCArXG4gICAgICAgIGBhbmQgd2lsbCBkZWZhdWx0IHRvIFwiJHtkZWZhdWx0RW5jVHlwZX1cImBcbiAgICApO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8oXG4gIHRhcmdldDogU3VibWl0VGFyZ2V0LFxuICBiYXNlbmFtZTogc3RyaW5nXG4pOiB7XG4gIGFjdGlvbjogc3RyaW5nIHwgbnVsbDtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGVuY1R5cGU6IHN0cmluZztcbiAgZm9ybURhdGE6IEZvcm1EYXRhIHwgdW5kZWZpbmVkO1xuICBib2R5OiBhbnk7XG59IHtcbiAgbGV0IG1ldGhvZDogc3RyaW5nO1xuICBsZXQgYWN0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBsZXQgZW5jVHlwZTogc3RyaW5nO1xuICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhIHwgdW5kZWZpbmVkO1xuICBsZXQgYm9keTogYW55O1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKFxuICAgIGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8XG4gICAgKGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiZcbiAgICAgICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSlcbiAgKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiB3aXRob3V0IGEgPGZvcm0+YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cblxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG5cbiAgICBtZXRob2QgPVxuICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHxcbiAgICAgIGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8XG4gICAgICBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPVxuICAgICAgZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fFxuICAgICAgZ2V0Rm9ybUVuY1R5cGUoZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fFxuICAgICAgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICAvLyBCdWlsZCBhIEZvcm1EYXRhIG9iamVjdCBwb3B1bGF0ZWQgZnJvbSBhIGZvcm0gYW5kIHN1Ym1pdHRlclxuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0sIHRhcmdldCk7XG5cbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7IG5hbWUsIHR5cGUsIHZhbHVlIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gYCR7bmFtZX0uYCA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChgJHtwcmVmaXh9eGAsIFwiMFwiKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKGAke3ByZWZpeH15YCwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgYCArXG4gICAgICAgIGA8aW5wdXQgdHlwZT1cInN1Ym1pdHxpbWFnZVwiPmBcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuXG4gIC8vIFNlbmQgYm9keSBmb3IgPEZvcm0gZW5jVHlwZT1cInRleHQvcGxhaW5cIiBzbyB3ZSBlbmNvZGUgaXQgaW50byB0ZXh0XG4gIGlmIChmb3JtRGF0YSAmJiBlbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgIGJvZHkgPSBmb3JtRGF0YTtcbiAgICBmb3JtRGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7IGFjdGlvbiwgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSwgZW5jVHlwZSwgZm9ybURhdGEsIGJvZHkgfTtcbn1cbiIsIi8qKlxuICogTk9URTogSWYgeW91IHJlZmFjdG9yIHRoaXMgdG8gc3BsaXQgdXAgdGhlIG1vZHVsZXMgaW50byBzZXBhcmF0ZSBmaWxlcyxcbiAqIHlvdSdsbCBuZWVkIHRvIHVwZGF0ZSB0aGUgcm9sbHVwIGNvbmZpZyBmb3IgcmVhY3Qtcm91dGVyLWRvbS12NS1jb21wYXQuXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVPYmplY3QsXG4gIEZ1dHVyZUNvbmZpZyxcbiAgTG9jYXRpb24sXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgTmF2aWdhdGlvblR5cGUsXG4gIE5hdmlnYXRvcixcbiAgUmVsYXRpdmVSb3V0aW5nVHlwZSxcbiAgUm91dGVPYmplY3QsXG4gIFJvdXRlclByb3ZpZGVyUHJvcHMsXG4gIFRvLFxuICB1bnN0YWJsZV9QYXRjaFJvdXRlc09uTWlzc0Z1bmN0aW9uLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIGNyZWF0ZVBhdGgsXG4gIHVzZUhyZWYsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaGVzLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VCbG9ja2VyLFxuICBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgYXMgRGF0YVJvdXRlckNvbnRleHQsXG4gIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCBhcyBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX1JvdXRlQ29udGV4dCBhcyBSb3V0ZUNvbnRleHQsXG4gIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMgYXMgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICBVTlNBRkVfdXNlUm91dGVJZCBhcyB1c2VSb3V0ZUlkLFxuICBVTlNBRkVfdXNlUm91dGVzSW1wbCBhcyB1c2VSb3V0ZXNJbXBsLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgdHlwZSB7XG4gIEJyb3dzZXJIaXN0b3J5LFxuICB1bnN0YWJsZV9EYXRhU3RyYXRlZ3lGdW5jdGlvbixcbiAgdW5zdGFibGVfRGF0YVN0cmF0ZWd5RnVuY3Rpb25BcmdzLFxuICB1bnN0YWJsZV9EYXRhU3RyYXRlZ3lNYXRjaCxcbiAgRmV0Y2hlcixcbiAgRm9ybUVuY1R5cGUsXG4gIEZvcm1NZXRob2QsXG4gIEZ1dHVyZUNvbmZpZyBhcyBSb3V0ZXJGdXR1cmVDb25maWcsXG4gIEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb24sXG4gIEhhc2hIaXN0b3J5LFxuICBIaXN0b3J5LFxuICBIVE1MRm9ybU1ldGhvZCxcbiAgSHlkcmF0aW9uU3RhdGUsXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgVjdfRm9ybU1ldGhvZCxcbiAgUm91dGVyU3RhdGUsXG4gIFJvdXRlclN1YnNjcmliZXIsXG4gIEJsb2NrZXJGdW5jdGlvbixcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5pbXBvcnQge1xuICBjcmVhdGVSb3V0ZXIsXG4gIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LFxuICBjcmVhdGVIYXNoSGlzdG9yeSxcbiAgam9pblBhdGhzLFxuICBzdHJpcEJhc2VuYW1lLFxuICBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgYXMgRXJyb3JSZXNwb25zZUltcGwsXG4gIFVOU0FGRV9pbnZhcmlhbnQgYXMgaW52YXJpYW50LFxuICBVTlNBRkVfd2FybmluZyBhcyB3YXJuaW5nLFxuICBtYXRjaFBhdGgsXG4gIElETEVfRkVUQ0hFUixcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgU3VibWl0T3B0aW9ucyxcbiAgUGFyYW1LZXlWYWx1ZVBhaXIsXG4gIFVSTFNlYXJjaFBhcmFtc0luaXQsXG4gIFN1Ym1pdFRhcmdldCxcbiAgRmV0Y2hlclN1Ym1pdE9wdGlvbnMsXG59IGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlU2VhcmNoUGFyYW1zLFxuICBkZWZhdWx0TWV0aG9kLFxuICBnZXRGb3JtU3VibWlzc2lvbkluZm8sXG4gIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uLFxuICBzaG91bGRQcm9jZXNzTGlua0NsaWNrLFxufSBmcm9tIFwiLi9kb21cIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBSZS1leHBvcnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgdHlwZSB7XG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneUZ1bmN0aW9uLFxuICB1bnN0YWJsZV9EYXRhU3RyYXRlZ3lGdW5jdGlvbkFyZ3MsXG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneU1hdGNoLFxuICBGb3JtRW5jVHlwZSxcbiAgRm9ybU1ldGhvZCxcbiAgR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbixcbiAgUGFyYW1LZXlWYWx1ZVBhaXIsXG4gIFN1Ym1pdE9wdGlvbnMsXG4gIFVSTFNlYXJjaFBhcmFtc0luaXQsXG4gIFY3X0Zvcm1NZXRob2QsXG59O1xuZXhwb3J0IHsgY3JlYXRlU2VhcmNoUGFyYW1zLCBFcnJvclJlc3BvbnNlSW1wbCBhcyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgfTtcblxuLy8gTm90ZTogS2VlcCBpbiBzeW5jIHdpdGggcmVhY3Qtcm91dGVyIGV4cG9ydHMhXG5leHBvcnQgdHlwZSB7XG4gIEFjdGlvbkZ1bmN0aW9uLFxuICBBY3Rpb25GdW5jdGlvbkFyZ3MsXG4gIEF3YWl0UHJvcHMsXG4gIEJsb2NrZXIsXG4gIEJsb2NrZXJGdW5jdGlvbixcbiAgRGF0YVJvdXRlTWF0Y2gsXG4gIERhdGFSb3V0ZU9iamVjdCxcbiAgRXJyb3JSZXNwb25zZSxcbiAgRmV0Y2hlcixcbiAgRnV0dXJlQ29uZmlnLFxuICBIYXNoLFxuICBJbmRleFJvdXRlT2JqZWN0LFxuICBJbmRleFJvdXRlUHJvcHMsXG4gIEpzb25GdW5jdGlvbixcbiAgTGF6eVJvdXRlRnVuY3Rpb24sXG4gIExheW91dFJvdXRlUHJvcHMsXG4gIExvYWRlckZ1bmN0aW9uLFxuICBMb2FkZXJGdW5jdGlvbkFyZ3MsXG4gIExvY2F0aW9uLFxuICBNZW1vcnlSb3V0ZXJQcm9wcyxcbiAgTmF2aWdhdGVGdW5jdGlvbixcbiAgTmF2aWdhdGVPcHRpb25zLFxuICBOYXZpZ2F0ZVByb3BzLFxuICBOYXZpZ2F0aW9uLFxuICBOYXZpZ2F0b3IsXG4gIE5vbkluZGV4Um91dGVPYmplY3QsXG4gIE91dGxldFByb3BzLFxuICBQYXJhbXMsXG4gIFBhcmFtUGFyc2VLZXksXG4gIFBhdGgsXG4gIFBhdGhNYXRjaCxcbiAgUGF0aG5hbWUsXG4gIFBhdGhQYXJhbSxcbiAgUGF0aFBhdHRlcm4sXG4gIFBhdGhSb3V0ZVByb3BzLFxuICBSZWRpcmVjdEZ1bmN0aW9uLFxuICBSZWxhdGl2ZVJvdXRpbmdUeXBlLFxuICBSb3V0ZU1hdGNoLFxuICBSb3V0ZU9iamVjdCxcbiAgUm91dGVQcm9wcyxcbiAgUm91dGVyUHJvcHMsXG4gIFJvdXRlclByb3ZpZGVyUHJvcHMsXG4gIFJvdXRlc1Byb3BzLFxuICBTZWFyY2gsXG4gIFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbixcbiAgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uQXJncyxcbiAgVG8sXG4gIFVJTWF0Y2gsXG4gIHVuc3RhYmxlX0hhbmRsZXJSZXN1bHQsXG4gIHVuc3RhYmxlX1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb24sXG59IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmV4cG9ydCB7XG4gIEFib3J0ZWREZWZlcnJlZEVycm9yLFxuICBBd2FpdCxcbiAgTWVtb3J5Um91dGVyLFxuICBOYXZpZ2F0ZSxcbiAgTmF2aWdhdGlvblR5cGUsXG4gIE91dGxldCxcbiAgUm91dGUsXG4gIFJvdXRlcixcbiAgUm91dGVzLFxuICBjcmVhdGVNZW1vcnlSb3V0ZXIsXG4gIGNyZWF0ZVBhdGgsXG4gIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbixcbiAgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLFxuICBkZWZlcixcbiAgaXNSb3V0ZUVycm9yUmVzcG9uc2UsXG4gIGdlbmVyYXRlUGF0aCxcbiAganNvbixcbiAgbWF0Y2hQYXRoLFxuICBtYXRjaFJvdXRlcyxcbiAgcGFyc2VQYXRoLFxuICByZWRpcmVjdCxcbiAgcmVkaXJlY3REb2N1bWVudCxcbiAgcmVuZGVyTWF0Y2hlcyxcbiAgcmVzb2x2ZVBhdGgsXG4gIHVzZUFjdGlvbkRhdGEsXG4gIHVzZUFzeW5jRXJyb3IsXG4gIHVzZUFzeW5jVmFsdWUsXG4gIHVzZUJsb2NrZXIsXG4gIHVzZUhyZWYsXG4gIHVzZUluUm91dGVyQ29udGV4dCxcbiAgdXNlTG9hZGVyRGF0YSxcbiAgdXNlTG9jYXRpb24sXG4gIHVzZU1hdGNoLFxuICB1c2VNYXRjaGVzLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlTmF2aWdhdGlvblR5cGUsXG4gIHVzZU91dGxldCxcbiAgdXNlT3V0bGV0Q29udGV4dCxcbiAgdXNlUGFyYW1zLFxuICB1c2VSZXNvbHZlZFBhdGgsXG4gIHVzZVJldmFsaWRhdG9yLFxuICB1c2VSb3V0ZUVycm9yLFxuICB1c2VSb3V0ZUxvYWRlckRhdGEsXG4gIHVzZVJvdXRlcyxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEQU5HRVIhIFBMRUFTRSBSRUFEIE1FIVxuLy8gV2UgcHJvdmlkZSB0aGVzZSBleHBvcnRzIGFzIGFuIGVzY2FwZSBoYXRjaCBpbiB0aGUgZXZlbnQgdGhhdCB5b3UgbmVlZCBhbnlcbi8vIHJvdXRpbmcgZGF0YSB0aGF0IHdlIGRvbid0IHByb3ZpZGUgYW4gZXhwbGljaXQgQVBJIGZvci4gV2l0aCB0aGF0IHNhaWQsIHdlXG4vLyB3YW50IHRvIGNvdmVyIHlvdXIgdXNlIGNhc2UgaWYgd2UgY2FuLCBzbyBpZiB5b3UgZmVlbCB0aGUgbmVlZCB0byB1c2UgdGhlc2Vcbi8vIHdlIHdhbnQgdG8gaGVhciBmcm9tIHlvdS4gTGV0IHVzIGtub3cgd2hhdCB5b3UncmUgYnVpbGRpbmcgYW5kIHdlJ2xsIGRvIG91clxuLy8gYmVzdCB0byBtYWtlIHN1cmUgd2UgY2FuIHN1cHBvcnQgeW91IVxuLy9cbi8vIFdlIGNvbnNpZGVyIHRoZXNlIGV4cG9ydHMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIGFuZCBkbyBub3QgZ3VhcmFudGVlXG4vLyBhZ2FpbnN0IGFueSBicmVha2luZyBjaGFuZ2VzLCByZWdhcmRsZXNzIG9mIHRoZSBzZW12ZXIgcmVsZWFzZS4gVXNlIHdpdGhcbi8vIGV4dHJlbWUgY2F1dGlvbiBhbmQgb25seSBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgY29uc2VxdWVuY2VzLiBHb2RzcGVlZC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHtcbiAgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LFxuICBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCxcbiAgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LFxuICBVTlNBRkVfTG9jYXRpb25Db250ZXh0LFxuICBVTlNBRkVfUm91dGVDb250ZXh0LFxuICBVTlNBRkVfdXNlUm91dGVJZCxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuLy8jZW5kcmVnaW9uXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIF9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTogSHlkcmF0aW9uU3RhdGUgfCB1bmRlZmluZWQ7XG4gIHZhciBfX3JlYWN0Um91dGVyVmVyc2lvbjogc3RyaW5nO1xuICBpbnRlcmZhY2UgRG9jdW1lbnQge1xuICAgIHN0YXJ0Vmlld1RyYW5zaXRpb24oY2I6ICgpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkKTogVmlld1RyYW5zaXRpb247XG4gIH1cbn1cblxuLy8gSEVZIFlPVSEgRE9OJ1QgVE9VQ0ggVEhJUyBWQVJJQUJMRSFcbi8vXG4vLyBJdCBpcyByZXBsYWNlZCB3aXRoIHRoZSBwcm9wZXIgdmVyc2lvbiBhdCBidWlsZCB0aW1lIHZpYSBhIGJhYmVsIHBsdWdpbiBpblxuLy8gdGhlIHJvbGx1cCBjb25maWcuXG4vL1xuLy8gRXhwb3J0IGEgZ2xvYmFsIHByb3BlcnR5IG9udG8gdGhlIHdpbmRvdyBmb3IgUmVhY3QgUm91dGVyIGRldGVjdGlvbiBieSB0aGVcbi8vIENvcmUgV2ViIFZpdGFscyBUZWNobm9sb2d5IFJlcG9ydC4gIFRoaXMgd2F5IHRoZXkgY2FuIGNvbmZpZ3VyZSB0aGUgYHdhcHBhbHl6ZXJgXG4vLyB0byBkZXRlY3QgYW5kIHByb3Blcmx5IGNsYXNzaWZ5IGxpdmUgd2Vic2l0ZXMgYXMgYmVpbmcgYnVpbHQgd2l0aCBSZWFjdCBSb3V0ZXI6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSFRUUEFyY2hpdmUvd2FwcGFseXplci9ibG9iL21haW4vc3JjL3RlY2hub2xvZ2llcy9yLmpzb25cbmNvbnN0IFJFQUNUX1JPVVRFUl9WRVJTSU9OID0gXCIwXCI7XG50cnkge1xuICB3aW5kb3cuX19yZWFjdFJvdXRlclZlcnNpb24gPSBSRUFDVF9ST1VURVJfVkVSU0lPTjtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gbm8tb3Bcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBSb3V0ZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5pbnRlcmZhY2UgRE9NUm91dGVyT3B0cyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBmdXR1cmU/OiBQYXJ0aWFsPE9taXQ8Um91dGVyRnV0dXJlQ29uZmlnLCBcInY3X3ByZXBlbmRCYXNlbmFtZVwiPj47XG4gIGh5ZHJhdGlvbkRhdGE/OiBIeWRyYXRpb25TdGF0ZTtcbiAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5PzogdW5zdGFibGVfRGF0YVN0cmF0ZWd5RnVuY3Rpb247XG4gIHVuc3RhYmxlX3BhdGNoUm91dGVzT25NaXNzPzogdW5zdGFibGVfUGF0Y2hSb3V0ZXNPbk1pc3NGdW5jdGlvbjtcbiAgd2luZG93PzogV2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFtdLFxuICBvcHRzPzogRE9NUm91dGVyT3B0c1xuKTogUmVtaXhSb3V0ZXIge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cz8uYmFzZW5hbWUsXG4gICAgZnV0dXJlOiB7XG4gICAgICAuLi5vcHRzPy5mdXR1cmUsXG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWUsXG4gICAgfSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7IHdpbmRvdzogb3B0cz8ud2luZG93IH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHM/Lmh5ZHJhdGlvbkRhdGEgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IG9wdHM/LnVuc3RhYmxlX2RhdGFTdHJhdGVneSxcbiAgICB1bnN0YWJsZV9wYXRjaFJvdXRlc09uTWlzczogb3B0cz8udW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3MsXG4gICAgd2luZG93OiBvcHRzPy53aW5kb3csXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IERPTVJvdXRlck9wdHNcbik6IFJlbWl4Um91dGVyIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHM/LmJhc2VuYW1lLFxuICAgIGZ1dHVyZToge1xuICAgICAgLi4ub3B0cz8uZnV0dXJlLFxuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlLFxuICAgIH0sXG4gICAgaGlzdG9yeTogY3JlYXRlSGFzaEhpc3RvcnkoeyB3aW5kb3c6IG9wdHM/LndpbmRvdyB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzPy5oeWRyYXRpb25EYXRhIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBvcHRzPy51bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgdW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3M6IG9wdHM/LnVuc3RhYmxlX3BhdGNoUm91dGVzT25NaXNzLFxuICAgIHdpbmRvdzogb3B0cz8ud2luZG93LFxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpOiBIeWRyYXRpb25TdGF0ZSB8IHVuZGVmaW5lZCB7XG4gIGxldCBzdGF0ZSA9IHdpbmRvdz8uX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSB7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoXG4gIGVycm9yczogUmVtaXhSb3V0ZXJbXCJzdGF0ZVwiXVtcImVycm9yc1wiXVxuKTogUmVtaXhSb3V0ZXJbXCJzdGF0ZVwiXVtcImVycm9yc1wiXSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZDogUmVtaXhSb3V0ZXJbXCJzdGF0ZVwiXVtcImVycm9yc1wiXSA9IHt9O1xuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IEVycm9yUmVzcG9uc2VJbXBsKFxuICAgICAgICB2YWwuc3RhdHVzLFxuICAgICAgICB2YWwuc3RhdHVzVGV4dCxcbiAgICAgICAgdmFsLmRhdGEsXG4gICAgICAgIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gcmVjb25zdHJ1Y3QgdGhlIHJpZ2h0IHR5cGUgb2YgRXJyb3IgKGkuZS4sIFJlZmVyZW5jZUVycm9yKVxuICAgICAgaWYgKHZhbC5fX3N1YlR5cGUpIHtcbiAgICAgICAgbGV0IEVycm9yQ29uc3RydWN0b3IgPSB3aW5kb3dbdmFsLl9fc3ViVHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvckNvbnN0cnVjdG9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm8tb3AgLSBmYWxsIHRocm91Z2ggYW5kIGNyZWF0ZSBhIG5vcm1hbCBFcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29udGV4dHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbnR5cGUgVmlld1RyYW5zaXRpb25Db250ZXh0T2JqZWN0ID1cbiAgfCB7XG4gICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlO1xuICAgIH1cbiAgfCB7XG4gICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWU7XG4gICAgICBmbHVzaFN5bmM6IGJvb2xlYW47XG4gICAgICBjdXJyZW50TG9jYXRpb246IExvY2F0aW9uO1xuICAgICAgbmV4dExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICB9O1xuXG5jb25zdCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFZpZXdUcmFuc2l0aW9uQ29udGV4dE9iamVjdD4oe1xuICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlLFxufSk7XG5pZiAoX19ERVZfXykge1xuICBWaWV3VHJhbnNpdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlZpZXdUcmFuc2l0aW9uXCI7XG59XG5cbmV4cG9ydCB7IFZpZXdUcmFuc2l0aW9uQ29udGV4dCBhcyBVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0IH07XG5cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSB1c2VGZXRjaGVyIGRhdGEgZnJvbSBgYW55YCB0byBgdW5rbm93bmBcbnR5cGUgRmV0Y2hlcnNDb250ZXh0T2JqZWN0ID0gTWFwPHN0cmluZywgYW55PjtcblxuY29uc3QgRmV0Y2hlcnNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxGZXRjaGVyc0NvbnRleHRPYmplY3Q+KG5ldyBNYXAoKSk7XG5pZiAoX19ERVZfXykge1xuICBGZXRjaGVyc0NvbnRleHQuZGlzcGxheU5hbWUgPSBcIkZldGNoZXJzXCI7XG59XG5cbmV4cG9ydCB7IEZldGNoZXJzQ29udGV4dCBhcyBVTlNBRkVfRmV0Y2hlcnNDb250ZXh0IH07XG5cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIENvbXBvbmVudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuY29uc3QgRkxVU0hfU1lOQyA9IFwiZmx1c2hTeW5jXCI7XG5jb25zdCBmbHVzaFN5bmNJbXBsID0gUmVhY3RET01bRkxVU0hfU1lOQ107XG5jb25zdCBVU0VfSUQgPSBcInVzZUlkXCI7XG5jb25zdCB1c2VJZEltcGwgPSBSZWFjdFtVU0VfSURdO1xuXG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiOiAoKSA9PiB2b2lkKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmbHVzaFN5bmNTYWZlKGNiOiAoKSA9PiB2b2lkKSB7XG4gIGlmIChmbHVzaFN5bmNJbXBsKSB7XG4gICAgZmx1c2hTeW5jSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgVmlld1RyYW5zaXRpb24ge1xuICBmaW5pc2hlZDogUHJvbWlzZTx2b2lkPjtcbiAgcmVhZHk6IFByb21pc2U8dm9pZD47XG4gIHVwZGF0ZUNhbGxiYWNrRG9uZTogUHJvbWlzZTx2b2lkPjtcbiAgc2tpcFRyYW5zaXRpb24oKTogdm9pZDtcbn1cblxuY2xhc3MgRGVmZXJyZWQ8VD4ge1xuICBzdGF0dXM6IFwicGVuZGluZ1wiIHwgXCJyZXNvbHZlZFwiIHwgXCJyZWplY3RlZFwiID0gXCJwZW5kaW5nXCI7XG4gIHByb21pc2U6IFByb21pc2U8VD47XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBubyBpbml0aWFsaXplclxuICByZXNvbHZlOiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBubyBpbml0aWFsaXplclxuICByZWplY3Q6IChyZWFzb24/OiB1bmtub3duKSA9PiB2b2lkO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSAodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZXNvbHZlZFwiO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5yZWplY3QgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXJQcm92aWRlcih7XG4gIGZhbGxiYWNrRWxlbWVudCxcbiAgcm91dGVyLFxuICBmdXR1cmUsXG59OiBSb3V0ZXJQcm92aWRlclByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGU8Um91dGVyU3RhdGU+KCk7XG4gIGxldCBbdnRDb250ZXh0LCBzZXRWdENvbnRleHRdID0gUmVhY3QudXNlU3RhdGU8Vmlld1RyYW5zaXRpb25Db250ZXh0T2JqZWN0Pih7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZSxcbiAgfSk7XG4gIGxldCBbcmVuZGVyRGZkLCBzZXRSZW5kZXJEZmRdID0gUmVhY3QudXNlU3RhdGU8RGVmZXJyZWQ8dm9pZD4+KCk7XG4gIGxldCBbdHJhbnNpdGlvbiwgc2V0VHJhbnNpdGlvbl0gPSBSZWFjdC51c2VTdGF0ZTxWaWV3VHJhbnNpdGlvbj4oKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZTx7XG4gICAgc3RhdGU6IFJvdXRlclN0YXRlO1xuICAgIGN1cnJlbnRMb2NhdGlvbjogTG9jYXRpb247XG4gICAgbmV4dExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgfT4oKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlUmVmPE1hcDxzdHJpbmcsIGFueT4+KG5ldyBNYXAoKSk7XG4gIGxldCB7IHY3X3N0YXJ0VHJhbnNpdGlvbiB9ID0gZnV0dXJlIHx8IHt9O1xuXG4gIGxldCBvcHRJblN0YXJ0VHJhbnNpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChjYjogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgICBzdGFydFRyYW5zaXRpb25TYWZlKGNiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrPFJvdXRlclN1YnNjcmliZXI+KFxuICAgIChcbiAgICAgIG5ld1N0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgICAgIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IGZsdXNoU3luYyxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICB9XG4gICAgKSA9PiB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnMuZm9yRWFjaCgoa2V5KSA9PiBmZXRjaGVyRGF0YS5jdXJyZW50LmRlbGV0ZShrZXkpKTtcbiAgICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgICBpZiAoZmV0Y2hlci5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmZXRjaGVyRGF0YS5jdXJyZW50LnNldChrZXksIGZldGNoZXIuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID1cbiAgICAgICAgcm91dGVyLndpbmRvdyA9PSBudWxsIHx8XG4gICAgICAgIHJvdXRlci53aW5kb3cuZG9jdW1lbnQgPT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG5cbiAgICAgIC8vIElmIHRoaXMgaXNuJ3QgYSB2aWV3IHRyYW5zaXRpb24gb3IgaXQncyBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3NlcixcbiAgICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICAgIGlmICghdmlld1RyYW5zaXRpb25PcHRzIHx8IGlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSkge1xuICAgICAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGZsdXNoU3luYyArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNpdGlvbnNcbiAgICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb24sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgRE9NXG4gICAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdyEuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgdC5maW5pc2hlZC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBzZXRWdENvbnRleHQoeyBpc1RyYW5zaXRpb25pbmc6IGZhbHNlIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFRyYW5zaXRpb24odCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHN0YXJ0VHJhbnNpdGlvbiArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIC8vIEludGVycnVwdGluZyBhbiBpbi1wcm9ncmVzcyB0cmFuc2l0aW9uLCBjYW5jZWwgYW5kIGxldCBldmVyeXRoaW5nIGZsdXNoXG4gICAgICAgIC8vIG91dCwgYW5kIHRoZW4ga2ljayBvZmYgYSBuZXcgdHJhbnNpdGlvbiBmcm9tIHRoZSBpbnRlcnJ1cHRpb24gc3RhdGVcbiAgICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgc2V0SW50ZXJydXB0aW9uKHtcbiAgICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDb21wbGV0ZWQgbmF2aWdhdGlvbiB1cGRhdGUgd2l0aCBvcHRlZC1pbiB2aWV3IHRyYW5zaXRpb25zLCBsZXQgJ2VyIHJpcFxuICAgICAgICBzZXRQZW5kaW5nU3RhdGUobmV3U3RhdGUpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3JvdXRlci53aW5kb3csIHRyYW5zaXRpb24sIHJlbmRlckRmZCwgZmV0Y2hlckRhdGEsIG9wdEluU3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcblxuICAvLyBXaGVuIHdlIHN0YXJ0IGEgdmlldyB0cmFuc2l0aW9uLCBjcmVhdGUgYSBEZWZlcnJlZCB3ZSBjYW4gdXNlIGZvciB0aGVcbiAgLy8gZXZlbnR1YWwgXCJjb21wbGV0ZWRcIiByZW5kZXJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiAhdnRDb250ZXh0LmZsdXNoU3luYykge1xuICAgICAgc2V0UmVuZGVyRGZkKG5ldyBEZWZlcnJlZDx2b2lkPigpKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHRdKTtcblxuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoeyBpc1RyYW5zaXRpb25pbmc6IGZhbHNlIH0pO1xuICAgICAgfSk7XG4gICAgICBzZXRUcmFuc2l0aW9uKHRyYW5zaXRpb24pO1xuICAgIH1cbiAgfSwgW29wdEluU3RhcnRUcmFuc2l0aW9uLCBwZW5kaW5nU3RhdGUsIHJlbmRlckRmZCwgcm91dGVyLndpbmRvd10pO1xuXG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgcmVuZGVyRGZkICYmXG4gICAgICBwZW5kaW5nU3RhdGUgJiZcbiAgICAgIHN0YXRlLmxvY2F0aW9uLmtleSA9PT0gcGVuZGluZ1N0YXRlLmxvY2F0aW9uLmtleVxuICAgICkge1xuICAgICAgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIFtyZW5kZXJEZmQsIHRyYW5zaXRpb24sIHN0YXRlLmxvY2F0aW9uLCBwZW5kaW5nU3RhdGVdKTtcblxuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uLFxuICAgICAgfSk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24odW5kZWZpbmVkKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nLCBpbnRlcnJ1cHRpb25dKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLFxuICAgICAgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArXG4gICAgICAgIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiXG4gICAgKTtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpOiBOYXZpZ2F0b3IgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogKG4pID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cz8ucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzPy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIH0pLFxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcblxuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG5cbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgcm91dGVyLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIGJhc2VuYW1lLFxuICAgIH0pLFxuICAgIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdXG4gICk7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkYXRhUm91dGVyQ29udGV4dH0+XG4gICAgICAgIDxEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzdGF0ZX0+XG4gICAgICAgICAgPEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17ZmV0Y2hlckRhdGEuY3VycmVudH0+XG4gICAgICAgICAgICA8Vmlld1RyYW5zaXRpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2dENvbnRleHR9PlxuICAgICAgICAgICAgICA8Um91dGVyXG4gICAgICAgICAgICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgICAgICAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZT17c3RhdGUuaGlzdG9yeUFjdGlvbn1cbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3I9e25hdmlnYXRvcn1cbiAgICAgICAgICAgICAgICBmdXR1cmU9e3tcbiAgICAgICAgICAgICAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7c3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gKFxuICAgICAgICAgICAgICAgICAgPERhdGFSb3V0ZXNcbiAgICAgICAgICAgICAgICAgICAgcm91dGVzPXtyb3V0ZXIucm91dGVzfVxuICAgICAgICAgICAgICAgICAgICBmdXR1cmU9e3JvdXRlci5mdXR1cmV9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlPXtzdGF0ZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIGZhbGxiYWNrRWxlbWVudFxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICAgICAgPC9WaWV3VHJhbnNpdGlvbkNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgPC9GZXRjaGVyc0NvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgIDwvRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICB7bnVsbH1cbiAgICA8Lz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gRGF0YVJvdXRlcyh7XG4gIHJvdXRlcyxcbiAgZnV0dXJlLFxuICBzdGF0ZSxcbn06IHtcbiAgcm91dGVzOiBEYXRhUm91dGVPYmplY3RbXTtcbiAgZnV0dXJlOiBSZW1peFJvdXRlcltcImZ1dHVyZVwiXTtcbiAgc3RhdGU6IFJvdXRlclN0YXRlO1xufSk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJvd3NlclJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBmdXR1cmU/OiBQYXJ0aWFsPEZ1dHVyZUNvbmZpZz47XG4gIHdpbmRvdz86IFdpbmRvdztcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQnJvd3NlclJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgZnV0dXJlLFxuICB3aW5kb3csXG59OiBCcm93c2VyUm91dGVyUHJvcHMpIHtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWY8QnJvd3Nlckhpc3Rvcnk+KCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHsgd2luZG93LCB2NUNvbXBhdDogdHJ1ZSB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuICBsZXQgeyB2N19zdGFydFRyYW5zaXRpb24gfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5ld1N0YXRlOiB7IGFjdGlvbjogTmF2aWdhdGlvblR5cGU7IGxvY2F0aW9uOiBMb2NhdGlvbiB9KSA9PiB7XG4gICAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbFxuICAgICAgICA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSlcbiAgICAgICAgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH0sXG4gICAgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAgIGZ1dHVyZT17ZnV0dXJlfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzaFJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBmdXR1cmU/OiBQYXJ0aWFsPEZ1dHVyZUNvbmZpZz47XG4gIHdpbmRvdz86IFdpbmRvdztcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gSGFzaFJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgZnV0dXJlLFxuICB3aW5kb3csXG59OiBIYXNoUm91dGVyUHJvcHMpIHtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWY8SGFzaEhpc3Rvcnk+KCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHsgd2luZG93LCB2NUNvbXBhdDogdHJ1ZSB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuICBsZXQgeyB2N19zdGFydFRyYW5zaXRpb24gfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5ld1N0YXRlOiB7IGFjdGlvbjogTmF2aWdhdGlvblR5cGU7IGxvY2F0aW9uOiBMb2NhdGlvbiB9KSA9PiB7XG4gICAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbFxuICAgICAgICA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSlcbiAgICAgICAgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH0sXG4gICAgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAgIGZ1dHVyZT17ZnV0dXJlfVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlzdG9yeVJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBmdXR1cmU/OiBGdXR1cmVDb25maWc7XG4gIGhpc3Rvcnk6IEhpc3Rvcnk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoe1xuICBiYXNlbmFtZSxcbiAgY2hpbGRyZW4sXG4gIGZ1dHVyZSxcbiAgaGlzdG9yeSxcbn06IEhpc3RvcnlSb3V0ZXJQcm9wcykge1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuICBsZXQgeyB2N19zdGFydFRyYW5zaXRpb24gfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5ld1N0YXRlOiB7IGFjdGlvbjogTmF2aWdhdGlvblR5cGU7IGxvY2F0aW9uOiBMb2NhdGlvbiB9KSA9PiB7XG4gICAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbFxuICAgICAgICA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSlcbiAgICAgICAgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH0sXG4gICAgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXVxuICApO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAgIGZ1dHVyZT17ZnV0dXJlfVxuICAgIC8+XG4gICk7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1Byb3BzXG4gIGV4dGVuZHMgT21pdDxSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4sIFwiaHJlZlwiPiB7XG4gIHJlbG9hZERvY3VtZW50PzogYm9vbGVhbjtcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG4gIHRvOiBUbztcbiAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24/OiBib29sZWFuO1xufVxuXG5jb25zdCBpc0Jyb3dzZXIgPVxuICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuXG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgYDxhPmAuXG4gKi9cbmV4cG9ydCBjb25zdCBMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgcmVmXG4gICkge1xuICAgIGxldCB7IGJhc2VuYW1lIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcblxuICAgIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgICBsZXQgYWJzb2x1dGVIcmVmO1xuICAgIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgICAgLy8gUmVuZGVyIHRoZSBhYnNvbHV0ZSBocmVmIHNlcnZlci0gYW5kIGNsaWVudC1zaWRlXG4gICAgICBhYnNvbHV0ZUhyZWYgPSB0bztcblxuICAgICAgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuICAgICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKVxuICAgICAgICAgICAgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bylcbiAgICAgICAgICAgIDogbmV3IFVSTCh0byk7XG4gICAgICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbi9iYXNlbmFtZSBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBkbyBleHRlcm5hbCBVUkwgZGV0ZWN0aW9uIHdpdGhvdXQgYSB2YWxpZCBVUkxcbiAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBgPExpbmsgdG89XCIke3RvfVwiPiBjb250YWlucyBhbiBpbnZhbGlkIFVSTCB3aGljaCB3aWxsIHByb2JhYmx5IGJyZWFrIGAgK1xuICAgICAgICAgICAgICBgd2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICAgIGxldCBocmVmID0gdXNlSHJlZih0bywgeyByZWxhdGl2ZSB9KTtcblxuICAgIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKFxuICAgICAgZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQsIE1vdXNlRXZlbnQ+XG4gICAgKSB7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgICAgPGFcbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAgIGhyZWY9e2Fic29sdXRlSHJlZiB8fCBocmVmfVxuICAgICAgICBvbkNsaWNrPXtpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgdGFyZ2V0PXt0YXJnZXR9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cblxuZXhwb3J0IHR5cGUgTmF2TGlua1JlbmRlclByb3BzID0ge1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgaXNQZW5kaW5nOiBib29sZWFuO1xuICBpc1RyYW5zaXRpb25pbmc6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkxpbmtQcm9wc1xuICBleHRlbmRzIE9taXQ8TGlua1Byb3BzLCBcImNsYXNzTmFtZVwiIHwgXCJzdHlsZVwiIHwgXCJjaGlsZHJlblwiPiB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlIHwgKChwcm9wczogTmF2TGlua1JlbmRlclByb3BzKSA9PiBSZWFjdC5SZWFjdE5vZGUpO1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nIHwgKChwcm9wczogTmF2TGlua1JlbmRlclByb3BzKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQpO1xuICBlbmQ/OiBib29sZWFuO1xuICBzdHlsZT86XG4gICAgfCBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gICAgfCAoKHByb3BzOiBOYXZMaW5rUmVuZGVyUHJvcHMpID0+IFJlYWN0LkNTU1Byb3BlcnRpZXMgfCB1bmRlZmluZWQpO1xufVxuXG4vKipcbiAqIEEgYDxMaW5rPmAgd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBOYXZMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTmF2TGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgcmVmXG4gICkge1xuICAgIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7IHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlIH0pO1xuICAgIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gICAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgICBsZXQgeyBuYXZpZ2F0b3IsIGJhc2VuYW1lIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgICBsZXQgaXNUcmFuc2l0aW9uaW5nID1cbiAgICAgIHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgICAgIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJlxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24gPT09IHRydWU7XG5cbiAgICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvblxuICAgICAgPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWVcbiAgICAgIDogcGF0aC5wYXRobmFtZTtcbiAgICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9XG4gICAgICByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb25cbiAgICAgICAgPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgIDogbnVsbDtcblxuICAgIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWVcbiAgICAgICAgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIDogbnVsbDtcbiAgICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRMb2NhdGlvblBhdGhuYW1lICYmIGJhc2VuYW1lKSB7XG4gICAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9XG4gICAgICAgIHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uUGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb25QYXRobmFtZTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gICAgLy8gd2UncmUgbG9va2luZyBmb3IgYSBzbGFzaCBfYWZ0ZXJfIHdoYXQncyBpbiBgdG9gLiAgRm9yIGV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gICAgLy8gYm90aCB3YW50IHRvIGxvb2sgZm9yIGEgLyBhdCBpbmRleCA2IHRvIG1hdGNoIFVSTCBgL3VzZXJzL21hdHRgXG4gICAgY29uc3QgZW5kU2xhc2hQb3NpdGlvbiA9XG4gICAgICB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKVxuICAgICAgICA/IHRvUGF0aG5hbWUubGVuZ3RoIC0gMVxuICAgICAgICA6IHRvUGF0aG5hbWUubGVuZ3RoO1xuICAgIGxldCBpc0FjdGl2ZSA9XG4gICAgICBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8XG4gICAgICAoIWVuZCAmJlxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiZcbiAgICAgICAgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQoZW5kU2xhc2hQb3NpdGlvbikgPT09IFwiL1wiKTtcblxuICAgIGxldCBpc1BlbmRpbmcgPVxuICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJlxuICAgICAgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8XG4gICAgICAgICghZW5kICYmXG4gICAgICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJlxuICAgICAgICAgIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKSk7XG5cbiAgICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZyxcbiAgICAgIGlzVHJhbnNpdGlvbmluZyxcbiAgICB9O1xuXG4gICAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG5cbiAgICBsZXQgY2xhc3NOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AocmVuZGVyUHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICAgIGNsYXNzTmFtZSA9IFtcbiAgICAgICAgY2xhc3NOYW1lUHJvcCxcbiAgICAgICAgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCxcbiAgICAgICAgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsLFxuICAgICAgICBpc1RyYW5zaXRpb25pbmcgPyBcInRyYW5zaXRpb25pbmdcIiA6IG51bGwsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oXCIgXCIpO1xuICAgIH1cblxuICAgIGxldCBzdHlsZSA9XG4gICAgICB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3AocmVuZGVyUHJvcHMpIDogc3R5bGVQcm9wO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMaW5rXG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBhcmlhLWN1cnJlbnQ9e2FyaWFDdXJyZW50fVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgdG89e3RvfVxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj17dW5zdGFibGVfdmlld1RyYW5zaXRpb259XG4gICAgICA+XG4gICAgICAgIHt0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHJlbmRlclByb3BzKSA6IGNoaWxkcmVufVxuICAgICAgPC9MaW5rPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cblxuLyoqXG4gKiBGb3JtIHByb3BzIHNoYXJlZCBieSBuYXZpZ2F0aW9ucyBhbmQgZmV0Y2hlcnNcbiAqL1xuaW50ZXJmYWNlIFNoYXJlZEZvcm1Qcm9wcyBleHRlbmRzIFJlYWN0LkZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+IHtcbiAgLyoqXG4gICAqIFRoZSBIVFRQIHZlcmIgdG8gdXNlIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0LiBTdXBwb3J0cyBcImdldFwiLCBcInBvc3RcIixcbiAgICogXCJwdXRcIiwgXCJkZWxldGVcIiwgXCJwYXRjaFwiLlxuICAgKi9cbiAgbWV0aG9kPzogSFRNTEZvcm1NZXRob2Q7XG5cbiAgLyoqXG4gICAqIGA8Zm9ybSBlbmNUeXBlPmAgLSBlbmhhbmNpbmcgYmV5b25kIHRoZSBub3JtYWwgc3RyaW5nIHR5cGUgYW5kIGxpbWl0aW5nXG4gICAqIHRvIHRoZSBidWlsdC1pbiBicm93c2VyIHN1cHBvcnRlZCB2YWx1ZXNcbiAgICovXG4gIGVuY1R5cGU/OlxuICAgIHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICAgIHwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgICB8IFwidGV4dC9wbGFpblwiO1xuXG4gIC8qKlxuICAgKiBOb3JtYWwgYDxmb3JtIGFjdGlvbj5gIGJ1dCBzdXBwb3J0cyBSZWFjdCBSb3V0ZXIncyByZWxhdGl2ZSBwYXRocy5cbiAgICovXG4gIGFjdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmb3JtIGFjdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgcm91dGUgaGllcmFyY2h5IG9yXG4gICAqIHRoZSBwYXRobmFtZS4gIFVzZSB0aGlzIGlmIHlvdSB3YW50IHRvIG9wdCBvdXQgb2YgbmF2aWdhdGluZyB0aGUgcm91dGVcbiAgICogaGllcmFyY2h5IGFuZCB3YW50IHRvIGluc3RlYWQgcm91dGUgYmFzZWQgb24gLy1kZWxpbWl0ZWQgVVJMIHNlZ21lbnRzXG4gICAqL1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG5cbiAgLyoqXG4gICAqIFByZXZlbnQgdGhlIHNjcm9sbCBwb3NpdGlvbiBmcm9tIHJlc2V0dGluZyB0byB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydCBvblxuICAgKiBjb21wbGV0aW9uIG9mIHRoZSBuYXZpZ2F0aW9uIHdoZW4gdXNpbmcgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gICAqL1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQuIElmIHlvdSBjYWxsXG4gICAqIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCB0aGVuIHRoaXMgZm9ybSB3aWxsIG5vdCBkbyBhbnl0aGluZy5cbiAgICovXG4gIG9uU3VibWl0PzogUmVhY3QuRm9ybUV2ZW50SGFuZGxlcjxIVE1MRm9ybUVsZW1lbnQ+O1xufVxuXG4vKipcbiAqIEZvcm0gcHJvcHMgYXZhaWxhYmxlIHRvIGZldGNoZXJzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmV0Y2hlckZvcm1Qcm9wcyBleHRlbmRzIFNoYXJlZEZvcm1Qcm9wcyB7fVxuXG4vKipcbiAqIEZvcm0gcHJvcHMgYXZhaWxhYmxlIHRvIG5hdmlnYXRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVByb3BzIGV4dGVuZHMgU2hhcmVkRm9ybVByb3BzIHtcbiAgLyoqXG4gICAqIEluZGljYXRlIGEgc3BlY2lmaWMgZmV0Y2hlcktleSB0byB1c2Ugd2hlbiB1c2luZyBuYXZpZ2F0ZT1mYWxzZVxuICAgKi9cbiAgZmV0Y2hlcktleT86IHN0cmluZztcblxuICAvKipcbiAgICogbmF2aWdhdGU9ZmFsc2Ugd2lsbCB1c2UgYSBmZXRjaGVyIGluc3RlYWQgb2YgYSBuYXZpZ2F0aW9uXG4gICAqL1xuICBuYXZpZ2F0ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZvcmNlcyBhIGZ1bGwgZG9jdW1lbnQgbmF2aWdhdGlvbiBpbnN0ZWFkIG9mIGEgZmV0Y2guXG4gICAqL1xuICByZWxvYWREb2N1bWVudD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IGVudHJ5IGluIHRoZSBicm93c2VyIGhpc3Rvcnkgc3RhY2sgd2hlbiB0aGUgZm9ybVxuICAgKiBuYXZpZ2F0ZXMuIFVzZSB0aGlzIGlmIHlvdSBkb24ndCB3YW50IHRoZSB1c2VyIHRvIGJlIGFibGUgdG8gY2xpY2sgXCJiYWNrXCJcbiAgICogdG8gdGhlIHBhZ2Ugd2l0aCB0aGUgZm9ybSBvbiBpdC5cbiAgICovXG4gIHJlcGxhY2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTdGF0ZSBvYmplY3QgdG8gYWRkIHRvIHRoZSBoaXN0b3J5IHN0YWNrIGVudHJ5IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICovXG4gIHN0YXRlPzogYW55O1xuXG4gIC8qKlxuICAgKiBFbmFibGUgdmlldyB0cmFuc2l0aW9ucyBvbiB0aGlzIEZvcm0gbmF2aWdhdGlvblxuICAgKi9cbiAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24/OiBib29sZWFuO1xufVxuXG50eXBlIEhUTUxTdWJtaXRFdmVudCA9IFJlYWN0LkJhc2VTeW50aGV0aWNFdmVudDxcbiAgU3VibWl0RXZlbnQsXG4gIEV2ZW50LFxuICBIVE1MRm9ybUVsZW1lbnRcbj47XG5cbnR5cGUgSFRNTEZvcm1TdWJtaXR0ZXIgPSBIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZvcm0gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxGb3JtRWxlbWVudCwgRm9ybVByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdCgpO1xuICAgIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHsgcmVsYXRpdmUgfSk7XG4gICAgbGV0IGZvcm1NZXRob2Q6IEhUTUxGb3JtTWV0aG9kID1cbiAgICAgIG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuXG4gICAgbGV0IHN1Ym1pdEhhbmRsZXI6IFJlYWN0LkZvcm1FdmVudEhhbmRsZXI8SFRNTEZvcm1FbGVtZW50PiA9IChldmVudCkgPT4ge1xuICAgICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGxldCBzdWJtaXR0ZXIgPSAoZXZlbnQgYXMgdW5rbm93biBhcyBIVE1MU3VibWl0RXZlbnQpLm5hdGl2ZUV2ZW50XG4gICAgICAgIC5zdWJtaXR0ZXIgYXMgSFRNTEZvcm1TdWJtaXR0ZXIgfCBudWxsO1xuXG4gICAgICBsZXQgc3VibWl0TWV0aG9kID1cbiAgICAgICAgKHN1Ym1pdHRlcj8uZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSBhcyBIVE1MRm9ybU1ldGhvZCB8IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgbWV0aG9kO1xuXG4gICAgICBzdWJtaXQoc3VibWl0dGVyIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQsIHtcbiAgICAgICAgZmV0Y2hlcktleSxcbiAgICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICAgIG5hdmlnYXRlLFxuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtXG4gICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICBtZXRob2Q9e2Zvcm1NZXRob2R9XG4gICAgICAgIGFjdGlvbj17Zm9ybUFjdGlvbn1cbiAgICAgICAgb25TdWJtaXQ9e3JlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxSZXN0b3JhdGlvblByb3BzIHtcbiAgZ2V0S2V5PzogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbjtcbiAgc3RvcmFnZUtleT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbih7XG4gIGdldEtleSxcbiAgc3RvcmFnZUtleSxcbn06IFNjcm9sbFJlc3RvcmF0aW9uUHJvcHMpIHtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oeyBnZXRLZXksIHN0b3JhZ2VLZXkgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5lbnVtIERhdGFSb3V0ZXJIb29rIHtcbiAgVXNlU2Nyb2xsUmVzdG9yYXRpb24gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCIsXG4gIFVzZVN1Ym1pdCA9IFwidXNlU3VibWl0XCIsXG4gIFVzZVN1Ym1pdEZldGNoZXIgPSBcInVzZVN1Ym1pdEZldGNoZXJcIixcbiAgVXNlRmV0Y2hlciA9IFwidXNlRmV0Y2hlclwiLFxuICB1c2VWaWV3VHJhbnNpdGlvblN0YXRlID0gXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCIsXG59XG5cbmVudW0gRGF0YVJvdXRlclN0YXRlSG9vayB7XG4gIFVzZUZldGNoZXIgPSBcInVzZUZldGNoZXJcIixcbiAgVXNlRmV0Y2hlcnMgPSBcInVzZUZldGNoZXJzXCIsXG4gIFVzZVNjcm9sbFJlc3RvcmF0aW9uID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiLFxufVxuXG4vLyBJbnRlcm5hbCBob29rc1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKFxuICBob29rTmFtZTogRGF0YVJvdXRlckhvb2sgfCBEYXRhUm91dGVyU3RhdGVIb29rXG4pIHtcbiAgcmV0dXJuIGAke2hvb2tOYW1lfSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLmA7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lOiBEYXRhUm91dGVySG9vaykge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGludmFyaWFudChjdHgsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKTtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lOiBEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGludmFyaWFudChzdGF0ZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8vIEV4dGVybmFsIGhvb2tzXG5cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyPEUgZXh0ZW5kcyBFbGVtZW50ID0gSFRNTEFuY2hvckVsZW1lbnQ+KFxuICB0bzogVG8sXG4gIHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICB9OiB7XG4gICAgdGFyZ2V0PzogUmVhY3QuSFRNTEF0dHJpYnV0ZUFuY2hvclRhcmdldDtcbiAgICByZXBsYWNlPzogYm9vbGVhbjtcbiAgICBzdGF0ZT86IGFueTtcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICAgIHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZTtcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj86IGJvb2xlYW47XG4gIH0gPSB7fVxuKTogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEUsIE1vdXNlRXZlbnQ+KSA9PiB2b2lkIHtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHsgcmVsYXRpdmUgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudDogUmVhY3QuTW91c2VFdmVudDxFLCBNb3VzZUV2ZW50PikgPT4ge1xuICAgICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG4gICAgICAgIGxldCByZXBsYWNlID1cbiAgICAgICAgICByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHJlcGxhY2VQcm9wXG4gICAgICAgICAgICA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuXG4gICAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW1xuICAgICAgbG9jYXRpb24sXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHBhdGgsXG4gICAgICByZXBsYWNlUHJvcCxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgIF1cbiAgKTtcbn1cblxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKFxuICBkZWZhdWx0SW5pdD86IFVSTFNlYXJjaFBhcmFtc0luaXRcbik6IFtVUkxTZWFyY2hQYXJhbXMsIFNldFVSTFNlYXJjaFBhcmFtc10ge1xuICB3YXJuaW5nKFxuICAgIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsXG4gICAgYFlvdSBjYW5ub3QgdXNlIHRoZSBcXGB1c2VTZWFyY2hQYXJhbXNcXGAgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBgICtcbiAgICAgIGBzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IGAgK1xuICAgICAgYEV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIGAgK1xuICAgICAgYGh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtcy5gXG4gICk7XG5cbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAgICAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgICAgIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICAgICAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24oXG4gICAgICAgIGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50XG4gICAgICApLFxuICAgIFtsb2NhdGlvbi5zZWFyY2hdXG4gICk7XG5cbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrPFNldFVSTFNlYXJjaFBhcmFtcz4oXG4gICAgKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhcbiAgICAgICAgdHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXRcbiAgICAgICk7XG4gICAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgICB9LFxuICAgIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXVxuICApO1xuXG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuXG5leHBvcnQgdHlwZSBTZXRVUkxTZWFyY2hQYXJhbXMgPSAoXG4gIG5leHRJbml0PzpcbiAgICB8IFVSTFNlYXJjaFBhcmFtc0luaXRcbiAgICB8ICgocHJldjogVVJMU2VhcmNoUGFyYW1zKSA9PiBVUkxTZWFyY2hQYXJhbXNJbml0KSxcbiAgbmF2aWdhdGVPcHRzPzogTmF2aWdhdGVPcHRpb25zXG4pID0+IHZvaWQ7XG5cbi8qKlxuICogU3VibWl0cyBhIEhUTUwgYDxmb3JtPmAgdG8gdGhlIHNlcnZlciB3aXRob3V0IHJlbG9hZGluZyB0aGUgcGFnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJtaXRGdW5jdGlvbiB7XG4gIChcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGA8Zm9ybT5gIHRvIGJlIHN1Ym1pdHRlZCB0byB0aGUgc2VydmVyLCBhIHNwZWNpZmljXG4gICAgICogYDxidXR0b24+YCBvciBgPGlucHV0IHR5cGU9XCJzdWJtaXRcIj5gIHRvIHVzZSB0byBzdWJtaXQgdGhlIGZvcm0sIG9yIHNvbWVcbiAgICAgKiBhcmJpdHJhcnkgZGF0YSB0byBzdWJtaXQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBXaGVuIHVzaW5nIGEgYDxidXR0b24+YCBpdHMgYG5hbWVgIGFuZCBgdmFsdWVgIHdpbGwgYWxzbyBiZVxuICAgICAqIGluY2x1ZGVkIGluIHRoZSBmb3JtIGRhdGEgdGhhdCBpcyBzdWJtaXR0ZWQuXG4gICAgICovXG4gICAgdGFyZ2V0OiBTdWJtaXRUYXJnZXQsXG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHRoYXQgb3ZlcnJpZGUgdGhlIGA8Zm9ybT5gJ3Mgb3duIGF0dHJpYnV0ZXMuIFJlcXVpcmVkIHdoZW5cbiAgICAgKiBzdWJtaXR0aW5nIGFyYml0cmFyeSBkYXRhIHdpdGhvdXQgYSBiYWNraW5nIGA8Zm9ybT5gLlxuICAgICAqL1xuICAgIG9wdGlvbnM/OiBTdWJtaXRPcHRpb25zXG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICogU3VibWl0cyBhIGZldGNoZXIgYDxmb3JtPmAgdG8gdGhlIHNlcnZlciB3aXRob3V0IHJlbG9hZGluZyB0aGUgcGFnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGZXRjaGVyU3VibWl0RnVuY3Rpb24ge1xuICAoXG4gICAgdGFyZ2V0OiBTdWJtaXRUYXJnZXQsXG4gICAgLy8gRmV0Y2hlcnMgY2Fubm90IHJlcGxhY2Ugb3Igc2V0IHN0YXRlIGJlY2F1c2UgdGhleSBhcmUgbm90IG5hdmlnYXRpb24gZXZlbnRzXG4gICAgb3B0aW9ucz86IEZldGNoZXJTdWJtaXRPcHRpb25zXG4gICk6IHZvaWQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiBcIiArXG4gICAgICAgIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCJcbiAgICApO1xuICB9XG59XG5cbmxldCBmZXRjaGVySWQgPSAwO1xubGV0IGdldFVuaXF1ZUZldGNoZXJJZCA9ICgpID0+IGBfXyR7U3RyaW5nKCsrZmV0Y2hlcklkKX1fX2A7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1Ym1pdCgpOiBTdWJtaXRGdW5jdGlvbiB7XG4gIGxldCB7IHJvdXRlciB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHsgYmFzZW5hbWUgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSB1c2VSb3V0ZUlkKCk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrPFN1Ym1pdEZ1bmN0aW9uPihcbiAgICAodGFyZ2V0LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKTtcblxuICAgICAgbGV0IHsgYWN0aW9uLCBtZXRob2QsIGVuY1R5cGUsIGZvcm1EYXRhLCBib2R5IH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8oXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgYmFzZW5hbWVcbiAgICAgICk7XG5cbiAgICAgIGlmIChvcHRpb25zLm5hdmlnYXRlID09PSBmYWxzZSkge1xuICAgICAgICBsZXQga2V5ID0gb3B0aW9ucy5mZXRjaGVyS2V5IHx8IGdldFVuaXF1ZUZldGNoZXJJZCgpO1xuICAgICAgICByb3V0ZXIuZmV0Y2goa2V5LCBjdXJyZW50Um91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgICBib2R5LFxuICAgICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IChtZXRob2QgYXMgSFRNTEZvcm1NZXRob2QpLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgKGVuY1R5cGUgYXMgRm9ybUVuY1R5cGUpLFxuICAgICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm91dGVyLm5hdmlnYXRlKG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgICAgZm9ybURhdGEsXG4gICAgICAgICAgYm9keSxcbiAgICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCAobWV0aG9kIGFzIEhUTUxGb3JtTWV0aG9kKSxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IChlbmNUeXBlIGFzIEZvcm1FbmNUeXBlKSxcbiAgICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICAgICAgc3RhdGU6IG9wdGlvbnMuc3RhdGUsXG4gICAgICAgICAgZnJvbVJvdXRlSWQ6IGN1cnJlbnRSb3V0ZUlkLFxuICAgICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb246IG9wdGlvbnMudW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3JvdXRlciwgYmFzZW5hbWUsIGN1cnJlbnRSb3V0ZUlkXVxuICApO1xufVxuXG4vLyB2NzogRXZlbnR1YWxseSB3ZSBzaG91bGQgZGVwcmVjYXRlIHRoaXMgZW50aXJlbHkgaW4gZmF2b3Igb2YgdXNpbmcgdGhlXG4vLyByb3V0ZXIgbWV0aG9kIGRpcmVjdGx5P1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oXG4gIGFjdGlvbj86IHN0cmluZyxcbiAgeyByZWxhdGl2ZSB9OiB7IHJlbGF0aXZlPzogUmVsYXRpdmVSb3V0aW5nVHlwZSB9ID0ge31cbik6IHN0cmluZyB7XG4gIGxldCB7IGJhc2VuYW1lIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgaW52YXJpYW50KHJvdXRlQ29udGV4dCwgXCJ1c2VGb3JtQWN0aW9uIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIik7XG5cbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcbiAgbGV0IHBhdGggPSB7IC4uLnVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwgeyByZWxhdGl2ZSB9KSB9O1xuXG4gIC8vIElmIG5vIGFjdGlvbiB3YXMgc3BlY2lmaWVkLCBicm93c2VycyB3aWxsIHBlcnNpc3QgY3VycmVudCBzZWFyY2ggcGFyYW1zXG4gIC8vIHdoZW4gZGV0ZXJtaW5pbmcgdGhlIHBhdGgsIHNvIG1hdGNoIHRoYXQgYmVoYXZpb3JcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhpcyBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgYW55IGluY2x1ZGVkID9pbmRleCBwYXJhbVxuICAgIC8vIHNpbmNlIGl0IG1pZ2h0IG5vdCBhcHBseSB0byBvdXIgY29udGV4dHVhbCByb3V0ZS4gIFdlIGFkZCBpdCBiYWNrIGJhc2VkXG4gICAgLy8gb24gbWF0Y2gucm91dGUuaW5kZXggYmVsb3dcbiAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgaWYgKHBhcmFtcy5oYXMoXCJpbmRleFwiKSAmJiBwYXJhbXMuZ2V0KFwiaW5kZXhcIikgPT09IFwiXCIpIHtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBgPyR7cGFyYW1zLnRvU3RyaW5nKCl9YCA6IFwiXCI7XG4gICAgfVxuICB9XG5cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaFxuICAgICAgPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpXG4gICAgICA6IFwiP2luZGV4XCI7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID1cbiAgICAgIHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cblxuZXhwb3J0IHR5cGUgRmV0Y2hlcldpdGhDb21wb25lbnRzPFREYXRhPiA9IEZldGNoZXI8VERhdGE+ICYge1xuICBGb3JtOiBSZWFjdC5Gb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50PFxuICAgIEZldGNoZXJGb3JtUHJvcHMgJiBSZWFjdC5SZWZBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD5cbiAgPjtcbiAgc3VibWl0OiBGZXRjaGVyU3VibWl0RnVuY3Rpb247XG4gIGxvYWQ6IChocmVmOiBzdHJpbmcsIG9wdHM/OiB7IHVuc3RhYmxlX2ZsdXNoU3luYz86IGJvb2xlYW4gfSkgPT4gdm9pZDtcbn07XG5cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSB1c2VGZXRjaGVyIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYFxuXG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRmV0Y2hlcjxURGF0YSA9IGFueT4oe1xuICBrZXksXG59OiB7IGtleT86IHN0cmluZyB9ID0ge30pOiBGZXRjaGVyV2l0aENvbXBvbmVudHM8VERhdGE+IHtcbiAgbGV0IHsgcm91dGVyIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZUNvbnRleHQoRmV0Y2hlcnNDb250ZXh0KTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVJZCA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXT8ucm91dGUuaWQ7XG5cbiAgaW52YXJpYW50KGZldGNoZXJEYXRhLCBgdXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgRmV0Y2hlcnNDb250ZXh0YCk7XG4gIGludmFyaWFudChyb3V0ZSwgYHVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dGApO1xuICBpbnZhcmlhbnQoXG4gICAgcm91dGVJZCAhPSBudWxsLFxuICAgIGB1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcImlkXCJgXG4gICk7XG5cbiAgLy8gRmV0Y2hlciBrZXkgaGFuZGxpbmdcbiAgLy8gT0sgdG8gY2FsbCBjb25kaXRpb25hbGx5IHRvIGZlYXR1cmUgZGV0ZWN0IGB1c2VJZGBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIGxldCBkZWZhdWx0S2V5ID0gdXNlSWRJbXBsID8gdXNlSWRJbXBsKCkgOiBcIlwiO1xuICBsZXQgW2ZldGNoZXJLZXksIHNldEZldGNoZXJLZXldID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihrZXkgfHwgZGVmYXVsdEtleSk7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShrZXkpO1xuICB9IGVsc2UgaWYgKCFmZXRjaGVyS2V5KSB7XG4gICAgLy8gV2Ugd2lsbCBvbmx5IGZhbGwgdGhyb3VnaCBoZXJlIHdoZW4gYHVzZUlkYCBpcyBub3QgYXZhaWxhYmxlXG4gICAgc2V0RmV0Y2hlcktleShnZXRVbmlxdWVGZXRjaGVySWQoKSk7XG4gIH1cblxuICAvLyBSZWdpc3RyYXRpb24vY2xlYW51cFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBUZWxsIHRoZSByb3V0ZXIgd2UndmUgdW5tb3VudGVkIC0gaWYgdjdfZmV0Y2hlclBlcnNpc3QgaXMgZW5hYmxlZCB0aGlzXG4gICAgICAvLyB3aWxsIG5vdCBkZWxldGUgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWQgcXVldWUgdXAgYSBkZWxldGUgYWZ0ZXIgdGhlXG4gICAgICAvLyBmZXRjaGVyIHJldHVybnMgdG8gYW4gYGlkbGVgIHN0YXRlXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG5cbiAgLy8gRmV0Y2hlciBhZGRpdGlvbnNcbiAgbGV0IGxvYWQgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoaHJlZjogc3RyaW5nLCBvcHRzPzogeyB1bnN0YWJsZV9mbHVzaFN5bmM/OiBib29sZWFuIH0pID0+IHtcbiAgICAgIGludmFyaWFudChyb3V0ZUlkLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKTtcbiAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICB9LFxuICAgIFtmZXRjaGVyS2V5LCByb3V0ZUlkLCByb3V0ZXJdXG4gICk7XG5cbiAgbGV0IHN1Ym1pdEltcGwgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IHN1Ym1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrPEZldGNoZXJTdWJtaXRGdW5jdGlvbj4oXG4gICAgKHRhcmdldCwgb3B0cykgPT4ge1xuICAgICAgc3VibWl0SW1wbCh0YXJnZXQsIHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgICBmZXRjaGVyS2V5LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbZmV0Y2hlcktleSwgc3VibWl0SW1wbF1cbiAgKTtcblxuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxGb3JtRWxlbWVudCwgRmV0Y2hlckZvcm1Qcm9wcz4oXG4gICAgICAocHJvcHMsIHJlZikgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxGb3JtIHsuLi5wcm9wc30gbmF2aWdhdGU9e2ZhbHNlfSBmZXRjaGVyS2V5PXtmZXRjaGVyS2V5fSByZWY9e3JlZn0gLz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gICAgfVxuICAgIHJldHVybiBGZXRjaGVyRm9ybTtcbiAgfSwgW2ZldGNoZXJLZXldKTtcblxuICAvLyBFeHBvc2VkIEZldGNoZXJXaXRoQ29tcG9uZW50c1xuICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChmZXRjaGVyS2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIGxldCBkYXRhID0gZmV0Y2hlckRhdGEuZ2V0KGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgRm9ybTogRmV0Y2hlckZvcm0sXG4gICAgICBzdWJtaXQsXG4gICAgICBsb2FkLFxuICAgICAgLi4uZmV0Y2hlcixcbiAgICAgIGRhdGEsXG4gICAgfSksXG4gICAgW0ZldGNoZXJGb3JtLCBzdWJtaXQsIGxvYWQsIGZldGNoZXIsIGRhdGFdXG4gICk7XG5cbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKTogKEZldGNoZXIgJiB7IGtleTogc3RyaW5nIH0pW10ge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBBcnJheS5mcm9tKHN0YXRlLmZldGNoZXJzLmVudHJpZXMoKSkubWFwKChba2V5LCBmZXRjaGVyXSkgPT4gKHtcbiAgICAuLi5mZXRjaGVyLFxuICAgIGtleSxcbiAgfSkpO1xufVxuXG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcblxuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gIGdldEtleSxcbiAgc3RvcmFnZUtleSxcbn06IHtcbiAgZ2V0S2V5PzogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbjtcbiAgc3RvcmFnZUtleT86IHN0cmluZztcbn0gPSB7fSkge1xuICBsZXQgeyByb3V0ZXIgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHsgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXQgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShcbiAgICBEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uXG4gICk7XG4gIGxldCB7IGJhc2VuYW1lIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7XG4gIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xuXG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG4gIHVzZVBhZ2VIaWRlKFxuICAgIFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgICAgc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlLCA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gd2lsbCBub3Qgd29yayBwcm9wZXJseSAoJHtlcnJvcn0pLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKVxuICApO1xuXG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXG4gICAgICAgICAgc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG5cbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZTogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbiB8IHVuZGVmaW5lZCA9XG4gICAgICAgIGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCJcbiAgICAgICAgICA/IChsb2NhdGlvbiwgbWF0Y2hlcykgPT5cbiAgICAgICAgICAgICAgZ2V0S2V5KFxuICAgICAgICAgICAgICAgIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgLi4ubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICBwYXRobmFtZTpcbiAgICAgICAgICAgICAgICAgICAgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWF0Y2hlc1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyPy5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihcbiAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMsXG4gICAgICAgICgpID0+IHdpbmRvdy5zY3JvbGxZLFxuICAgICAgICBnZXRLZXlXaXRob3V0QmFzZW5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm4gKCkgPT4gZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uICYmIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbigpO1xuICAgIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBnZXRLZXldKTtcblxuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgIGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5oYXNoLnNsaWNlKDEpKVxuICAgICAgICApO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEb24ndCByZXNldCBpZiB0aGlzIG5hdmlnYXRpb24gb3B0ZWQgb3V0XG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuXG5leHBvcnQgeyB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24gfTtcblxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKFxuICBjYWxsYmFjazogKGV2ZW50OiBCZWZvcmVVbmxvYWRFdmVudCkgPT4gYW55LFxuICBvcHRpb25zPzogeyBjYXB0dXJlPzogYm9vbGVhbiB9XG4pOiB2b2lkIHtcbiAgbGV0IHsgY2FwdHVyZSB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHsgY2FwdHVyZSB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuXG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKFxuICBjYWxsYmFjazogKGV2ZW50OiBQYWdlVHJhbnNpdGlvbkV2ZW50KSA9PiBhbnksXG4gIG9wdGlvbnM/OiB7IGNhcHR1cmU/OiBib29sZWFuIH1cbik6IHZvaWQge1xuICBsZXQgeyBjYXB0dXJlIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8geyBjYXB0dXJlIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuXG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkXG4gKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuXG4gKlxuICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmRcbiAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb25cbiAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKi9cbmZ1bmN0aW9uIHVzZVByb21wdCh7XG4gIHdoZW4sXG4gIG1lc3NhZ2UsXG59OiB7XG4gIHdoZW46IGJvb2xlYW4gfCBCbG9ja2VyRnVuY3Rpb247XG4gIG1lc3NhZ2U6IHN0cmluZztcbn0pIHtcbiAgbGV0IGJsb2NrZXIgPSB1c2VCbG9ja2VyKHdoZW4pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbn1cblxuZXhwb3J0IHsgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCB9O1xuXG4vKipcbiAqIFJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdmlldyB0cmFuc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gaHJlZi4gIFlvdSBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcmVuZGVyIENTUyBjbGFzc2VzIG9yIHZpZXdUcmFuc2l0aW9uTmFtZVxuICogc3R5bGVzIG9udG8geW91ciBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBocmVmIFRoZSBkZXN0aW5hdGlvbiBocmVmXG4gKiBAcGFyYW0gW29wdHMucmVsYXRpdmVdIFJlbGF0aXZlIHJvdXRpbmcgdHlwZSAoXCJyb3V0ZVwiIHwgXCJwYXRoXCIpXG4gKi9cbmZ1bmN0aW9uIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUoXG4gIHRvOiBUbyxcbiAgb3B0czogeyByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGUgfSA9IHt9XG4pIHtcbiAgbGV0IHZ0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVmlld1RyYW5zaXRpb25Db250ZXh0KTtcblxuICBpbnZhcmlhbnQoXG4gICAgdnRDb250ZXh0ICE9IG51bGwsXG4gICAgXCJgdW5zdGFibGVfdXNlVmlld1RyYW5zaXRpb25TdGF0ZWAgbXVzdCBiZSB1c2VkIHdpdGhpbiBgcmVhY3Qtcm91dGVyLWRvbWAncyBgUm91dGVyUHJvdmlkZXJgLiAgXCIgK1xuICAgICAgXCJEaWQgeW91IGFjY2lkZW50YWxseSBpbXBvcnQgYFJvdXRlclByb3ZpZGVyYCBmcm9tIGByZWFjdC1yb3V0ZXJgP1wiXG4gICk7XG5cbiAgbGV0IHsgYmFzZW5hbWUgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KFxuICAgIERhdGFSb3V0ZXJIb29rLnVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcbiAgKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHsgcmVsYXRpdmU6IG9wdHMucmVsYXRpdmUgfSk7XG4gIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBjdXJyZW50UGF0aCA9XG4gICAgc3RyaXBCYXNlbmFtZSh2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHxcbiAgICB2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dFBhdGggPVxuICAgIHN0cmlwQmFzZW5hbWUodnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8XG4gICAgdnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZTtcblxuICAvLyBUcmFuc2l0aW9uIGlzIGFjdGl2ZSBpZiB3ZSdyZSBnb2luZyB0byBvciBjb21pbmcgZnJvbSB0aGUgaW5kaWNhdGVkXG4gIC8vIGRlc3RpbmF0aW9uLiAgVGhpcyBlbnN1cmVzIHRoYXQgb3RoZXIgUFVTSCBuYXZpZ2F0aW9ucyB0aGF0IHJldmVyc2VcbiAgLy8gYW4gaW5kaWNhdGVkIHRyYW5zaXRpb24gYXBwbHkuICBJLmUuLCBvbiB0aGUgbGlzdCB2aWV3IHlvdSBoYXZlOlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2RldGFpbHMvMVwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBJZiB5b3UgY2xpY2sgdGhlIGJyZWFkY3J1bWIgYmFjayB0byB0aGUgbGlzdCB2aWV3OlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2xpc3RcIiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gV2Ugc2hvdWxkIGFwcGx5IHRoZSB0cmFuc2l0aW9uIGJlY2F1c2UgaXQncyBpbmRpY2F0ZWQgYXMgYWN0aXZlIGdvaW5nXG4gIC8vIGZyb20gL2xpc3QgLT4gL2RldGFpbHMvMSBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBhY3RpdmUgb24gdGhlIHJldmVyc2VcbiAgLy8gKGV2ZW4gdGhvdWdoIHRoaXMgaXNuJ3Qgc3RyaWN0bHkgYSBQT1AgcmV2ZXJzZSlcbiAgcmV0dXJuIChcbiAgICBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgbmV4dFBhdGgpICE9IG51bGwgfHxcbiAgICBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgY3VycmVudFBhdGgpICE9IG51bGxcbiAgKTtcbn1cblxuZXhwb3J0IHsgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSBhcyB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlIH07XG5cbi8vI2VuZHJlZ2lvblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzUmVhZGFibGVTdHJlYW0sXG4gIGlzUmVxdWVzdCxcbiAgaXNSZXNwb25zZSxcbiAgaXNIZWFkZXJzLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIG9yaWdpblxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCcsICdmZXRjaCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmICh1dGlscy5pc1Jlc3BvbnNlKGRhdGEpIHx8IHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgKG1ldGhvZCkgPT4ge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNIZWFkZXJzKGhlYWRlcikpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlci5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2V0SGVhZGVyKHZhbHVlLCBrZXksIHJld3JpdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbFxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaHJvdHRsZSBkZWNvcmF0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBjb25zdCB0aHJlc2hvbGQgPSAxMDAwIC8gZnJlcTtcbiAgbGV0IHRpbWVyID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICBjb25zdCBmb3JjZSA9IHRoaXMgPT09IHRydWU7XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChmb3JjZSB8fCBub3cgLSB0aW1lc3RhbXAgPiB0aHJlc2hvbGQpIHtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aW1lc3RhbXAgPSBub3c7XG4gICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgaWYgKCF0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH0sIHRocmVzaG9sZCAtIChub3cgLSB0aW1lc3RhbXApKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IHByb2dyZXNzRXZlbnRSZWR1Y2VyIGZyb20gJy4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMnO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IF9jb25maWcgPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gX2NvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZX0gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxdWVzdC5vcGVuKF9jb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIF9jb25maWcudXJsLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gX2NvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIF9jb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBfY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChfY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFfY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBfY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKF9jb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIF9jb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGNvbXBvc2VTaWduYWxzID0gKHNpZ25hbHMsIHRpbWVvdXQpID0+IHtcbiAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgbGV0IGFib3J0ZWQ7XG5cbiAgY29uc3Qgb25hYm9ydCA9IGZ1bmN0aW9uIChjYW5jZWwpIHtcbiAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIGNvbnN0IGVyciA9IGNhbmNlbCBpbnN0YW5jZW9mIEVycm9yID8gY2FuY2VsIDogdGhpcy5yZWFzb247XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVyciBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgPyBlcnIgOiBuZXcgQ2FuY2VsZWRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBvbmFib3J0KG5ldyBBeGlvc0Vycm9yKGB0aW1lb3V0ICR7dGltZW91dH0gb2YgbXMgZXhjZWVkZWRgLCBBeGlvc0Vycm9yLkVUSU1FRE9VVCkpXG4gIH0sIHRpbWVvdXQpXG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgaWYgKHNpZ25hbHMpIHtcbiAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICBzaWduYWxzLmZvckVhY2goc2lnbmFsID0+IHtcbiAgICAgICAgc2lnbmFsICYmXG4gICAgICAgIChzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpIDogc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpKTtcbiAgICAgIH0pO1xuICAgICAgc2lnbmFscyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbCAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSk7XG5cbiAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gIHNpZ25hbC51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuXG4gIHJldHVybiBbc2lnbmFsLCAoKSA9PiB7XG4gICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aW1lciA9IG51bGw7XG4gIH1dO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlU2lnbmFscztcbiIsIlxuXG5leHBvcnQgY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUsIGVuY29kZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGl0ZXJhYmxlKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKEFycmF5QnVmZmVyLmlzVmlldyhjaHVuaykgPyBjaHVuayA6IChhd2FpdCBlbmNvZGUoU3RyaW5nKGNodW5rKSkpLCBjaHVua1NpemUpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gsIGVuY29kZSkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSwgZW5jb2RlKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIHR5cGU6ICdieXRlcycsXG5cbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgb25GaW5pc2goKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIG9uUHJvZ3Jlc3MgJiYgb25Qcm9ncmVzcyhieXRlcyArPSBsZW4pO1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBvbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IgPSAodG90YWwsIGZuKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuICByZXR1cm4gKGxvYWRlZCkgPT4gc2V0VGltZW91dCgoKSA9PiBmbih7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSkpO1xufVxuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KSgpO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICEhKCgpPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59KSgpO1xuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgbmV3IFJlcXVlc3QoYm9keSkuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IFtjb21wb3NlZFNpZ25hbCwgc3RvcFRpbWVvdXRdID0gKHNpZ25hbCB8fCBjYW5jZWxUb2tlbiB8fCB0aW1lb3V0KSA/XG4gICAgY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW5dLCB0aW1lb3V0KSA6IFtdO1xuXG4gIGxldCBmaW5pc2hlZCwgcmVxdWVzdDtcblxuICBjb25zdCBvbkZpbmlzaCA9ICgpID0+IHtcbiAgICAhZmluaXNoZWQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgZmluaXNoZWQgPSB0cnVlO1xuICB9XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKVxuICAgICAgICApLCBudWxsLCBlbmNvZGVUZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdjb3JzJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCBpc1N0cmVhbVJlc3BvbnNlKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKVxuICAgICAgICApLCBpc1N0cmVhbVJlc3BvbnNlICYmIG9uRmluaXNoLCBlbmNvZGVUZXh0KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2goKTtcblxuICAgIHN0b3BUaW1lb3V0ICYmIHN0b3BUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRmluaXNoKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IGZldGNoQWRhcHRlciBmcm9tICcuL2ZldGNoLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgY29uc3QgcmVqZWN0ZWRSZWFzb25zID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBsZXQgaWQ7XG5cbiAgICAgIGFkYXB0ZXIgPSBuYW1lT3JBZGFwdGVyO1xuXG4gICAgICBpZiAoIWlzUmVzb2x2ZWRIYW5kbGUobmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYWRhcHRlciA9IGtub3duQWRhcHRlcnNbKGlkID0gU3RyaW5nKG5hbWVPckFkYXB0ZXIpKS50b0xvd2VyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFVua25vd24gYWRhcHRlciAnJHtpZH0nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkYXB0ZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdGVkUmVhc29uc1tpZCB8fCAnIycgKyBpXSA9IGFkYXB0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG5cbiAgICAgIGNvbnN0IHJlYXNvbnMgPSBPYmplY3QuZW50cmllcyhyZWplY3RlZFJlYXNvbnMpXG4gICAgICAgIC5tYXAoKFtpZCwgc3RhdGVdKSA9PiBgYWRhcHRlciAke2lkfSBgICtcbiAgICAgICAgICAoc3RhdGUgPT09IGZhbHNlID8gJ2lzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50JyA6ICdpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZCcpXG4gICAgICAgICk7XG5cbiAgICAgIGxldCBzID0gbGVuZ3RoID9cbiAgICAgICAgKHJlYXNvbnMubGVuZ3RoID4gMSA/ICdzaW5jZSA6XFxuJyArIHJlYXNvbnMubWFwKHJlbmRlclJlYXNvbikuam9pbignXFxuJykgOiAnICcgKyByZW5kZXJSZWFzb24ocmVhc29uc1swXSkpIDpcbiAgICAgICAgJ2FzIG5vIGFkYXB0ZXIgc3BlY2lmaWVkJztcblxuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBubyBzdWl0YWJsZSBhZGFwdGVyIHRvIGRpc3BhdGNoIHRoZSByZXF1ZXN0IGAgKyBzLFxuICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjcuMlwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbGV0IGR1bW15O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkgPSB7fSkgOiAoZHVtbXkgPSBuZXcgRXJyb3IoKSk7XG5cbiAgICAgICAgLy8gc2xpY2Ugb2ZmIHRoZSBFcnJvcjogLi4uIGxpbmVcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBkdW1teS5zdGFjayA/IGR1bW15LnN0YWNrLnJlcGxhY2UoL14uK1xcbi8sICcnKSA6ICcnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFjayAmJiAhU3RyaW5nKGVyci5zdGFjaykuZW5kc1dpdGgoc3RhY2sucmVwbGFjZSgvXi4rXFxuLitcXG4vLCAnJykpKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFja1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSB0aGUgY2FzZSB3aGVyZSBcInN0YWNrXCIgaXMgYW4gdW4td3JpdGFibGUgcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuLy8g5Yib5bu65a6e5L6L5pe26YWN572u6buY6K6k5YC8XHJcbmNvbnN0IGh0dHAgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgYmFzZVVSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCdcclxufSk7XHJcblxyXG4vLyDmt7vliqDor7fmsYLmi6bmiKrlmahcclxuaHR0cC5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgLy8g5Zyo5Y+R6YCB6K+35rGC5LmL5YmN5YGa5Lqb5LuA5LmIXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG59LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgIC8vIOWvueivt+axgumUmeivr+WBmuS6m+S7gOS5iFxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxufSk7XHJcblxyXG4vLyDmt7vliqDlk43lupTmi6bmiKrlmahcclxuaHR0cC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgLy8gMnh4IOiMg+WbtOWGheeahOeKtuaAgeeggemDveS8muinpuWPkeivpeWHveaVsOOAglxyXG4gICAgLy8g5a+55ZON5bqU5pWw5o2u5YGa54K55LuA5LmIXHJcbiAgICByZXR1cm4gcmVzcG9uc2U7XHJcbn0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgLy8g6LaF5Ye6IDJ4eCDojIPlm7TnmoTnirbmgIHnoIHpg73kvJrop6blj5Hor6Xlh73mlbDjgIJcclxuICAgIC8vIOWvueWTjeW6lOmUmeivr+WBmueCueS7gOS5iFxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxufSk7XHJcblxyXG5leHBvcnQgeyBodHRwIH0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4uLy4uL3V0aWxzL3JlcXVlc3QnXHJcblxyXG5jb25zdCBMb2dpbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IFt1c2VyTmFtZSwgc2V0VXNlck5hbWVdID0gdXNlU3RhdGUoJycpO1xyXG4gICAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XHJcblxyXG4gICAgY29uc3QgbG9naW4gPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gMS7lj5HpgIHor7fmsYLliLDlkI7lj7DvvIzojrflj5Z0b2tlblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbicpO1xyXG4gICAgICAgIGh0dHAucG9zdCgnL3VzZXJzL2xvZ2luJywge1xyXG4gICAgICAgICAgICB1c2VyTmFtZSxcclxuICAgICAgICAgICAgcHdkOiBwYXNzd29yZFxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgLy8gMi7ot7PovazliLBmaWxlTGlzdOmhtemdolxyXG4gICAgICAgICAgICBuYXZpZ2F0ZSgnL2ZpbGVMaXN0Jyk7XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFuZ2VVc2VyTmFtZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFVzZXJOYW1lKGV2ZW50LnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFuZ2VQYXNzd29yZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFBhc3N3b3JkKGV2ZW50LnRhcmdldC52YWx1ZSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXY+55m75b2V6aG16Z2iPC9kaXY+XHJcbiAgICAgICAgICAgIDxsYWJlbD7nlKjmiLflkI3vvJo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17dXNlck5hbWV9IG9uQ2hhbmdlPXtjaGFuZ2VVc2VyTmFtZX0+PC9pbnB1dD5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxsYWJlbD7lr4bnoIHvvJo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgdmFsdWU9e3Bhc3N3b3JkfSBvbkNoYW5nZT17Y2hhbmdlUGFzc3dvcmR9PjwvaW5wdXQ+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2xvZ2lufT7nmbvlvZU8L2J1dHRvbj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IEZpbGVMaXN0ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PkZpbGVMaXN0PC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbGVMaXN0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgT3V0bGV0LCBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcblxyXG5jb25zdCBBcHAgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIHsvKiA8TGluayB0bz1cImZpbGVMaXN0XCI+ZmlsZUxpc3Q8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIHRvPVwibG9naW5cIj5sb2dpbjwvTGluaz4gKi99XHJcbiAgICAgICAgICAgIDxPdXRsZXQgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwOyIsImltcG9ydCB7XHJcbiAgICBjcmVhdGVCcm93c2VyUm91dGVyLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBMb2dpbiBmcm9tICcuLi9wYWdlcy9Mb2dpbic7XHJcbmltcG9ydCBGaWxlTGlzdCBmcm9tICcuLi9wYWdlcy9GaWxlTGlzdCc7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi4vQXBwJztcclxuXHJcbmNvbnN0IHJvdXRlciA9IGNyZWF0ZUJyb3dzZXJSb3V0ZXIoW1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvJyxcclxuICAgICAgICBlbGVtZW50OiA8QXBwIC8+LFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdGg6ICcnLFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogPExvZ2luIC8+LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiAnZmlsZUxpc3QnLFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogPEZpbGVMaXN0IC8+LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbl0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBBY3Rpb25GdW5jdGlvbixcbiAgQWN0aW9uRnVuY3Rpb25BcmdzLFxuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneUZ1bmN0aW9uLFxuICB1bnN0YWJsZV9EYXRhU3RyYXRlZ3lGdW5jdGlvbkFyZ3MsXG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneU1hdGNoLFxuICBFcnJvclJlc3BvbnNlLFxuICBGZXRjaGVyLFxuICBIeWRyYXRpb25TdGF0ZSxcbiAgSW5pdGlhbEVudHJ5LFxuICBKc29uRnVuY3Rpb24sXG4gIExhenlSb3V0ZUZ1bmN0aW9uLFxuICBMb2FkZXJGdW5jdGlvbixcbiAgTG9hZGVyRnVuY3Rpb25BcmdzLFxuICBMb2NhdGlvbixcbiAgTmF2aWdhdGlvbixcbiAgUGFyYW1QYXJzZUtleSxcbiAgUGFyYW1zLFxuICBQYXRoLFxuICBQYXRoTWF0Y2gsXG4gIFBhdGhQYXJhbSxcbiAgUGF0aFBhdHRlcm4sXG4gIFJlZGlyZWN0RnVuY3Rpb24sXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgRnV0dXJlQ29uZmlnIGFzIFJvdXRlckZ1dHVyZUNvbmZpZyxcbiAgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb25BcmdzLFxuICBUbyxcbiAgVUlNYXRjaCxcbiAgdW5zdGFibGVfSGFuZGxlclJlc3VsdCxcbiAgdW5zdGFibGVfQWdub3N0aWNQYXRjaFJvdXRlc09uTWlzc0Z1bmN0aW9uLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIEFib3J0ZWREZWZlcnJlZEVycm9yLFxuICBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsXG4gIGNyZWF0ZU1lbW9yeUhpc3RvcnksXG4gIGNyZWF0ZVBhdGgsXG4gIGNyZWF0ZVJvdXRlcixcbiAgZGVmZXIsXG4gIGdlbmVyYXRlUGF0aCxcbiAgaXNSb3V0ZUVycm9yUmVzcG9uc2UsXG4gIGpzb24sXG4gIG1hdGNoUGF0aCxcbiAgbWF0Y2hSb3V0ZXMsXG4gIHBhcnNlUGF0aCxcbiAgcmVkaXJlY3QsXG4gIHJlZGlyZWN0RG9jdW1lbnQsXG4gIHJlc29sdmVQYXRoLFxuICBVTlNBRkVfd2FybmluZyBhcyB3YXJuaW5nLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUge1xuICBBd2FpdFByb3BzLFxuICBGdXR1cmVDb25maWcsXG4gIEluZGV4Um91dGVQcm9wcyxcbiAgTGF5b3V0Um91dGVQcm9wcyxcbiAgTWVtb3J5Um91dGVyUHJvcHMsXG4gIE5hdmlnYXRlUHJvcHMsXG4gIE91dGxldFByb3BzLFxuICBQYXRoUm91dGVQcm9wcyxcbiAgUm91dGVQcm9wcyxcbiAgUm91dGVyUHJvcHMsXG4gIFJvdXRlclByb3ZpZGVyUHJvcHMsXG4gIFJvdXRlc1Byb3BzLFxufSBmcm9tIFwiLi9saWIvY29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgQXdhaXQsXG4gIE1lbW9yeVJvdXRlcixcbiAgTmF2aWdhdGUsXG4gIE91dGxldCxcbiAgUm91dGUsXG4gIFJvdXRlcixcbiAgUm91dGVyUHJvdmlkZXIsXG4gIFJvdXRlcyxcbiAgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLFxuICByZW5kZXJNYXRjaGVzLFxufSBmcm9tIFwiLi9saWIvY29tcG9uZW50c1wiO1xuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVNYXRjaCxcbiAgRGF0YVJvdXRlT2JqZWN0LFxuICBJbmRleFJvdXRlT2JqZWN0LFxuICBOYXZpZ2F0ZU9wdGlvbnMsXG4gIE5hdmlnYXRvcixcbiAgTm9uSW5kZXhSb3V0ZU9iamVjdCxcbiAgUm91dGVNYXRjaCxcbiAgUm91dGVPYmplY3QsXG59IGZyb20gXCIuL2xpYi9jb250ZXh0XCI7XG5pbXBvcnQge1xuICBEYXRhUm91dGVyQ29udGV4dCxcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dCxcbiAgTG9jYXRpb25Db250ZXh0LFxuICBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgUm91dGVDb250ZXh0LFxufSBmcm9tIFwiLi9saWIvY29udGV4dFwiO1xuaW1wb3J0IHR5cGUgeyBOYXZpZ2F0ZUZ1bmN0aW9uIH0gZnJvbSBcIi4vbGliL2hvb2tzXCI7XG5pbXBvcnQge1xuICB1c2VBY3Rpb25EYXRhLFxuICB1c2VBc3luY0Vycm9yLFxuICB1c2VBc3luY1ZhbHVlLFxuICB1c2VCbG9ja2VyLFxuICB1c2VIcmVmLFxuICB1c2VJblJvdXRlckNvbnRleHQsXG4gIHVzZUxvYWRlckRhdGEsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaCxcbiAgdXNlTWF0Y2hlcyxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZU5hdmlnYXRpb25UeXBlLFxuICB1c2VPdXRsZXQsXG4gIHVzZU91dGxldENvbnRleHQsXG4gIHVzZVBhcmFtcyxcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VSZXZhbGlkYXRvcixcbiAgdXNlUm91dGVFcnJvcixcbiAgdXNlUm91dGVJZCxcbiAgdXNlUm91dGVMb2FkZXJEYXRhLFxuICB1c2VSb3V0ZXMsXG4gIHVzZVJvdXRlc0ltcGwsXG59IGZyb20gXCIuL2xpYi9ob29rc1wiO1xuXG4vLyBFeHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGJ1dCBub3QgYmVpbmcgdXNlZCBpbnRlcm5hbGx5IGFueW1vcmVcbnR5cGUgSGFzaCA9IHN0cmluZztcbnR5cGUgUGF0aG5hbWUgPSBzdHJpbmc7XG50eXBlIFNlYXJjaCA9IHN0cmluZztcblxuLy8gRXhwb3NlIHJlYWN0LXJvdXRlciBwdWJsaWMgQVBJXG5leHBvcnQgdHlwZSB7XG4gIEFjdGlvbkZ1bmN0aW9uLFxuICBBY3Rpb25GdW5jdGlvbkFyZ3MsXG4gIEF3YWl0UHJvcHMsXG4gIERhdGFSb3V0ZU1hdGNoLFxuICBEYXRhUm91dGVPYmplY3QsXG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneUZ1bmN0aW9uLFxuICB1bnN0YWJsZV9EYXRhU3RyYXRlZ3lGdW5jdGlvbkFyZ3MsXG4gIHVuc3RhYmxlX0RhdGFTdHJhdGVneU1hdGNoLFxuICBFcnJvclJlc3BvbnNlLFxuICBGZXRjaGVyLFxuICBGdXR1cmVDb25maWcsXG4gIEhhc2gsXG4gIEluZGV4Um91dGVPYmplY3QsXG4gIEluZGV4Um91dGVQcm9wcyxcbiAgSnNvbkZ1bmN0aW9uLFxuICBMYXlvdXRSb3V0ZVByb3BzLFxuICBMYXp5Um91dGVGdW5jdGlvbixcbiAgTG9hZGVyRnVuY3Rpb24sXG4gIExvYWRlckZ1bmN0aW9uQXJncyxcbiAgTG9jYXRpb24sXG4gIE1lbW9yeVJvdXRlclByb3BzLFxuICBOYXZpZ2F0ZUZ1bmN0aW9uLFxuICBOYXZpZ2F0ZU9wdGlvbnMsXG4gIE5hdmlnYXRlUHJvcHMsXG4gIE5hdmlnYXRpb24sXG4gIE5hdmlnYXRvcixcbiAgTm9uSW5kZXhSb3V0ZU9iamVjdCxcbiAgT3V0bGV0UHJvcHMsXG4gIFBhcmFtUGFyc2VLZXksXG4gIFBhcmFtcyxcbiAgUGF0aCxcbiAgUGF0aE1hdGNoLFxuICBQYXRoUGFyYW0sXG4gIFBhdGhQYXR0ZXJuLFxuICBQYXRoUm91dGVQcm9wcyxcbiAgUGF0aG5hbWUsXG4gIFJlZGlyZWN0RnVuY3Rpb24sXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlTWF0Y2gsXG4gIFJvdXRlT2JqZWN0LFxuICBSb3V0ZVByb3BzLFxuICBSb3V0ZXJQcm9wcyxcbiAgUm91dGVyUHJvdmlkZXJQcm9wcyxcbiAgUm91dGVzUHJvcHMsXG4gIFNlYXJjaCxcbiAgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb25BcmdzLFxuICBUbyxcbiAgVUlNYXRjaCxcbiAgQmxvY2tlcixcbiAgQmxvY2tlckZ1bmN0aW9uLFxuICB1bnN0YWJsZV9IYW5kbGVyUmVzdWx0LFxufTtcbmV4cG9ydCB7XG4gIEFib3J0ZWREZWZlcnJlZEVycm9yLFxuICBBd2FpdCxcbiAgTWVtb3J5Um91dGVyLFxuICBOYXZpZ2F0ZSxcbiAgTmF2aWdhdGlvblR5cGUsXG4gIE91dGxldCxcbiAgUm91dGUsXG4gIFJvdXRlcixcbiAgUm91dGVyUHJvdmlkZXIsXG4gIFJvdXRlcyxcbiAgY3JlYXRlUGF0aCxcbiAgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLFxuICBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLFxuICBkZWZlcixcbiAgZ2VuZXJhdGVQYXRoLFxuICBpc1JvdXRlRXJyb3JSZXNwb25zZSxcbiAganNvbixcbiAgbWF0Y2hQYXRoLFxuICBtYXRjaFJvdXRlcyxcbiAgcGFyc2VQYXRoLFxuICByZWRpcmVjdCxcbiAgcmVkaXJlY3REb2N1bWVudCxcbiAgcmVuZGVyTWF0Y2hlcyxcbiAgcmVzb2x2ZVBhdGgsXG4gIHVzZUJsb2NrZXIsXG4gIHVzZUFjdGlvbkRhdGEsXG4gIHVzZUFzeW5jRXJyb3IsXG4gIHVzZUFzeW5jVmFsdWUsXG4gIHVzZUhyZWYsXG4gIHVzZUluUm91dGVyQ29udGV4dCxcbiAgdXNlTG9hZGVyRGF0YSxcbiAgdXNlTG9jYXRpb24sXG4gIHVzZU1hdGNoLFxuICB1c2VNYXRjaGVzLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlTmF2aWdhdGlvblR5cGUsXG4gIHVzZU91dGxldCxcbiAgdXNlT3V0bGV0Q29udGV4dCxcbiAgdXNlUGFyYW1zLFxuICB1c2VSZXNvbHZlZFBhdGgsXG4gIHVzZVJldmFsaWRhdG9yLFxuICB1c2VSb3V0ZUVycm9yLFxuICB1c2VSb3V0ZUxvYWRlckRhdGEsXG4gIHVzZVJvdXRlcyxcbn07XG5cbmZ1bmN0aW9uIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZTogUm91dGVPYmplY3QpIHtcbiAgbGV0IHVwZGF0ZXM6IFBhcnRpYWw8Um91dGVPYmplY3Q+ICYgeyBoYXNFcnJvckJvdW5kYXJ5OiBib29sZWFuIH0gPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgfTtcblxuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYENvbXBvbmVudGAgYW5kIGBlbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgK1xuICAgICAgICAgICAgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiBSZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgSHlkcmF0ZUZhbGxiYWNrYCBhbmQgYGh5ZHJhdGVGYWxsYmFja0VsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArXG4gICAgICAgICAgICBcImBIeWRyYXRlRmFsbGJhY2tgIHdpbGwgYmUgdXNlZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IFJlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSxcbiAgICAgIEh5ZHJhdGVGYWxsYmFjazogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJvdXRlLkVycm9yQm91bmRhcnkpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBFcnJvckJvdW5kYXJ5YCBhbmQgYGVycm9yRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICtcbiAgICAgICAgICAgIFwiYEVycm9yQm91bmRhcnlgIHdpbGwgYmUgdXNlZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5FcnJvckJvdW5kYXJ5KSxcbiAgICAgIEVycm9yQm91bmRhcnk6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB1cGRhdGVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIHVuc3RhYmxlX1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb25cbiAgZXh0ZW5kcyB1bnN0YWJsZV9BZ25vc3RpY1BhdGNoUm91dGVzT25NaXNzRnVuY3Rpb248Um91dGVNYXRjaD4ge31cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFtdLFxuICBvcHRzPzoge1xuICAgIGJhc2VuYW1lPzogc3RyaW5nO1xuICAgIGZ1dHVyZT86IFBhcnRpYWw8T21pdDxSb3V0ZXJGdXR1cmVDb25maWcsIFwidjdfcHJlcGVuZEJhc2VuYW1lXCI+PjtcbiAgICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG4gICAgaW5pdGlhbEVudHJpZXM/OiBJbml0aWFsRW50cnlbXTtcbiAgICBpbml0aWFsSW5kZXg/OiBudW1iZXI7XG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5PzogdW5zdGFibGVfRGF0YVN0cmF0ZWd5RnVuY3Rpb247XG4gICAgdW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3M/OiB1bnN0YWJsZV9QYXRjaFJvdXRlc09uTWlzc0Z1bmN0aW9uO1xuICB9XG4pOiBSZW1peFJvdXRlciB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzPy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIC4uLm9wdHM/LmZ1dHVyZSxcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZSxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHM/LmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzPy5pbml0aWFsSW5kZXgsXG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cz8uaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneTogb3B0cz8udW5zdGFibGVfZGF0YVN0cmF0ZWd5LFxuICAgIHVuc3RhYmxlX3BhdGNoUm91dGVzT25NaXNzOiBvcHRzPy51bnN0YWJsZV9wYXRjaFJvdXRlc09uTWlzcyxcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEQU5HRVIhIFBMRUFTRSBSRUFEIE1FIVxuLy8gV2UgcHJvdmlkZSB0aGVzZSBleHBvcnRzIGFzIGFuIGVzY2FwZSBoYXRjaCBpbiB0aGUgZXZlbnQgdGhhdCB5b3UgbmVlZCBhbnlcbi8vIHJvdXRpbmcgZGF0YSB0aGF0IHdlIGRvbid0IHByb3ZpZGUgYW4gZXhwbGljaXQgQVBJIGZvci4gV2l0aCB0aGF0IHNhaWQsIHdlXG4vLyB3YW50IHRvIGNvdmVyIHlvdXIgdXNlIGNhc2UgaWYgd2UgY2FuLCBzbyBpZiB5b3UgZmVlbCB0aGUgbmVlZCB0byB1c2UgdGhlc2Vcbi8vIHdlIHdhbnQgdG8gaGVhciBmcm9tIHlvdS4gTGV0IHVzIGtub3cgd2hhdCB5b3UncmUgYnVpbGRpbmcgYW5kIHdlJ2xsIGRvIG91clxuLy8gYmVzdCB0byBtYWtlIHN1cmUgd2UgY2FuIHN1cHBvcnQgeW91IVxuLy9cbi8vIFdlIGNvbnNpZGVyIHRoZXNlIGV4cG9ydHMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIGFuZCBkbyBub3QgZ3VhcmFudGVlXG4vLyBhZ2FpbnN0IGFueSBicmVha2luZyBjaGFuZ2VzLCByZWdhcmRsZXNzIG9mIHRoZSBzZW12ZXIgcmVsZWFzZS4gVXNlIHdpdGhcbi8vIGV4dHJlbWUgY2F1dGlvbiBhbmQgb25seSBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgY29uc2VxdWVuY2VzLiBHb2RzcGVlZC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHtcbiAgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LFxuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LFxuICBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCxcbiAgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LFxuICBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCxcbiAgbWFwUm91dGVQcm9wZXJ0aWVzIGFzIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsXG4gIHVzZVJvdXRlSWQgYXMgVU5TQUZFX3VzZVJvdXRlSWQsXG4gIHVzZVJvdXRlc0ltcGwgYXMgVU5TQUZFX3VzZVJvdXRlc0ltcGwsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcclxuaW1wb3J0IHsgUm91dGVyUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlcic7XHJcblxyXG4vLyBjb25zdCBBcHAgPSAoKSA9PiB7XHJcbi8vICAgICByZXR1cm4gKFxyXG4vLyAgICAgICAgIDxSb3V0ZXJQcm92aWRlciByb3V0ZXI9e3JvdXRlcn0gLz5cclxuLy8gICAgIClcclxuLy8gfVxyXG5cclxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcclxuLy8gY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKTtcclxuLy8gcm9vdC5yZW5kZXIoPEFwcD48L0FwcD4pXHJcbmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSkucmVuZGVyKFxyXG4gICAgPFJlYWN0LlN0cmljdE1vZGU+XHJcbiAgICAgICAgPFJvdXRlclByb3ZpZGVyIHJvdXRlcj17cm91dGVyfSAvPlxyXG4gICAgPC9SZWFjdC5TdHJpY3RNb2RlPixcclxuKVxyXG5cclxuXHJcbi8vIFJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTsiXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImFhIiwicmVxdWlyZSIsImNhIiwicCIsImEiLCJiIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwia2EiLCJsYSIsIm1hIiwidiIsImQiLCJlIiwiZiIsImciLCJ0aGlzIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInR5cGUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwieiIsInNwbGl0IiwiZm9yRWFjaCIsInRvTG93ZXJDYXNlIiwicmEiLCJzYSIsInRvVXBwZXJDYXNlIiwidGEiLCJzbGljZSIsInBhIiwiaXNOYU4iLCJxYSIsImNhbGwiLCJ0ZXN0Iiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJTeW1ib2wiLCJmb3IiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsIkEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJsIiwiaCIsImsiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwibmFtZSIsIlBhIiwidGFnIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiQXJyYXkiLCJpc0FycmF5IiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwicHVzaCIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5iIiwiYXBwbHkiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiZGF0YSIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImtleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsImNvbmNhdCIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidCIsIkoiLCJ4IiwidSIsInciLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJNZyIsImpvaW4iLCJOZyIsIk9nIiwiaW5kZXgiLCJQZyIsIlFnIiwicHJvcHMiLCJSZyIsImltcGxlbWVudGF0aW9uIiwiU2ciLCJUZyIsInEiLCJyIiwieSIsIm5leHQiLCJkb25lIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsIl9jdXJyZW50VmFsdWUiLCJiaCIsImNoaWxkTGFuZXMiLCJjaCIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiZGgiLCJlaCIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwiZmgiLCJnaCIsImhoIiwiaW50ZXJsZWF2ZWQiLCJpaCIsImpoIiwia2giLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJsaCIsIm1oIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIm5oIiwiSyIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ0YWdOYW1lIiwiemgiLCJBaCIsIkJoIiwiTCIsIkNoIiwicmV2ZWFsT3JkZXIiLCJEaCIsIkVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJGaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJHaCIsIkhoIiwiTSIsIk4iLCJPIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJQIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiVWgiLCJWaCIsIldoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJnZXRTbmFwc2hvdCIsImJpIiwiY2kiLCJRIiwiZGkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiUiIsIkJpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIkNpIiwiZGVmYXVsdFByb3BzIiwiRGkiLCJFaSIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJGaSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiR2kiLCJjb250ZXh0VHlwZSIsInN0YXRlIiwidXBkYXRlciIsIkhpIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiSWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIkppIiwibWVzc2FnZSIsImRpZ2VzdCIsIktpIiwiTGkiLCJjb25zb2xlIiwiZXJyb3IiLCJNaSIsIldlYWtNYXAiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiUmkiLCJjb21wb25lbnRTdGFjayIsIlNpIiwicGluZ0NhY2hlIiwiVGkiLCJVaSIsIlZpIiwiV2kiLCJSZWFjdEN1cnJlbnRPd25lciIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJjb21wYXJlIiwiYmoiLCJjaiIsImRqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiamoiLCJraiIsInBlbmRpbmdDb250ZXh0IiwibGoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIm1qIiwibmoiLCJvaiIsImZhbGxiYWNrIiwicGoiLCJxaiIsInNqIiwiZGF0YXNldCIsImRnc3QiLCJ0aiIsInVqIiwiX3JlYWN0UmV0cnkiLCJyaiIsInN1YnRyZWVGbGFncyIsInZqIiwid2oiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ4aiIsIkRqIiwiUyIsIkVqIiwiRmoiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJUIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJVIiwiS2oiLCJXZWFrU2V0IiwiViIsIkxqIiwiVyIsIk1qIiwiTmoiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJXaiIsIlgiLCJYaiIsIllqIiwiWmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImlzSGlkZGVuIiwiZmsiLCJnayIsImRpc3BsYXkiLCJoayIsImlrIiwiamsiLCJrayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiVmsiLCJsayIsImNlaWwiLCJtayIsIm5rIiwib2siLCJZIiwiWiIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJJbmZpbml0eSIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJFayIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlBrIiwidGltZW91dEhhbmRsZSIsIlFrIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJPaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJXayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIlhrIiwiWWsiLCIkayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhbCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJibCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsInlqIiwiWmsiLCJrbCIsInJlcG9ydEVycm9yIiwibGwiLCJfaW50ZXJuYWxSb290IiwibWwiLCJubCIsIm9sIiwicGwiLCJybCIsInFsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwic3BsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwic2wiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ0bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidWwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwidmwiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImV4cG9ydHMiLCJjcmVhdGVQb3J0YWwiLCJjbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwibW9kdWxlIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJtYXAiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJhY3QiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmoiLCJfX2VzTW9kdWxlIiwibnMiLCJkZWYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJBY3Rpb24iLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIndhcm5pbmciLCJjb25kIiwid2FybiIsImdldEhpc3RvcnlTdGF0ZSIsInVzciIsImlkeCIsImNyZWF0ZUxvY2F0aW9uIiwidG8iLCJfZXh0ZW5kcyIsInBhdGhuYW1lIiwiaGFzaCIsInBhcnNlUGF0aCIsInN1YnN0ciIsImNyZWF0ZVBhdGgiLCJfcmVmIiwicGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsIlJlc3VsdFR5cGUiLCJpbW11dGFibGVSb3V0ZUtleXMiLCJjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIiwicm91dGVzIiwibWFwUm91dGVQcm9wZXJ0aWVzIiwicGFyZW50UGF0aCIsIm1hbmlmZXN0Iiwicm91dGUiLCJ0cmVlUGF0aCIsImlzSW5kZXhSb3V0ZSIsImluZGV4Um91dGUiLCJwYXRoT3JMYXlvdXRSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsIm1hdGNoUm91dGVzSW1wbCIsImFsbG93UGFydGlhbCIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJldmVyeSIsImkiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaGVzIiwiZGVjb2RlZCIsImRlY29kZVBhdGgiLCJtYXRjaFJvdXRlQnJhbmNoIiwicGFyZW50c01ldGEiLCJmbGF0dGVuUm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwic3RhcnRzV2l0aCIsImpvaW5QYXRocyIsImNvbXB1dGVTY29yZSIsIl9yb3V0ZSRwYXRoIiwiZXhwbG9kZWQiLCJleHBsb2RlT3B0aW9uYWxTZWdtZW50cyIsInNlZ21lbnRzIiwiZmlyc3QiLCJyZXN0IiwiaXNPcHRpb25hbCIsImVuZHNXaXRoIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJyZXN1bHQiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJzIiwiaW5pdGlhbFNjb3JlIiwic29tZSIsImZpbHRlciIsInJlZHVjZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsInBhdHRlcm4iLCJtYXRjaGVyIiwiY29tcGlsZWRQYXJhbXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiUmVnRXhwIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsImdldFJlc29sdmVUb01hdGNoZXMiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsInBhdGhNYXRjaGVzIiwicmVzb2x2ZVRvIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImZyb20iLCJpc0VtcHR5UGF0aCIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlc29sdmVQYXRoIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsIkVycm9yUmVzcG9uc2VJbXBsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkTXV0YXRpb25NZXRob2RzIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHMiLCJyZWRpcmVjdFN0YXR1c0NvZGVzIiwicmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzIiwiSURMRV9OQVZJR0FUSU9OIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1EYXRhIiwianNvbiIsIklETEVfRkVUQ0hFUiIsIklETEVfQkxPQ0tFUiIsInByb2NlZWQiLCJyZXNldCIsIkFCU09MVVRFX1VSTF9SRUdFWCIsImRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMiLCJoYXNFcnJvckJvdW5kYXJ5IiwiQm9vbGVhbiIsIlRSQU5TSVRJT05TX1NUT1JBR0VfS0VZIiwibm9ybWFsaXplVG8iLCJwcmVwZW5kQmFzZW5hbWUiLCJmcm9tUm91dGVJZCIsInJlbGF0aXZlIiwiY29udGV4dHVhbE1hdGNoZXMiLCJhY3RpdmVSb3V0ZU1hdGNoIiwiaGFzTmFrZWRJbmRleFF1ZXJ5Iiwibm9ybWFsaXplTmF2aWdhdGVPcHRpb25zIiwibm9ybWFsaXplRm9ybU1ldGhvZCIsImlzRmV0Y2hlciIsIm9wdHMiLCJpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uIiwibWV0aG9kIiwiZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvciIsInNlYXJjaFBhcmFtcyIsImdldEludmFsaWRCb2R5RXJyb3IiLCJyYXdGb3JtTWV0aG9kIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJpc011dGF0aW9uTWV0aG9kIiwiRm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJlbnRyaWVzIiwiYWNjIiwiX3JlZjUiLCJzdWJtaXNzaW9uIiwicGFyc2UiLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhIiwiYXBwZW5kIiwiZ2V0TWF0Y2hlc1RvTG9hZCIsImhpc3RvcnkiLCJpc0luaXRpYWxMb2FkIiwic2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uIiwiaXNSZXZhbGlkYXRpb25SZXF1aXJlZCIsImNhbmNlbGxlZERlZmVycmVkUm91dGVzIiwiY2FuY2VsbGVkRmV0Y2hlckxvYWRzIiwiZGVsZXRlZEZldGNoZXJzIiwiZmV0Y2hMb2FkTWF0Y2hlcyIsImZldGNoUmVkaXJlY3RJZHMiLCJyb3V0ZXNUb1VzZSIsInBlbmRpbmdBY3Rpb25SZXN1bHQiLCJhY3Rpb25SZXN1bHQiLCJpc0Vycm9yUmVzdWx0IiwiY3VycmVudFVybCIsImNyZWF0ZVVSTCIsIm5leHRVcmwiLCJib3VuZGFyeUlkIiwiYm91bmRhcnlNYXRjaGVzIiwiZmluZEluZGV4IiwiZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkiLCJhY3Rpb25TdGF0dXMiLCJzdGF0dXNDb2RlIiwic2hvdWxkU2tpcFJldmFsaWRhdGlvbiIsIm5hdmlnYXRpb25NYXRjaGVzIiwibG9hZGVyIiwibG9hZGVyRGF0YSIsImVycm9ycyIsImN1cnJlbnRMb2FkZXJEYXRhIiwiY3VycmVudE1hdGNoIiwiaXNOZXciLCJpc01pc3NpbmdEYXRhIiwiaXNOZXdMb2FkZXIiLCJjdXJyZW50Um91dGVNYXRjaCIsIm5leHRSb3V0ZU1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZUxvYWRlciIsImN1cnJlbnRQYXJhbXMiLCJuZXh0UGFyYW1zIiwidW5zdGFibGVfYWN0aW9uU3RhdHVzIiwiZGVmYXVsdFNob3VsZFJldmFsaWRhdGUiLCJpc05ld1JvdXRlSW5zdGFuY2UiLCJyZXZhbGlkYXRpbmdGZXRjaGVycyIsInJvdXRlSWQiLCJmZXRjaGVyTWF0Y2hlcyIsImNvbnRyb2xsZXIiLCJmZXRjaGVyIiwiZmV0Y2hlcnMiLCJmZXRjaGVyTWF0Y2giLCJnZXRUYXJnZXRNYXRjaCIsInNob3VsZFJldmFsaWRhdGUiLCJBYm9ydENvbnRyb2xsZXIiLCJjdXJyZW50UGF0aCIsImxvYWRlck1hdGNoIiwiYXJnIiwicm91dGVDaG9pY2UiLCJhc3luYyIsImxvYWRMYXp5Um91dGVDaGlsZHJlbiIsInBhdGNoUm91dGVzT25NaXNzSW1wbCIsInBlbmRpbmdSb3V0ZUNoaWxkcmVuIiwic2lnbmFsIiwicGF0Y2giLCJhYm9ydGVkIiwicGF0Y2hSb3V0ZXNJbXBsIiwidmFsIiwiX3JvdXRlJGNoaWxkcmVuIiwiZGF0YUNoaWxkcmVuIiwibG9hZExhenlSb3V0ZU1vZHVsZSIsImxhenlSb3V0ZSIsInJvdXRlVG9VcGRhdGUiLCJyb3V0ZVVwZGF0ZXMiLCJsYXp5Um91dGVQcm9wZXJ0eSIsImlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCIsImRlZmF1bHREYXRhU3RyYXRlZ3kiLCJhbGwiLCJub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsInRyaW1tZWRNYXRjaGVzIiwiVVJMIiwibm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbiIsIm5vcm1hbGl6ZWRMb2NhdGlvbiIsInByb3RvY29sIiwiaXNTYW1lQmFzZW5hbWUiLCJvcmlnaW4iLCJjcmVhdGVDbGllbnRTaWRlUmVxdWVzdCIsImluaXQiLCJIZWFkZXJzIiwiUmVxdWVzdCIsInByb2Nlc3NMb2FkZXJEYXRhIiwibWF0Y2hlc1RvTG9hZCIsInJlc3VsdHMiLCJmZXRjaGVyUmVzdWx0cyIsImFjdGl2ZURlZmVycmVkcyIsInNraXBMb2FkZXJFcnJvckJ1YmJsaW5nIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJwZW5kaW5nRXJyb3IiLCJpc1JlZGlyZWN0UmVzdWx0IiwiYm91bmRhcnlNYXRjaCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJpc0RlZmVycmVkUmVzdWx0IiwiZGVmZXJyZWREYXRhIiwicHJvY2Vzc1JvdXRlTG9hZGVyRGF0YSIsImRvbmVGZXRjaGVyIiwiZ2V0RG9uZUZldGNoZXIiLCJtZXJnZUxvYWRlckRhdGEiLCJuZXdMb2FkZXJEYXRhIiwibWVyZ2VkTG9hZGVyRGF0YSIsImdldEFjdGlvbkRhdGFGb3JDb21taXQiLCJhY3Rpb25EYXRhIiwicmV2ZXJzZSIsImZpbmQiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwiX3RlbXA1IiwiZXJyb3JNZXNzYWdlIiwiZmluZFJlZGlyZWN0IiwiZGVmZXJyZWQiLCJyZWRpcmVjdCIsImlzUmVzcG9uc2UiLCJyZXNvbHZlRGVmZXJyZWRSZXN1bHRzIiwiY3VycmVudE1hdGNoZXMiLCJzaWduYWxzIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJyZXNvbHZlRGVmZXJyZWREYXRhIiwidW53cmFwIiwicmVzb2x2ZURhdGEiLCJ1bndyYXBwZWREYXRhIiwiZ2V0QWxsIiwiZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uIiwibmF2aWdhdGlvbiIsImdldExvYWRpbmdOYXZpZ2F0aW9uIiwiZ2V0TG9hZGluZ0ZldGNoZXIiLCJEYXRhUm91dGVyQ29udGV4dCIsIlJlYWN0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiaXNEYXRhUm91dGUiLCJSb3V0ZUVycm9yQ29udGV4dCIsInVzZUluUm91dGVyQ29udGV4dCIsInVzZUxvY2F0aW9uIiwiVU5TQUZFX2ludmFyaWFudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJzdGF0aWMiLCJ1c2VOYXZpZ2F0ZSIsInJvdXRlciIsImhvb2tOYW1lIiwiY3R4IiwidXNlRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVySG9vayIsIlVzZU5hdmlnYXRlU3RhYmxlIiwidXNlQ3VycmVudFJvdXRlSWQiLCJEYXRhUm91dGVyU3RhdGVIb29rIiwiYWN0aXZlUmVmIiwibmF2aWdhdGUiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0IiwiZnV0dXJlIiwicm91dGVQYXRobmFtZXNKc29uIiwiVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMiLCJnbyIsInVzZU5hdmlnYXRlVW5zdGFibGUiLCJPdXRsZXRDb250ZXh0IiwidXNlUm91dGVzSW1wbCIsImRhdGFSb3V0ZXJTdGF0ZSIsInBhcmVudE1hdGNoZXMiLCJyb3V0ZU1hdGNoIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicGFyZW50U2VnbWVudHMiLCJyZW5kZXJlZE1hdGNoZXMiLCJfZGF0YVJvdXRlclN0YXRlMiIsIl9kYXRhUm91dGVyU3RhdGUiLCJlcnJvckluZGV4IiwicmVuZGVyRmFsbGJhY2siLCJmYWxsYmFja0luZGV4IiwidjdfcGFydGlhbEh5ZHJhdGlvbiIsIkh5ZHJhdGVGYWxsYmFjayIsImh5ZHJhdGVGYWxsYmFja0VsZW1lbnQiLCJuZWVkc1RvUnVuTG9hZGVyIiwicmVkdWNlUmlnaHQiLCJzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2siLCJlcnJvckVsZW1lbnQiLCJkZWZhdWx0RXJyb3JFbGVtZW50IiwiYWxyZWFkeVdhcm5lZCIsImdldENoaWxkcmVuIiwiUmVuZGVyZWRSb3V0ZSIsInJvdXRlQ29udGV4dCIsIkVycm9yQm91bmRhcnkiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwicmV2YWxpZGF0aW9uIiwiY29tcG9uZW50IiwiX3JlbmRlck1hdGNoZXMiLCJlbmNvZGVMb2NhdGlvbiIsIm5hdmlnYXRpb25UeXBlIiwiUG9wIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwiX3N0YXRlJGVycm9ycyIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsIlVzZVJvdXRlRXJyb3IiLCJ1c2VSb3V0ZUVycm9yIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsInN1cGVyIiwiZXJyb3JJbmZvIiwic3RhdGljQ29udGV4dCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwiT3V0bGV0IiwidXNlT3V0bGV0IiwiUm91dGVyIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIl9fcmVhY3RSb3V0ZXJWZXJzaW9uIiwiZGVzZXJpYWxpemVFcnJvcnMiLCJzZXJpYWxpemVkIiwiX190eXBlIiwiVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsIiwiX19zdWJUeXBlIiwiRXJyb3JDb25zdHJ1Y3RvciIsIlZpZXdUcmFuc2l0aW9uQ29udGV4dCIsImlzVHJhbnNpdGlvbmluZyIsIkZldGNoZXJzQ29udGV4dCIsInN0YXJ0VHJhbnNpdGlvbkltcGwiLCJmbHVzaFN5bmNJbXBsIiwiUmVhY3RET00iLCJmbHVzaFN5bmNTYWZlIiwiRGVmZXJyZWQiLCJwcm9taXNlIiwicmVqZWN0IiwicmVhc29uIiwiUm91dGVyUHJvdmlkZXIiLCJmYWxsYmFja0VsZW1lbnQiLCJzZXRTdGF0ZUltcGwiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJzZXRUcmFuc2l0aW9uIiwiaW50ZXJydXB0aW9uIiwic2V0SW50ZXJydXB0aW9uIiwiZmV0Y2hlckRhdGEiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJvcHRJblN0YXJ0VHJhbnNpdGlvbiIsInN0YXJ0VHJhbnNpdGlvblNhZmUiLCJuZXdTdGF0ZSIsIl9yZWYyIiwidW5zdGFibGVfZmx1c2hTeW5jIiwidW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzIiwidmlld1RyYW5zaXRpb25PcHRzIiwiaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlIiwic3RhcnRWaWV3VHJhbnNpdGlvbiIsInNraXBUcmFuc2l0aW9uIiwiY3VycmVudExvY2F0aW9uIiwibmV4dExvY2F0aW9uIiwiZmluaXNoZWQiLCJmaW5hbGx5Iiwic3Vic2NyaWJlIiwicmVuZGVyUHJvbWlzZSIsImNyZWF0ZUhyZWYiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQiLCJVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsImhpc3RvcnlBY3Rpb24iLCJpbml0aWFsaXplZCIsIkRhdGFSb3V0ZXMiLCJfcmVmMyIsIlVOU0FGRV91c2VSb3V0ZXNJbXBsIiwiZm4iLCJ0aGlzQXJnIiwia2luZE9mIiwidGhpbmciLCJzdHIiLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNSZWFkYWJsZVN0cmVhbSIsImlzUmVxdWVzdCIsImlzSGVhZGVycyIsImFsbE93bktleXMiLCJsZW4iLCJmaW5kS2V5IiwiX2tleSIsIl9nbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsImdsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJpc1R5cGVkQXJyYXkiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsImlzSFRNTEZvcm0iLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJyZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQUxQSEEiLCJESUdJVCIsIkFMUEhBQkVUIiwiQUxQSEFfRElHSVQiLCJpc0FzeW5jRm4iLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJraW5kIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzQm9vbGVhbiIsImlzU3RyZWFtIiwicGlwZSIsIm1lcmdlIiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwibGFzdEluZGV4IiwiYXJyIiwiZm9yRWFjaEVudHJ5IiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwiZXhlYyIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwid3JpdGFibGUiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJ0b0NhbWVsQ2FzZSIsInAxIiwicDIiLCJub29wIiwidG9GaW5pdGVOdW1iZXIiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImdlbmVyYXRlU3RyaW5nIiwiYWxwaGFiZXQiLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0IiwidmlzaXQiLCJyZWR1Y2VkVmFsdWUiLCJpc1RoZW5hYmxlIiwiQXhpb3NFcnJvciIsImNvbmZpZyIsImNhcHR1cmVTdGFja1RyYWNlIiwidXRpbHMiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsImRvdHMiLCJ0b2tlbiIsInByZWRpY2F0ZXMiLCJUeXBlRXJyb3IiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwidG9JU09TdHJpbmciLCJCdWZmZXIiLCJpc0ZsYXRBcnJheSIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUiLCJjaGFyTWFwIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJfcGFpcnMiLCJ0b0Zvcm1EYXRhIiwiZW5jb2RlciIsIl9lbmNvZGUiLCJidWlsZFVSTCIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJjbGVhciIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNCcm93c2VyIiwiY2xhc3NlcyIsInByb3RvY29scyIsImhhc0Jyb3dzZXJFbnYiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwicGxhdGZvcm0iLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJpc0xhc3QiLCJhcnJheVRvT2JqZWN0IiwicGFyc2VQcm9wUGF0aCIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImNvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGUiLCJoYXNKU09OQ29udGVudFR5cGUiLCJpc09iamVjdFBheWxvYWQiLCJmb3JtRGF0YVRvSlNPTiIsInNldENvbnRlbnRUeXBlIiwiaGVscGVycyIsImlzTm9kZSIsInRvVVJMRW5jb2RlZEZvcm0iLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2VyIiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJFUlJfQkFEX1JFU1BPTlNFIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29yIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYnVpbGRBY2Nlc3NvcnMiLCJtYXBwZWQiLCJoZWFkZXJWYWx1ZSIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiRVJSX0NBTkNFTEVEIiwic2V0dGxlIiwiRVJSX0JBRF9SRVFVRVNUIiwiaXNEb3dubG9hZFN0cmVhbSIsImZyZXEiLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImhlYWQiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJyb3VuZCIsInNwZWVkb21ldGVyIiwidGltZXN0YW1wIiwidGhyZXNob2xkIiwidGltZXIiLCJmb3JjZSIsInRocm90dGxlIiwibG9hZGVkIiwidG90YWwiLCJsZW5ndGhDb21wdXRhYmxlIiwicHJvZ3Jlc3NCeXRlcyIsInJhdGUiLCJwcm9ncmVzcyIsImVzdGltYXRlZCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsInJlbW92ZSIsImJ1aWxkRnVsbFBhdGgiLCJiYXNlVVJMIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJjb21iaW5lVVJMcyIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXRNZXNzYWdlIiwid2l0aENyZWRlbnRpYWxzIiwid2l0aFhTUkZUb2tlbiIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50IiwiY2FuY2VsVG9rZW4iLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwibmV3Q29uZmlnIiwiYXV0aCIsImJ0b2EiLCJ1c2VybmFtZSIsInVuZXNjYXBlIiwiaXNVUkxTYW1lT3JpZ2luIiwieHNyZlZhbHVlIiwiY29va2llcyIsIlhNTEh0dHBSZXF1ZXN0IiwiX2NvbmZpZyIsInJlc29sdmVDb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwib25DYW5jZWxlZCIsInVuc3Vic2NyaWJlIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsIm9uYWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiRVRJTUVET1VUIiwic2V0UmVxdWVzdEhlYWRlciIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsImNvbXBvc2VTaWduYWxzIiwic3RyZWFtQ2h1bmsiLCJjaHVuayIsImNodW5rU2l6ZSIsImJ5dGVMZW5ndGgiLCJwb3MiLCJ0cmFja1N0cmVhbSIsInN0cmVhbSIsIm9uUHJvZ3Jlc3MiLCJvbkZpbmlzaCIsIml0ZXJhYmxlIiwicmVhZEJ5dGVzIiwiUmVhZGFibGVTdHJlYW0iLCJwdWxsIiwiY2xvc2UiLCJlbnF1ZXVlIiwiaGlnaFdhdGVyTWFyayIsImZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IiLCJpc0ZldGNoU3VwcG9ydGVkIiwiZmV0Y2giLCJSZXNwb25zZSIsImlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQiLCJlbmNvZGVUZXh0IiwiVGV4dEVuY29kZXIiLCJhcnJheUJ1ZmZlciIsInN1cHBvcnRzUmVxdWVzdFN0cmVhbSIsImR1cGxleEFjY2Vzc2VkIiwiaGFzQ29udGVudFR5cGUiLCJkdXBsZXgiLCJzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtIiwicmVzb2x2ZXJzIiwicmVzIiwiRVJSX05PVF9TVVBQT1JUIiwiZmV0Y2hPcHRpb25zIiwiY29tcG9zZWRTaWduYWwiLCJzdG9wVGltZW91dCIsInJlcXVlc3RDb250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsImdldEJvZHlMZW5ndGgiLCJyZXNvbHZlQm9keUxlbmd0aCIsImNvbnRlbnRUeXBlSGVhZGVyIiwiX3JlcXVlc3QiLCJpc1N0cmVhbVJlc3BvbnNlIiwicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwicmVzcG9uc2VEYXRhIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJ4aHJBZGFwdGVyIiwiZmV0Y2hBZGFwdGVyIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsInJlYXNvbnMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvcnMiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2YWxpZGF0b3IiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIkVSUl9ERVBSRUNBVEVEIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImNvbnRleHRIZWFkZXJzIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImNoYWluIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJDcmVhdGVkIiwiQWNjZXB0ZWQiLCJOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb24iLCJOb0NvbnRlbnQiLCJSZXNldENvbnRlbnQiLCJQYXJ0aWFsQ29udGVudCIsIk11bHRpU3RhdHVzIiwiQWxyZWFkeVJlcG9ydGVkIiwiSW1Vc2VkIiwiTXVsdGlwbGVDaG9pY2VzIiwiTW92ZWRQZXJtYW5lbnRseSIsIkZvdW5kIiwiU2VlT3RoZXIiLCJOb3RNb2RpZmllZCIsIlVzZVByb3h5IiwiVW51c2VkIiwiVGVtcG9yYXJ5UmVkaXJlY3QiLCJQZXJtYW5lbnRSZWRpcmVjdCIsIkJhZFJlcXVlc3QiLCJVbmF1dGhvcml6ZWQiLCJQYXltZW50UmVxdWlyZWQiLCJGb3JiaWRkZW4iLCJOb3RGb3VuZCIsIk1ldGhvZE5vdEFsbG93ZWQiLCJOb3RBY2NlcHRhYmxlIiwiUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiUmVxdWVzdFRpbWVvdXQiLCJDb25mbGljdCIsIkdvbmUiLCJMZW5ndGhSZXF1aXJlZCIsIlByZWNvbmRpdGlvbkZhaWxlZCIsIlBheWxvYWRUb29MYXJnZSIsIlVyaVRvb0xvbmciLCJVbnN1cHBvcnRlZE1lZGlhVHlwZSIsIlJhbmdlTm90U2F0aXNmaWFibGUiLCJFeHBlY3RhdGlvbkZhaWxlZCIsIkltQVRlYXBvdCIsIk1pc2RpcmVjdGVkUmVxdWVzdCIsIlVucHJvY2Vzc2FibGVFbnRpdHkiLCJMb2NrZWQiLCJGYWlsZWREZXBlbmRlbmN5IiwiVG9vRWFybHkiLCJVcGdyYWRlUmVxdWlyZWQiLCJQcmVjb25kaXRpb25SZXF1aXJlZCIsIlRvb01hbnlSZXF1ZXN0cyIsIlJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZSIsIlVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zIiwiSW50ZXJuYWxTZXJ2ZXJFcnJvciIsIk5vdEltcGxlbWVudGVkIiwiQmFkR2F0ZXdheSIsIlNlcnZpY2VVbmF2YWlsYWJsZSIsIkdhdGV3YXlUaW1lb3V0IiwiSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQiLCJWYXJpYW50QWxzb05lZ290aWF0ZXMiLCJJbnN1ZmZpY2llbnRTdG9yYWdlIiwiTG9vcERldGVjdGVkIiwiTm90RXh0ZW5kZWQiLCJOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZCIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiVkVSU0lPTiIsIkNhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZm9ybVRvSlNPTiIsImdldEFkYXB0ZXIiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJ1c2VyTmFtZSIsInNldFVzZXJOYW1lIiwiX3VzZVN0YXRlNCIsInNldFBhc3N3b3JkIiwib25DaGFuZ2UiLCJwb3N0IiwicHdkIiwiQXBwIiwiTG9naW4iLCJGaWxlTGlzdCIsInJvdXRlcldpbmRvdyIsImlzU2VydmVyIiwiZGV0ZWN0RXJyb3JCb3VuZGFyeSIsImluRmxpZ2h0RGF0YVJvdXRlcyIsImRhdGFSb3V0ZXMiLCJkYXRhU3RyYXRlZ3lJbXBsIiwidW5zdGFibGVfZGF0YVN0cmF0ZWd5IiwidW5zdGFibGVfcGF0Y2hSb3V0ZXNPbk1pc3MiLCJ2N19mZXRjaGVyUGVyc2lzdCIsInY3X25vcm1hbGl6ZUZvcm1NZXRob2QiLCJ2N19wcmVwZW5kQmFzZW5hbWUiLCJ1bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24iLCJ1bmxpc3Rlbkhpc3RvcnkiLCJzdWJzY3JpYmVycyIsInNhdmVkU2Nyb2xsUG9zaXRpb25zIiwiZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkiLCJnZXRTY3JvbGxQb3NpdGlvbiIsImluaXRpYWxTY3JvbGxSZXN0b3JlZCIsImh5ZHJhdGlvbkRhdGEiLCJpbml0aWFsTWF0Y2hlcyIsImluaXRpYWxFcnJvcnMiLCJjaGVja0ZvZ09mV2FyIiwiYWN0aXZlIiwiaXNSb3V0ZUluaXRpYWxpemVkIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwicmVzdG9yZVNjcm9sbFBvc2l0aW9uIiwiYmxvY2tlcnMiLCJwZW5kaW5nQWN0aW9uIiwicGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCIsInBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQiLCJhcHBsaWVkVmlld1RyYW5zaXRpb25zIiwicmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyIiwiaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwiZmV0Y2hDb250cm9sbGVycyIsImluY3JlbWVudGluZ0xvYWRJZCIsInBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkIiwiZmV0Y2hSZWxvYWRJZHMiLCJhY3RpdmVGZXRjaGVycyIsImJsb2NrZXJGdW5jdGlvbnMiLCJwZW5kaW5nUGF0Y2hSb3V0ZXMiLCJpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSIsInVwZGF0ZVN0YXRlIiwiY29tcGxldGVkRmV0Y2hlcnMiLCJkZWxldGVkRmV0Y2hlcnNLZXlzIiwic3Vic2NyaWJlciIsImRlbGV0ZUZldGNoZXIiLCJjb21wbGV0ZU5hdmlnYXRpb24iLCJfdGVtcCIsIl9sb2NhdGlvbiRzdGF0ZSIsIl9sb2NhdGlvbiRzdGF0ZTIiLCJpc0FjdGlvblJlbG9hZCIsIl9pc1JlZGlyZWN0IiwiUHVzaCIsIlJlcGxhY2UiLCJwcmlvclBhdGhzIiwidG9QYXRocyIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJzdGFydE5hdmlnYXRpb24iLCJzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJnZXRTY3JvbGxLZXkiLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJlbmFibGVWaWV3VHJhbnNpdGlvbiIsImxvYWRpbmdOYXZpZ2F0aW9uIiwib3ZlcnJpZGVOYXZpZ2F0aW9uIiwiZm9nT2ZXYXIiLCJub3RGb3VuZE1hdGNoZXMiLCJoYW5kbGVOYXZpZ2F0aW9uYWw0MDQiLCJpc0ZvZ09mV2FyIiwiaW50ZXJydXB0QWN0aXZlTG9hZHMiLCJnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbiIsImRpc2NvdmVyUmVzdWx0IiwiZGlzY292ZXJSb3V0ZXMiLCJzaG9ydENpcmN1aXRlZCIsImhhbmRsZURpc2NvdmVyUm91dGVFcnJvciIsImFjdGlvbk1hdGNoIiwiY2FsbERhdGFTdHJhdGVneSIsInN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uIiwiaGFuZGxlQWN0aW9uIiwidXBkYXRlZE1hdGNoZXMiLCJmZXRjaGVyU3VibWlzc2lvbiIsImluaXRpYWxIeWRyYXRpb24iLCJhY3RpdmVTdWJtaXNzaW9uIiwic2hvdWxkVXBkYXRlTmF2aWdhdGlvblN0YXRlIiwiZ2V0VXBkYXRlZEFjdGlvbkRhdGEiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJ1cGRhdGVkRmV0Y2hlcnMiLCJtYXJrRmV0Y2hSZWRpcmVjdHNEb25lIiwidXBkYXRlcyIsInJldmFsaWRhdGluZ0ZldGNoZXIiLCJnZXRVcGRhdGVkUmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJhYm9ydEZldGNoZXIiLCJhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMiLCJsb2FkZXJSZXN1bHRzIiwiY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhIiwiZmV0Y2hlcktleSIsImRpZEFib3J0RmV0Y2hMb2FkcyIsImFib3J0U3RhbGVGZXRjaExvYWRzIiwic2hvdWxkVXBkYXRlRmV0Y2hlcnMiLCJoYW5kbGVMb2FkZXJzIiwiX3RlbXAyIiwicmVkaXJlY3RMb2NhdGlvbiIsImlzRG9jdW1lbnRSZWxvYWQiLCJyZWRpcmVjdEhpc3RvcnlBY3Rpb24iLCJyZXF1ZXN0Q29udGV4dCIsInJvdXRlSWRzVG9Mb2FkIiwibG9hZGVkTWF0Y2hlcyIsInNob3VsZExvYWQiLCJoYW5kbGVyT3ZlcnJpZGUiLCJvblJlamVjdCIsInJ1bkhhbmRsZXIiLCJoYW5kbGVyIiwiYWJvcnRQcm9taXNlIiwiaGFuZGxlclByb21pc2UiLCJhY3R1YWxIYW5kbGVyIiwicmFjZSIsImhhbmRsZXJFcnJvciIsImNhbGxMb2FkZXJPckFjdGlvbiIsImNhbGxEYXRhU3RyYXRlZ3lJbXBsIiwiaXNSZWRpcmVjdEhhbmRsZXJSZXN1bHQiLCJoYW5kbGVyUmVzdWx0IiwiaXNEZWZlcnJlZERhdGEiLCJfcmVzdWx0JGluaXQiLCJfcmVzdWx0JGluaXQyIiwiY29udmVydEhhbmRsZXJSZXN1bHRUb0RhdGFSZXN1bHQiLCJmZXRjaGVyc1RvTG9hZCIsInVwZGF0ZUZldGNoZXJTdGF0ZSIsInNldEZldGNoZXJFcnJvciIsImdldEZldGNoZXIiLCJtYXJrRmV0Y2hlcnNEb25lIiwiZG9uZUtleXMiLCJsYW5kZWRJZCIsInllZXRlZEtleXMiLCJkZWxldGVCbG9ja2VyIiwidXBkYXRlQmxvY2tlciIsIm5ld0Jsb2NrZXIiLCJibG9ja2VyIiwic2hvdWxkQmxvY2tOYXZpZ2F0aW9uIiwiX3JlZjQiLCJibG9ja2VyS2V5IiwiYmxvY2tlckZ1bmN0aW9uIiwicGFydGlhbE1hdGNoZXMiLCJwcmVkaWNhdGUiLCJjYW5jZWxsZWRSb3V0ZUlkcyIsImRmZCIsImhhbmRsZSIsImNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoIiwibGVhZlJvdXRlIiwiaXNOb25ITVIiLCJuZXdNYXRjaGVzIiwibWF0Y2hlZFNwbGF0IiwibmV3UGFydGlhbE1hdGNoZXMiLCJpbml0aWFsaXplIiwibGlzdGVuIiwiZGVsdGEiLCJfd2luZG93Iiwic2Vzc2lvblBvc2l0aW9ucyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMiLCJfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyIsInNldEl0ZW0iLCJwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zIiwiZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbiIsImdldEtleSIsIm5vcm1hbGl6ZWRQYXRoIiwidXNlclJlcGxhY2UiLCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiIsInJlcXVlc3RNYXRjaGVzIiwiZGV0ZWN0QW5kSGFuZGxlNDA1RXJyb3IiLCJleGlzdGluZ0ZldGNoZXIiLCJnZXRTdWJtaXR0aW5nRmV0Y2hlciIsImFib3J0Q29udHJvbGxlciIsImZldGNoUmVxdWVzdCIsIm9yaWdpbmF0aW5nTG9hZElkIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsInJldmFsaWRhdGUiLCJkaXNwb3NlIiwiZ2V0QmxvY2tlciIsInBhdGNoUm91dGVzIiwiX2ludGVybmFsRmV0Y2hDb250cm9sbGVycyIsIl9pbnRlcm5hbEFjdGl2ZURlZmVycmVkcyIsIl9pbnRlcm5hbFNldFJvdXRlcyIsIm5ld1JvdXRlcyIsImNyZWF0ZVJvdXRlciIsImdldExvY2F0aW9uIiwidmFsaWRhdGVMb2NhdGlvbiIsInY1Q29tcGF0IiwiZ2xvYmFsSGlzdG9yeSIsImdldEluZGV4IiwiaGFuZGxlUG9wIiwibmV4dEluZGV4IiwicmVwbGFjZVN0YXRlIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiRE9NRXhjZXB0aW9uIiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhIiwicGFyc2VIeWRyYXRpb25EYXRhIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9